<?xml version="1.0" encoding="UTF-8"?>
<posts>
  <row Id="1" PostTypeId="1" AcceptedAnswerId="5" CreationDate="2011-01-19T21:02:47.183" Score="31" ViewCount="6922" Body="&lt;p&gt;I am playing with different ways to do database interaction in PHP, and one of the ideas I have been playing with is connecting to the DB in the constructor and disconnecting in the destructor. This is the code from my &lt;code&gt;Database&lt;/code&gt; class.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function __construct()&#xA;{&#xA;  $this-&amp;gt;link = mysql_connect($this-&amp;gt;server.':'.$this-&amp;gt;port, $this-&amp;gt;username);&#xA;  if(!$this-&amp;gt;link)&#xA;    die('Could not connect: '.mysql_error());&#xA;&#xA;  if(!mysql_select_db($this-&amp;gt;database, $this-&amp;gt;link))&#xA;    die('Could not select database: '.mysql_error());&#xA;}    &#xA;&#xA;function __destruct()&#xA;{&#xA;  if(mysql_close($this-&amp;gt;link))&#xA;    $this-&amp;gt;link = null; &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This works well, my only reservation is that if I need to connect several to hit the database several times it will do multiple connections and disconnects. If I do that a lot I can see, maybe, potential problems. Is this a concern or is there a better way to do this? And is my code even up to snuff in general?&lt;/p&gt;&#xA;" OwnerUserId="20" LastEditorUserId="52915" LastEditDate="2015-06-04T13:13:29.937" LastActivityDate="2015-06-04T13:13:29.937" Title="Database connection in constructor and destructor" Tags="&lt;php&gt;&lt;mysql&gt;&lt;constructor&gt;" AnswerCount="5" CommentCount="0" FavoriteCount="2" />
  <row Id="2" PostTypeId="1" CreationDate="2011-01-19T21:04:27.573" Score="39" ViewCount="8660" Body="&lt;p&gt;I'd like suggestions for optimizing this brute force solution to &lt;a href=&quot;http://projecteuler.net/index.php?section=problems&amp;amp;id=1&quot;&gt;problem 1&lt;/a&gt;.  The algorithm currently checks every integer between 3 and 1000.  I'd like to cut as many unnecessary calls to &lt;code&gt;isMultiple&lt;/code&gt; as possible:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;'''&#xA;If we list all the natural numbers below 10 that are multiples of 3 or 5, &#xA;we get 3, 5, 6 and 9. The sum of these multiples is 23.&#xA;&#xA;Find the sum of all the multiples of 3 or 5 below 1000.&#xA;'''&#xA;&#xA;end = 1000&#xA;&#xA;def Solution01():&#xA;    '''&#xA;        Solved by brute force&#xA;        #OPTIMIZE&#xA;    '''&#xA;    sum = 0&#xA;    for i in range(3, end):&#xA;        if isMultiple(i):&#xA;            sum += i &#xA;    print(sum)&#xA;&#xA;def isMultiple(i):&#xA;    return (i % 3 == 0) or (i % 5 == 0)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="27" LastEditorUserId="22222" LastEditDate="2014-12-27T17:14:07.947" LastActivityDate="2016-09-03T21:02:55.893" Title="Project Euler problem 1 in Python - Multiples of 3 and 5" Tags="&lt;python&gt;&lt;optimization&gt;&lt;algorithm&gt;&lt;programming-challenge&gt;" AnswerCount="9" CommentCount="7" FavoriteCount="4" />
  <row Id="3" PostTypeId="2" ParentId="1" CreationDate="2011-01-19T21:04:27.663" Score="16" Body="&lt;p&gt;You could use MySQLi (PHP extension) which is class based by default instead of MySQL. It &#xA;is very easy to set up multiple connections. You are, however, required to know the connection you are querying always.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Congrats with the first question.&lt;/p&gt;&#xA;" OwnerUserId="36" LastActivityDate="2011-01-19T21:04:27.663" CommentCount="0" />
  <row Id="4" PostTypeId="1" CreationDate="2011-01-19T21:07:43.573" Score="17" ViewCount="1259" Body="&lt;p&gt;Basically, I had written this class a little while ago to ease autoloading of our local libraries. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;The premise is that everything is split by packages into multiple layers of sub-packages.  Classes are named using CamelCasing.  So, a class' name is related to its package as follows: &lt;code&gt;PackageSubpackageSubpackageName&lt;/code&gt;.  Now, each package can have package specific interfaces defined by &lt;code&gt;isPackageName&lt;/code&gt; for interfaces, exceptions by &lt;code&gt;PackageNameException&lt;/code&gt;, etc.  I tried to make it flexible enough for reuse.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/**&#xA; * A class for lazy-loading other classes&#xA; *&#xA; * This class enables lazy-loading of php classes.  The benefit of this is&#xA; * three-fold.  First, there is a memory benefit, since not all classes are&#xA; * loaded until they are needed.  Second, there is a time benefit, since not all&#xA; * classes are loaded.  Third, it produces cleaner code, since there is no need&#xA;     * to litter files with require_once() calls.&#xA; *&#xA; * @category Libraries&#xA; * @package  Libraries&#xA; * @author   Me&#xA; */&#xA;abstract class Loader&#xA;{&#xA;&#xA;    /**&#xA;     * @var array An array of class to path mappings&#xA;     */&#xA;    protected static $classes = array();&#xA;&#xA;    /**&#xA;     * @var boolean Has the loader been initialized already&#xA;     */&#xA;    protected static $initialized = false;&#xA;&#xA;    /**&#xA;     * @var array An array of auto-search paths&#xA;     */&#xA;    protected static $namedPaths = array(&#xA;        'exception',&#xA;        'interface',&#xA;        'iterator',&#xA;    );&#xA;&#xA;    /**&#xA;     * @var array An array of include paths to search&#xA;     */&#xA;    protected static $paths = array(&#xA;        PATH_LIBS,&#xA;    );&#xA;&#xA;    /**&#xA;     * Tell the auto-loader where to find an un-loaded class&#xA;     *&#xA;     * This can be used to &quot;register&quot; new classes that are unknown to the&#xA;     * system.  It can also be used to &quot;overload&quot; a class (redefine it&#xA;     * elsewhere)&#xA;     *&#xA;     * @param string $class The class name to overload&#xA;     * @param string $path  The path to the new class&#xA;     *&#xA;     * @throws InvalidArgumentException Upon an Invalid path submission&#xA;     * @return void&#xA;     */&#xA;    public static function _($class, $path)&#xA;    {&#xA;        $class = strtolower($class);&#xA;        if (!file_exists($path)) {&#xA;            throw new InvalidArgumentException('Invalid Path Specified');&#xA;        }&#xA;        self::$classes[$class] = $path;&#xA;    }&#xA;&#xA;    /**&#xA;     * Add a path to the include path list&#xA;     *&#xA;     * This adds a path to the list of paths to search for an included file.&#xA;     * This should not be used to overload classes, since the default include&#xA;     * directory will always be searched first.  This can be used to extend&#xA;     * the search path to include new parts of the system&#xA;     *&#xA;     * @param string $path The path to add to the search list&#xA;     *&#xA;     * @throws InvalidArgumentException when an invalid path is specified&#xA;     * @return void&#xA;     */&#xA;    public static function addPath($path)&#xA;    {&#xA;        if (!is_dir($path)) {&#xA;            throw new InvalidArgumentException('Invalid Include Path Added');&#xA;        }&#xA;        $path = rtrim($path, DS);&#xA;        if (!in_array($path, self::$paths)) {&#xA;                self::$paths[] = $path;&#xA;        }&#xA;    }&#xA;&#xA;    /**&#xA;     * Add a path to the auto-search paths (for trailing extensions)&#xA;     *&#xA;     * The path should end with an 's'.  Default files should not.&#xA;     *&#xA;     * @param string $path The name of the new auto-search path&#xA;     *&#xA;     * @return void&#xA;     */&#xA;    public static function addNamedPath($path)&#xA;    {&#xA;        $path = strtolower($path);&#xA;        if (substr($path, -1) == 's') {&#xA;            $path = substr($path, 0, -1);&#xA;        }&#xA;        if (!in_array($path, self::$namedPaths)) {&#xA;            self::$namedPaths[] = $path;&#xA;        }&#xA;    }&#xA;&#xA;    /**&#xA;     * Initialize and register the autoloader.&#xA;     *&#xA;     * This method will setup the autoloader.  This should only be called once.&#xA;     *&#xA;     * @return void&#xA;     */&#xA;    public static function initialize()&#xA;    {&#xA;        if (!self::$initialized) {&#xA;            self::$initialized = true;&#xA;            spl_autoload_register(array('Loader', 'load'));&#xA;        }&#xA;    }&#xA;&#xA;    /**&#xA;     * The actual auto-loading function.&#xA;     *&#xA;     * This is automatically called by PHP whenever a class name is used that&#xA;     * doesn't exist yet.  There should be no need to manually call this method.&#xA;     *&#xA;     * @param string $class The class name to load&#xA;     *&#xA;     * @return void&#xA;     */&#xA;    public static function load($class)&#xA;    {&#xA;        $className = strtolower($class);&#xA;        if (isset(self::$classes[$className])) {&#xA;            $file = self::$classes[$className];&#xA;        } else {&#xA;            $file = self::findFile($class);&#xA;        }&#xA;        if (file_exists($file)) {&#xA;            include_once $file;&#xA;        }&#xA;    }&#xA;&#xA;    /**&#xA;     * Find the file to include based upon its name&#xA;     *    &#xA;     * This splits the class name by uppercase letter, and then rejoins them&#xA;     * to attain the file system path.  So FooBarBaz will be turned into&#xA;     * foo/bar/baz.  It then searches the include paths for that chain.  If baz&#xA;     * is a directory, it searches that directory for a file called baz.php.&#xA;     * Otherwise, it looks for baz.php under the bar directory.&#xA;     *&#xA;     * @param string $class The name of the class to find&#xA;     *&#xA;     * @return string The path to the file defining that class&#xA;     */&#xA;    protected static function findFile($class)&#xA;    {&#xA;        $regex = '#([A-Z]{1}[a-z0-9_]+)#';&#xA;        $options = PREG_SPLIT_NO_EMPTY | PREG_SPLIT_DELIM_CAPTURE;&#xA;        $parts = preg_split($regex, $class, null, $options);&#xA;&#xA;        $subpath = '';&#xA;        $file = strtolower(end($parts));&#xA;        $test = strtolower(reset($parts));&#xA;        if ($test == 'is') {&#xA;            array_shift($parts);&#xA;            return self::findNamedFile($class, $parts, 'interface');&#xA;        }&#xA;        foreach ($parts as $part) {&#xA;            $subpath .= DS . strtolower($part);&#xA;        }    &#xA;        foreach (self::$paths as $path) {&#xA;            $newpath = $path . $subpath;&#xA;            if (is_file($newpath . '.php')) {&#xA;                return $newpath . '.php';&#xA;            } elseif (is_file($newpath . DS . $file . '.php')) {&#xA;                return $newpath . DS . $file . '.php';&#xA;            }&#xA;        }&#xA;        if (in_array($file, self::$namedPaths)) {&#xA;            //Get rid of the trailing part&#xA;            array_pop($parts);&#xA;            return self::findNamedFile($class, $parts, $file);&#xA;        }    &#xA;        return '';&#xA;    }&#xA;&#xA;    /**&#xA;     * Find a file for named directories (interfaces, exceptions, iterators, etc)&#xA;     *&#xA;     * @param string $class The class name of the exception to find&#xA;     * @param array  $parts The parts of the class name pre-split&#xA;     * @param string $name  The name of the named directory to search in&#xA;     *    &#xA;     * @return string The found path, or '' if not found&#xA;     */&#xA;    protected static function findNamedFile($class, array $parts, $name)&#xA;    {    &#xA;        if (empty($parts)) {&#xA;            return '';&#xA;        }&#xA;        $name = strtolower($name);&#xA;        //Add a trailing s, since individual files are not plural&#xA;        $filename = $name;&#xA;        $name .= 's';&#xA;        //Try the global path first&#xA;        $subpath = DS . $name . DS . strtolower(implode('', $parts)) . '.php';&#xA;        foreach (self::$paths as $path) {&#xA;            $newpath = $path . $subpath;&#xA;            if (is_file($newpath)) {&#xA;                return $newpath;&#xA;            }&#xA;        }&#xA;        //Try to build a full sub path for package specific named files&#xA;        $package = array_shift($parts);&#xA;        $subpath = DS . strtolower($package) . DS . $name . DS;&#xA;        if (!empty($parts)) {&#xA;            $subpath .= strtolower(implode('', $parts)) . '.php';&#xA;        } else {&#xA;            $subpath .= $filename . '.php';&#xA;        }&#xA;        foreach (self::$paths as $path) {&#xA;            $newpath = $path . $subpath;&#xA;            if (is_file($newpath)) {&#xA;                return $newpath;&#xA;            }&#xA;        }&#xA;        return '';&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It's also fully unit tested.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What are your thoughts? Is it over-complex?&lt;/p&gt;&#xA;" OwnerUserId="14" LastEditorUserId="22222" LastEditDate="2016-12-01T23:22:27.267" LastActivityDate="2016-12-01T23:22:27.267" Title="PHP Autoloader Library" Tags="&lt;php&gt;&lt;library&gt;" AnswerCount="4" CommentCount="0" FavoriteCount="1" />
  <row Id="5" PostTypeId="2" ParentId="1" CreationDate="2011-01-19T21:10:07.140" Score="14" Body="&lt;p&gt;From your question I infer that you're thinking of having several instances of the DB class.  If so I'd suggest abstracting the connection out to another class and holding a reference to the same connection in each DB instance.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You could then set your connection up as a singleton and thus only connect &amp;amp; disconnect once.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Apologies in advance if I've missed anything here - my PHP is far from fluent.&lt;/p&gt;&#xA;" OwnerUserId="28" LastActivityDate="2011-01-19T21:10:07.140" CommentCount="2" />
  <row Id="6" PostTypeId="2" ParentId="1" CreationDate="2011-01-19T21:12:43.930" Score="13" Body="&lt;p&gt;You might also look into the built-in php command mysql_pconnect().  This differs from mysql_connect in that it opens a persistent connection to the DB the first time it is called, and each subsequent time, it checks to see if an existing connection to that database exists and uses that connection instead.  You should then remove the mysql_close command from the destructor, as they will persist between page loads.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The php manual page: &lt;a href=&quot;http://php.net/manual/en/function.mysql-pconnect.php&quot;&gt;http://php.net/manual/en/function.mysql-pconnect.php&lt;/a&gt;&lt;/p&gt;&#xA;" OwnerUserId="43" LastActivityDate="2011-01-19T21:12:43.930" CommentCount="3" />
  <row Id="7" PostTypeId="1" AcceptedAnswerId="8" CreationDate="2011-01-19T21:16:08.443" Score="46" ViewCount="2979" Body="&lt;p&gt;I started programming with Java and C++, so I'm used to having a 'main' function that calls other functions that do the actual work. At university I was always told that doing actual computation in the main function is bad practice. I'm currently playing around with Python, and I have trouble figuring out how to write a nice 'main' function, especially since I'm doing small stuff that doesn't need separate classes.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What do you think about the following code? Is the main function necessary, or would  you just write everything without functions? Is there a general consent on this in the Python world?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;# Finds sum of all multiples of 3 and 5 from 0 to 999 &#xA;&#xA;def find_multiples():&#xA;    global numbers&#xA;&#xA;    for i in range(0,1000):&#xA;       if i%3==0 or i%5==0:&#xA;           numbers.append(i);&#xA;&#xA;numbers = []&#xA;&#xA;if __name__ == '__main__':&#xA;    find_multiples()&#xA;    print sum(numbers)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="30" LastEditorUserId="22222" LastEditDate="2014-10-02T21:53:23.463" LastActivityDate="2014-11-25T13:12:33.337" Title="Using separate functions for Project Euler 1" Tags="&lt;python&gt;&lt;programming-challenge&gt;" AnswerCount="10" CommentCount="0" FavoriteCount="7" />
  <row Id="8" PostTypeId="2" ParentId="7" CreationDate="2011-01-19T21:19:20.217" Score="30" Body="&lt;p&gt;In most of the Python code I've ever seen, there is normally a main function defined that you call from the condition you put to establish the script was executed and not imported.  I believe that's the standard way of doing things in Python, but I don't believe its actually a written rule anywhere, though that is how they do it in &lt;a href=&quot;http://docs.python.org/library/__main__.html&quot;&gt;their docs as well&lt;/a&gt;.&lt;/p&gt;&#xA;" OwnerUserId="55" LastEditorUserId="55" LastEditDate="2011-01-19T21:24:47.150" LastActivityDate="2011-01-19T21:24:47.150" CommentCount="5" />
  <row Id="9" PostTypeId="1" AcceptedAnswerId="13" CreationDate="2011-01-19T21:19:59.470" Score="27" ViewCount="2263" Body="&lt;p&gt;I have a method that has a lot of loops:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private void update(double depth)&#xA;        {&#xA;&#xA;            Console.WriteLine(&quot;update with level &quot; + depth);&#xA;&#xA;            this.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority.Normal, new Action(delegate()&#xA;                {&#xA;&#xA;&#xA;            List&amp;lt;Grid&amp;gt; grids = new List&amp;lt;Grid&amp;gt;();&#xA;&#xA;            Dependencies.Children.Clear();&#xA;&#xA;            Grid g = new Grid();&#xA;            //Canvas.SetZIndex(g, 100);&#xA;            g.Width = 50;&#xA;            g.Height = 50;&#xA;            g.Tag = focus;&#xA;&#xA;            Ellipse e = new Ellipse();&#xA;            e.Width = 50;&#xA;            e.Height = 50;&#xA;            e.Fill = Brushes.Red;&#xA;            if (depth == 1)&#xA;            {&#xA;                Canvas.SetTop(g, 163);&#xA;            }&#xA;            else if (depth == 2)&#xA;            {&#xA;                Canvas.SetTop(g, 108);&#xA;            }&#xA;            else if (depth == 3)&#xA;            {&#xA;                Canvas.SetTop(g, 81);&#xA;            }&#xA;            else if (depth == 4)&#xA;            {&#xA;                Canvas.SetTop(g, 65);&#xA;            }&#xA;            else if (depth == 5)&#xA;            {&#xA;                Canvas.SetTop(g, 54);&#xA;            }&#xA;            else if (depth == 6)&#xA;            {&#xA;                Canvas.SetTop(g, 46);&#xA;            }&#xA;            Canvas.SetLeft(g, 500);&#xA;&#xA;            g.Children.Add(e);&#xA;&#xA;            Viewbox box = new Viewbox();&#xA;            box.Width = e.Width;&#xA;            box.Height = e.Height;&#xA;&#xA;&#xA;            TextBox txt = new TextBox();&#xA;            txt.Text = focus.getName();&#xA;            box.Child = txt;&#xA;            txt.Background = Brushes.Transparent;&#xA;            txt.BorderBrush = Brushes.Transparent;&#xA;&#xA;            g.Children.Add(box);&#xA;&#xA;&#xA;&#xA;            grids.Add(g);&#xA;&#xA;            List&amp;lt;SourceFile&amp;gt; list = new List&amp;lt;SourceFile&amp;gt;();&#xA;&#xA;            list = focus.getInvocations();&#xA;&#xA;            int counter = 1;&#xA;            foreach (SourceFile sf in list)&#xA;            {&#xA;                Grid g1 = new Grid();&#xA;                //Canvas.SetZIndex(g, 101);&#xA;                g1.Width = 50;&#xA;                g1.Height = 50;&#xA;                g1.Tag = sf;&#xA;&#xA;                Ellipse e1 = new Ellipse();&#xA;                //Dependencies.Children.Add(e1);&#xA;                sf.setGrid(g1);&#xA;                e1.Width = 50;&#xA;                e1.Height = 50;&#xA;                e1.Fill = Brushes.Red;&#xA;&#xA;                g1.Children.Add(e1);&#xA;&#xA;                if (depth == 1)&#xA;                {&#xA;                    Canvas.SetTop(g1, 488);&#xA;                }&#xA;                else if (depth == 2)&#xA;                {&#xA;                    Canvas.SetTop(g1, 324);&#xA;                }&#xA;                else if (depth == 3)&#xA;                {&#xA;                    Canvas.SetTop(g1, 244);&#xA;                }&#xA;                else if (depth == 4)&#xA;                {&#xA;                    Canvas.SetTop(g1, 195);&#xA;                }&#xA;                else if (depth == 5)&#xA;                {&#xA;                    Canvas.SetTop(g1, 163);&#xA;                }&#xA;                else if (depth == 6)&#xA;                {&#xA;                    Canvas.SetTop(g1, 139);&#xA;                }&#xA;                Canvas.SetLeft(g1, counter * (1000 / (list.Count + 1) ));&#xA;&#xA;                Viewbox box1 = new Viewbox();&#xA;                box1.Width = g1.Width;&#xA;                box1.Height = g1.Height;&#xA;&#xA;                TextBox txt1 = new TextBox();&#xA;                txt1.Text = sf.getName();&#xA;                txt1.Background = Brushes.Transparent;&#xA;                txt1.BorderBrush = Brushes.Transparent;&#xA;&#xA;                box1.Child = txt1;&#xA;                g1.Children.Add(box1);&#xA;&#xA;                Line l = new Line();&#xA;                //Canvas.SetZIndex(l, 1);&#xA;                l.Stroke = Brushes.Green;&#xA;                l.StrokeThickness = 10;&#xA;                Binding x1 = new Binding(); x1.Path = new PropertyPath(Canvas.LeftProperty);&#xA;                x1.Converter = new MyConverter();&#xA;                x1.ConverterParameter = g;&#xA;                Binding y1 = new Binding(); y1.Path = new PropertyPath(Canvas.TopProperty);&#xA;                y1.Converter = new MyConverter();&#xA;                y1.ConverterParameter = g;&#xA;                Binding x2 = new Binding(); x2.Path = new PropertyPath(Canvas.LeftProperty);&#xA;                x2.Converter = new MyConverter();&#xA;                x2.ConverterParameter = g1;&#xA;                Binding y2 = new Binding(); y2.Path = new PropertyPath(Canvas.TopProperty);&#xA;                y2.Converter = new MyConverter();&#xA;                y2.ConverterParameter = g1;&#xA;                x1.Source = y1.Source = g;&#xA;                x2.Source = y2.Source = g1;&#xA;                l.SetBinding(Line.X1Property, x1);&#xA;                l.SetBinding(Line.Y1Property, y1);&#xA;                l.SetBinding(Line.X2Property, x2);&#xA;                l.SetBinding(Line.Y2Property, y2);&#xA;                Dependencies.Children.Add(l);&#xA;                l.Tag = new Call(focus, sf);&#xA;                Contacts.AddPreviewContactDownHandler(l, OnLineDown);&#xA;                counter++;&#xA;&#xA;                grids.Add(g1);&#xA;&#xA;                SizeChangedEventHandler act = (Object s, SizeChangedEventArgs args) =&amp;gt;&#xA;                {&#xA;                    BindingOperations.GetBindingExpressionBase(l, Line.X1Property).UpdateTarget();&#xA;                    BindingOperations.GetBindingExpressionBase(l, Line.Y1Property).UpdateTarget();&#xA;                    BindingOperations.GetBindingExpressionBase(l, Line.X2Property).UpdateTarget();&#xA;                    BindingOperations.GetBindingExpressionBase(l, Line.Y2Property).UpdateTarget();&#xA;                };&#xA;&#xA;                g.SizeChanged += act;&#xA;                g1.SizeChanged += act;&#xA;            }&#xA;&#xA;&#xA;            int counter2 = 1;&#xA;            if (depth &amp;gt;= 2)&#xA;            {&#xA;&#xA;                int invocCount = 0;&#xA;&#xA;                foreach (SourceFile s in list)&#xA;                {&#xA;                    foreach (SourceFile source in s.getInvocations())&#xA;                    {&#xA;                        invocCount = invocCount + s.getInvocations().Count;&#xA;                    }&#xA;                }&#xA;&#xA;                Console.WriteLine(invocCount);&#xA;&#xA;                foreach (SourceFile s in list)&#xA;                {&#xA;                    foreach (SourceFile source in s.getInvocations())&#xA;                    {&#xA;&#xA;                        Console.WriteLine(&quot;`Found invocation of &quot; + s.getName() + &quot;: &quot; + source.getName());&#xA;&#xA;                        Grid g1 = new Grid();&#xA;                        g1.Width = 50;&#xA;                        g1.Height = 50;&#xA;&#xA;                        Ellipse e1 = new Ellipse();&#xA;                       // Canvas.SetZIndex(g1, 102);&#xA;                        grids.Add(g1);&#xA;                        e1.Width = 50;&#xA;                        e1.Height = 50;&#xA;                        e1.Fill = Brushes.Red;&#xA;                        source.setGrid(g1);&#xA;                        g1.Tag = source;&#xA;&#xA;                        g1.Children.Add(e1);&#xA;&#xA;                        if (depth == 2)&#xA;                        {&#xA;                            Canvas.SetTop(g1, 540);&#xA;                        }&#xA;                        else if (depth == 3)&#xA;                        {&#xA;                            Canvas.SetTop(g1, 406);&#xA;                        }&#xA;                        else if (depth == 4)&#xA;                        {&#xA;                            Canvas.SetTop(g1, 325);&#xA;                        }&#xA;                        else if (depth == 5)&#xA;                        {&#xA;                            Canvas.SetTop(g1, 271);&#xA;                        }&#xA;                        else if (depth == 6)&#xA;                        {&#xA;                            Canvas.SetTop(g1, 232);&#xA;                        }&#xA;&#xA;                        Canvas.SetLeft(g1, counter2 * (1000 / (invocCount + 1)));&#xA;&#xA;                        Viewbox box1 = new Viewbox();&#xA;                        box1.Width = g1.Width;&#xA;                        box1.Height = g1.Height;&#xA;&#xA;                        TextBox txt1 = new TextBox();&#xA;                        txt1.Text = source.getName();&#xA;                        txt1.Background = Brushes.Transparent;&#xA;                        txt1.BorderBrush = Brushes.Transparent;&#xA;&#xA;                        box1.Child = txt1;&#xA;                        g1.Children.Add(box1);&#xA;&#xA;                        Line l = new Line();&#xA;                        //Canvas.SetZIndex(l, 2);&#xA;                        l.Stroke = Brushes.Green;&#xA;                        l.StrokeThickness = 10;&#xA;                        Binding x1 = new Binding(); x1.Path = new PropertyPath(Canvas.LeftProperty);&#xA;                        x1.Converter = new MyConverter();&#xA;                        x1.ConverterParameter = s.getGrid();&#xA;                        Binding y1 = new Binding(); y1.Path = new PropertyPath(Canvas.TopProperty);&#xA;                        y1.Converter = new MyConverter();&#xA;                        y1.ConverterParameter = s.getGrid();&#xA;                        Binding x2 = new Binding(); x2.Path = new PropertyPath(Canvas.LeftProperty);&#xA;                        x2.Converter = new MyConverter();&#xA;                        x2.ConverterParameter = g1;&#xA;                        Binding y2 = new Binding(); y2.Path = new PropertyPath(Canvas.TopProperty);&#xA;                        y2.Converter = new MyConverter();&#xA;                        y2.ConverterParameter = g1;&#xA;                        x1.Source = y1.Source = findGrid(grids, s, source);&#xA;                        x2.Source = y2.Source = g1;&#xA;                        l.SetBinding(Line.X1Property, x1);&#xA;                        l.SetBinding(Line.Y1Property, y1);&#xA;                        l.SetBinding(Line.X2Property, x2);&#xA;                        l.SetBinding(Line.Y2Property, y2);&#xA;                        Dependencies.Children.Add(l);&#xA;                        l.Tag = new Call(s, source);&#xA;                        Contacts.AddPreviewContactDownHandler(l, OnLineDown);&#xA;&#xA;                        counter2++;&#xA;&#xA;                        SizeChangedEventHandler act = (Object o, SizeChangedEventArgs args) =&amp;gt;&#xA;                        {&#xA;                            BindingOperations.GetBindingExpressionBase(l, Line.X1Property).UpdateTarget();&#xA;                            BindingOperations.GetBindingExpressionBase(l, Line.Y1Property).UpdateTarget();&#xA;                            BindingOperations.GetBindingExpressionBase(l, Line.X2Property).UpdateTarget();&#xA;                            BindingOperations.GetBindingExpressionBase(l, Line.Y2Property).UpdateTarget();&#xA;                        };&#xA;&#xA;                        source.getGrid().SizeChanged += act;&#xA;                        g1.SizeChanged += act;&#xA;                    }&#xA;                }&#xA;            }&#xA;&#xA;&#xA;            int counter3 = 1;&#xA;            if (depth &amp;gt;= 3)&#xA;            {&#xA;&#xA;                int invocCount = 0;&#xA;&#xA;                foreach (SourceFile s in list)&#xA;                {&#xA;                    foreach (SourceFile source in s.getInvocations())&#xA;                    {&#xA;                        foreach (SourceFile s1 in source.getInvocations())&#xA;                        {&#xA;                            invocCount = invocCount + source.getInvocations().Count;&#xA;                        }&#xA;                    }&#xA;                }&#xA;&#xA;                foreach (SourceFile s in list)&#xA;                {&#xA;                    foreach (SourceFile source in s.getInvocations())&#xA;                    {&#xA;                        foreach (SourceFile s1 in source.getInvocations())&#xA;                        {&#xA;                            Grid g1 = new Grid();&#xA;                            grids.Add(g1);&#xA;                            g1.Width = 50;&#xA;                            g1.Height = 50;&#xA;                            g1.Tag = s1;&#xA;                            Ellipse e1 = new Ellipse();&#xA;&#xA;                            e1.Width = 50;&#xA;                            e1.Height = 50;&#xA;                            e1.Fill = Brushes.Red;&#xA;                            s1.setGrid(g1);&#xA;                            g1.Children.Add(e1);&#xA;&#xA;                            if (depth == 3)&#xA;                            {&#xA;                                Canvas.SetTop(g1, 569);&#xA;                            }&#xA;                            else if (depth == 4)&#xA;                            {&#xA;                                Canvas.SetTop(g1, 455);&#xA;                            }&#xA;                            else if (depth == 5)&#xA;                            {&#xA;                                Canvas.SetTop(g1, 379);&#xA;                            }&#xA;                            else if (depth == 6)&#xA;                            {&#xA;                                Canvas.SetTop(g1, 325);&#xA;                            }&#xA;                            Canvas.SetLeft(g1, counter3 * (1000 / (invocCount + 1)));&#xA;&#xA;                            Viewbox box1 = new Viewbox();&#xA;                            box1.Width = g1.Width;&#xA;                            box1.Height = g1.Height;&#xA;&#xA;                            TextBox txt1 = new TextBox();&#xA;                            txt1.Background = Brushes.Transparent;&#xA;                            txt1.BorderBrush = Brushes.Transparent;&#xA;                            txt1.Text = s1.getName();&#xA;                            box1.Child = txt1;&#xA;                            g1.Children.Add(box1);&#xA;&#xA;                            Line l = new Line();&#xA;                            //Canvas.SetZIndex(l, 2);&#xA;                            l.Stroke = Brushes.Green;&#xA;                            l.StrokeThickness = 10;&#xA;                            Binding x1 = new Binding(); x1.Path = new PropertyPath(Canvas.LeftProperty);&#xA;                            x1.Converter = new MyConverter();&#xA;                            x1.ConverterParameter = source.getGrid();&#xA;                            Binding y1 = new Binding(); y1.Path = new PropertyPath(Canvas.TopProperty);&#xA;                            y1.Converter = new MyConverter();&#xA;                            y1.ConverterParameter = source.getGrid();&#xA;                            Binding x2 = new Binding(); x2.Path = new PropertyPath(Canvas.LeftProperty);&#xA;                            x2.Converter = new MyConverter();&#xA;                            x2.ConverterParameter = g1;&#xA;                            Binding y2 = new Binding(); y2.Path = new PropertyPath(Canvas.TopProperty);&#xA;                            y2.Converter = new MyConverter();&#xA;                            y2.ConverterParameter = g1;&#xA;                            x1.Source = y1.Source = findGrid(grids, source, s1);&#xA;                            x2.Source = y2.Source = g1;&#xA;                            l.SetBinding(Line.X1Property, x1);&#xA;                            l.SetBinding(Line.Y1Property, y1);&#xA;                            l.SetBinding(Line.X2Property, x2);&#xA;                            l.SetBinding(Line.Y2Property, y2);&#xA;                            Dependencies.Children.Add(l);&#xA;                            l.Tag = new Call(source, s1);&#xA;                            Contacts.AddPreviewContactDownHandler(l, OnLineDown);&#xA;&#xA;                            counter3++;&#xA;&#xA;                            SizeChangedEventHandler act = (Object o, SizeChangedEventArgs args) =&amp;gt;&#xA;                            {&#xA;                                BindingOperations.GetBindingExpressionBase(l, Line.X1Property).UpdateTarget();&#xA;                                BindingOperations.GetBindingExpressionBase(l, Line.Y1Property).UpdateTarget();&#xA;                                BindingOperations.GetBindingExpressionBase(l, Line.X2Property).UpdateTarget();&#xA;                                BindingOperations.GetBindingExpressionBase(l, Line.Y2Property).UpdateTarget();&#xA;                            };&#xA;&#xA;                            s1.getGrid().SizeChanged += act;&#xA;                            g1.SizeChanged += act;&#xA;                        }&#xA;                    }&#xA;                }&#xA;            }&#xA;&#xA;&#xA;         int counter4 = 1;&#xA;         if (depth &amp;gt;= 4)&#xA;         {&#xA;&#xA;             int invoCount = 0;&#xA;             foreach (SourceFile s in list)&#xA;             {&#xA;                 foreach (SourceFile source in s.getInvocations())&#xA;                 {&#xA;                     foreach (SourceFile s1 in source.getInvocations())&#xA;                     {&#xA;                         foreach (SourceFile s2 in s1.getInvocations())&#xA;                         {&#xA;                             invoCount = invoCount + s1.getInvocations().Count;&#xA;                         }&#xA;                     }&#xA;                 }&#xA;             }&#xA;&#xA;             foreach (SourceFile s in list)&#xA;             {&#xA;                 foreach (SourceFile source in s.getInvocations())&#xA;                 {&#xA;                     foreach (SourceFile s1 in source.getInvocations())&#xA;                     {&#xA;                         foreach (SourceFile s2 in s1.getInvocations())&#xA;                         {&#xA;&#xA;                             Grid g1 = new Grid();&#xA;                             grids.Add(g1);&#xA;                             g1.Width = 50;&#xA;                             g1.Height = 50;&#xA;                             g1.Tag = s2;&#xA;                             Ellipse e1 = new Ellipse();&#xA;&#xA;                             e1.Width = 50;&#xA;                             e1.Height = 50;&#xA;                             e1.Fill = Brushes.Red;&#xA;                             s2.setGrid(g1);&#xA;&#xA;                             g1.Children.Add(e1);&#xA;&#xA;                             if (depth == 4)&#xA;                             {&#xA;                                 Canvas.SetTop(g1, 585);&#xA;                             }&#xA;                             else if (depth == 5)&#xA;                             {&#xA;                                 Canvas.SetTop(g1, 488);&#xA;                             }&#xA;                             else if (depth == 6)&#xA;                             {&#xA;                                 Canvas.SetTop(g1, 418);&#xA;                             }&#xA;                             Canvas.SetLeft(g1, counter4 * (1000 / (invoCount + 1)));&#xA;&#xA;                             Viewbox box1 = new Viewbox();&#xA;                             box1.Width = g1.Width;&#xA;                             box1.Height = g1.Height;&#xA;&#xA;                             TextBox txt1 = new TextBox();&#xA;                             txt1.Background = Brushes.Transparent;&#xA;                             txt1.BorderBrush = Brushes.Transparent;&#xA;                             txt1.Text = s2.getName();&#xA;                             box1.Child = txt1;&#xA;                             g1.Children.Add(box1);&#xA;&#xA;                             Line l = new Line();&#xA;                             //Canvas.SetZIndex(l, 2);&#xA;                             l.Stroke = Brushes.Green;&#xA;                             l.StrokeThickness = 10;&#xA;                             Binding x1 = new Binding(); x1.Path = new PropertyPath(Canvas.LeftProperty);&#xA;                             x1.Converter = new MyConverter();&#xA;                             x1.ConverterParameter = s1.getGrid();&#xA;                             Binding y1 = new Binding(); y1.Path = new PropertyPath(Canvas.TopProperty);&#xA;                             y1.Converter = new MyConverter();&#xA;                             y1.ConverterParameter = s1.getGrid();&#xA;                             Binding x2 = new Binding(); x2.Path = new PropertyPath(Canvas.LeftProperty);&#xA;                             x2.Converter = new MyConverter();&#xA;                             x2.ConverterParameter = g1;&#xA;                             Binding y2 = new Binding(); y2.Path = new PropertyPath(Canvas.TopProperty);&#xA;                             y2.Converter = new MyConverter();&#xA;                             y2.ConverterParameter = g1;&#xA;                             x1.Source = y1.Source = findGrid(grids, s1, s2);&#xA;                             x2.Source = y2.Source = g1;&#xA;                             l.SetBinding(Line.X1Property, x1);&#xA;                             l.SetBinding(Line.Y1Property, y1);&#xA;                             l.SetBinding(Line.X2Property, x2);&#xA;                             l.SetBinding(Line.Y2Property, y2);&#xA;                             Dependencies.Children.Add(l);&#xA;                             l.Tag = new Call(s1, s2);&#xA;                             Contacts.AddPreviewContactDownHandler(l, OnLineDown);&#xA;                             counter4++;&#xA;&#xA;                             SizeChangedEventHandler act = (Object o, SizeChangedEventArgs args) =&amp;gt;&#xA;                             {&#xA;                                 BindingOperations.GetBindingExpressionBase(l, Line.X1Property).UpdateTarget();&#xA;                                 BindingOperations.GetBindingExpressionBase(l, Line.Y1Property).UpdateTarget();&#xA;                                 BindingOperations.GetBindingExpressionBase(l, Line.X2Property).UpdateTarget();&#xA;                                 BindingOperations.GetBindingExpressionBase(l, Line.Y2Property).UpdateTarget();&#xA;                             };&#xA;&#xA;                             s2.getGrid().SizeChanged += act;&#xA;                             g1.SizeChanged += act;&#xA;                         }&#xA;                     }&#xA;                 }&#xA;             }&#xA;         }&#xA;&#xA;&#xA;&#xA;      int counter5 = 1;&#xA;      if (depth &amp;gt;= 5)&#xA;      {&#xA;&#xA;          int invoCount = 0;&#xA;&#xA;          foreach (SourceFile s in list)&#xA;          {&#xA;              foreach (SourceFile source in s.getInvocations())&#xA;              {&#xA;                  foreach (SourceFile s1 in source.getInvocations())&#xA;                  {&#xA;                      foreach (SourceFile s2 in s1.getInvocations())&#xA;                      {&#xA;                          foreach (SourceFile s3 in s2.getInvocations())&#xA;                          {&#xA;                              invoCount = invoCount + s2.getInvocations().Count;&#xA;                          }&#xA;                      }&#xA;                  }&#xA;              }&#xA;          }&#xA;&#xA;          foreach (SourceFile s in list)&#xA;          {&#xA;              foreach (SourceFile source in s.getInvocations())&#xA;              {&#xA;                  foreach (SourceFile s1 in source.getInvocations())&#xA;                  {&#xA;                      foreach (SourceFile s2 in s1.getInvocations())&#xA;                      {&#xA;                          foreach (SourceFile s3 in s2.getInvocations())&#xA;                          {&#xA;                              Grid g1 = new Grid();&#xA;                              g1.Width = 50;&#xA;                              g1.Height = 50;&#xA;                              grids.Add(g1);&#xA;                              g1.Tag = s3;&#xA;                              Ellipse e1 = new Ellipse();&#xA;                              //Dependencies.Children.Add(e1);&#xA;                              e1.Width = 50;&#xA;                              e1.Height = 50;&#xA;                              e1.Fill = Brushes.Red;&#xA;                              s3.setGrid(g1);&#xA;&#xA;                              g1.Children.Add(e1);&#xA;&#xA;                              if (depth == 5)&#xA;                              {&#xA;                                  Canvas.SetTop(g1, 596);&#xA;                              }&#xA;                              else if (depth == 6)&#xA;                              {&#xA;                                  Canvas.SetTop(g1, 511);&#xA;                              }&#xA;                              Canvas.SetLeft(g1, counter5 * (1000 / (invoCount + 1)));&#xA;&#xA;                              Viewbox box1 = new Viewbox();&#xA;                              box1.Width = g1.Width;&#xA;                              box1.Height = g1.Height;&#xA;&#xA;                              TextBox txt1 = new TextBox();&#xA;                              txt1.Background = Brushes.Transparent;&#xA;                              txt1.BorderBrush = Brushes.Transparent;&#xA;                              txt1.Text = s3.getName();&#xA;                              box1.Child = txt1;&#xA;                              g1.Children.Add(box1);&#xA;&#xA;                              Line l = new Line();&#xA;                              //Canvas.SetZIndex(l, 2);&#xA;                              l.Stroke = Brushes.Green;&#xA;                              l.StrokeThickness = 10;&#xA;                              Binding x1 = new Binding(); x1.Path = new PropertyPath(Canvas.LeftProperty);&#xA;                              x1.Converter = new MyConverter();&#xA;                              x1.ConverterParameter = s2.getGrid();&#xA;                              Binding y1 = new Binding(); y1.Path = new PropertyPath(Canvas.TopProperty);&#xA;                              y1.Converter = new MyConverter();&#xA;                              y1.ConverterParameter = s2.getGrid();&#xA;                              Binding x2 = new Binding(); x2.Path = new PropertyPath(Canvas.LeftProperty);&#xA;                              x2.Converter = new MyConverter();&#xA;                              x2.ConverterParameter = g1;&#xA;                              Binding y2 = new Binding(); y2.Path = new PropertyPath(Canvas.TopProperty);&#xA;                              y2.Converter = new MyConverter();&#xA;                              y2.ConverterParameter = g1;&#xA;                              x1.Source = y1.Source = findGrid(grids, s2, s3);&#xA;                              x2.Source = y2.Source = g1;&#xA;                              l.SetBinding(Line.X1Property, x1);&#xA;                              l.SetBinding(Line.Y1Property, y1);&#xA;                              l.SetBinding(Line.X2Property, x2);&#xA;                              l.SetBinding(Line.Y2Property, y2);&#xA;                              l.Tag = new Call(s2, s3);&#xA;                              Contacts.AddPreviewContactDownHandler(l, OnLineDown);&#xA;                              Dependencies.Children.Add(l);&#xA;&#xA;                              counter5++;&#xA;&#xA;                              SizeChangedEventHandler act = (Object o, SizeChangedEventArgs args) =&amp;gt;&#xA;                              {&#xA;                                  BindingOperations.GetBindingExpressionBase(l, Line.X1Property).UpdateTarget();&#xA;                                  BindingOperations.GetBindingExpressionBase(l, Line.Y1Property).UpdateTarget();&#xA;                                  BindingOperations.GetBindingExpressionBase(l, Line.X2Property).UpdateTarget();&#xA;                                  BindingOperations.GetBindingExpressionBase(l, Line.Y2Property).UpdateTarget();&#xA;                              };&#xA;&#xA;                              s3.getGrid().SizeChanged += act;&#xA;                              g1.SizeChanged += act;&#xA;                          }&#xA;                      }&#xA;                  }&#xA;              }&#xA;          }&#xA;      }&#xA;&#xA;&#xA;&#xA;            foreach (Grid grid in grids)&#xA;            {&#xA;                Dependencies.Children.Add(grid);&#xA;                Contacts.AddPreviewContactDownHandler(grid, DownOnSourceFile);&#xA;            }&#xA;                }&#xA;  ));&#xA;        }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Is there any easy way to improve that? And to make it working not only for 6 steps but also for n steps?&lt;/p&gt;&#xA;" OwnerUserId="40" LastEditorUserId="54718" LastEditDate="2015-05-04T19:50:08.997" LastActivityDate="2015-05-04T19:50:24.157" Title="Too many loops in Drawing App" Tags="&lt;c#&gt;&lt;performance&gt;&lt;algorithm&gt;" AnswerCount="11" CommentCount="6" FavoriteCount="4" />
  <row Id="10" PostTypeId="2" ParentId="4" CreationDate="2011-01-19T21:21:04.123" Score="12" Body="&lt;p&gt;The first problem I see is that there are a lot of cases where someone will want to create a class with more than one word in the name (DataMapper), and the autoloader you have provided won't allow for that.  I would recommend using another character to delimit between package names.  The Zend Framework uses Package_SubPackage_SubPackage_Class and that works very well.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As an aside, I'm not sure what your specific reasons are for writing your own autoloader (whether it is for production, education, etc.), but if you are planning to use it for production, I would recommend the Zend_Loader class from the Zend Framework, as it is supported, fully tested, and continually being developed.  You can read it's quickstart guide &lt;a href=&quot;http://framework.zend.com/manual/en/zend.loader.load.html&quot;&gt;Here&lt;/a&gt;&lt;/p&gt;&#xA;" OwnerUserId="43" LastActivityDate="2011-01-19T21:21:04.123" CommentCount="4" />
  <row Id="11" PostTypeId="2" ParentId="2" CreationDate="2011-01-19T21:23:04.670" Score="21" Body="&lt;p&gt;I think the best way to cut out possible checks is something like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;valid = set([])&#xA;&#xA;for i in range(3, end, 3):&#xA;  valid.add(i)&#xA;&#xA;for i in range(5, end, 5):&#xA;  valid.add(i)&#xA;&#xA;total = sum(valid)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;There's still a bit of redundancy (numbers which are multiples of both 3 and 5 are checked twice) but it's minimal.&lt;/p&gt;&#xA;" OwnerUserId="54" LastActivityDate="2011-01-19T21:23:04.670" CommentCount="6" />
  <row Id="12" PostTypeId="1" AcceptedAnswerId="277" CreationDate="2011-01-19T21:24:11.093" Score="21" ViewCount="20388" Body="&lt;p&gt;I use CodeIgniter at work, and one of our model files had a lot of subqueries in it.  I originally had to manually write each subquery, and wondered if I could use active records instead.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So, to make my life easier, I made a subquery library for CodeIgniter.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I put it on the CodeIgniter Wiki, but I never really had any one look over it.  So, can you tell me if there is anything I should improve in this, or anything I really shouldn't be doing?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;P.S. Feel free to use this if you wish.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;P.P.S. &lt;code&gt;join_range&lt;/code&gt; is a helper method for use with the answer to &lt;a href=&quot;http://stackoverflow.com/questions/4155873/mysql-find-in-set-vs-in&quot;&gt;this question&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;P.P.P.S. The latest version can be found &lt;a href=&quot;https://github.com/NTICompass/CodeIgniter-Subqueries&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class Subquery{&#xA;    var $CI;&#xA;    var $db;&#xA;    var $statement;&#xA;    var $join_type;&#xA;    var $join_on;&#xA;&#xA;    function __construct(){&#xA;        $this-&amp;gt;CI =&amp;amp; get_instance();&#xA;        $this-&amp;gt;db = array();&#xA;        $this-&amp;gt;statement = array();&#xA;        $this-&amp;gt;join_type = array();&#xA;        $this-&amp;gt;join_on = array();&#xA;    }&#xA;&#xA;    /**&#xA;     * start_subquery - Creates a new database object to be used for the subquery&#xA;     *&#xA;     * @param $statement - SQL statement to put subquery into (select, from, join, etc.)&#xA;     * @param $join_type - JOIN type (only for join statements)&#xA;     * @param $join_on - JOIN ON clause (only for join statements)&#xA;     *&#xA;     * @return A new database object to use for subqueries&#xA;     */&#xA;    function start_subquery($statement, $join_type='', $join_on=1){&#xA;        $db = $this-&amp;gt;CI-&amp;gt;load-&amp;gt;database('', true);&#xA;        $this-&amp;gt;db[] = $db;&#xA;        $this-&amp;gt;statement[] = $statement;&#xA;        if(strtolower($statement) == 'join'){&#xA;            $this-&amp;gt;join_type[] = $join_type;&#xA;            $this-&amp;gt;join_on[] = $join_on;&#xA;        }&#xA;        return $db;&#xA;    }&#xA;&#xA;    /**&#xA;     * end_subquery - Closes the database object and writes the subquery&#xA;     *&#xA;     * @param $alias - Alias to use in query&#xA;     *&#xA;     * @return none&#xA;     */&#xA;    function end_subquery($alias=''){&#xA;        $db = array_pop($this-&amp;gt;db);&#xA;        $sql = &quot;({$db-&amp;gt;_compile_select()})&quot;;&#xA;        $alias = $alias!='' ? &quot;AS $alias&quot; : $alias;&#xA;        $statement = array_pop($this-&amp;gt;statement);&#xA;        $database = (count($this-&amp;gt;db) == 0)&#xA;            ? $this-&amp;gt;CI-&amp;gt;db: $this-&amp;gt;db[count($this-&amp;gt;db)-1];&#xA;        if(strtolower($statement) == 'join'){&#xA;            $join_type = array_pop($this-&amp;gt;join_type);&#xA;            $join_on = array_pop($this-&amp;gt;join_on);&#xA;            $database-&amp;gt;$statement(&quot;$sql $alias&quot;, $join_on, $join_type);&#xA;        }&#xA;        else{&#xA;            $database-&amp;gt;$statement(&quot;$sql $alias&quot;);&#xA;        }&#xA;    }&#xA;&#xA;    /**&#xA;     * join_range - Helper function to CROSS JOIN a list of numbers&#xA;     *&#xA;     * @param $start - Range start&#xA;     * @param $end - Range end&#xA;     * @param $alias - Alias for number list&#xA;     * @param $table_name - JOINed tables need an alias(Optional)&#xA;     */&#xA;    function join_range($start, $end, $alias, $table_name='q'){&#xA;        $range = array();&#xA;        foreach(range($start, $end) AS $r){&#xA;            $range[] = &quot;SELECT $r AS $alias&quot;;&#xA;        }&#xA;        $range[0] = substr($range[0], 7);&#xA;        $range = implode(' UNION ALL ', $range);&#xA;&#xA;        $sub = $this-&amp;gt;start_subquery('join', 'inner');&#xA;        $sub-&amp;gt;select($range, false);&#xA;        $this-&amp;gt;end_subquery($table_name);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Example Usage&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This query:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;SELECT `word`, (SELECT `number` FROM (`numbers`) WHERE `numberID` = 2) AS number&#xA;FROM (`words`) WHERE `wordID` = 3 &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;would become:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$this-&amp;gt;db-&amp;gt;select('word')-&amp;gt;from('words')-&amp;gt;where('wordID', 3);&#xA;$sub = $this-&amp;gt;subquery-&amp;gt;start_subquery('select');&#xA;$sub-&amp;gt;select('number')-&amp;gt;from('numbers')-&amp;gt;where('numberID', 2);&#xA;$this-&amp;gt;subquery-&amp;gt;end_subquery('number'); &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="52" LastEditorUserId="47424" LastEditDate="2014-07-04T07:56:32.120" LastActivityDate="2014-07-04T08:15:48.913" Title="CodeIgniter Active Record Subqueries" Tags="&lt;php&gt;&lt;mysql&gt;&lt;codeigniter&gt;" AnswerCount="3" CommentCount="14" FavoriteCount="3" />
  <row Id="13" PostTypeId="2" ParentId="9" CreationDate="2011-01-19T21:24:59.400" Score="60" Body="&lt;p&gt;Break this down into several methods - it's very long, meaning it's not easy to read.&lt;/p&gt;&#xA;" OwnerUserId="28" LastEditorUserId="54718" LastEditDate="2015-05-04T19:50:24.157" LastActivityDate="2015-05-04T19:50:24.157" CommentCount="4" />
  <row Id="15" PostTypeId="2" ParentId="9" CreationDate="2011-01-19T21:27:45.830" Score="17" Body="&lt;p&gt;Give some thought to abstracting the decisions around setting the top of the canvas (cf. all those &lt;code&gt;if&lt;/code&gt; statements) out into a set of classes - or perhaps a single class with different suitable parameters in the constructor.  A lot of this code differs only in the numbers being applied.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A simple rule is &quot;Abstract the concept that varies&quot;.&lt;/p&gt;&#xA;" OwnerUserId="28" LastActivityDate="2011-01-19T21:27:45.830" CommentCount="0" />
  <row Id="16" PostTypeId="1" CreationDate="2011-01-19T21:28:43.283" Score="8" ViewCount="790" Body="&lt;p&gt;So I've had a problem where I need to compare data in 2 different tables on two different servers.  Now, I know MySQL supports &lt;code&gt;CHECKSUM TABLES&lt;/code&gt;, but from my testing and understanding, it's not reliable across server instances and versions.  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;So I created this query:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$part = '@CRC := MD5(CONCAT_WS(\'#\', COALESCE(`'.&#xA;    implode('`, &quot;#NULL#&quot;), COALESCE(`', $this-&amp;gt;_columns).&#xA;    '`, &quot;#NULL#&quot;)))';&#xA;$sql1 = &quot;SELECT COUNT(*) AS cnt, &#xA;        SUM(CONV(SUBSTRING({$part}, 1, 4), 16, 10)) as a1, &#xA;        SUM(CONV(SUBSTRING(@CRC, 5, 4), 16, 10)) as a2, &#xA;        SUM(CONV(SUBSTRING(@CRC, 9, 4), 16, 10)) as a3, &#xA;        SUM(CONV(SUBSTRING(@CRC, 13, 4), 16, 10)) as a4, &#xA;        SUM(CONV(SUBSTRING(@CRC, 17, 4), 16, 10)) as a5, &#xA;        SUM(CONV(SUBSTRING(@CRC, 21, 4), 16, 10)) as a6, &#xA;        SUM(CONV(SUBSTRING(@CRC, 25, 4), 16, 10)) as a7, &#xA;        SUM(CONV(SUBSTRING(@CRC, 29, 4), 16, 10)) as a8 &#xA;    FROM `dbname`.`tablename` &#xA;    WHERE `id` &amp;gt;= $min AND `id` &amp;lt;= $max &quot;;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;So basically, it's concatenating each row together (all the columns of each row more specifically) and then MD5ing them.  Then it walks 4 hexbits at a time through that MD5 and sums them across all rows (4 hexbits to allow me to do huge tables without needing to worry about overflowing).  Then, I just compare the result of this query on both tables to see if everything is the same.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;By using this binary search, I am able to rather quickly narrow down where the changes are so that I can port them.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It's actually reasonably efficient, so I'm not too concerned about that.  What I am concerned about is if this is even necessary.  It's screaming to me &quot;You're doing it wrong&quot;, but I can't figure out any cleaner method around it...&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What are your thoughts?&lt;/p&gt;&#xA;" OwnerUserId="14" LastEditorUserId="18427" LastEditDate="2013-12-17T14:37:13.607" LastActivityDate="2013-12-17T14:37:13.607" Title="Comparing data in 2 tables on different servers with CHECKSUM" Tags="&lt;php&gt;&lt;mysql&gt;&lt;sql&gt;" AnswerCount="2" CommentCount="2" FavoriteCount="1" />
  <row Id="17" PostTypeId="2" ParentId="9" CreationDate="2011-01-19T21:29:04.710" Score="5" Body="&lt;p&gt;For the n steps bit, consider using recursion - but tread carefully.&lt;/p&gt;&#xA;" OwnerUserId="28" LastActivityDate="2011-01-19T21:29:04.710" CommentCount="0" />
  <row Id="18" PostTypeId="2" ParentId="9" CreationDate="2011-01-19T21:29:43.017" Score="8" Body="&lt;p&gt;I might recommend the use of switch statements and white space along with LRE's suggestion of breaking this into multiple methods. It also looks like you have quite a bit of repeated code maybe try to break that out for sure it its own methods.&lt;/p&gt;&#xA;" OwnerUserId="20" LastActivityDate="2011-01-19T21:29:43.017" CommentCount="1" />
  <row Id="19" PostTypeId="2" ParentId="1" CreationDate="2011-01-19T21:32:29.907" Score="10" Body="&lt;p&gt;use an abstraction library like Pear MDB2 for your database connection. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;This abstracts all the connection logic away from your code, so should ever change your database (mysql to SQLite,etc) you won't have to change your code. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://pear.php.net/manual/en/package.database.mdb2.php&quot;&gt;http://pear.php.net/manual/en/package.database.mdb2.php&lt;/a&gt;&lt;/p&gt;&#xA;" OwnerUserId="65" LastEditorUserId="65" LastEditDate="2011-01-19T21:46:46.800" LastActivityDate="2011-01-19T21:46:46.800" CommentCount="2" />
  <row Id="22" PostTypeId="1" AcceptedAnswerId="30" CreationDate="2011-01-19T22:02:29.033" Score="15" ViewCount="1618" Body="&lt;p&gt;A while back, I reverse-engineered a checksum algorithm from an &lt;a href=&quot;http://en.wikipedia.org/wiki/Massively_multiplayer_online_game&quot; rel=&quot;nofollow&quot;&gt;MMO&lt;/a&gt; used to check the validity of an item that's linked to chat (similar to &lt;a href=&quot;http://en.wikipedia.org/wiki/World_of_Warcraft&quot; rel=&quot;nofollow&quot;&gt;&lt;em&gt;WoW&lt;/em&gt;&lt;/a&gt;). The idea is that if the checksum is invalid then the game client would ignore the link when clicked. Otherwise clicking on the item link in in-game chat would display the stat and attrib for that item.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;ushort16 CreateChecksum(const string &amp;amp;itemlink)&#xA;{&#xA;    stringstream parseitemlink(itemlink);&#xA;    uint32 hexform[ITEMLINKGROUPCOUNT] = {0};&#xA;    uint32 hexsum = 0;&#xA;&#xA;    //Parse itemLink string into hexform array&#xA;    for (int i = 0; i &amp;lt; ITEMLINKGROUPCOUNT; ++i)&#xA;        parseitemlink &amp;gt;&amp;gt; hex &amp;gt;&amp;gt; hexform[i];&#xA;&#xA;    //sum all the itemlink group together&#xA;    for (int i = 0; i &amp;lt; ITEMLINKGROUPCOUNT; ++i)&#xA;        hexsum += hexform[i];&#xA;&#xA;    for (int i = 0; i &amp;lt; ITEMLINKGROUPCOUNT; ++i)&#xA;    {&#xA;        uint32 ebx = hexform[i], edi = ebx * i;&#xA;&#xA;        //if loop iteration is odd store MSB 2-bytes.&#xA;        //Otherwise, store working hexgroup as is untouched&#xA;        if (i &amp;amp; 0x01)&#xA;            ebx = hexform[i] &amp;gt;&amp;gt; 16; // aka same as dividing hexform[i] by 65,536&#xA;&#xA;        // (hexform[i] / 65,536) + (hexform[i] * i) + hexsum -- for odd groups&#xA;        //  hexform[i] + (hexform[i] * i) + hexsum           -- for even groups&#xA;        ebx += edi + hexsum;&#xA;        hexsum = ebx ^ hexform[i];&#xA;    }&#xA;&#xA;    for (int i = 0; i &amp;lt; ITEMLINKGROUPCOUNT; ++i)&#xA;    {&#xA;        // the more familiar high-level form would be&#xA;        // hexform[i]^2 + hexform[i] * hexsum&#xA;        uint32 ecx = (hexform[i] + 1) * hexsum,&#xA;               eax = ecx * hexform[i];&#xA;&#xA;        eax &amp;gt;&amp;gt;= 16;&#xA;        eax += ecx;&#xA;        hexsum = eax ^ hexform[i];&#xA;    }&#xA;&#xA;    //return the lower 2-bytes of hexsum&#xA;    //as the final checksum&#xA;    return hexsum &amp;amp; 0xFFFF;&#xA;}//CreateChecksum&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The format of the &lt;code&gt;itemlink&lt;/code&gt; is comprised of a group of hexadecimal separated with a space in string format. It's passed into &lt;code&gt;main()&lt;/code&gt; as an argument when the program is run.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here's what an &lt;code&gt;itemlink&lt;/code&gt;'s hex string might look like:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;pre&gt;&lt;code&gt;const string EXAMPLELINK = &quot;36c6a 0 3f000a54 d0f1 0 0 0 0 0 0 20d0&quot;;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Are there any code smells or readability issues in this code segment? Can any part(s) of it be improved?&lt;/p&gt;&#xA;" OwnerUserId="71" LastEditorUserId="22222" LastEditDate="2015-09-17T20:13:37.807" LastActivityDate="2015-09-17T20:13:37.807" Title="Custom checksum algorithm" Tags="&lt;c++&gt;&lt;checksum&gt;" AnswerCount="4" CommentCount="0" />
  <row Id="24" PostTypeId="2" ParentId="2" CreationDate="2011-01-19T22:23:56.613" Score="5" Body="&lt;p&gt;g.d.d.c's solution is slightly redundant in that it checks numbers that are multiples of 3 and 5 twice.  I was wondering about optimizations to this, so this is slightly longer than a comment, but not really an answer in itself, as it totally relies on g.d.d.c's awesome answer as inspiration.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you add multiples to the valid list for the multiple &quot;3&quot; and then do another pass over the whole list (1-1000) for the multiple &quot;5&quot; then you do experience some redundancy.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The order in which you add them:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; add 3-multiples first&#xA; add 5 multiples second&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;will matter (albeit slightly) if you want to check if the number exists in the list or not.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;That is, if your algorithm is something like&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;add 3-multiples to the list&#xA;&#xA;add 5-multiples to the list if they don't collide&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;it will perform slightly worse than&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;add 5-multiples to the list&#xA;&#xA;add 3-multiples to the list if they don't collide&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;namely, because there are more 3-multiples than 5-multiples, and so you are doing more &quot;if they don't collide&quot; checks.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So, here are some thoughts to keep in mind, in terms of optimization:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;It would be best if we could iterate through the list once&lt;/li&gt;&#xA;&lt;li&gt;It would be best if we didn't check numbers that weren't multiples of 3 nor 5.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;One possible way is to notice the frequency of the multiples.  That is, notice that the LCM (least-common multiple) of 3 and 5 is 15:  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;3   6  9   12  15  18  21  24   27  30&#xA;               ||                   ||&#xA;  5     10     15     20     25     30&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Thus, you should want to, in the optimal case, want to use the frequency representation of multiples of 3 and 5 in the range (1,15) over and over until you reach 1000. (really 1005 which is divided by 15 evenly 67 times).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So, you want, for each iteration of this frequency representation:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;the numbers at: 3 5 6 9 10 12 15&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Your frequencies occur (I'm sorta making up the vocab for this, so please correct me if there are better math-y words) at starting indexes from &lt;strong&gt;0k + 1  to  67k&lt;/strong&gt; (1 to 1005) [technically 66k]&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And you want the numbers at positions &lt;em&gt;3, 5, 6, 9, 10, 12, and 15&lt;/em&gt; enumerating from the index.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Thus,&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for (freq_index = 0; freq_index &amp;lt; 66; ++freq_index) {&#xA;    valid.add(15*freq_index + 3);&#xA;    valid.add(15*freq_index + 5);&#xA;    valid.add(15*freq_index + 6);&#xA;    valid.add(15*freq_index + 9);&#xA;    valid.add(15*freq_index + 10);&#xA;    valid.add(15*freq_index + 12);&#xA;    valid.add(15*freq_index + 15); //also the first term of the next indexed range&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;and we have eliminated redundancy&lt;/p&gt;&#xA;&#xA;&lt;p&gt;=)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;hr&gt;&#xA;&lt;em&gt;Exercise for the astute / determined programmer:&lt;/em&gt;&lt;br&gt;&#xA;Write a function that takes three integers as arguments, &lt;em&gt;x y z&lt;/em&gt; and, without redundancy, finds all the multiples of &lt;em&gt;x&lt;/em&gt; and of &lt;em&gt;y&lt;/em&gt; in the range from 1 to &lt;em&gt;z&lt;/em&gt;.&lt;br&gt;&#xA;(basically a generalization of what I did above).&lt;/p&gt;&#xA;" OwnerUserId="31" LastActivityDate="2011-01-19T22:23:56.613" CommentCount="6" />
  <row Id="26" PostTypeId="2" ParentId="22" CreationDate="2011-01-19T22:28:41.897" Score="4" Body="&lt;p&gt;The only things I can see having problems are your acronym variable names i.e. (eax, ecx, ebx, and edi) don't explain what the variables are storing clearly for someone not experienced with doing checksums.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The other thing I can see for readability issues is your all lowercase variable names which are descriptive (ie parseitemlink) should be camelCased so I can tell the different words (ie parseItemLink).  That's the only thing I can think of readability wise.&lt;/p&gt;&#xA;" OwnerUserId="23" LastActivityDate="2011-01-19T22:28:41.897" CommentCount="0" />
  <row Id="28" PostTypeId="2" ParentId="12" CreationDate="2011-01-19T22:33:06.807" Score="3" Body="&lt;p&gt;I may be missing something here,&#xA;But to me it seems that you have a class that you pass a pre-built query into?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I am thinking would it not be beneficial to have a subquery built the same way as the top level queries?&lt;/p&gt;&#xA;" OwnerUserId="92" LastActivityDate="2011-01-19T22:33:06.807" CommentCount="3" />
  <row Id="29" PostTypeId="2" ParentId="9" CreationDate="2011-01-19T22:34:52.687" Score="57" Body="&lt;p&gt;This code...&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if (depth == 1)&#xA;{&#xA;    Canvas.SetTop(g1, 163);&#xA;}&#xA;else if (depth == 2)&#xA;{&#xA;    Canvas.SetTop(g1, 108);&#xA;}&#xA;else if (depth == 3)&#xA;{&#xA;    Canvas.SetTop(g1, 81);&#xA;}&#xA;else if (depth == 4)&#xA;{&#xA;    Canvas.SetTop(g1, 65);&#xA;}&#xA;else if (depth == 5)&#xA;{&#xA;    Canvas.SetTop(g1, 54);&#xA;}&#xA;else if (depth == 6)&#xA;{&#xA;    Canvas.SetTop(g1, 46);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Could be better implemented using an array...&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;int[] values = new [] { 0, 163, 108, 81, 65, 54, 46  }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Or Dictionary...&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var values = new Dictionary&amp;lt;int,int&amp;gt;() { { 1, 163 }, { 2, 108 }, { 3, 81 }, { 4, 65 }, { 5, 54 }, { 6, 46} };&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This way you could simple say&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Canvas.SetTop(g1, values[depth])&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="56" LastEditorUserId="56" LastEditDate="2011-01-19T22:51:30.363" LastActivityDate="2011-01-19T22:51:30.363" CommentCount="7" />
  <row Id="30" PostTypeId="2" ParentId="22" CreationDate="2011-01-19T22:35:29.030" Score="8" Body="&lt;p&gt;If you are using the standard library classes of the same name, I would give the following names the correct namespace qualifier: &lt;code&gt;std::string&lt;/code&gt;, &lt;code&gt;std::stringstream&lt;/code&gt;, &lt;code&gt;std::hex&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In C++, this works just as well, IMHO it's mildy more idiomatic.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;uint32 hexform[ITEMLINKGROUPCOUNT] = {};&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;ebx&lt;/code&gt;, &lt;code&gt;edi&lt;/code&gt;, &lt;code&gt;ecx&lt;/code&gt;, &lt;code&gt;eax&lt;/code&gt; are not good variable names, if you can give them more meaningful names, then do.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    uint32 ecx = (hexform[i] + 1) * hexsum,&#xA;           eax = ecx * hexform[i];&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Personally, I think this is clearer:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    uint32 ecx = (hexform[i] + 1) * hexsum;&#xA;    uint32 eax = ecx * hexform[i];&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The comment is really bad because it talks about &lt;code&gt;hexform[i]^2 + hexform[i] * hexsum&lt;/code&gt; whereas &lt;code&gt;ecx&lt;/code&gt; gets the value &lt;code&gt;hexform[i] * hexsum + hexsum&lt;/code&gt; and &lt;code&gt;eax&lt;/code&gt; gets the value &lt;code&gt;hexform[i]^2 * hexsum + hexform[i] * hexsum&lt;/code&gt;. I think the comment needs a pair of parentheses if the code is doing what you meant.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To be robust, you should check whether the parse worked.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;parseitemlink &amp;gt;&amp;gt; hex &amp;gt;&amp;gt; hexform[i];&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You can trivially combine the first two for loops as well.&lt;/p&gt;&#xA;" OwnerUserId="72" LastActivityDate="2011-01-19T22:35:29.030" CommentCount="3" />
  <row Id="32" PostTypeId="2" ParentId="7" CreationDate="2011-01-19T22:43:12.493" Score="47" Body="&lt;p&gt;Here's some superficial review. More for testing the site and some comment formatting than anything, but: do create main functions (helps us benchmarkers a lot) and do think that your module can be imported, so docstrings and local variables help. &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;# Finds...&#xA;###-^ Put this in a docstring&#xA;&#xA;def find_multiples():&#xA;    &quot;&quot;&quot;Finds sum of all multiples of 3 and 5 from 0 to 999 &quot;&quot;&quot;&#xA;###-^ This allows you to &quot;from x import find_multiples,  help(find_multiples)&quot;&#xA;    numbers = []&#xA;###-^ Avoid globals&#xA;    for i in xrange(1000):&#xA;###-^ Use xrange if Python 2.x, no need to start at 0 (it's the default)&#xA;       if not (i % 3) or not (i % 5):&#xA;###-^ Add spaces around operators, simplify&#xA;###-^ the boolean/numeric checks&#xA;           numbers.append(i)&#xA;###-^ Remove trailing ;&#xA;    return numbers&#xA;&#xA;###-^ Removed global&#xA;&#xA;def main():&#xA;###-^ Allows calling main many times, e.g. for benchmarking&#xA;    numbers = find_multiples()&#xA;    print sum(numbers)&#xA;&#xA;if __name__ == '__main__':&#xA;    main()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="90" LastEditorUserId="90" LastEditDate="2011-01-26T01:55:28.343" LastActivityDate="2011-01-26T01:55:28.343" CommentCount="4" CommunityOwnedDate="2011-01-20T11:23:27.997" />
  <row Id="36" PostTypeId="1" AcceptedAnswerId="74" CreationDate="2011-01-19T22:56:59.883" Score="15" ViewCount="1593" Body="&lt;p&gt;I'm generating CSV strings for various 3rd party utilities and this section of code gets repeated in many classes. Is there a better way to generate this string?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public override string CsvString()&#xA;{&#xA;    return (&#xA;        string.Format(&quot;\u0022{0}\u0022,\u0022{1}\u0022,\u0022{2}\u0022,\u0022{3}\u0022,\u0022{4}\u0022,\u0022{5}\u0022,\u0022{6}\u0022,\u0022{7}\u0022,\u0022{8}\u0022,\u0022{9}\u0022,\u0022{10}\u0022,\u0022{11}\u0022,\u0022{12}\u0022,\u0022{13}\u0022&quot;,&#xA;&#xA;        this.BlockType,         //  1, A_NAME&#xA;        this.Tag,               //  2, A_TAG&#xA;        this.Description,       //  3, A_DESC&#xA;        this.InitialScan,       //  4, A_ISCAN&#xA;        this.AutoManual,        //  5, A_SCAN&#xA;        this.ScanTime,          //  6, A_SCANT&#xA;        this.IoDevice,          //  7, A_IODV&#xA;        this.IoAddress,         //  8, A_IOAD&#xA;        this.InitialAmStatus,   //  9, A_IAM&#xA;        this.AlarmPriority,     // 10, A_PRI&#xA;        this.AlarmEnable,       // 11, A_ENAB&#xA;        this.EnableOutput,      // 12, A_EOUT&#xA;        this.HistDescription,   // 13, A_HIST_DESC&#xA;        this.SecurityArea1      // 14, A_SECURITYAREA1&#xA;    ));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="17" LastEditorUserId="26" LastEditDate="2011-01-19T23:11:07.243" LastActivityDate="2011-10-10T07:32:57.760" Title="Is there a better way to build my CSV output than String.Format()?" Tags="&lt;c#&gt;&lt;csv&gt;&lt;strings&gt;" AnswerCount="4" CommentCount="2" />
  <row Id="39" PostTypeId="2" ParentId="36" CreationDate="2011-01-19T23:10:42.423" Score="9" Body="&lt;p&gt;Use a &lt;code&gt;StringBuilder&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;sbuilder.AppendFormat(&quot;\u0022{0}\u0022,\u0022{1}\u0022,\u0022{2}\u0022,\u0022{3}\u0022,\u0022{4}\u0022,\u0022{5}\u0022,\u0022{6}\u0022,\u0022{7}\u0022,\u0022{8}\u0022,\u0022{9}\u0022,\u0022{10}\u0022,\u0022{11}\u0022,\u0022{12}\u0022,\u0022{13}\u0022&quot;,&#xA;    this.BlockType,         //  1, A_NAME&#xA;    this.Tag,               //  2, A_TAG&#xA;    this.Description,       //  3, A_DESC&#xA;    this.InitialScan,       //  4, A_ISCAN&#xA;    this.AutoManual,        //  5, A_SCAN&#xA;    this.ScanTime,          //  6, A_SCANT&#xA;    this.IoDevice,          //  7, A_IODV&#xA;    this.IoAddress,         //  8, A_IOAD&#xA;    this.InitialAmStatus,   //  9, A_IAM&#xA;    this.AlarmPriority,     // 10, A_PRI&#xA;    this.AlarmEnable,       // 11, A_ENAB&#xA;    this.EnableOutput,      // 12, A_EOUT&#xA;    this.HistDescription,   // 13, A_HIST_DESC&#xA;    this.SecurityArea1      // 14, A_SECURITYAREA1&#xA; ).AppendLine();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="26" LastActivityDate="2011-01-19T23:10:42.423" CommentCount="2" />
  <row Id="40" PostTypeId="2" ParentId="4" CreationDate="2011-01-19T23:12:28.693" Score="4" Body="&lt;p&gt;When it comes to Autoloaders, I would tend make it compatible with any of my projects, therefore I would always stay to the best coding standards such as Zend.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There is a proposal that states the layout of classes, directory structure, namespaces where autoloaders work very good.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The following describes the mandatory requirements that must be adhered to for autoloader interoperability.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;Mandatory:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;A fully-qualified namespace and class must have the following structure:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;\&amp;lt;Vendor Name&amp;gt;\(&amp;lt;Namespace&amp;gt;\)*&amp;lt;Class Name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;li&gt;Each namespace must have a top-level namespace (&quot;Vendor Name&quot;).&lt;/li&gt;&#xA;&lt;li&gt;Each namespace can have as many sub-namespaces as it wishes.&lt;/li&gt;&#xA;&lt;li&gt;Each namespace separator is converted to a &lt;code&gt;DIRECTORY_SEPARATOR&lt;/code&gt; when loading from the file system.&lt;/li&gt;&#xA;&lt;li&gt;Each &quot;&lt;em&gt;&quot; character in the CLASS NAME is converted to a &lt;code&gt;DIRECTORY_SEPARATOR&lt;/code&gt;. The &quot;&lt;/em&gt;&quot; character has no special meaning in the namespace.&lt;/li&gt;&#xA;&lt;li&gt;The fully-qualified namespace and class is suffixed with &quot;.php&quot; when loading from the file system.&lt;/li&gt;&#xA;&lt;li&gt;Alphabetic characters in vendor names, namespaces, and class names may be of any combination of lower case and upper case.&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Examples:&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;\Doctrine\Common\IsolatedClassLoader&lt;/code&gt; =&gt; &lt;code&gt;/path/to/project/lib/vendor/Doctrine/Common/IsolatedClassLoader.php&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;\Symfony\Core\Request&lt;/code&gt; =&gt; &lt;code&gt;/path/to/project/lib/vendor/Symfony/Core/Request.php&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;\Zend\Acl&lt;/code&gt; =&gt; &lt;code&gt;/path/to/project/lib/vendor/Zend/Acl.php&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;\Zend\Mail\Message&lt;/code&gt; =&gt; &lt;code&gt;/path/to/project/lib/vendor/Zend/Mail/Message.php&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Using the above to construct your autoloader will surely be migratable around your projects regarding weather you have namespaces or not.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://groups.google.com/group/php-standards/web/psr-0-final-proposal?pli=1&quot; rel=&quot;nofollow&quot;&gt;@Reference&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There is a very nice class that I use in around 6 projects, and I find that this is perfect and you should study and see what you can do with it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://gist.github.com/221634&quot; rel=&quot;nofollow&quot;&gt;Class Link&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;An example usage would be like so:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$classLoader = new SplClassLoader('Doctrine\Common', '/libs/doctrine');&#xA;$classLoader-&amp;gt;register();&#xA;&#xA;$classLoader = new SplClassLoader('Ircmexell\MyApplication', 'libs/internal');&#xA;$classLoader-&amp;gt;register();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="95" LastEditorUserId="22222" LastEditDate="2014-07-26T15:07:04.700" LastActivityDate="2014-07-26T15:07:04.700" CommentCount="0" />
  <row Id="41" PostTypeId="2" ParentId="1" CreationDate="2011-01-19T23:31:15.977" Score="8" Body="&lt;p&gt;I don't think it makes any difference in regards to connecting to the database within the construction or within a connect method, what i do think you need to change is those die commands.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;using die causes the script to halt and send 1 little message to the user, who would think this is rubbish, and never visit your site again :( :(&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What you should be doing is catching your errors, and redirecting to a static page where you can show a very nice message to the user, fully apologising for the technical issues your having.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can also have an box that says, Enter your email address and we will email you when were back on line, you get the idea.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;as for the code I would go down the lines of:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class Database&#xA;{&#xA;    public function __construct($autoconnect = false)&#xA;    {&#xA;        //Here you would 'globalize' your config and set it locally as a reference.&#xA;        if($autoconnect === true)&#xA;        {&#xA;             $this-&amp;gt;connect();&#xA;        }&#xA;    }&#xA;&#xA;    public function connect()&#xA;    {&#xA;        if($this-&amp;gt;connected() === false)&#xA;        {&#xA;             $result = $this-&amp;gt;driver-&amp;gt;sendCommand(&quot;connect&quot;);&#xA;             if($result === true)&#xA;             {&#xA;                  $this-&amp;gt;setConnectionState(&quot;active&quot;);&#xA;                  $this-&amp;gt;setConnectionResource($this-&amp;gt;driver-&amp;gt;sendCommand(&quot;get_resource&quot;));&#xA;             }else&#xA;             {&#xA;                 throw new DatabaseConnectionError($this-&amp;gt;driver-&amp;gt;sendCommand(&quot;getDriverError&quot;));&#xA;             }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This gives you more functionality in the long run as every action is decidable within your APP, nothing is auto fired on default.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;you can simple use try,catch blocks to maintain your error reporting.&lt;/p&gt;&#xA;" OwnerUserId="95" LastActivityDate="2011-01-19T23:31:15.977" CommentCount="3" />
  <row Id="45" PostTypeId="1" AcceptedAnswerId="3633" CreationDate="2011-01-20T00:10:13.883" Score="15" ViewCount="936" Body="&lt;p&gt;A few functions to let me manage TAGS files more easily. Typically, my projects contain at least one sub-folder. I got sick of manually updating, so I wrote this to help me update a single TAGS file per project (always in the projects' root directory).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Please share your thoughts (aside from &quot;Why are you using Emacs?&quot;, you're not likely to change my mind).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;One thing I've noticed that could trip me up is that it only tags files of one language (and if I had a project that had both Haskell and JS code, for example, I could tag one or the other). I would particularly appreciate advice on better ways to write find-parent-tags than just building each path from available sub-strings.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(defun create-tag-table ()&#xA;  &quot;This will recursively tag all files of a given type starting with the current buffers' directory. &#xA;   It overwrites the old TAGS file, if one exists. &#xA;   Haskell files assume you've installed `hasktags`.&quot;&#xA;  (interactive)&#xA;  (let ((file-type (get-taggable-extension))&#xA;        (cur-dir default-directory)&#xA;        (tags-file (find-parent-tags default-directory)))&#xA;    (if (equalp file-type &quot;hs&quot;)&#xA;        (shell-command &quot;hasktags --ignore-close-implementation --etags `find . -type f -name \&quot;*.*hs\&quot;`&quot;)&#xA;          (shell-command (concat &quot;find -name \&quot;*.&quot; file-type &quot;\&quot; -print | etags -&quot;)))))&#xA;&#xA;(defun find-parent-tags (dir)&#xA;  &quot;Traverses the directory tree up to /home/[user]/ or / whichever comes first. &#xA;   Returns either nil or the directory containing the first TAGS file it finds.&quot;&#xA;  (interactive (list default-directory))&#xA;  (find-parent-tags-rec (build-tag-paths dir)))&#xA;&#xA;(defun find-parent-tags-rec (list-of-filepath)&#xA;  (cond ((null list-of-filepath) nil)&#xA;        ((file-exists-p (car list-of-filepath)) (car list-of-filepath))&#xA;        (t (find-parent-tags-rec (cdr list-of-filepath)))))&#xA;&#xA;(defun build-tag-paths (dir-string)&#xA;  (build-tag-paths-rec (remove-if #'empty-string? (split-string dir-string &quot;/&quot;)) (list &quot;/&quot;)))&#xA;&#xA;(defun build-tag-paths-rec (steps acc)&#xA;  (if (null steps) &#xA;      (mapcar (lambda (p) (concat p &quot;TAGS&quot;)) acc)&#xA;    (build-tag-paths-rec (cdr steps)&#xA;             (cons (concat (car acc) (car steps) &quot;/&quot;) acc))))&#xA;&#xA;(defun get-taggable-extension ()&#xA;  &quot;Either returns the current file's extension (if it's appropriate) or asks the user to pick one with completion&quot;&#xA;  (let ((b-name (buffer-file-name (current-buffer)))&#xA;        (valid-exts (list &quot;lisp&quot; &quot;py&quot; &quot;c&quot; &quot;hs&quot; &quot;rb&quot; &quot;ss&quot; &quot;scm&quot; &quot;js&quot; &quot;erl&quot; &quot;el&quot;)))&#xA;    (string-match &quot;\\.\\(.*?\\)$&quot; b-name)&#xA;    (let ((current-filetype (match-string 1 b-name)))&#xA;      (if (member current-filetype valid-exts)&#xA;          current-filetype&#xA;        (completing-read &quot;File type: &quot; valid-exts nil 'confirm)))))&#xA;&#xA;(defun empty-string? (s) (equalp s &quot;&quot;))&#xA;&#xA;(provide 'tagariffic)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="104" LastEditorUserId="104" LastEditDate="2011-01-20T15:08:12.873" LastActivityDate="2011-07-25T23:26:27.180" Title="Emacs Etags Shortcut Functions" Tags="&lt;elisp&gt;&lt;emacs&gt;" AnswerCount="1" CommentCount="0" FavoriteCount="3" />
  <row Id="46" PostTypeId="2" ParentId="9" CreationDate="2011-01-20T00:18:27.980" Score="3" Body="&lt;p&gt;Break your code into its own methods definitely, there are other ways, but that will probably be the easiest and less time consuming way to make it easier read and debug down the track for a start.&lt;/p&gt;&#xA;" OwnerUserId="108" LastActivityDate="2011-01-20T00:18:27.980" CommentCount="0" />
  <row Id="47" PostTypeId="1" AcceptedAnswerId="62" CreationDate="2011-01-20T00:42:35.173" Score="12" ViewCount="292" Body="&lt;p&gt;This shows a test case for an old caching library that I use for a project. It features simple save/load/delete functions (sadly static calls) but what I want to focus on is the test code written for this class.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In my opinion the unit tests for a class should show how all functions in the class work and what to &lt;em&gt;expect&lt;/em&gt; from that class.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Recently we got this great change to show off code, so I'd like to ask you if you can read that test code, understand what the class might do and how you would improve upon it.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?php&#xA;&#xA;class DatenCacheTest extends PHPUnit_Framework_TestCase {&#xA;&#xA;    function testNothingFound() {&#xA;        $this-&amp;gt;assertSame(false, DatenCache::load(&quot;testNotHereCache&quot;));&#xA;    }&#xA;&#xA;    function testSaveLoadSimple() {&#xA;        $sDatenSimple = &quot;testStringSaveLoadSimple&quot;;&#xA;        $sDatenSimpleParam = &quot;testStringParam&quot;;&#xA;        $sDatenSimpleParam2 = &quot;testStringParam2&quot;;&#xA;        $sDatenSimpleParam3 = &quot;&quot;;&#xA;        $sDatenSimpleParam4 = 0;&#xA;&#xA;        $this-&amp;gt;assertSame(true, DatenCache::save(&quot;testCacheSimple&quot;, false, $sDatenSimple));&#xA;        $this-&amp;gt;assertSame($sDatenSimple, DatenCache::load(&quot;testCacheSimple&quot;, false));&#xA;&#xA;        $this-&amp;gt;assertSame(true, DatenCache::save(&quot;testCacheLinearParam&quot;, &quot;string&quot;, $sDatenSimpleParam));&#xA;        $this-&amp;gt;assertSame($sDatenSimpleParam, DatenCache::load(&quot;testCacheLinearParam&quot;, &quot;string&quot;));&#xA;&#xA;        $this-&amp;gt;assertSame(true, DatenCache::save(&quot;testCacheLinearParam&quot;, 5, $sDatenSimpleParam2));&#xA;        $this-&amp;gt;assertSame($sDatenSimpleParam2, DatenCache::load(&quot;testCacheLinearParam&quot;, 5));&#xA;&#xA;        $this-&amp;gt;assertSame(true, DatenCache::save(&quot;testCacheBoundStringParam&quot;, false, $sDatenSimpleParam3)); &#xA;        $this-&amp;gt;assertSame($sDatenSimpleParam3, DatenCache::load(&quot;testCacheBoundStringParam&quot;, false));&#xA;&#xA;        $this-&amp;gt;assertSame(true, DatenCache::save(&quot;testCacheBoundIntParam&quot;, false, $sDatenSimpleParam4));&#xA;        $this-&amp;gt;assertSame($sDatenSimpleParam4, DatenCache::load(&quot;testCacheBoundIntParam&quot;, false));&#xA;&#xA;        $oObj = new stdClass();&#xA;        $oObj-&amp;gt;bob = 2;&#xA;        $this-&amp;gt;assertSame(true,   DatenCache::save(&quot;testCacheBoundObjParam&quot;, $oObj, &quot;zwei&quot;));&#xA;        $this-&amp;gt;assertSame(&quot;zwei&quot;, DatenCache::load(&quot;testCacheBoundObjParam&quot;, $oObj));&#xA;   }&#xA;&#xA;    function testSaveLoadArray() {&#xA;        $aDaten = array(&quot;da&quot; =&amp;gt; &quot;ten&quot;, array(&quot;ten&quot; =&amp;gt; &quot;da&quot;), &quot;Striche&quot; =&amp;gt; &quot;' \&quot;;s:5:&quot;, &quot;h''uh&quot; =&amp;gt; &quot;mep&quot;, &quot;\\mep\\&quot; =&amp;gt; &quot;^^&quot;, &quot;Zeilenumbruch&quot; =&amp;gt; &quot;\n&quot;, &quot;Zeug&quot; =&amp;gt; &quot;::}}{:&quot;, &quot;'&quot; =&amp;gt; '&quot;', '&quot;' =&amp;gt; &quot;'&quot;);&#xA;&#xA;        $this-&amp;gt;assertSame(true, DatenCache::save(&quot;testCacheArray&quot;, false, $aDaten));&#xA;        $this-&amp;gt;assertSame($aDaten, DatenCache::load(&quot;testCacheArray&quot;, false));&#xA;    }&#xA;&#xA;    function testSaveLoadExpired() {&#xA;        $this-&amp;gt;assertSame(true,  DatenCache::save(&quot;testCacheExpired&quot;, false, &quot;testStringLoadExpired&quot;, &quot;-1 seconds&quot;));&#xA;        $this-&amp;gt;assertSame(false, DatenCache::load(&quot;testCacheExpired&quot;, false));&#xA;    }&#xA;&#xA;    function testSaveLoadObject() {&#xA;        $oObj = new stdClass();&#xA;        $oObj-&amp;gt;bob = 2;&#xA;        $this-&amp;gt;assertSame(true, DatenCache::save(&quot;testCacheBoundIntParam&quot;, false, $oObj));&#xA;&#xA;        $oNewObj = DatenCache::load(&quot;testCacheBoundIntParam&quot;, false);&#xA;        $this-&amp;gt;assertEquals($oObj, $oNewObj);&#xA;        $this-&amp;gt;assertSame($oObj-&amp;gt;bob, $oNewObj-&amp;gt;bob);&#xA;&#xA;    }&#xA;&#xA;    function testSaveLoadComplexParam() {&#xA;        $aKonfigEins  = array(DatenCache::ANLAGEN_ID() =&amp;gt; 1, DatenCache::SESSION_ID() =&amp;gt; &quot;id1&quot;);&#xA;        $aKonfigZwei  = array(DatenCache::ANLAGEN_ID() =&amp;gt; 1, DatenCache::SESSION_ID() =&amp;gt; &quot;id2&quot;);&#xA;        $aKonfigDrei  = array(DatenCache::ANLAGEN_ID() =&amp;gt; 1, DatenCache::SESSION_ID() =&amp;gt; &quot;id3&quot;);&#xA;        $aKonfigVier  = array(DatenCache::ANLAGEN_ID() =&amp;gt; 1);&#xA;        $aKonfigFuenf = array(DatenCache::SESSION_ID() =&amp;gt; &quot;id3&quot;);&#xA;        $aKonfigSechs = array(DatenCache::ANLAGEN_ID() =&amp;gt; 1, DatenCache::SESSION_ID() =&amp;gt; &quot;id3&quot;, DatenCache::PERSON_ID() =&amp;gt; 1);&#xA;&#xA;        $this-&amp;gt;assertSame(true, DatenCache::save(&quot;testCacheComplexParam&quot;, $aKonfigEins, &quot;v1&quot;));&#xA;        $this-&amp;gt;assertSame(&quot;v1&quot;, DatenCache::load(&quot;testCacheComplexParam&quot;, $aKonfigEins));&#xA;        $this-&amp;gt;assertSame(true, DatenCache::save(&quot;testCacheComplexParam&quot;, $aKonfigZwei, &quot;v2&quot;));&#xA;        $this-&amp;gt;assertSame(&quot;v2&quot;, DatenCache::load(&quot;testCacheComplexParam&quot;, $aKonfigZwei));&#xA;&#xA;        $this-&amp;gt;assertSame(false, DatenCache::load(&quot;testCacheComplexParam&quot;, $aKonfigDrei));&#xA;        $this-&amp;gt;assertSame(false, DatenCache::load(&quot;testCacheComplexParam&quot;, $aKonfigVier));&#xA;        $this-&amp;gt;assertSame(false, DatenCache::load(&quot;testCacheComplexParam&quot;, $aKonfigFuenf));&#xA;        $this-&amp;gt;assertSame(false, DatenCache::load(&quot;testCacheComplexParam&quot;, $aKonfigSechs));&#xA;&#xA;    }&#xA;&#xA;    function testInvalidate() {&#xA;        $this-&amp;gt;assertSame(true, DatenCache::save(&quot;testCacheSimple&quot;, false, &quot;testStringInvalidate&quot;));&#xA;        DatenCache::invalidate(&quot;testCacheSimple&quot;);&#xA;        $this-&amp;gt;assertSame(false, DatenCache::load(&quot;testCacheSimple&quot;, false));&#xA;    }&#xA;&#xA;    function testInvalidateWithParams() {&#xA;        $sTestStringEins = &quot;testStringInvalidateWithParams&quot;;&#xA;        $sTestStringZwei = &quot;testStringInvalidateWithParamsZwei&quot;;&#xA;        $aKonfigEins = array(DatenCache::ANLAGEN_ID() =&amp;gt; 1, &quot;Pony&quot; =&amp;gt; false);&#xA;        $aKonfigZwei = array(DatenCache::ANLAGEN_ID() =&amp;gt; 1, &quot;Pony&quot; =&amp;gt; true);&#xA;&#xA;        $this-&amp;gt;assertSame(true, DatenCache::save(&quot;testCacheInvalidateWithParams&quot;, $aKonfigEins, $sTestStringEins));&#xA;        $this-&amp;gt;assertSame(true, DatenCache::save(&quot;testCacheInvalidateWithParams&quot;, $aKonfigZwei, $sTestStringEins));&#xA;        DatenCache::invalidate(&quot;testCacheInvalidateWithParams&quot;, $aKonfigEins);&#xA;        $this-&amp;gt;assertSame(false, DatenCache::load(&quot;testCacheInvalidateWithParams&quot;, $aKonfigEins));&#xA;        $this-&amp;gt;assertSame($sTestStringEins, DatenCache::load(&quot;testCacheInvalidateWithParams&quot;, $aKonfigZwei));&#xA;&#xA;&#xA;        $aKonfigDrei = array(DatenCache::ANLAGEN_ID() =&amp;gt; 1, DatenCache::BENUTZER_ID() =&amp;gt; 123, &quot;bob&quot; =&amp;gt; &quot;please&quot;);&#xA;        $aKonfigVier = array(DatenCache::ANLAGEN_ID() =&amp;gt; 2, &quot;Pony&quot; =&amp;gt; true, &quot;bob&quot; =&amp;gt; &quot;please&quot;);&#xA;        $aPartEins   = array(DatenCache::ANLAGEN_ID() =&amp;gt; 1);&#xA;        $aPartZwei   = array(DatenCache::BENUTZER_ID() =&amp;gt; 123);&#xA;        $aPartDrei   = array(&quot;bob&quot;  =&amp;gt; &quot;please&quot;);&#xA;&#xA;        $this-&amp;gt;assertSame(true,  DatenCache::save(&quot;testCacheInvalidateWithParams&quot;, $aKonfigDrei, $sTestStringZwei.&quot;1&quot;));&#xA;        DatenCache::invalidate(&quot;testCacheInvalidateWithParams&quot;, $aPartEins);&#xA;        $this-&amp;gt;assertSame(false, DatenCache::load(&quot;testCacheInvalidateWithParams&quot;, $aKonfigDrei));&#xA;&#xA;        $this-&amp;gt;assertSame(true,  DatenCache::save(&quot;testCacheInvalidateWithParams&quot;, $aKonfigDrei, $sTestStringZwei.&quot;2&quot;));      &#xA;        DatenCache::invalidate(&quot;testCacheInvalidateWithParams&quot;, $aPartZwei);&#xA;        $this-&amp;gt;assertSame(false, DatenCache::load(&quot;testCacheInvalidateWithParams&quot;, $aKonfigDrei));&#xA;&#xA;        $this-&amp;gt;assertSame(true,  DatenCache::save(&quot;testCacheInvalidateWithParams&quot;, $aKonfigDrei, $sTestStringZwei.&quot;3&quot;));&#xA;        DatenCache::invalidate(&quot;testCacheInvalidateWithParams&quot;, $aPartDrei);&#xA;        $this-&amp;gt;assertSame(false, DatenCache::load(&quot;testCacheInvalidateWithParams&quot;, $aKonfigDrei));&#xA;&#xA;&#xA;&#xA;        $this-&amp;gt;assertSame(true,  DatenCache::save(&quot;testCacheInvalidateWithParams&quot;, $aKonfigEins, $sTestStringEins));&#xA;        $this-&amp;gt;assertSame(true,  DatenCache::save(&quot;testCacheInvalidateWithParams&quot;, $aKonfigZwei, $sTestStringEins));&#xA;        $this-&amp;gt;assertSame(true,  DatenCache::save(&quot;testCacheInvalidateWithParams&quot;, $aKonfigDrei, $sTestStringEins));&#xA;        DatenCache::invalidate(&quot;testCacheInvalidateWithParams&quot;, array(DatenCache::ANLAGEN_ID() =&amp;gt; 1));&#xA;        $this-&amp;gt;assertSame(false, DatenCache::load(&quot;testCacheInvalidateWithParams&quot;, $aKonfigEins));&#xA;        $this-&amp;gt;assertSame(false, DatenCache::load(&quot;testCacheInvalidateWithParams&quot;, $aKonfigZwei));&#xA;        $this-&amp;gt;assertSame(false, DatenCache::load(&quot;testCacheInvalidateWithParams&quot;, $aKonfigDrei));&#xA;&#xA;        $this-&amp;gt;assertSame(true,  DatenCache::save(&quot;testCacheInvalidateWithParams&quot;, $aKonfigEins, $sTestStringEins));&#xA;        $this-&amp;gt;assertSame(true,  DatenCache::save(&quot;testCacheInvalidateWithParams&quot;, $aKonfigVier, $sTestStringEins));&#xA;        DatenCache::invalidate(&quot;testCacheInvalidateWithParams&quot;, array(DatenCache::ANLAGEN_ID() =&amp;gt; 1));&#xA;        $this-&amp;gt;assertSame(false, DatenCache::load(&quot;testCacheInvalidateWithParams&quot;, $aKonfigEins));&#xA;        $this-&amp;gt;assertSame($sTestStringEins, DatenCache::load(&quot;testCacheInvalidateWithParams&quot;, $aKonfigVier));&#xA;&#xA;    }&#xA;&#xA;    function testCleanup() {&#xA;        $this-&amp;gt;assertSame(true, DatenCache::save(&quot;testCacheSimple&quot;,       false, &quot;testString&quot;, &quot;-5 seconds&quot;));&#xA;        $this-&amp;gt;assertSame(true, DatenCache::save(&quot;testCacheSimpleBleibt&quot;, false, &quot;testString&quot;, &quot;+30 seconds&quot;));&#xA;        DatenCache::cleanup();&#xA;        $this-&amp;gt;assertSame(&quot;testString&quot;, DatenCache::load(&quot;testCacheSimpleBleibt&quot;, false));&#xA;        $this-&amp;gt;assertSame(false, DatenCache::load(&quot;testCacheSimple&quot;, false));&#xA;        // Direkt auf der DB Prüfen ob der Datensatz wiklich gelöscht wurde und nicht nur ausgelaufen ist&#xA;        $this-&amp;gt;assertSame(&#xA;            array(),&#xA;            McDb::getConnection(DB_MC_CACHES)-&amp;gt;getRow(&#xA;                &quot;SELECT * FROM mc_caches.T_DATEN_CACHE WHERE PARAMETER = ? AND VALUE = ?&quot;, &quot;NAME&quot;, &quot;testCacheSimple&quot;&#xA;            )&#xA;        );&#xA;&#xA;    }&#xA;&#xA;    function testCleanupWithParam() {&#xA;        $aKonfig = array(DatenCache::ANLAGEN_ID() =&amp;gt; 1);&#xA;        $this-&amp;gt;assertSame(true, DatenCache::save(&quot;testCacheSimple&quot;, $aKonfig, &quot;testString&quot;, &quot;+120 seconds&quot;));&#xA;        DatenCache::cleanup();&#xA;        $this-&amp;gt;assertSame(&quot;testString&quot;, DatenCache::load(&quot;testCacheSimple&quot;, $aKonfig));&#xA;    }&#xA;&#xA;    function testInvalidateByParam() {&#xA;        $mValue1 = 1;&#xA;        $mValue2 = 2;&#xA;        $aKonfigEins = array(DatenCache::ANLAGEN_ID() =&amp;gt; $mValue1);&#xA;        $aKonfigZwei = array(DatenCache::ANLAGEN_ID() =&amp;gt; $mValue2);&#xA;&#xA;        $this-&amp;gt;assertSame(true, DatenCache::save(&quot;testCacheInvalidateByParam&quot;,  $aKonfigEins, &quot;testString&quot;));&#xA;        $this-&amp;gt;assertSame(true, DatenCache::save(&quot;testCacheInvalidateByParam2&quot;, $aKonfigZwei, &quot;testString2&quot;));&#xA;&#xA;        DatenCache::invalidateByParam(DatenCache::ANLAGEN_ID());&#xA;&#xA;        $this-&amp;gt;assertSame(false, DatenCache::load(&quot;testCacheInvalidateByParam&quot;,  $aKonfigEins));&#xA;        $this-&amp;gt;assertSame(false, DatenCache::load(&quot;testCacheInvalidateByParam2&quot;, $aKonfigZwei));&#xA;&#xA;&#xA;        $this-&amp;gt;assertSame(true, DatenCache::save(&quot;testCacheSimple&quot;,  $aKonfigEins, &quot;testString&quot;));&#xA;        $this-&amp;gt;assertSame(true, DatenCache::save(&quot;testCacheSimple2&quot;, $aKonfigZwei, &quot;testString2&quot;));&#xA;&#xA;        DatenCache::invalidateByParam(DatenCache::ANLAGEN_ID(), $mValue1);&#xA;&#xA;        $this-&amp;gt;assertSame(false, DatenCache::load(&quot;testCacheSimple&quot;,  $aKonfigEins));&#xA;        $this-&amp;gt;assertSame(&quot;testString2&quot;, DatenCache::load(&quot;testCacheSimple2&quot;, $aKonfigZwei));&#xA;    }&#xA;&#xA;    function testInvalidateByParamLike() {&#xA;        $mValue1 = &quot;I wan't a Pony&quot;;&#xA;        $mValue2 = &quot;No Pony for you !&quot;;&#xA;        $mValue3 = &quot;xxx&quot;;&#xA;&#xA;        $this-&amp;gt;assertSame(true, DatenCache::save(&quot;PonyCache&quot;, array(&quot;PonyParam&quot; =&amp;gt; $mValue1), &quot;test1&quot;));&#xA;        $this-&amp;gt;assertSame(true, DatenCache::save(&quot;PonyCache&quot;, array(&quot;PonyParam&quot; =&amp;gt; $mValue2), &quot;test2&quot;));&#xA;        $this-&amp;gt;assertSame(true, DatenCache::save(&quot;PonyCache&quot;, array(&quot;PonyParam&quot; =&amp;gt; $mValue3), &quot;test3&quot;));&#xA;&#xA;        DatenCache::invalidateByParam(&quot;PonyParam&quot;, &quot;%Pony%&quot;, true);&#xA;&#xA;        $this-&amp;gt;assertSame(false,   DatenCache::load(&quot;PonyCache&quot;, array(&quot;PonyParam&quot; =&amp;gt; $mValue1)));&#xA;        $this-&amp;gt;assertSame(false,   DatenCache::load(&quot;PonyCache&quot;, array(&quot;PonyParam&quot; =&amp;gt; $mValue2)));&#xA;        $this-&amp;gt;assertSame(&quot;test3&quot;, DatenCache::load(&quot;PonyCache&quot;, array(&quot;PonyParam&quot; =&amp;gt; $mValue3)));&#xA;    }&#xA;&#xA;    /**&#xA;     * @expectedException PHPUnit_Framework_Error&#xA;     */&#xA;    function testInvalidSaveTime() {&#xA;        $this-&amp;gt;assertSame(false, DatenCache::save(&quot;testFail&quot;, null, &quot;test1&quot;, &quot;invalidStrtotime&quot;));&#xA;    }&#xA;&#xA;    function testInvalidSaveTimeReturn() {&#xA;        $this-&amp;gt;assertSame(false, @DatenCache::save(&quot;testFail&quot;, null, &quot;test1&quot;, &quot;invalidStrtotime&quot;));&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="113" LastEditorUserId="22222" LastEditDate="2015-04-21T00:34:36.883" LastActivityDate="2015-04-21T00:34:36.883" Title="Test case for a caching library" Tags="&lt;php&gt;&lt;unit-testing&gt;&lt;cache&gt;" AnswerCount="4" CommentCount="1" />
  <row Id="48" PostTypeId="1" AcceptedAnswerId="289" CreationDate="2011-01-20T00:51:36.533" Score="5" ViewCount="1218" Body="&lt;p&gt;I am currently developing a custom CMS being built on top of Codeigniter and was wondering if you can spot any flaws in my page fetching model code. The page fetching model is not entirely complete but the main functionality for retrieving a page is done, as well as retrieving modules assigned to a page (a module is really just a widget).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Can this model be better in some parts, perhaps in relation to the joins I am doing? although not really joins, but multiple queries to pull out bits of related info the pages like modules and media.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?php&#xA;&#xA;  class Mpages extends CI_Model {&#xA;&#xA;      public function __construct()&#xA;      {&#xA;          parent::__construct();&#xA;      }&#xA;&#xA;      public function fetch_page($page_slug = 'home') &#xA;      {&#xA;          $db = $this-&amp;gt;db;&#xA;&#xA;          $query = &#xA;            $db&#xA;               -&amp;gt;where('page_status', 1)&#xA;               -&amp;gt;where('page_slug', strtolower($page_slug))&#xA;               -&amp;gt;get('pages')&#xA;               -&amp;gt;result_array();&#xA;&#xA;          $page_id = $query[0]['id'];&#xA;&#xA;          $query['modules'] = &#xA;            $db&#xA;                -&amp;gt;select('modules.module_name, modules.module_slug, modules.id moduleid')&#xA;                -&amp;gt;where('page_id', $page_id)&#xA;                -&amp;gt;join('pages_modules lpm', 'moduleid = lpm.module_id')&#xA;                -&amp;gt;order_by('module_order', 'asc')&#xA;                -&amp;gt;get('modules')&#xA;                -&amp;gt;result_array();&#xA;&#xA;          /*$query['media'] = &#xA;            $db&#xA;                -&amp;gt;select('lucifer_media.media_file_name, lucifer_media.media_file_extension, lucifer_media.media_directory')&#xA;                -&amp;gt;join('lucifer_pages_media', 'lucifer_pages_media.page_id = '.$page_id.'')&#xA;                -&amp;gt;get('lucifer_media')&#xA;                -&amp;gt;result_array();*/&#xA;&#xA;          if ($query) {&#xA;&#xA;            return $query;&#xA;&#xA;          } else {&#xA;            return false;&#xA;          }&#xA;      }&#xA;&#xA;      public function fetch_navigation()&#xA;      {&#xA;        $result = $this-&amp;gt;db-&amp;gt;order_by(&quot;nav_order&quot;, &quot;asc&quot;)-&amp;gt;where('published', 1)-&amp;gt;get('navigation')-&amp;gt;result_array();&#xA;        return $result;&#xA;      }&#xA;&#xA;      public function fetch_layout($id)&#xA;      {&#xA;&#xA;          $result = $this-&amp;gt;db-&amp;gt;where('id', $id)-&amp;gt;get('layouts')-&amp;gt;result_array();&#xA;&#xA;          return $result[0];&#xA;&#xA;      }&#xA;&#xA;  }&#xA;&#xA;?&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="108" LastActivityDate="2011-01-28T20:36:54.077" Title="Critique My Codeigniter Custom CMS Pages Model" Tags="&lt;php&gt;&lt;codeigniter&gt;&lt;mvc&gt;" AnswerCount="2" CommentCount="0" />
  <row Id="49" PostTypeId="1" CreationDate="2011-01-20T00:52:25.113" Score="5" ViewCount="746" Body="&lt;p&gt;Here's my &lt;code&gt;bootstrap.php&lt;/code&gt; for my PHP/MySQL/Doctrine app.  It's my first PHP app so I'm interested in learning from the experience of others how this could be improved - security-wise, performance-wise, or otherwise.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;//-------------------------------------------------------------------------&#xA;// Define global constants&#xA;define('ROOT_PATH', dirname(__FILE__) . '/');&#xA;define('URL_BASE', 'http://localhost/myapp/public/');&#xA;define('LIB_PATH', 'C:\\wamp\\www\\lib\\');&#xA;define('OPENID_PATH', 'C:\\wamp\www\\lib\\lightopenid.git\\openid.php');&#xA;&#xA;//-------------------------------------------------------------------------&#xA;// Bootstrap Doctrine.php, register autoloader, specify&#xA;// configuration attributes and load models.&#xA;require_once(LIB_PATH . 'doctrine12/lib/Doctrine.php');&#xA;spl_autoload_register(array('Doctrine', 'autoload'));&#xA;$manager = Doctrine_Manager::getInstance();&#xA;&#xA;//-------------------------------------------------------------------------&#xA;// Define database connection&#xA;$dsn = 'mysql:dbname=mydb;host=127.0.0.1';&#xA;$user = 'xxx';&#xA;$password = 'yyy';&#xA;$dbh = new PDO($dsn, $user, $password);&#xA;$conn = Doctrine_Manager::connection($dbh);&#xA;&#xA;//-------------------------------------------------------------------------&#xA;// Set defaults&#xA;$manager-&amp;gt;setAttribute(Doctrine::ATTR_DEFAULT_COLUMN_OPTIONS,&#xA;  array('type' =&amp;gt; 'string', 'length' =&amp;gt; 255, 'notnull' =&amp;gt; true));&#xA;$conn-&amp;gt;setAttribute(Doctrine_Core::ATTR_QUOTE_IDENTIFIER, true);&#xA;$manager-&amp;gt;setAttribute(Doctrine_Core::ATTR_AUTO_ACCESSOR_OVERRIDE, true);&#xA;// Don't load a model until it's needed (causes problems when this is on)&#xA;//$manager-&amp;gt;setAttribute(Doctrine_Core::ATTR_MODEL_LOADING, Doctrine_Core::MODEL_LOADING_CONSERVATIVE);&#xA;&#xA;//-------------------------------------------------------------------------&#xA;// Import model objects&#xA;Doctrine_Core::loadModels(ROOT_PATH . 'app/models/generated'); // have to load base classes first&#xA;Doctrine_Core::loadModels(ROOT_PATH . 'app/models');&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="26" LastActivityDate="2013-07-24T22:31:15.293" Title="PHP/Doctrine bootstrap for review" Tags="&lt;php&gt;&lt;mysql&gt;&lt;doctrine&gt;" AnswerCount="2" CommentCount="2" FavoriteCount="0" />
  <row Id="50" PostTypeId="1" AcceptedAnswerId="98" CreationDate="2011-01-20T00:54:38.853" Score="15" ViewCount="1495" Body="&lt;p&gt;I'm making a &quot;guess that tune&quot; game in Visual Basic 6 that is supposed to play each song in a random order:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;' from frmGuessGame.frm&#xA;Private Sub Swap(ByRef Value1 As Variant, ByRef Value2 As Variant)&#xA;Dim Temporary As Variant&#xA;Temporary = Value1&#xA;Value1 = Value2&#xA;Value2 = Temporary&#xA;End Sub&#xA;&#xA;Private Sub ShuffleList()&#xA;Dim LoopCtr As Integer, SwapWith As Integer&#xA;For LoopCtr = LBound(InnerPlaylist) To UBound(InnerPlaylist)&#xA;SwapWith = (Rnd * (UBound(InnerPlaylist) - LBound(InnerPlaylist))) + LBound(InnerPlaylist)&#xA;Swap InnerPlaylist(LoopCtr), InnerPlaylist(SwapWith)&#xA;Next&#xA;End Sub&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;My initialization function does include the &lt;code&gt;Randomize&lt;/code&gt; statement, so it should be a good, even shuffle.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;' from mdiMain.frm&#xA;Private Sub MDIForm_Load()&#xA;'initialize pseudo-random number generator&#xA;Randomize&#xA;frmMusiguess.Show&#xA;frmSplash.Show&#xA;End Sub&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I'm not sure, however, that this is the best way to do it. Am I on the right track?&lt;/p&gt;&#xA;" OwnerUserId="115" LastEditorUserId="22222" LastEditDate="2016-12-02T04:20:41.693" LastActivityDate="2016-12-02T04:20:41.693" Title="Shuffling algorithm for a &quot;guess that tune&quot; game" Tags="&lt;algorithm&gt;&lt;vb6&gt;&lt;random&gt;&lt;shuffle&gt;" AnswerCount="3" CommentCount="1" />
  <row Id="54" PostTypeId="2" ParentId="47" CreationDate="2011-01-20T01:29:45.003" Score="3" Body="&lt;p&gt;I lack the syntax knowledge to say I understand the class. I can say reading it is a bit hard due to long lines and the fact that the dominant patterns are repetitive method/variable names. Test names are descriptive enough &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Maybe if you could extract methods like &lt;code&gt;DatenCache::load&lt;/code&gt; to &lt;code&gt;Dload&lt;/code&gt; and &lt;code&gt;$this-&amp;gt;assertSame&lt;/code&gt; to &lt;code&gt;aSame&lt;/code&gt; it would get less busy. Or make an utility function, since you're asserting equality on booleans (so &lt;code&gt;assertTrue&lt;/code&gt; and &lt;code&gt;assertFalse&lt;/code&gt; could make it clearer). Where possible, constructing more arrays outside the calls could also help. &lt;/p&gt;&#xA;" OwnerUserId="90" LastActivityDate="2011-01-20T01:29:45.003" CommentCount="0" />
  <row Id="55" PostTypeId="2" ParentId="49" CreationDate="2011-01-20T01:48:02.827" Score="6" Body="&lt;p&gt;Here are a few lines that might be useful to add if you would like to use these options:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/**&#xA; * Needed for SoftDelete to work&#xA; */&#xA;$manager-&amp;gt;setAttribute(Doctrine::ATTR_USE_DQL_CALLBACKS, true);&#xA;&#xA;/**&#xA; * Tell doctrine to look for custom ___Table classes in the models folder&#xA; */&#xA;$manager-&amp;gt;setAttribute(Doctrine::ATTR_AUTOLOAD_TABLE_CLASSES, true);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="122" LastEditorUserId="7076" LastEditDate="2013-07-24T22:31:15.293" LastActivityDate="2013-07-24T22:31:15.293" CommentCount="0" />
  <row Id="57" PostTypeId="2" ParentId="50" CreationDate="2011-01-20T02:12:36.947" Score="5" Body="&lt;p&gt;I would probably do something like this:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I don't know VB so this is pseudo code.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Private Function Shuffle(playlist) as Playlist&#xA;{&#xA;    Dim PlayList as NewPlayList&#xA;    Dim RandomIndex as Integer&#xA;&#xA;    while(playlist has elements)&#xA;    {&#xA;       RandomIndex = (Random number between lowerbound and upperbound)&#xA;&#xA;       remove song at RemoveIndex from playlist&#xA;       add removed song to NewPlaylist&#xA;    }&#xA;&#xA;    return NewPlayList&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The issue I have with the way you did it is that there is ample opportunity to undo the shuffle. For example, Suppose you are at index 1 and the random number is 2. You swap 1 and 2. Now suppose you are at index 2 and the random number is 1. Now you just undid the shuffle that you preformed in the previous iteration. Also, I don't like the use of the global variable InnerPlaylist. &lt;/p&gt;&#xA;" OwnerUserId="51" LastActivityDate="2011-01-20T02:12:36.947" CommentCount="0" />
  <row Id="59" PostTypeId="2" ParentId="16" CreationDate="2011-01-20T02:17:07.157" Score="5" Body="&lt;p&gt;We use &lt;a href=&quot;http://www.maatkit.org/doc/mk-table-checksum.html&quot;&gt;&lt;code&gt;mk-table-checksum&lt;/code&gt;&lt;/a&gt;. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;It works really great in Master-Slave context where it also allows to sync differences in both directions depending on your choice.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Saidly from what i've seen most people it for replication and i can't provide any copy/pasteable output but if you don't know it it's definitly worth looking into. If you know it i'd like to hear why it doesn't work for you.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To get an overview over many tables you can use something like &lt;code&gt;mk-table-checksum host1 host2 | mk-checksum-filter&lt;/code&gt;&lt;/p&gt;&#xA;" OwnerUserId="113" LastActivityDate="2011-01-20T02:17:07.157" CommentCount="1" />
  <row Id="61" PostTypeId="2" ParentId="48" CreationDate="2011-01-20T02:34:27.033" Score="4" Body="&lt;p&gt;I don't know Codeigniter so i can't comment on &quot;is this a propper model&quot;. For my answer i'm just going to assume it is.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It's not much code so i'm going to focus on some details: &lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;  public function __construct()&#xA;  {&#xA;      parent::__construct();&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Those 5 lines do absolutely nothing. I'd remove them. If you need a constructor later, add it later.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;  public function fetch_navigation()&#xA;  {&#xA;    $result = $this-&amp;gt;db-&amp;gt;order_by(&quot;nav_order&quot;, &quot;asc&quot;)-&amp;gt;where('published', 1)-&amp;gt;get('navigation')-&amp;gt;result_array();&#xA;    return $result;&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This is a pretty hard to read (113 Chars in that line). I'd go for something like this (to say with your formatting from above)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;  public function fetch_navigation()&#xA;  {&#xA;      return $this-&amp;gt;db&#xA;          -&amp;gt;order_by(&quot;nav_order&quot;, &quot;asc&quot;)&#xA;          -&amp;gt;where('published', 1)&#xA;          -&amp;gt;get('navigation')&#xA;          -&amp;gt;result_array();&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$db = $this-&amp;gt;db;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Seems unnecessary to create a local variable, those 6 extra chars shoudn't hurt. I needed to look twice to see where that variable is from and if its local because changes are made to it.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;So far those are really minor notes.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Unreachable code ?&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if ($query) {&#xA;  return $query;&#xA;} else {&#xA;  return false;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;you are setting &lt;code&gt;$query['modules'] = ...&lt;/code&gt; so even if that is null $query will at least contain&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;array(&quot;modules&quot; =&amp;gt; null); &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;and that will always be true.&lt;/p&gt;&#xA;" OwnerUserId="113" LastActivityDate="2011-01-20T02:34:27.033" CommentCount="10" />
  <row Id="62" PostTypeId="2" ParentId="47" CreationDate="2011-01-20T02:40:02.943" Score="7" Body="&lt;p&gt;Other than long lines, I'm not seeing something too unreadable.  I don't advise shortening function names as doing so makes it less clear what the function is doing.  Instead, try splitting the function calls being passed as parameters onto different lines by either splitting the line across multiple lines or storing the returned value as a variable and passing that variable in.&lt;/p&gt;&#xA;" OwnerUserId="23" LastActivityDate="2011-01-20T02:40:02.943" CommentCount="0" />
  <row Id="65" PostTypeId="2" ParentId="36" CreationDate="2011-01-20T03:00:06.093" Score="5" Body="&lt;p&gt;Maybe something like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public static string MakeCsvLine(params string[] items)&#xA;{&#xA;  return String.Format(&quot;\u0022{0}\u0022&quot;,String.Join(&quot;\u0022,\u0022&quot;,items));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Edit:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;On thinking about it might be better to use it to build up a string builder so:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public static void AddCsvLine(StringBuilder sb, params string[] items)&#xA;{&#xA;  sb.AppendFormat(&quot;\u0022{0}\u0022&quot;,String.Join(&quot;\u0022,\u0022&quot;,items))&#xA;        .AppendLine();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This would remove having to have long strings repeated all over the code.&#xA;Edit: Made the funtion return the orginal result.&lt;/p&gt;&#xA;" OwnerUserId="33" LastEditorUserId="33" LastEditDate="2011-01-20T12:05:34.167" LastActivityDate="2011-01-20T12:05:34.167" CommentCount="2" />
  <row Id="67" PostTypeId="2" ParentId="2" CreationDate="2011-01-20T04:38:14.877" Score="7" Body="&lt;p&gt;I would do it like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;total = 0&#xA;&#xA;for i in range(3, end, 3):&#xA;  total += i&#xA;&#xA;for i in range(5, end, 5):&#xA;  if i % 3 != 0: # Only add the number if it hasn't already&#xA;    total += i   # been added as a multiple of 3&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The basic approach is the same as g.d.d.c's: iterate all the multiples of 3, then 5. However instead of using a set to remove duplicates, we simply check that the multiples of 5 aren't also multiples of 3. This has the following upsides:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Checking divisibility is less expensive than adding to a set.&lt;/li&gt;&#xA;&lt;li&gt;We build the total up incrementally, so we don't need a separate call to sum at the end.&lt;/li&gt;&#xA;&lt;li&gt;We got rid of the set, so we only need constant space again.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;" OwnerUserId="128" LastActivityDate="2011-01-20T04:38:14.877" CommentCount="1" />
  <row Id="69" PostTypeId="1" AcceptedAnswerId="127" CreationDate="2011-01-20T05:20:50.317" Score="15" ViewCount="2477" Body="&lt;p&gt;I implemented the Shamos-Hoey algorithm to check if a closed shape is self-intersected. Is this algorithm ok in terms of performance?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public boolean isSelfIntersected() {&#xA;    Set&amp;lt;Line2D&amp;gt; plines = new HashSet&amp;lt;Line2D&amp;gt;();&#xA;    for (Path2D ps : this.getPath()) {&#xA;        PathIterator p_it = ps.getPathIterator(null, /*flatness*/ 1);&#xA;        List&amp;lt;Line2D&amp;gt; estPath = new ArrayList&amp;lt;Line2D&amp;gt;();&#xA;        while (!p_it.isDone()) {&#xA;            p_it.next();&#xA;            double[] coords = new double[6];&#xA;            int s = p_it.currentSegment(coords);&#xA;            if (s == PathIterator.SEG_LINETO) {&#xA;                if (estPath.size() != 0) {&#xA;                    Point2D pp = estPath.get(estPath.size() - 1).getP2();&#xA;                    estPath.add(new Line2D.Double(pp, new Point2D.Double(coords[0],coords[1])));&#xA;                } else {&#xA;                    estPath.add(new Line2D.Double(new Point2D.Double(), new Point2D.Double(coords[0],coords[1])));&#xA;                }&#xA;            }&#xA;        }&#xA;        for (Line2D lq : estPath) {&#xA;            plines.add(tweakLine(lq));&#xA;        }&#xA;    }&#xA;    return ShamosHoeyAlgorithm(plines);&#xA;&#xA;}&#xA;&#xA;/**&#xA; * Moves first point of the line by 0.0000001 of it's length.&#xA; * @return&#xA; */&#xA;static Line2D tweakLine(Line2D l) {&#xA;    Line2D ql = new Line2D.Double(&#xA;            l.getX1() + 0.0000001*(l.getX2() - l.getX1()),&#xA;            l.getY1() + 0.0000001*(l.getY2() - l.getY1()),&#xA;            l.getX2() - 0.0000001*(l.getX2() - l.getX1()),&#xA;            l.getY2() - 0.0000001*(l.getY2() - l.getY1()));&#xA;    return ql;&#xA;}&#xA;&#xA;public class ShamosHoeyAlgorithm {&#xA;&#xA;    public static boolean ShamosHoeyAlgorithm(Collection&amp;lt;Line2D&amp;gt; lines) {&#xA;        List&amp;lt;AlgEvent&amp;gt; events = new ArrayList&amp;lt;AlgEvent&amp;gt;(lines.size() * 2);&#xA;        for (Line2D li : lines) {&#xA;            if (li.getX1() &amp;lt; li.getX2()) {&#xA;                Line2D l = new Line2D.Double(li.getP1(), li.getP2());&#xA;                events.add(new AlgEvent(l, true));&#xA;                events.add(new AlgEvent(l, false));&#xA;            } else if (li.getX1() &amp;gt; li.getX2()) {&#xA;                Line2D l = new Line2D.Double(li.getP2(), li.getP1());&#xA;                events.add(new AlgEvent(l, true));&#xA;                events.add(new AlgEvent(l, false));&#xA;            } else {&#xA;                if (li.getY1() &amp;lt; li.getY2()) {&#xA;                    Line2D l = new Line2D.Double(li.getP1(), li.getP2());&#xA;                    events.add(new AlgEvent(l, true));&#xA;                    events.add(new AlgEvent(l, false));&#xA;                } else if (li.getY1() &amp;gt; li.getY2()) {&#xA;                    Line2D l = new Line2D.Double(li.getP2(), li.getP1());&#xA;                    events.add(new AlgEvent(l, true));&#xA;                    events.add(new AlgEvent(l, false));&#xA;                } else {&#xA;                    return true;&#xA;                }&#xA;            }&#xA;        }&#xA;        Collections.sort(events, new AlgEvtComparator());&#xA;        TreeSet&amp;lt;Line2D&amp;gt; sl = new TreeSet&amp;lt;Line2D&amp;gt;(new LineComparator());&#xA;        for (AlgEvent e : events) {&#xA;            if (e.isStart) {&#xA;                Line2D nl = e.line;&#xA;                Line2D above = sl.higher(nl);&#xA;                if (above != null) {&#xA;                    if (above.intersectsLine(nl)) {&#xA;                        return true;&#xA;                    }&#xA;                }&#xA;                Line2D below = sl.lower(nl);&#xA;                if (below != null) {&#xA;                    if (below.intersectsLine(nl)) {&#xA;                        return true;&#xA;                    }&#xA;                }&#xA;                sl.add(nl);&#xA;            } else {&#xA;                Line2D nl = e.line;&#xA;                Line2D above = sl.higher(nl);&#xA;                Line2D below = sl.lower(nl);&#xA;                sl.remove(nl);&#xA;                if (above != null &amp;amp;&amp;amp; below != null) {&#xA;                    if (above.intersectsLine(below)) {&#xA;                        return true;&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;        return false;&#xA;    }&#xA;&#xA;    static class AlgEvent {&#xA;&#xA;        public Line2D line;&#xA;        public boolean isStart;&#xA;&#xA;        AlgEvent(Line2D l, boolean isStart) {&#xA;            line = l;&#xA;            this.isStart = isStart;&#xA;        }&#xA;&#xA;        Point2D getPoint() {&#xA;            return (isStart) ? line.getP1() : line.getP2();&#xA;        }&#xA;&#xA;        double getX() {&#xA;            return (isStart) ? line.getX1() : line.getX2();&#xA;        }&#xA;&#xA;        double getY() {&#xA;            return (isStart) ? line.getY1() : line.getY2();&#xA;        }&#xA;&#xA;        @Override&#xA;        public String toString() {&#xA;            return &quot;start =  &quot; + isStart + &quot;, point = &quot; + this.getPoint() + &quot;, line = &quot; + line.getP1() + &quot; : &quot; + line.getP2();&#xA;        }&#xA;&#xA;    }&#xA;&#xA;    static class AlgEvtComparator implements Comparator&amp;lt;AlgEvent&amp;gt; {&#xA;&#xA;        public int compare(AlgEvent o1, AlgEvent o2) {&#xA;            if (o1.getX() &amp;lt; o2.getX()) {&#xA;                return -1;&#xA;            } else if (o1.getX() &amp;gt; o2.getX()) {&#xA;                return 1;&#xA;            } else {&#xA;                if (o1.getY() &amp;lt; o2.getY()) {&#xA;                    return -1;&#xA;                } else {&#xA;                    return 1;&#xA;                }&#xA;            }&#xA;        }&#xA;&#xA;    }&#xA;&#xA;    /**&#xA;     * Class to compare lines, to ensure above-below order.&#xA;     */&#xA;    static class LineComparator implements Comparator&amp;lt;Line2D&amp;gt; {&#xA;&#xA;        public int compare(Line2D o1, Line2D o2) {&#xA;            if (o1.getY1() &amp;lt; o2.getY1()) {&#xA;                return -1;&#xA;            } else if (o1.getY1() &amp;gt; o2.getY2()) {&#xA;                return 1;&#xA;            } else {&#xA;                if (o1.getY2() &amp;lt; o2.getY2()) {&#xA;                    return -1;&#xA;                } else if (o1.getY2() &amp;gt; o2.getY2()) {&#xA;                    return 1;&#xA;                } else {&#xA;                    return 0;&#xA;                }&#xA;            }&#xA;        }&#xA;&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="130" LastEditorUserId="22222" LastEditDate="2015-08-04T19:20:55.153" LastActivityDate="2015-08-04T19:20:55.153" Title="Shamos-Hoey algorithm for checking the self-intersection of a closed shape" Tags="&lt;java&gt;&lt;algorithm&gt;&lt;computational-geometry&gt;" AnswerCount="2" CommentCount="0" FavoriteCount="1" />
  <row Id="71" PostTypeId="2" ParentId="2" CreationDate="2011-01-20T06:23:09.830" Score="13" Body="&lt;p&gt;I would get rid of the &lt;code&gt;for&lt;/code&gt; loops and use &lt;code&gt;sum&lt;/code&gt; on generator expressions.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def solution_01(n):&#xA;    partialsum = sum(xrange(3, n, 3))  &#xA;    return partialsum + sum(x for x in xrange(5, n, 5) if x % 3)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note that we're using &lt;code&gt;xrange&lt;/code&gt; instead of &lt;code&gt;range&lt;/code&gt; for python 2. I have never seen a case where this isn't faster for a &lt;code&gt;for&lt;/code&gt; loop or generator expression. Also consuming a generator expression with &lt;code&gt;sum&lt;/code&gt; &lt;em&gt;should&lt;/em&gt; be faster than adding them up manually in a &lt;code&gt;for&lt;/code&gt; loop.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you wanted to do it with sets, then there's still no need for &lt;code&gt;for&lt;/code&gt; loops&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def solution_01(n):&#xA;    values = set(range(3, n, 3)) | set(range(5, n, 5))&#xA;    return sum(values)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Here, we're just passing the multiples to the set constructor, taking the union of the two sets and returning their sum. Here, I'm using &lt;code&gt;range&lt;/code&gt; instead of &lt;code&gt;xrange&lt;/code&gt;. For some reason, I've seen that it's faster when passing to &lt;code&gt;list&lt;/code&gt;. I guess it would be faster for &lt;code&gt;set&lt;/code&gt; as well. You would probably want to benchmark though.&lt;/p&gt;&#xA;" OwnerUserId="25" LastEditorUserId="25" LastEditDate="2011-01-20T06:44:31.090" LastActivityDate="2011-01-20T06:44:31.090" CommentCount="0" />
  <row Id="72" PostTypeId="1" CreationDate="2011-01-20T06:31:36.730" Score="11" ViewCount="2497" Body="&lt;p&gt;I've implemented a PID controller, but seeing as I'm not an expert in control theory, can someone verify the correctness of this code?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public class PIDController&#xA;{&#xA;    public enum PIDMode&#xA;    {&#xA;        Manual,&#xA;        Auto,&#xA;    }&#xA;&#xA;    public enum PIDAction&#xA;    {&#xA;        Indirect,&#xA;        Direct,&#xA;    }&#xA;&#xA;    public PIDMode Mode { get; set; }&#xA;    public PIDAction Action { get; set; }&#xA;&#xA;    public double Proportional { get; set; }&#xA;    public double Integral { get; set; }&#xA;    public double Derivative { get; set; }&#xA;&#xA;    public double Minimum { get; set; }&#xA;    public double Maximum { get; set; }&#xA;&#xA;    public double DeltaMinimum { get; set; }&#xA;    public double DeltaMaximum { get; set; }&#xA;&#xA;    private double _ProportionalTerm;&#xA;    private double _Integrator;&#xA;    private double _Derivator;&#xA;&#xA;    public double Setpoint { get; set; }&#xA;&#xA;    private double _Feedback;&#xA;    public double Feedback&#xA;    {&#xA;        get&#xA;        {&#xA;            return _Feedback;&#xA;        }&#xA;    }&#xA;&#xA;    public void Calculate(double Input, long Time)&#xA;    {&#xA;        double output;&#xA;&#xA;        // Compute the error value&#xA;        double Error = Setpoint - Input;&#xA;&#xA;        if (Mode == PIDMode.Auto)&#xA;        {&#xA;            if (Action == PIDAction.Direct)&#xA;                Error = 0 - Error;&#xA;&#xA;            // Compute the proportional component&#xA;            _ProportionalTerm = 1000.0f * (Error - _Derivator) / (double)Time;&#xA;&#xA;            // Compute the integrator component, clamped to min/max delta movement&#xA;            _Integrator += (float)Error * (float)Time / 1000.0f;&#xA;            if (_Integrator &amp;lt; DeltaMinimum)&#xA;                _Integrator = DeltaMinimum;&#xA;            if (_Integrator &amp;gt; DeltaMaximum)&#xA;                _Integrator = DeltaMaximum;&#xA;&#xA;            // Add the proportional component&#xA;            output = (Proportional * Error);&#xA;&#xA;            // Add the integral component&#xA;            output += Integral * _Integrator;&#xA;&#xA;            // Add the derivative component&#xA;            output += Derivative * _ProportionalTerm;&#xA;&#xA;            // Clamp output to min/max&#xA;            if (output &amp;lt; Minimum)&#xA;                output = Minimum;&#xA;            if (output &amp;gt; Maximum)&#xA;                output = Maximum;&#xA;        }&#xA;        else&#xA;        {&#xA;            output = Input;&#xA;        }&#xA;&#xA;        // Store values&#xA;        _Derivator = Error;&#xA;&#xA;        // Returns the result&#xA;        _Feedback = output;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="17" LastActivityDate="2011-01-28T21:29:42.190" Title="Is this a valid implementation of a PID Controller?" Tags="&lt;algorithm&gt;&lt;c#&gt;" AnswerCount="2" CommentCount="0" />
  <row Id="74" PostTypeId="2" ParentId="36" CreationDate="2011-01-20T07:56:17.143" Score="15" Body="&lt;p&gt;I doubt you'll find a way of not listing all those properties without using reflection, but the following helps to eliminate that huge format string which is likely to become the source of bugs.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var properties = new Object[]&#xA;{&#xA;    this.BlockType,         //  1, A_NAME&#xA;    this.Tag,               //  2, A_TAG&#xA;    this.Description,       //  3, A_DESC&#xA;    this.InitialScan,       //  4, A_ISCAN&#xA;    this.AutoManual,        //  5, A_SCAN&#xA;    this.ScanTime,          //  6, A_SCANT&#xA;    this.IoDevice,          //  7, A_IODV&#xA;    this.IoAddress,         //  8, A_IOAD&#xA;    this.InitialAmStatus,   //  9, A_IAM&#xA;    this.AlarmPriority,     // 10, A_PRI&#xA;    this.AlarmEnable,       // 11, A_ENAB&#xA;    this.EnableOutput,      // 12, A_EOUT&#xA;    this.HistDescription,   // 13, A_HIST_DESC&#xA;    this.SecurityArea1      // 14, A_SECURITYAREA1&#xA;}.Select(x =&amp;gt; String.Format(&quot;\u0022{0}\u0022&quot;, x));&#xA;&#xA;return String.Join(&quot;,&quot;, properties);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;A couple of things to note:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is hardly an efficient way of doing it, but offers fairly maintainable code. If you have an extra property, just add it to the array.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This will only work in .NET 4.0. In earlier versions, you'll have to call &lt;code&gt;ToArray()&lt;/code&gt; after that call to &lt;code&gt;Select&lt;/code&gt;.&lt;/p&gt;&#xA;" OwnerUserId="139" LastActivityDate="2011-01-20T07:56:17.143" CommentCount="2" />
  <row Id="77" PostTypeId="1" AcceptedAnswerId="327" CreationDate="2011-01-20T09:21:34.217" Score="7" ViewCount="409" Body="&lt;p&gt;This plugin is written in jQuery and is made to support &lt;a href=&quot;http://codeigniter.com&quot; rel=&quot;nofollow&quot;&gt;the codeigniter framework&lt;/a&gt;. It is an ajax powered table pagination plugin designed to provide only that. You should be able to use almost any other table scripts with this plugin.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(function($){&#xA;    $.fn.extend({&#xA;        tpaginate: function(options) {&#xA;&#xA;            //Settings list and the default values&#xA;            var defaults = {&#xA;                page: 0,&#xA;                url : null,&#xA;                rows: 20,&#xA;                nodata: 'The table is empty!',&#xA;                actions: true&#xA;            };&#xA;&#xA;            var table;&#xA;            var foot;&#xA;            var body;&#xA;            var curpagespan;&#xA;            var totpagespan;&#xA;            var oldbody;&#xA;            var replaced = false;&#xA;&#xA;            var options = $.extend(defaults, options);&#xA;&#xA;            return this.each(function() {&#xA;                table = this;&#xA;                foot = $(table).find(' &amp;gt; tfoot &amp;gt; tr &amp;gt; td');&#xA;                body = $(table).find(' &amp;gt; tbody');&#xA;                create_footer(foot);&#xA;                curpagespan = foot.find(' &amp;gt; #table_pagecount &amp;gt; span#page');&#xA;                totpagespan = foot.find(' &amp;gt; #table_pagecount &amp;gt; span#page_total');&#xA;                curpagespan.html(0);&#xA;                totpagespan.html(0);&#xA;                $('#searchButton').click(function(){&#xA;                    var term = $('#search').val();&#xA;                    if(term.length &amp;gt;= 3){&#xA;                        if(replaced)&#xA;                            load_data(1, term, true, false);&#xA;                        else&#xA;                            load_data(1, term, true, true);&#xA;                    }&#xA;                });&#xA;                $('#search').keyup(function(){&#xA;                    if($(this).val() == ''){&#xA;                        create_tbody(false, false, true);&#xA;                    }&#xA;                });&#xA;            });&#xA;&#xA;            function create_footer() {&#xA;                var pagecount = $('&amp;lt;div id=&quot;table_pagecount&quot;&amp;gt;Page &amp;lt;span id=&quot;page&quot;&amp;gt;&amp;lt;/span&amp;gt; of &amp;lt;span id=&quot;page_total&quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;');&#xA;                var pager = $('&amp;lt;div id=&quot;table_pageination&quot;&amp;gt;&amp;lt;a class=&quot;link&quot; id=&quot;first&quot; style=&quot;display:none;&quot;&amp;gt;First&amp;lt;/a&amp;gt;&amp;lt;a class=&quot;link&quot; id=&quot;prev&quot; style=&quot;display:none;&quot;&amp;gt;Prev&amp;lt;/a&amp;gt;&amp;lt;span id=&quot;pages&quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;a class=&quot;link&quot; id=&quot;next&quot; style=&quot;display:none;&quot;&amp;gt;Next&amp;lt;/a&amp;gt;&amp;lt;a class=&quot;link&quot; id=&quot;last&quot; style=&quot;display:none;&quot;&amp;gt;Last&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;');&#xA;                foot.append(pagecount);&#xA;                foot.append(pager);&#xA;                load_data(1, '', true);&#xA;            }&#xA;&#xA;            function current_page(page){&#xA;                curpagespan.html(page);&#xA;            }&#xA;&#xA;            function total_page(page){&#xA;                totpagespan.html(Math.ceil(page/options.rows));&#xA;            }&#xA;&#xA;            function load_data(page, search, action, save){&#xA;                if(save == null)&#xA;                    save = false;&#xA;                else&#xA;                    save = true;&#xA;                $('#table_pageination a.link').unbind('click');&#xA;                search = (search == null ? '' : search);&#xA;                var start = (page-1)*options.rows;&#xA;                if(page == 1)&#xA;                    start = 0;&#xA;                var url = options.url+'/'+start+'/'+action+'/'+search;&#xA;                $.ajax({&#xA;                    url: url,&#xA;                    success: function(data) {&#xA;                        if(data.total != 0){&#xA;                            current_page(page);&#xA;                            total_page(data.total);&#xA;                            create_tbody(data.members, save);&#xA;                            update_pages(page, Math.ceil(data.total/options.rows));&#xA;                        } else{&#xA;                            current_page(0);&#xA;                            total_page(0);&#xA;                            foot.find(' &amp;gt; #table_pageination &amp;gt; #pages').html('&amp;lt;a class=&quot;link&quot;&amp;gt;0&amp;lt;/a&amp;gt;');&#xA;                            var newtr = $('&amp;lt;tr&amp;gt;&amp;lt;/tr&amp;gt;');&#xA;                            var newtd = $('&amp;lt;td style=&quot;font-weight:bold;text-align: center;&quot;&amp;gt;&amp;lt;/td&amp;gt;').attr('colspan', foot.attr('colspan')).text(options.nodata);&#xA;                            body.html(newtr.append(newtd));&#xA;                        }&#xA;                    }&#xA;                });&#xA;            }&#xA;&#xA;            function create_tbody(rows, save, revert){&#xA;                if(save == true){&#xA;                    oldbody = body.html();&#xA;                    replaced = true;&#xA;                }&#xA;                var newbody = $('&amp;lt;tbody /&amp;gt;');&#xA;                if(revert == null){&#xA;                    for(var i in rows){&#xA;                        var row = $('&amp;lt;tr /&amp;gt;');&#xA;                        for(var j in rows[i]){&#xA;                            if(j != 'id' &amp;amp;&amp;amp; j != 'actions')&#xA;                                row.append('&amp;lt;td class=&quot;'+j+'td&quot;&amp;gt;'+(rows[i][j] == null ? '' : rows[i][j])+'&amp;lt;/td&amp;gt;');&#xA;                            if(j == 'actions' &amp;amp;&amp;amp; rows[i][j] != null &amp;amp;&amp;amp; options.actions)&#xA;                                row.append(rows[i][j]);&#xA;                        }&#xA;                        newbody.append(row);&#xA;                    }&#xA;                } else{&#xA;                    newbody.html(oldbody);&#xA;                    replaced = false;&#xA;                }&#xA;                body.html(newbody.html());&#xA;                $(table).trigger(&quot;update&quot;);&#xA;            }&#xA;&#xA;            function update_pages(page, total){&#xA;                foot.find(' &amp;gt; #table_pageination &amp;gt; #pages').html(ranger(page, 5, total));&#xA;                if(page == 1){&#xA;                    foot.find(' &amp;gt; #table_pageination &amp;gt; a#first').fadeOut('slow');&#xA;                    foot.find(' &amp;gt; #table_pageination &amp;gt; a#prev').fadeOut('slow');&#xA;                } else{&#xA;                    foot.find(' &amp;gt; #table_pageination &amp;gt; a#first').attr('rel', 1).fadeIn('slow');&#xA;                    if(page != 2)&#xA;                        foot.find(' &amp;gt; #table_pageination &amp;gt; a#prev').attr('rel', page-1).fadeIn('slow');&#xA;                }&#xA;                if(total != page){&#xA;                    foot.find(' &amp;gt; #table_pageination &amp;gt; a#last').attr('rel', total).fadeIn('slow');&#xA;                    if(total != page+1)&#xA;                        foot.find(' &amp;gt; #table_pageination &amp;gt; a#next').attr('rel', ++page).fadeIn('slow');&#xA;                } else{&#xA;                    foot.find(' &amp;gt; #table_pageination &amp;gt; a#last').attr('rel', total).fadeOut('slow');&#xA;                    foot.find(' &amp;gt; #table_pageination &amp;gt; a#next').attr('rel', total).fadeOut('slow');&#xA;                }&#xA;&#xA;                $('#table_pageination a.link').click(function(){&#xA;                    replaced = false;&#xA;                    load_data($(this).attr('rel'), '', true);&#xA;                });&#xA;            }&#xA;&#xA;            function ranger(num, range, max) {&#xA;                var left = num*1;&#xA;                var right = num*1;&#xA;&#xA;                while (right - left &amp;lt; range * 2) {&#xA;                    if (right + 1 &amp;lt;= max)&#xA;                        right++;&#xA;&#xA;                    if (left - 1 &amp;gt; 0)&#xA;                        left--;&#xA;&#xA;                    if (right == max &amp;amp;&amp;amp; left == 1)&#xA;                        break;&#xA;                }&#xA;&#xA;                var str = '';&#xA;                for (var i = left; i &amp;lt;= right; i++) {&#xA;                    if(i != num)&#xA;                        str += '&amp;lt;a class=&quot;link&quot; rel=&quot;'+i+'&quot;&amp;gt;'+i+'&amp;lt;/a&amp;gt;';&#xA;                    if(i == num)&#xA;                        str += '&amp;lt;a rel=&quot;nolink&quot;&amp;gt;'+i+'&amp;lt;/a&amp;gt;';&#xA;                }&#xA;                return str;&#xA;            }&#xA;        }&#xA;    });&#xA;})(jQuery);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="92" LastEditorUserId="22222" LastEditDate="2015-06-27T04:04:23.860" LastActivityDate="2015-06-27T04:04:23.860" Title="Pagination plugin" Tags="&lt;javascript&gt;&lt;performance&gt;&lt;jquery&gt;&lt;ajax&gt;&lt;pagination&gt;" AnswerCount="2" CommentCount="4" FavoriteCount="2" />
  <row Id="79" PostTypeId="1" AcceptedAnswerId="81" CreationDate="2011-01-20T10:02:03.633" Score="67" ViewCount="24563" Body="&lt;p&gt;Is this the best way to implement this pattern in C#?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public sealed class Singleton&#xA;{&#xA;    private static readonly Singleton instance = new Singleton();&#xA;    public static Singleton Instance { get { return instance; } }&#xA;&#xA;    static Singleton() {}&#xA;    private Singleton() {}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="79" LastEditorUserId="22222" LastEditDate="2014-07-07T03:34:02.313" LastActivityDate="2014-07-07T03:34:02.313" Title="Implementing a Singleton pattern in C#" Tags="&lt;c#&gt;&lt;singleton&gt;" AnswerCount="9" CommentCount="2" FavoriteCount="42" />
  <row Id="80" PostTypeId="2" ParentId="79" CreationDate="2011-01-20T10:07:05.410" Score="6" Body="&lt;p&gt;I always use this solution if I have to implement a Singleton in C#&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public sealed class Logging&#xA;    {&#xA;        static Logging instance = null;&#xA;        static readonly object lockObj = new object();&#xA;&#xA;        private Logging()&#xA;        {&#xA;        }&#xA;&#xA;        public static Logging Logger&#xA;        {&#xA;            get&#xA;            {&#xA;                lock (lockObj)&#xA;                {&#xA;                    if (instance == null)&#xA;                    {&#xA;                        instance = new Logging();&#xA;                    }&#xA;                   return instance;&#xA;                }&#xA;            }&#xA;        }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Compared to your solution this is threadsafe and uses a lazy-creation method. (The object is only instantiated if actually needed)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The eager vs. lazy creation isn't really worth a discussion in this example, but I would whenever possible use the thread-safe implementation.&lt;/p&gt;&#xA;" OwnerUserId="40" LastActivityDate="2011-01-20T10:07:05.410" CommentCount="3" />
  <row Id="81" PostTypeId="2" ParentId="79" CreationDate="2011-01-20T10:15:28.753" Score="75" Body="&lt;p&gt;I use &lt;a href=&quot;http://csharpindepth.com/Articles/General/Singleton.aspx&quot;&gt;Jon Skeet's version&lt;/a&gt; of a &lt;em&gt;thread safe&lt;/em&gt; Singleton with fully lazy instantiation in C#: &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public sealed class Singleton&#xA;{&#xA;    // Thread safe Singleton with fully lazy instantiation á la Jon Skeet:&#xA;    // http://csharpindepth.com/Articles/General/Singleton.aspx&#xA;    Singleton()&#xA;    {&#xA;    }&#xA;&#xA;    public static Singleton Instance&#xA;    {&#xA;        get&#xA;        {&#xA;            return Nested.instance;&#xA;        }&#xA;    }&#xA;&#xA;    class Nested&#xA;    {&#xA;        // Explicit static constructor to tell C# compiler&#xA;        // not to mark type as beforefieldinit&#xA;        static Nested()&#xA;        {&#xA;        }&#xA;&#xA;        internal static readonly Singleton instance = new Singleton();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It works wonders for me! It's really easy to use, just get the instance from the Instance property like so; &lt;code&gt;SingletonName instance = SingletonName.Instance;&lt;/code&gt;&lt;/p&gt;&#xA;" OwnerUserId="10" LastEditorUserId="19574" LastEditDate="2012-11-19T06:46:06.817" LastActivityDate="2012-11-19T06:46:06.817" CommentCount="17" />
  <row Id="82" PostTypeId="1" AcceptedAnswerId="90" CreationDate="2011-01-20T10:25:28.040" Score="6" ViewCount="1649" Body="&lt;p&gt;I'm listing elements with a &lt;code&gt;foreach&lt;/code&gt;, and I would like to enclose items in something tag &lt;code&gt;n&lt;/code&gt; by &lt;code&gt;n&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$i = 0;&#xA;$open = $done = TRUE;&#xA;$n = 3;&#xA;$opening = &quot;&amp;lt;div&amp;gt;&quot;;&#xA;$closing = &quot;&amp;lt;/div&amp;gt;&quot;;&#xA;$names = array(&quot;Doc&quot;, &quot;Marty&quot;, &quot;George&quot;, &quot;Lorraine&quot;, &quot;Einstein&quot;, &quot;Biff&quot;); &#xA;&#xA;foreach($names as $name) { /** $condition was not a bool. My fault. */&#xA;&#xA;    if($open &amp;amp;&amp;amp; !($i % n)) {&#xA;        print $opening;&#xA;        $open = FALSE;&#xA;        $done = !$open;&#xA;    } elseif(!($i % n)) $done = FALSE;&#xA;&#xA;    /** print element. */&#xA;    print $name;&#xA;&#xA;    if(!$open &amp;amp;&amp;amp; !($i % n) &amp;amp;&amp;amp; !$done) {&#xA;        print $closing;&#xA;        $open = TRUE;&#xA;        $done = !$open;&#xA;    }&#xA;&#xA;    $i++;&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Do you think this snippet can be improved? It would be better to have fewer check variables such as &lt;code&gt;$open&lt;/code&gt; or &lt;code&gt;$done&lt;/code&gt;.&lt;/p&gt;&#xA;" OwnerUserId="48" LastEditorUserId="22222" LastEditDate="2014-08-20T23:56:53.043" LastActivityDate="2014-08-20T23:56:53.043" Title="Loop with enclosing items every 'n' steps" Tags="&lt;php&gt;" AnswerCount="2" CommentCount="7" FavoriteCount="1" />
  <row Id="83" PostTypeId="2" ParentId="7" CreationDate="2011-01-20T10:26:13.127" Score="10" Body="&lt;p&gt;Usually everything in python is handled the &lt;em&gt;come-on-we-are-all-upgrowns&lt;/em&gt; principle. This allows you to choose the way you want things to do. However it's best practice to put the &lt;em&gt;main-function&lt;/em&gt; code into a function instead directly into the module.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This makes it possible to import the function from some other module and makes simple scripts instantly programmable.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;However avoid the use of globals (what you did with &lt;code&gt;numbers&lt;/code&gt;) for return values since this makes it difficult to execute the function a second time.&lt;/p&gt;&#xA;" OwnerUserId="143" LastActivityDate="2011-01-20T10:26:13.127" CommentCount="2" />
  <row Id="84" PostTypeId="2" ParentId="9" CreationDate="2011-01-20T10:33:10.783" Score="28" Body="&lt;p&gt;There are a couple of immediately obvious things that havent been mentioned yet:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You have a lot of magic numbers in your code. Try to define them as &lt;code&gt;const&lt;/code&gt;s with meaningful names.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;g.Width = 50;&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;becomes&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private const int DefaultGridWidth = 50;&#xA;...&#xA;g.Width = DefaultGridWidth;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It seems like a trivial change but it makes a big difference to someone who is reading your code. It gives an indication of &lt;strong&gt;why&lt;/strong&gt; the value is 50, not just that it &lt;strong&gt;is&lt;/strong&gt; 50.&#xA;&lt;hr&gt;&#xA;You should use more meaningful names for your identifiers. Names like &lt;code&gt;g&lt;/code&gt; and &lt;code&gt;g1&lt;/code&gt; do not tell me a lot about what the object is, but &lt;code&gt;mainGrid&lt;/code&gt; and &lt;code&gt;innerGrid&lt;/code&gt; contain more information for the reader.&lt;/p&gt;&#xA;" OwnerUserId="142" LastActivityDate="2011-01-20T10:33:10.783" CommentCount="2" />
  <row Id="85" PostTypeId="1" CreationDate="2011-01-20T10:56:43.527" Score="19" ViewCount="733" Body="&lt;p&gt;I was wondering for quite some time how to clean up the below code without blowing it up any further. The extension of the classes is the main concern here, it looks a bit too much like magic. That's mainly because it has to handle all the different cases, and I haven't figured out a way to reduce the code in a meaningful fashion here.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Maybe I'm paranoid and the code is just fine, but I'd still love to get some feedback on it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The original code and test cases are &lt;a href=&quot;https://github.com/BonsaiDen/neko.js&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function is(type, obj) {&#xA;    return Object.prototype.toString.call(obj).slice(8, -1) === type;&#xA;}&#xA;function copy(val) { /* ...make shallow copy */ }&#xA;function wrap(caller, obj) {&#xA;    obj = obj || Function.call;&#xA;    return function() {&#xA;        return obj.apply(caller, arguments);&#xA;    };&#xA;}&#xA;&#xA;function Class(ctor) {&#xA;    // ...default ctor stuff here....&#xA;    function clas(args) { /* ...actual instance ctor stuff... */}&#xA;&#xA;    var proto = {};&#xA;    clas.init = wrap(ctor);&#xA;&#xA;    // extend needs to be reduced in width, it easily goes over 80 columns&#xA;    // without some ugly if statements&#xA;    clas.extend = function(ext) {&#xA;        if (is('Function', ext)) {&#xA;            return ext.extend(proto); // holy closure!&#xA;        }&#xA;&#xA;        for (var e in ext) {&#xA;            if (!ext.hasOwnProperty(e)) {&#xA;                continue; // a bit ugly imo, but it helps to prevent the indentation&#xA;                          // from blowing up&#xA;            }&#xA;&#xA;            // this needs some refactoring, it creates bound and unbound&#xA;            var val = ext[e], func = is('Function', val);&#xA;            if (/^\$/.test(e)) { // statics&#xA;                proto[e] = copy(val);&#xA;                clas[e] = clas.prototype[e] = func ? wrap(clas, val) : val;&#xA;&#xA;            } else if (func) {&#xA;                clas[e] = wrap(proto[e] = clas.prototype[e] = val);&#xA;            }&#xA;        }&#xA;        return clas;&#xA;    };&#xA;&#xA;    // this could also need some clean up I suppose&#xA;    for (var i = ctor.hasOwnProperty('init') ? 0 : 1,&#xA;             l = arguments.length; i &amp;lt; l; i++) {&#xA;&#xA;        var arg = arguments[i];&#xA;        is('Object', arg) ? clas.extend(arg) : arg.extend(clas);&#xA;    }&#xA;    return clas;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="89" LastEditorUserId="1635" LastEditDate="2014-08-09T22:59:56.833" LastActivityDate="2014-08-09T22:59:56.833" Title="Cleaning up class creation / extension" Tags="&lt;javascript&gt;&lt;classes&gt;" AnswerCount="2" CommentCount="2" FavoriteCount="0" />
  <row Id="86" PostTypeId="2" ParentId="4" CreationDate="2011-01-20T11:04:43.753" Score="7" Body="&lt;p&gt;Some points i found:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Thats the class is marked as &lt;code&gt;abstract&lt;/code&gt; struck me as odd as i found out it only has static method calls and since it uses &quot;self::&quot; for static call i guess there is no meaningful way to extend the class anyways. (With the LSB issue).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I don't see any big issue with the class beeing &quot;all static&quot; and i assume it fits into your project. (You don't have a clear bootstrap and you don't want/need multiple instances of that class)&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;The &lt;code&gt;include_once $file;&lt;/code&gt; strucks me as a little odd as the &quot;_once&quot; part shouldn't be need. But if you wrote the loader at a later stage in the project i see where it might be needed to not run into issues with classes getting loaded two times.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Usually i'd say you don't have to make php remember if it already touched a file (and do a disk expensive realpath() on it) since the load function will only be called one time for each previously unknown class.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;All in all i think the code/usefulness ratio is fine and it isn't overly complex.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Alternatives&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;The upcoming &quot;standards&quot; and libs are alreay mentioned so i'll just point out another way to do autoloading that &quot;performs better&quot; and is less intrusive (requires less code in your application)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The &lt;a href=&quot;https://github.com/theseer/Autoload&quot;&gt;&lt;code&gt;PHP Autoload Builder&lt;/code&gt;&lt;/a&gt; will scan your codebase and provide one file with a big array mapping for all your classes (interface etc.) that you only need to include in your bootstrap. It can be run again to pick up new classes or the resulting file can be edited by hand. (Some people build tools around it so it automatically recreates itself in development if a class isn't found).&lt;/p&gt;&#xA;" OwnerUserId="113" LastActivityDate="2011-01-20T11:04:43.753" CommentCount="0" />
  <row Id="89" PostTypeId="2" ParentId="85" CreationDate="2011-01-20T12:06:55.883" Score="1" Body="&lt;p&gt;A few tips:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Make sure your using good indentation&lt;/li&gt;&#xA;&lt;li&gt;Do not create a function that runs a native method&#xA;&lt;ul&gt;&#xA;&lt;li&gt;so: &lt;code&gt;if(is(&quot;Function&quot;,ext))&lt;/code&gt; becomes &lt;code&gt;if(typeof ext == &quot;Function&quot;)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;remove unnecessary comments and comments should only be at the head of an entity.&lt;/li&gt;&#xA;&lt;li&gt;Do not shorten your variables as it causes issues with the latter developers&lt;/li&gt;&#xA;&lt;li&gt;use stricter typecasting:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;if (!ext.hasOwnProperty(e))&lt;/code&gt; becomes &lt;code&gt;if(ext.hasOwnProperty(e) == false)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;Keep your conditions in the for loops on one line&lt;/li&gt;&#xA;&lt;li&gt;There's is not point in reassigning a value from an array becuase you want to send it to a function&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;var arg = arguments[i];&lt;/code&gt; gets removed and &lt;code&gt;arguments[i]&lt;/code&gt; is sent to the function&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Taking into account the above your class would look like so:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function Class(ClassBase)&#xA;{&#xA;    /*&#xA;        * Default Constructor, used to do XXX with YYY&#xA;    */&#xA;    var Arguments = args || [];&#xA;&#xA;    function __Class(Arguments)&#xA;    {&#xA;&#xA;    }&#xA;&#xA;    var Prototype = {};&#xA;    __Class.Initialize= Wrap(ClassBase);&#xA;&#xA;&#xA;    /*&#xA;        * extend needs to be reduced in width, it easily goes over 80 columns&#xA;        * without some ugly if statements&#xA;    */&#xA;&#xA;    __Class.Extend = function(ExtendableEntity)&#xA;    {&#xA;        if (typeof ExtendableEntity == &quot;function&quot;)&#xA;        {&#xA;            return ExtendableEntity.extend(Prototype);&#xA;        }&#xA;&#xA;        for (var Entity in ExtendableEntity)&#xA;        {&#xA;            if (ext.hasOwnProperty(Entity) == true)&#xA;            {&#xA;                var Value = ext[Entity]&#xA;                var _Function = (typeof Value == &quot;function&quot;);&#xA;&#xA;                if (/^\$/.test(Entity)) &#xA;                {&#xA;                    Prototype[Entity] = Copy(Value);&#xA;                    __Class[Entity] = __Class.Prototype[Entity] = function ? Wrap(__Class, Value) : Value;&#xA;                }else &#xA;                {&#xA;                    __Class[Entity] = Wrap(Prototype[Entity] = __Class.Prototype[Entity] = Value);&#xA;                }&#xA;            }&#xA;        }&#xA;        return __Class;&#xA;    }&#xA;&#xA;    for (var i = ClassBase.hasOwnProperty('Initialize') ? 0 : 1, l = Arguments.length; i &amp;lt; l; i++)&#xA;    {&#xA;        (typeof Arguments[i] == 'object') ? __Class.Extend(Arguments[i]) : Arguments[i].Extend(__Class);&#xA;    }&#xA;    return __Class;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="95" LastActivityDate="2011-01-20T12:06:55.883" CommentCount="6" />
  <row Id="90" PostTypeId="2" ParentId="82" CreationDate="2011-01-20T12:09:07.367" Score="8" Body="&lt;p&gt;One problem with your solution is that it won't print the last closing &lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt; tag if there are less than &lt;code&gt;$n&lt;/code&gt; elements inside the last &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;An approach which fixes that problem and also simplifies the conditional logic for deciding when to print the tags is to chunk the array first using &lt;code&gt;array_chunk&lt;/code&gt; and then iterate over the chunks. Now we only need one boolean variable to remember which chunks to surround in tags.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function alternate($names, $n, $opening, $closing) {&#xA;    $tag = TRUE;&#xA;    foreach(array_chunk($names, $n) as $chunk) {&#xA;        if($tag) {&#xA;            print $opening;&#xA;        }&#xA;        foreach($chunk as $name) {&#xA;            print $name;&#xA;        }&#xA;        if($tag) {&#xA;            print $closing;&#xA;        }&#xA;        $tag = !$tag;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="128" LastActivityDate="2011-01-20T12:09:07.367" CommentCount="1" />
  <row Id="91" PostTypeId="2" ParentId="79" CreationDate="2011-01-20T12:55:00.193" Score="18" Body="&lt;p&gt;I always use this, it allows lazy initialisation of generics, instead of creating a new singleton class for each type of singleton I want. It's also threadsafe but does not use locks on every access.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public static class Singleton&amp;lt;T&amp;gt; where T : class, new()&#xA;{&#xA;    private T instance = null;&#xA;&#xA;    public T Instance&#xA;    {&#xA;        get&#xA;        {&#xA;            if (instance == null)&#xA;                Interlocked.CompareExchange(ref instance, new T(), null);&#xA;&#xA;            return instance;&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you're unfamiliar with the interlocked class, it performs atomic operations in a manner which is often quicker than a lock. Three possible cases:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;1) &lt;strong&gt;First access by a single thread&lt;/strong&gt;. Probably roughly the same performance as the obvious method using a lock&lt;/p&gt;&#xA;&#xA;&lt;p&gt;2) &lt;strong&gt;First access by many threads at the same time&lt;/strong&gt;. Many threads might enter the interlocked exchange, in which case several items may get constructed but only 1 will &quot;win&quot;. So long as your constructor has no global side effects (which is really shouldn't) behaviour will be correct. Performance will be slightly less than a lock, because of multiple allocations, but the overhead is small and this is a very rare case.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;3) &lt;strong&gt;Later accesses&lt;/strong&gt;. No locking or interlocked operations, this is pretty much optimal and is obviously the majority case.&lt;/p&gt;&#xA;" OwnerUserId="124" LastEditorUserId="124" LastEditDate="2011-10-28T13:46:22.463" LastActivityDate="2011-10-28T13:46:22.463" CommentCount="6" />
  <row Id="92" PostTypeId="1" AcceptedAnswerId="254" CreationDate="2011-01-20T13:55:23.193" Score="7" ViewCount="816" Body="&lt;p&gt;I'm new to Postgres and PostGIS, but not to geospatial applications.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I have a table loaded up with graph data in the form of links (edges). The link database has about &lt;strong&gt;60,000,000&lt;/strong&gt; rows. I am trying to extract the nodes to allow for quicker searching. For some of my proof-of-concept work I was able to use the link table for the searches, but there will be lots of duplicates, and there's no guarantee that either the source column or the target column contains all nodes.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is Postgres &amp;amp; PostGIS, so I am also using the table to cache a geometry-&gt;geography conversion. Yes I do need to use geography fields. I'm also copying the geometry information &quot;just in case&quot;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Table creation SQL:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;-- Recreate table and index&#xA;DROP TABLE IF EXISTS nodes;&#xA;&#xA;CREATE TABLE nodes (node integer PRIMARY KEY, geog geography(POINT,4326) );&#xA;&#xA;CREATE INDEX geogIndex ON nodes USING GIST(geog);&#xA;&#xA;SELECT AddGeometryColumn('nodes', 'geom', 4326, 'POINT', 2);&#xA;&#xA;-- Insert all unique nodes from the source column&#xA;INSERT INTO nodes (node,geog,geom)&#xA;       SELECT DISTINCT ON (source) source,geography( ST_Transform(geom_source,4326)),geom_source &#xA;       FROM view_topo;&#xA;&#xA;-- Insert any nodes in the target column that we don't have already&#xA;INSERT INTO nodes (node,geog,geom)&#xA;       SELECT DISTINCT ON (target) target,geography( ST_Transform(geom_target,4326)),geom_target &#xA;       FROM view_topo&#xA;       WHERE NOT EXISTS( SELECT 1 FROM nodes WHERE nodes.node = view_topo.target);&#xA;&#xA;VACUUM ANALYZE;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I left the first &lt;code&gt;INSERT&lt;/code&gt; running overnight and it took about 2-3hrs to run. This resulted in about &lt;strong&gt;40,000,000&lt;/strong&gt; unique nodes being added.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I have just enabled the second &lt;code&gt;INSERT&lt;/code&gt; and the &lt;code&gt;VACUUM ANALYZE&lt;/code&gt;. I am expecting it to take until at least lunchtime.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Luckily this is only a batch job that has to be executed once after I've loaded a new link table, but is there a better way? Is there a faster way?&lt;/p&gt;&#xA;" OwnerUserId="73" LastEditorUserId="22222" LastEditDate="2015-04-21T02:17:40.317" LastActivityDate="2015-04-21T02:17:40.317" Title="Extracting nodes from a graph database" Tags="&lt;sql&gt;&lt;postgresql&gt;" AnswerCount="2" CommentCount="1" />
  <row Id="98" PostTypeId="2" ParentId="50" CreationDate="2011-01-20T15:08:37.003" Score="33" Body="&lt;p&gt;No. &lt;strong&gt;Your shuffle will &lt;em&gt;not&lt;/em&gt; be random.&lt;/strong&gt; You are stepping through each card and swapping it with another random card. This is a common bug found in many shuffling algorithms. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;To illustrate why your shuffle is not random, let's assume you are shuffling three songs (1, 2, 3). There are six combinations of three song (123, 132, 213, 231, 321, 312). If your shuffle was random, each of these combinations should appear with equal probability. So if you run your shuffle algorithm 600,000 times, each combination should appear roughly 100,000 times each.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But it doesn't. When you run your shuffle algorithm 600,000 times (as written), you will see results similar to this: &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&quot;http://i.stack.imgur.com/f1Ri6.png&quot; alt=&quot;Shuffle results&quot;&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To understand &lt;em&gt;why&lt;/em&gt; your implementation produces biased results, read this article on Coding Horror: &lt;a href=&quot;http://www.codinghorror.com/blog/2007/12/the-danger-of-naivete.html&quot;&gt;The Danger of Naïveté&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What you want is a &lt;a href=&quot;http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle&quot;&gt;&lt;strong&gt;Fisher-Yates shuffle&lt;/strong&gt;&lt;/a&gt; where you swap the current card with any of the &lt;em&gt;remaining&lt;/em&gt; cards (or itself). &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here it is in pseudo code for an in-place shuffle:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;To shuffle an array a of n elements:&#xA;  for i from n − 1 downto 1 do&#xA;       j ← random integer with 0 ≤ j ≤ i&#xA;       exchange a[j] and a[i]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;There are other types of Fisher-Yates shuffles listed here: Wikipedia: &lt;a href=&quot;http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle&quot;&gt;Fisher–Yates shuffle&lt;/a&gt;.&lt;/p&gt;&#xA;" OwnerUserId="157" LastEditorUserId="157" LastEditDate="2011-01-21T15:50:07.527" LastActivityDate="2011-01-21T15:50:07.527" CommentCount="0" />
  <row Id="109" PostTypeId="1" AcceptedAnswerId="110" CreationDate="2011-01-20T18:14:40.340" Score="10" ViewCount="598" Body="&lt;p&gt;I have written a method to tokenize HTTP request paths such as &lt;code&gt;/employee/23/edit&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;protected void compile(String path){&#xA;    int mark=0;&#xA;    for(int i=0; i&amp;lt;path.length(); ++i){&#xA;        if(path.charAt(i)==DELIM){&#xA;            if(mark!=i)&#xA;                tokens.add(path.substring(mark,i));&#xA;            mark=i+1;&#xA;        }&#xA;        else if(path.length()==i+1){&#xA;            tokens.add(path.substring(mark,i+1));&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And a method to tokenize the consumer of these paths such as &lt;code&gt;/employee/[id]/edit&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;protected void compile(String path){&#xA;    int mark=0;&#xA;    boolean wild=false;&#xA;    for(int i=0; i&amp;lt;path.length(); ++i){&#xA;        if(!wild){&#xA;            if(path.charAt(i)==DELIM){&#xA;                if(mark!=i)&#xA;                    tokens.add(path.substring(mark,i));&#xA;                mark=i+1;&#xA;            }&#xA;            else if(path.length()==i+1){&#xA;                tokens.add(path.substring(mark,i+1));&#xA;            }&#xA;            else if(path.charAt(i)=='['){&#xA;                wild=true;&#xA;            }&#xA;        }&#xA;        else if(path.charAt(i)==']'){&#xA;            tokens.add(&quot;?&quot;);&#xA;            wild=false;&#xA;            mark=i+1;&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The idea here is that there will be an implicit variable called &lt;code&gt;id&lt;/code&gt; with the value &lt;code&gt;23&lt;/code&gt;. However, that isn't here nor there. How does my approach look? Can it be improved? Also: &lt;code&gt;DELIM = '/'&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is more-or-less an exercise in writing a parser, which is why I didn't use &lt;code&gt;String#split()&lt;/code&gt;.&lt;/p&gt;&#xA;" OwnerUserId="8" LastEditorUserId="9357" LastEditDate="2016-03-28T04:40:34.347" LastActivityDate="2016-03-28T04:40:34.347" Title="HTTP request path parser" Tags="&lt;java&gt;&lt;parsing&gt;&lt;url&gt;" AnswerCount="2" CommentCount="5" />
  <row Id="110" PostTypeId="2" ParentId="109" CreationDate="2011-01-20T18:30:53.690" Score="8" Body="&lt;p&gt;Your first &lt;code&gt;compile&lt;/code&gt; method can be replaced by a single call to &lt;code&gt;String.split&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Assuming the intended behavior for the second &lt;code&gt;compile&lt;/code&gt; method is such that &quot;/foo/b[a]r/baz&quot; will compile to &lt;code&gt;{&quot;foo&quot;, &quot;?&quot;, &quot;baz&quot;}&lt;/code&gt;, it can be replaced by a call to &lt;code&gt;split&lt;/code&gt; and then iterating over the result and replacing any string the includes square brackets with &quot;?&quot;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If the intended behavior is rather that it will compile to &lt;code&gt;{&quot;foo&quot;, &quot;b&quot;, &quot;?&quot;, &quot;r&quot;, &quot;baz&quot;}&lt;/code&gt;, you can first replace &lt;code&gt;[anything]&lt;/code&gt; by &lt;code&gt;/?/&lt;/code&gt; using &lt;code&gt;String.replace&lt;/code&gt; and then use &lt;code&gt;String.split&lt;/code&gt;.&lt;/p&gt;&#xA;" OwnerUserId="128" LastActivityDate="2011-01-20T18:30:53.690" CommentCount="0" />
  <row Id="112" PostTypeId="1" AcceptedAnswerId="195" CreationDate="2011-01-20T19:19:39.800" Score="11" ViewCount="1264" Body="&lt;p&gt;I have written this (truncated) code to fetch some tweets:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;  dispatch_async(dispatch_get_global_queue(0, 0), ^{&#xA;    [[UIApplication sharedApplication] setNetworkActivityIndicatorVisible:YES];&#xA;&#xA;    NSString *JSONStr = [NSString stringWithContentsOfURL:[NSURL URLWithString:@&quot;http://search.twitter.com/search.json?q=haak&amp;amp;lang=nl&amp;amp;rpp=100&quot;] encoding:NSUTF8StringEncoding error:nil];&#xA;    if (!JSONStr) {&#xA;      [[UIApplication sharedApplication] setNetworkActivityIndicatorVisible:NO];&#xA;      return;&#xA;    }&#xA;&#xA;    /*... PARSING ETC ...*/&#xA;&#xA;    dispatch_sync(dispatch_get_main_queue(), ^{&#xA;      [delegate didReceiveTweets:foundTweets];&#xA;    });&#xA;&#xA;    [[UIApplication sharedApplication] setNetworkActivityIndicatorVisible:NO];&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note the lines from &lt;code&gt;dispatch_sync(dispatch_get_main_queue(), ^{&lt;/code&gt; to &lt;code&gt;});&lt;/code&gt;. This will update the UI.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Is this the good way to do it, or are there better ways than using &lt;code&gt;dispatch_sync&lt;/code&gt; within a &lt;code&gt;dispatch_async&lt;/code&gt;? Or should I not do this at all? Should I also send &lt;code&gt;setNetworkActivityIndicatorVisible:&lt;/code&gt; from within the main thread?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The reason I'm not using &lt;code&gt;NSURLConnection&lt;/code&gt; is because this code comes from a class method, so I need to create an object containing the delegate for the &lt;code&gt;NSURLConnection&lt;/code&gt;, which seems overkill to me.&lt;/p&gt;&#xA;" OwnerUserId="36" LastEditorUserId="22222" LastEditDate="2015-11-03T20:56:37.380" LastActivityDate="2015-11-03T20:56:37.380" Title="Fetching tweets" Tags="&lt;multithreading&gt;&lt;objective-c&gt;&lt;twitter&gt;" AnswerCount="3" CommentCount="0" FavoriteCount="0" />
  <row Id="113" PostTypeId="2" ParentId="72" CreationDate="2011-01-20T19:46:19.540" Score="8" Body="&lt;p&gt;It looks reasonable, but I don't see why you need to make the Proportional term a member of the class, it doesn't need to be saved, at best it might make sense to be able to query it with a get, but a set seems misleading.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'd be reluctant to allow public setting of the Integral and Derivatives too, querying them might be useful, but letting users of the class set it seems odd.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Forcing the scaling by 1000.0 seems arbitrary and inflexible too, this would make sense to expose as a settable constant in my view.&lt;/p&gt;&#xA;" OwnerUserId="76" LastEditorUserId="76" LastEditDate="2011-01-20T19:56:29.107" LastActivityDate="2011-01-20T19:56:29.107" CommentCount="0" />
  <row Id="114" PostTypeId="2" ParentId="109" CreationDate="2011-01-20T19:49:02.543" Score="3" Body="&lt;p&gt;Just as an exercise in making the code easier to read, I'd recommend better variable names.  I can figure out what &quot;wild&quot; and &quot;mark&quot; are, but it should be immediately apparent to me so I don't have to spend time trying to figure out what they are.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also, I'm assuming you are going to eventually handle URLs with &quot;?&quot; and such in them.  You may want to consider checking for invalid characters in the URL so you know when you hit the end of the actual request path.&lt;/p&gt;&#xA;" OwnerUserId="55" LastActivityDate="2011-01-20T19:49:02.543" CommentCount="2" />
  <row Id="115" PostTypeId="1" AcceptedAnswerId="118" CreationDate="2011-01-20T20:31:26.477" Score="11" ViewCount="452" Body="&lt;p&gt;I have a Perl application that allows the user to choose between two different formats for data output (and there will likely be more in the near future). In the heart of the algorithm, the code makes a call to a print subroutine.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;my $stats = analyze_model_vectors( $reference_vector, $prediction_vector );&#xA;print_result( $stats, $tolerance );&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The &lt;code&gt;print_result&lt;/code&gt; subroutine simply calls more specific methods.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;sub print_result&#xA;{&#xA;  if($outformat eq &quot;text&quot;)&#xA;  {&#xA;    print_result_text(@_);&#xA;  }&#xA;  elsif($outformat eq &quot;xml&quot;)&#xA;  {&#xA;    print_result_xml(@_);&#xA;  }&#xA;  else&#xA;  {&#xA;    # Should not reach this far if input checking is done correctly&#xA;    printf(STDERR &quot;Error: unsupported output format '%s'\n&quot;, $outformat);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Is this good practice? What other alternatives are there and what are their pros/cons? I could think of the following alternatives.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Test for output format in the heart of the algorithm, and call the appropriate printing subroutine there.&lt;/li&gt;&#xA;&lt;li&gt;I've never used subroutine references before, but perhaps when I could store a reference to the correct subroutine in a scalar variable and call the print method with that scalar in the heart of the algorithm.&lt;/li&gt;&#xA;&lt;li&gt;Place code for all output formats in a single subroutine, separated by &lt;code&gt;if/elsif/else&lt;/code&gt; statements.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Keep in mind there may be more output formats required in the near future.&lt;/p&gt;&#xA;" OwnerUserId="45" LastActivityDate="2011-12-16T23:59:06.513" Title="Subroutine to call other subroutines" Tags="&lt;perl&gt;&lt;subroutine&gt;" AnswerCount="4" CommentCount="2" />
  <row Id="116" PostTypeId="2" ParentId="115" CreationDate="2011-01-20T20:55:54.960" Score="3" Body="&lt;p&gt;I try to avoid Perl if I can, so this is more of a general answer: I've coded like this in an old VB6 app. Each output function had a wrapper function that then called the required implementation using a series of IFs. Sometimes a particular output method wouldn't need anything - eg. &quot;Start New Line&quot; is relevant for text file output, but not Excel worksheet output.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'm currently in the process of porting/re-writing that particular app in C#/.NET 4, where I've been able to take a much more object oriented approach. &#xA;I have defined an &quot;output base class&quot; with a standard interface. This is then inherited by the various implementations. As I start the output, I can create the required implementation using a factory method/class, and pass data to it using the standard interface.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This particular implementation is actually multi-threaded, so the bulk of the output base class is actually the thread &amp;amp; queue management. Data is then passed in using a small &quot;data chunk&quot; class, and queued for output using a thread-safe queue.&lt;/p&gt;&#xA;" OwnerUserId="73" LastEditorUserId="9225" LastEditDate="2011-12-16T23:59:06.513" LastActivityDate="2011-12-16T23:59:06.513" CommentCount="3" />
  <row Id="117" PostTypeId="2" ParentId="9" CreationDate="2011-01-20T21:43:51.547" Score="6" Body="&lt;p&gt;This should simplify the looping assuming that you can generalize the positioning code like mention in several of the other answers&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;        //Get the initial set of sourcefiles&#xA;        var sourceFiles = from file in list&#xA;              from invocation in file.getInvocations()&#xA;              group invocation by (SourceFile)null into groupedByInvoker&#xA;              select groupedByInvoker;&#xA;&#xA;        for (var currentDepth = 0; currentDepth &amp;lt;= depth; currentDepth++)&#xA;        {&#xA;            foreach (var currentGroup in sourceFiles)&#xA;            {&#xA;                int sourceFileCount = currentGroup.Count();&#xA;                int counter = 0;&#xA;&#xA;                foreach (var invocation in currentGroup)&#xA;                {&#xA;                    /*&#xA;                     * Generalized grid code goes here&#xA;                     */&#xA;                    counter++;&#xA;                }&#xA;            }&#xA;&#xA;            //Select the current sub source files&#xA;         sourceFiles = from invokerGroup in sourceFiles&#xA;              from file in invokerGroup&#xA;              from invocation in file.getInvocations()&#xA;              group invocation by file into groupedByInvoker&#xA;              select groupedByInvoker;&#xA;&#xA;        }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This is not an exact mapping to the above code in that this goes over the getInvocations tree breadth first instead of depth first.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Updated with imput from &lt;a href=&quot;http://codereview.stackexchange.com/questions/182/is-this-linq-code-clear-enough-and-how-could-i-improve-it/329#329&quot;&gt;Is this linq code clear enough, and how could I improve it?&lt;/a&gt;&lt;/p&gt;&#xA;" OwnerUserId="33" LastEditorUserId="33" LastEditDate="2011-01-27T22:41:49.087" LastActivityDate="2011-01-27T22:41:49.087" CommentCount="0" />
  <row Id="118" PostTypeId="2" ParentId="115" CreationDate="2011-01-20T22:47:15.107" Score="13" Body="&lt;p&gt;If you can pass in the subroutine it makes the code a lot simpler, you also don't have to deal with an unknown string format as the subroutine itself has been passed in.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;sub print_result&#xA;{&#xA;    my $subroutine = shift;&#xA;    &amp;amp;$subroutine( @_ );&#xA;}&#xA;&#xA;print_result( \&amp;amp;print_result_text, $arg1, $arg2 )&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Otherwise I think I'd go with with a hash of subroutine references. It's easily readable and simple to update.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;sub print_result&#xA;{&#xA;    my %print_hash = ( text =&amp;gt; \&amp;amp;print_result_text,&#xA;                        xml =&amp;gt; \&amp;amp;print_result_xml );&#xA;&#xA;    if( exists( $print_hash{ $outformat } ) )&#xA;    {&#xA;        &amp;amp;{$print_hash{ $outformat }}( @_ );&#xA;    }&#xA;    else&#xA;    {&#xA;        printf(STDERR &quot;Error: unsupported output format '%s'\n&quot;, $outformat);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="72" LastActivityDate="2011-01-20T22:47:15.107" CommentCount="1" />
  <row Id="122" PostTypeId="2" ParentId="9" CreationDate="2011-01-21T00:30:18.750" Score="17" Body="&lt;p&gt;Since you're using C#, you can make your initializers a bit nicer:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Grid g = new Grid()&#xA;{&#xA;    Width = 50,&#xA;    Height = 50,&#xA;    Tag = focus,&#xA;}&#xA;//Canvas.SetZIndex(g, 100);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The last part of your code (or rather, the second half) does very similar things multiple times: code duplication is a sign your code can be made clearer. For instance (note that your code almost surely contains a bug! The statement inside all the loops invokes s2 and not s3):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;foreach (SourceFile s in list)&#xA;{&#xA;    foreach (SourceFile source in s.getInvocations())&#xA;    {&#xA;        foreach (SourceFile s1 in source.getInvocations())&#xA;        {&#xA;            foreach (SourceFile s2 in s1.getInvocations())&#xA;            {&#xA;                foreach (SourceFile s3 in s2.getInvocations())&#xA;                {&#xA;                    invoCount = invoCount + s2.getInvocations().Count;&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;can be changed into&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;list.CountRecursive(t =&amp;gt; t.getInvocations(), t =&amp;gt; t.getInvocations().Count, 5);&#xA;&#xA;(...)&#xA;&#xA;public static int CountRecursive&amp;lt;T&amp;gt;(this IEnumerable&amp;lt;T&amp;gt; x, Func&amp;lt;T, IEnumerable&amp;lt;T&amp;gt;&amp;gt; f, Func&amp;lt;T, int&amp;gt; c, int depth)&#xA;{&#xA;    int counter = 0;&#xA;    foreach (T t in x)&#xA;    {&#xA;        if (depth &amp;gt; 1)&#xA;        {&#xA;            counter += f(t).CountRecursive(f, c, depth - 1);&#xA;        }&#xA;        else&#xA;        {&#xA;            counter += c(t);&#xA;        }&#xA;    }&#xA;    return counter;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;which also makes it a lot easier to do it for different recursion levels.&lt;/p&gt;&#xA;" OwnerUserId="172" LastEditorUserId="7773" LastEditDate="2012-02-29T14:51:39.960" LastActivityDate="2012-02-29T14:51:39.960" CommentCount="0" />
  <row Id="123" PostTypeId="2" ParentId="79" CreationDate="2011-01-21T03:57:08.000" Score="9" Body="&lt;p&gt;I use a pattern similar to one already posted, but with the following difference:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public sealed class Logging&#xA;{&#xA;    static Logging instance = null;&#xA;    static readonly object lockObj = new object();&#xA;&#xA;    private Logging()&#xA;    {&#xA;    }&#xA;&#xA;    public static Logging Logger&#xA;    {&#xA;        get&#xA;        {&#xA;            **if (instance == null)**&#xA;            {&#xA;                 lock (lockObj)&#xA;                 {&#xA;                     if (instance == null)&#xA;                     {&#xA;                         instance = new Logging();&#xA;                     }&#xA;&#xA;                 }&#xA;            }&#xA;            return instance;&#xA;        }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;}&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The reason being that it avoids calling lock every time, which can help you with performance.  So you check for null, then, if it is null, lock it.  Then you have to check for null again (because someone may have come in right that second) but then you should be ok.  That way, you'll only hit the lock the first time (or two), and blow past it without locking the rest of the time.&lt;/p&gt;&#xA;" OwnerUserId="6" LastEditorUserId="6" LastEditDate="2011-01-21T13:56:04.457" LastActivityDate="2011-01-21T13:56:04.457" CommentCount="3" />
  <row Id="127" PostTypeId="2" ParentId="69" CreationDate="2011-01-21T13:42:45.263" Score="10" Body="&lt;p&gt;The question of whether your code is performant enough is something your profiler can better answer for you. But from looking through the code above I notice quite a bit of duplication along with some rather deeply nested if's which you should try to refactor. Take this for example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;        if (li.getX1() &amp;lt; li.getX2()) {&#xA;            Line2D l = new Line2D.Double(li.getP1(), li.getP2());&#xA;            events.add(new AlgEvent(l, true));&#xA;            events.add(new AlgEvent(l, false));&#xA;        } else if (li.getX1() &amp;gt; li.getX2()) {&#xA;            Line2D l = new Line2D.Double(li.getP2(), li.getP1());&#xA;            events.add(new AlgEvent(l, true));&#xA;            events.add(new AlgEvent(l, false));&#xA;        } else {&#xA;            if (li.getY1() &amp;lt; li.getY2()) {&#xA;                Line2D l = new Line2D.Double(li.getP1(), li.getP2());&#xA;                events.add(new AlgEvent(l, true));&#xA;                events.add(new AlgEvent(l, false));&#xA;            } else if (li.getY1() &amp;gt; li.getY2()) {&#xA;                Line2D l = new Line2D.Double(li.getP2(), li.getP1());&#xA;                events.add(new AlgEvent(l, true));&#xA;                events.add(new AlgEvent(l, false));&#xA;            } else&#xA;          // ...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The two statements &lt;code&gt;events.add(new AlgEvent(l, true));&lt;/code&gt; and &lt;code&gt;events.add(new AlgEvent(l, false));&lt;/code&gt; are being repeated 4 times here!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Your line compare method here:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;static class LineComparator implements Comparator&amp;lt;Line2D&amp;gt; {&#xA;    public int compare(Line2D o1, Line2D o2) {&#xA;        if (o1.getY1() &amp;lt; o2.getY1()) {&#xA;            return -1;&#xA;        } else if (o1.getY1() &amp;gt; o2.getY2()) {&#xA;       // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;can be shorted by taking advantage of logical short-circuit and the ternary operator. So something like this might be easier to read:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    public int compare(Line2D o1, Line2D o2)&#xA;    {&#xA;        /* I'm not too familiar with java but can&#xA;           the equals method be used here to check&#xA;           if the lines are equal?&#xA;         */&#xA;        // if( o1.equals(o2) ) return 0;&#xA;&#xA;        return (o1.getY1() &amp;lt; o2.getY1() || &#xA;                o1.getY2() &amp;lt; o2.getY2()) ? -1 :&#xA;               (o1.getY1() &amp;gt; o2.getY2() ||&#xA;                o1.getY2() &amp;gt; o2.getY2()) ? 1 : 0;&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You can apply the same idea to AlgEvtComparator's compare method. One other thing I noticed in your line compare method, the checks' aren't exactly symmetrical. You have o1.Y1 comparing to o2.Y2 while all the others are checking Y1 to Y1 or Y2 to Y2. Was that really intended? I think this deserves a comment.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'm guessing Line2D is a class you have defined somewhere. You might want to see if you're abstracting its usage enough or if an 'in-between' class is needed. The following code looks like it's leaking stuffing behind Line2D's interface:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if (estPath.size() != 0) {&#xA;  Point2D pp = estPath.get(estPath.size() - 1).getP2();&#xA;  estPath.add(new Line2D.Double(pp, new Point2D.Double(coords[0],coords[1])));&#xA;} else {&#xA;  estPath.add(new Line2D.Double(new Point2D.Double(), new Point2D.Double(coords[0],coords[1])));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="71" LastEditorUserId="71" LastEditDate="2011-01-21T13:48:52.670" LastActivityDate="2011-01-21T13:48:52.670" CommentCount="1" />
  <row Id="128" PostTypeId="1" AcceptedAnswerId="129" CreationDate="2011-01-21T14:07:09.330" Score="23" ViewCount="8499" Body="&lt;p&gt;So I have a series of objects, which I will call Impl1, Impl2, and Impl3.  They each implement an interface, called IImpl.  I have a Factory class who's task is to retrieve the ImplX which is appropriate for a given circumstance, and pass it on to its callers.  So the code in the factory looks like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public IImpl GetInstance(params object[] args)&#xA;{&#xA;    if (args[0]==&quot;Some Value&quot;)&#xA;         return new IImpl1();&#xA;    else if (args[0]==&quot;Other Value&quot;)&#xA;         return new IImpl2(args[1]);&#xA;    else&#xA;         return new IImpl3(args[1]);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;So depending on the arguments passed in, different instances are selected.  All well and good and works ok.  The problem now is, that I have a class which needs to call this factory method.  It has no references to IImplX, which is good, but it winds up having to know exactly how to construct the input array to GetInstance, in order to ensure it receives the correct kind of instance.  Code winds up looking like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;switch (_selectedInputEnum)&#xA;{&#xA;    case InputType.A:&#xA;        myIImplInst = Factory.GetInstance(&quot;Some Value&quot;);&#xA;    case InputType.B:&#xA;        myIImplInst = Factory.GetInstance(&quot;Other Value&quot;,this.CollectionB);&#xA;    case InputType.C:&#xA;        myIImplInst = Factory.GetInstance(&quot;Third Value&quot;,this.CollectionC);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This feels very redundant, and off somehow.  What would be the best way to abstract the actual parameters of the factory?  I feel like with the above switch statement, I am strongly coupled to the implemenations of IImplx, even if I don't have a direct reference.&lt;/p&gt;&#xA;" OwnerUserId="6" LastActivityDate="2016-04-21T20:25:07.637" Title="Best way to pass parameters to Factory class?" Tags="&lt;c#&gt;&lt;.net&gt;&lt;design-patterns&gt;" AnswerCount="5" CommentCount="1" FavoriteCount="2" />
  <row Id="129" PostTypeId="2" ParentId="128" CreationDate="2011-01-21T14:42:09.250" Score="9" Body="&lt;p&gt;How about some kind of intermediary blackboard that the client code constructs before calling the factory, and each concrete Impl can poll to construct itself?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// client code:&#xA;&#xA;Blackboard blackboard = new Blackboard();&#xA;blackboard.pushCollectionB(collectionB);&#xA;blackboard.pushCollectionC(collectionC);&#xA;blackboard.pushFoo(foo); &#xA;&#xA;IImpl myInstance = Factory.GetInstance(b);&#xA;&#xA;///////////////////////////&#xA;&#xA;// in Factory.GetInstance():&#xA;&#xA;return new Impl3(blackboard);&#xA;&#xA;////////////////////////////&#xA;&#xA;// in Impl3:&#xA;&#xA;Impl3(Blackboard b) { process(b.getCollectionC()); }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I've hidden the switch statement in the client code, but you could move that into the blackboard as well.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What data each concrete Impl needs is now hidden from both the Factory and the client code. However if you need more data in your Blackboard for Impl(x+1) you will need to update every place in your code that creates a Blackboard.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Depending on application, over-constructing the Blackboard like this may be expensive for you. You could construct a cached version at startup, or you could make the Blackboard an interface and have your client code derive from it.&lt;/p&gt;&#xA;" OwnerUserId="145" LastActivityDate="2011-01-21T14:42:09.250" CommentCount="2" />
  <row Id="131" PostTypeId="1" AcceptedAnswerId="153" CreationDate="2011-01-21T16:26:15.320" Score="19" ViewCount="1826" Body="&lt;p&gt;&lt;em&gt;Inspired by &lt;a href=&quot;http://codereview.stackexchange.com/q/97&quot;&gt;this question&lt;/a&gt;, but hopefully not a duplicate.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I understand that the Law of Demeter is very useful in case of services interacting with other services, for example it's much easier to mock the other services in unit tests.&#xA;What about services interacting with data models, though?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Let's say I have a hierarchy of immutable classes:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public final class Document {&#xA;    private final List&amp;lt;Page&amp;gt; pages;&#xA;    // Constructor, getter, ...&#xA;}&#xA;&#xA;public final class Page {&#xA;    private final List&amp;lt;Paragraph&amp;gt; paragraphs;&#xA;    // Constructor, getter, ...&#xA;}&#xA;&#xA;public final class Paragraph {&#xA;    private final List&amp;lt;Line&amp;gt; lines;&#xA;    // Constructor, getter, ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Let's say I want to do something with certain lines in a document &lt;code&gt;doc&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public void doSomething(Document doc) {&#xA;    for (Page page : doc.getPages()) {&#xA;        for (Paragraph para : page.getParagraphs()) {&#xA;            for (Line line : para.getLines()) {&#xA;                if (someCondition(line)) {&#xA;                    someAction(line);&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now, as far as I understand, the above code doesn't obey the Law of Demeter.&#xA;However, I don't want to force the law at all cost and clutter the model (here, the &lt;code&gt;Document&lt;/code&gt; class) with tens of methods like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public List&amp;lt;Line&amp;gt; filterWrtSomeCondition();&#xA;public List&amp;lt;Line&amp;gt; filterWrtSomeOtherCondition();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Or maybe there's a third way?  I suspect that the Law of Demeter applies primarily to services interacting with other services.  Is it a valid interpretation?&lt;/p&gt;&#xA;" OwnerUserId="144" LastActivityDate="2011-01-27T16:51:16.763" Title="Law of Demeter and data models?" Tags="&lt;java&gt;&lt;design-patterns&gt;" AnswerCount="4" CommentCount="0" FavoriteCount="0" />
  <row Id="133" PostTypeId="2" ParentId="131" CreationDate="2011-01-21T17:07:04.617" Score="2" Body="&lt;p&gt;I'd say that it isn't cluttering the model personally.  You are actually protecting yourself by not exposing internal implementation of your document class.  The entire idea is to put all of your behavior into your class instead of having external code modify the class in such a way that it may not pass its own internal invariants.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Perhaps it also would make sense to make subclasses of your Document class which are specialized and only have the methods related to that usage of your Document.  You don't have to have a one stop shop where you can do absolutely everything, since that's probably not going to be your primary use case in all instances.&lt;/p&gt;&#xA;" OwnerUserId="55" LastActivityDate="2011-01-21T17:07:04.617" CommentCount="3" />
  <row Id="134" PostTypeId="2" ParentId="50" CreationDate="2011-01-21T18:02:08.187" Score="1" Body="&lt;p&gt;For a game with no serious consequences you could just run it a bunch of times and see if it seems satisfying.  For something where there are serious consequences to it not being a good enough shuffle I would think that you shouldn't wonder if a shuffle is good enough, you need to have theory that tells you it is good enough (possibly under assumptions you are happy with).  Related to this Vol. 2 of The Art of Computer Programming in its first chapter gives lots of information about generating random numbers, AND how to test them.&lt;/p&gt;&#xA;" OwnerUserId="123" LastActivityDate="2011-01-21T18:02:08.187" CommentCount="0" />
  <row Id="135" PostTypeId="7" CreationDate="2011-01-21T18:08:20.040" Score="0" Body="&lt;p&gt;Code Review - Stack Exchange is for &lt;strong&gt;sharing code from projects you are working on&lt;/strong&gt; for peer review. If you are looking for feedback on a specific working piece of code from your project in the following areas&amp;hellip;&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Best practices and design pattern usage&lt;/li&gt;&#xA;&lt;li&gt;Security issues&lt;/li&gt;&#xA;&lt;li&gt;Performance&lt;/li&gt;&#xA;&lt;li&gt;Correctness in unanticipated cases&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;then you are in the right place!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;However, if your question is not about a particular piece of code and instead is a generally applicable question about &amp;hellip;&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Tools, best practices, improving, or conducting code reviews&lt;/li&gt;&#xA;&lt;li&gt;Trouble-shooting, debugging, or understanding code snippets&lt;/li&gt;&#xA;&lt;li&gt;Higher-level architecture and design of software systems&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;then your question is off-topic for this site.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;I'm confused! What questions are on-topic for this site?&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Simply ask yourself the following questions. To be on-topic the answer must be yes to all questions:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Does my question contain code? (Please include the code in the question, not a link to it)&lt;/li&gt;&#xA;&lt;li&gt;Did I write that code?&lt;/li&gt;&#xA;&lt;li&gt;Is it actual code from a project rather than pseudo-code or example code?&lt;/li&gt;&#xA;&lt;li&gt;Do I want the code to be good code, (i.e. not code-golfing, obfuscation, or similar)&lt;/li&gt;&#xA;&lt;li&gt;To the best of my knowledge, does the code work?&lt;/li&gt;&#xA;&lt;li&gt;Do I want feedback about any or all facets of the code?&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;If you answered yes to all the above questions, your question is on-topic for Code Review.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Make sure you include your code in your question&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;This site is for code reviews, which are hard to do when the code is behind a link somewhere out there on the internet. If you want a code review, you &lt;em&gt;must&lt;/em&gt; post the relevant snippets of code &lt;em&gt;in your question&lt;/em&gt;. It is fine to post a &quot;see more&quot; link (though, do be careful &amp;mdash; very few reviewers will be willing to click through and read thousands of lines of your code), but the most important parts of the code &lt;em&gt;must&lt;/em&gt; be placed directly in the question.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Reviewers may comment on any part of the code.&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Feel free to call attention to specific areas you are concerned about (performance, formatting, etc). However, &lt;em&gt;any&lt;/em&gt; aspect of the code posted is fair game for feedback and criticism.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;What? Questions &lt;em&gt;about&lt;/em&gt; code reviews are off topic?&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Conducting code reviews is an important skill, much like any other programming discipline. These &quot;whiteboard&quot;-style questions are best asked on &lt;a href=&quot;http://programmers.stackexchange.com&quot;&gt;Programmers Stack Exchange&lt;/a&gt;.&lt;/p&gt;&#xA;" OwnerUserId="-1" LastEditorUserId="1659" LastEditDate="2013-04-20T22:39:30.130" LastActivityDate="2013-04-20T22:39:30.130" CommentCount="0" />
  <row Id="136" PostTypeId="1" AcceptedAnswerId="137" CreationDate="2011-01-21T18:08:22.390" Score="10" ViewCount="338" Body="&lt;p&gt;Would this function be sufficient enough to remove all malicious code and foreign characters from a string?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;//Clean the string&#xA;$out = ltrim($do);&#xA;$out = rtrim($out);&#xA;$out = preg_replace('/[^(\x20-\x7F)]*/','', strip_tags($out)); &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This data is not going into a SQL database, so I dont have to worry about sql injection attempts. Is there any way to improve my code and make it more efficient?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This function would clean any user inputted data (forms, and ?), and then save it do a database. This would be used in a global sanitizing function.&lt;/p&gt;&#xA;" OwnerUserId="121" LastEditorUserId="27623" LastEditDate="2014-12-19T21:41:09.163" LastActivityDate="2014-12-19T21:41:09.163" Title="Is this a sufficient way to prevent script injections and other bad stuff in strings" Tags="&lt;php&gt;&lt;strings&gt;&lt;security&gt;&lt;regex&gt;" AnswerCount="2" CommentCount="3" FavoriteCount="1" />
  <row Id="137" PostTypeId="2" ParentId="136" CreationDate="2011-01-21T18:14:05.447" Score="16" Body="&lt;p&gt;That one is quite simple (for me at least) since there is a very general answer :)&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;NO&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;There is no way you can ever really safely &quot;repair&quot; user input.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;&quot;Please provide a list of everything you shouldn't to with a hammer&quot; &lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;is &lt;em&gt;way&lt;/em&gt; harder than &lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;&quot;list all appropriate uses of a hammer&quot;. &lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;You might forget one or two but no harm done there if you go back and add them.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It might sound harsh but something will always byte you and if it's only &lt;code&gt;EVAL(UNHEX(ASD23426363))&lt;/code&gt; or something like that. (Sql example even so you did say it not sql but whatever).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Of course you might want to do things like strip out tags out of input for html context anyways so that a hole in your other code is not as easily exploited and less damage will be done but i shouldn't be your only defense.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Someone that said &lt;a href=&quot;http://terrychay.com/article/php-advent-security-filter-input-escape-output.shtml&quot;&gt;&lt;code&gt;Filter Input, Escape Output&lt;/code&gt;&lt;/a&gt; way better than i could. Terry Chay&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;In short: Whatever you are doing there, find the appropriate escaping function and use it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Shell context ? &lt;a href=&quot;http://php.net/escapeshellarg&quot;&gt;&lt;code&gt;escapeshellarg&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Html context ? &lt;a href=&quot;http://php.net/htmlentities&quot;&gt;&lt;code&gt;htmlspecialchars&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Database context ? Use prepared statements and never worry about sql injection again&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Little edit:&#xA;I know what i said and the blog post contradict a little but thats fine with me. 'In practice' will always differ from general advice and sometimes you want to do everything you can ;) &lt;/p&gt;&#xA;" OwnerUserId="113" LastEditorUserId="28" LastEditDate="2011-01-22T04:58:52.320" LastActivityDate="2011-01-22T04:58:52.320" CommentCount="0" />
  <row Id="138" PostTypeId="1" AcceptedAnswerId="144" CreationDate="2011-01-21T19:10:07.230" Score="12" ViewCount="1034" Body="&lt;p&gt;I don't like the fact that I am selecting all the points, even though I only care about the count of them.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Which of the &lt;code&gt;from&lt;/code&gt; parts should appear first, if it even matters?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var count = (from type in ValidTypes()&#xA;    from point in GetData(type)&#xA;    where point.Radius &amp;gt; referencePoint.Radius&#xA;        &amp;amp;&amp;amp; point.Theta &amp;gt; referencePoint.Theta&#xA;    select point).Count()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;ValidTypes()&lt;/code&gt; returns a few types, about 5.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;GetData(type)&lt;/code&gt; may return many points, possibly 100,000.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This query is counting the number of points that have both a larger theta and a larger radius than a given point.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Is there a way to write this faster or more readable?&lt;/p&gt;&#xA;" OwnerUserId="163" LastEditorUserId="22222" LastEditDate="2014-07-07T21:54:20.697" LastActivityDate="2014-07-07T21:54:20.697" Title="Counting the number of points that have both a larger theta and a larger radius than a given point" Tags="&lt;c#&gt;&lt;linq&gt;" AnswerCount="4" CommentCount="3" />
  <row Id="141" PostTypeId="2" ParentId="128" CreationDate="2011-01-21T19:44:38.703" Score="1" Body="&lt;p&gt;It seems to me that the factory should be choosing the ImplX based on arg[1] then instead of arg[0]. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;So something like this would remove the need for the switch, arg[1] is now arg[0] in this example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public IImpl GetInstance(params object[] args)&#xA;{&#xA;    if (args.length == 0)&#xA;         return new IImpl1();&#xA;    else if (args[0] is IEnumerable&amp;lt;string&amp;gt;)&#xA;         return new IImpl2(args[0]);&#xA;    else&#xA;         return new IImpl3(args[0]);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You could then call it like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var impl1 = GetInstance();&#xA;var impl2 = GetInstance(new List&amp;lt;string&amp;gt;{&quot;1&quot;,&quot;2&quot;});&#xA;var impl3 = GetInstance(&quot;&quot;);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Edit:&#xA;If you don't want the caller to have to know the inner works of it then you should expose overloads for getInstance so:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public IImpl GetInstance()&#xA;{ &#xA;    return new Impl1();&#xA;}&#xA;public IImpl GetInstance(IEnumberable&amp;lt;string&amp;gt; strings)&#xA;{&#xA;    return new Impl2(strings);&#xA;}&#xA;public IImpl GetInstance(string string)&#xA;{&#xA;    return new Impl3(string);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="33" LastEditorUserId="33" LastEditDate="2011-01-21T20:11:06.783" LastActivityDate="2011-01-21T20:11:06.783" CommentCount="4" />
  <row Id="142" PostTypeId="1" AcceptedAnswerId="266" CreationDate="2011-01-21T20:09:42.960" Score="10" ViewCount="1317" Body="&lt;p&gt;This is a function I wrote yesterday and have tested with lots of input. It's been committed and is in use, but no review was done, so it seems like a good candidate for Code Review: it could be more readable and maybe refactored into simpler functions.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Its purpose is to give the longest common path and a string listing filenames for lists of dictionaries with full file paths. It's used to process &lt;a href=&quot;https://api.bitbucket.org/1.0/repositories/jespern/django-piston/changesets/c9fe89f3ec79/&quot;&gt;Bitbucket API results&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import os.path&#xA;import py # Used for other functions, listed for possible use in refactoring&#xA;&#xA;def getpaths(files, listfiles=False):&#xA;    &quot;&quot;&quot;For a list of files, a common path prefix and optionally list filenames&#xA;&#xA;    Returns a tuple (common_prefix, filenames):&#xA;        common_prefix: Longest common path to all files in the input. If input&#xA;                       is a single file, contains full file path.&#xA;                       Slash-terminated if present and directory, empty string&#xA;                       otherwise.&#xA;        filenames: String containing the names of modified files, in the format&#xA;                   &quot; M(file1, file2)&quot; if listfiles=True, empty string&#xA;                   if either listfiles=False or no file was modified.&#xA;    &quot;&quot;&quot;&#xA;&#xA;    # Handle empty input&#xA;    if not files:&#xA;        return '', ''&#xA;    files = [f['file'] for f in files]&#xA;    if not any(files):&#xA;        return '', ''&#xA;&#xA;    dirname = os.path.dirname&#xA;    basename = os.path.basename&#xA;&#xA;    common_prefix = [dirname(f) for f in files]&#xA;&#xA;    # Single file, show its full path&#xA;    if len(files) == 1:&#xA;        common_prefix = files[0]&#xA;        listfiles = False&#xA;&#xA;    else:&#xA;        common_prefix = [path.split(os.sep) for path in common_prefix]&#xA;        common_prefix = os.sep.join(os.path.commonprefix(common_prefix))&#xA;        if common_prefix and not common_prefix.endswith('/'):&#xA;            common_prefix += '/'&#xA;&#xA;    if listfiles:&#xA;        filenames = [basename(f) for f in files if f and basename(f)]&#xA;        filenames = ' M(%s)' % ', '.join(filenames)&#xA;    else:&#xA;        filenames = ''&#xA;    return common_prefix, filenames&#xA;&#xA;# Test suite    &#xA;# Don't worry too much about test style, this is informative enough with py.test.&#xA;# Adequate coverage and readibility are the main concern.&#xA;# However, if you think a doctest or classic unittest is better, I'm open to change.&#xA;&#xA;def test_getpaths():&#xA;    d = dict&#xA;&#xA;    barefile = [d(file='file')]&#xA;    distinct = [d(file='path1/file1'), d(file='path2/file2'),&#xA;                d(file='path3/file')]&#xA;    shared = [d(file='path/file1'), d(file='path/file2'),&#xA;              d(file='path/file')]&#xA;&#xA;    deepfile = [d(file='a/long/path/to/deepfile.py')]&#xA;    slashesfile = [d(file='/slashesfile/')]&#xA;    slashleft = [d(file='/slashleft')]&#xA;    slashright = [d(file='slashright/')]&#xA;&#xA;&#xA;    nocommon = distinct + [d(file='path4/file')]&#xA;    nocommonplusroot = distinct + barefile&#xA;&#xA;    common = [d(file='some/path/to/file'), d(file='some/path/to/deeper/file'),&#xA;              d(file='some/path/to/anotherfile'), d(file='some/path/to/afile')]&#xA;    commonplusroot = shared + barefile&#xA;&#xA;    empty = d(file='')&#xA;    nocommonplusempty = distinct + [empty]&#xA;    commonplusempty = shared + [empty]&#xA;    nocommonplusslash = distinct + [d(file='path4/dir/')]&#xA;    commonplusslash = shared + [d(file='path/dir/')]&#xA;&#xA;    pypydoubleslash = [d(file='pypy/jit/metainterp/opt/u.py'),&#xA;                       d(file='pypy/jit/metainterp/test/test_c.py'),&#xA;                       d(file='pypy/jit/metainterp/test/test_o.py')]&#xA;    nothing = ('', '')&#xA;&#xA;    # (input, expected output) for listfiles=False&#xA;    files_expected = [([], nothing),&#xA;                      ([empty], nothing),&#xA;                      ([empty, empty], nothing),&#xA;                      (barefile, ('file', '')),&#xA;                      (deepfile, ('a/long/path/to/deepfile.py', '')),&#xA;                      (slashesfile, ('/slashesfile/', '')),&#xA;                      (slashleft, ('/slashleft', '')),&#xA;                      (slashright, ('slashright/', '')),&#xA;                      (nocommon, nothing),&#xA;                      (nocommonplusroot, nothing),&#xA;                      (nocommonplusempty, nothing),&#xA;                      (common, ('some/path/to/', '')),&#xA;                      (commonplusroot, nothing),&#xA;                      (commonplusempty, nothing),&#xA;                      (nocommonplusslash, nothing),&#xA;                      (commonplusslash, ('path/', '')),&#xA;                      (pypydoubleslash, ('pypy/jit/metainterp/', '')),&#xA;                      ]&#xA;&#xA;    for f, wanted in files_expected:&#xA;        assert getpaths(f) == wanted&#xA;&#xA;    # (input, expected output) for listfiles=True&#xA;    files_expected = [([], nothing),&#xA;                      ([empty], nothing),&#xA;                      ([empty, empty], nothing),&#xA;                      (barefile, ('file', '')),&#xA;                      (deepfile, ('a/long/path/to/deepfile.py', '')),&#xA;                      (slashesfile, ('/slashesfile/', '')),&#xA;                      (slashleft, ('/slashleft', '')),&#xA;                      (slashright, ('slashright/', '')),&#xA;                      (nocommon, ('', ' M(file1, file2, file, file)')),&#xA;                      (nocommonplusroot, ('', ' M(file1, file2, file, file)')),&#xA;                      (nocommonplusempty, ('',' M(file1, file2, file)')),&#xA;                      (common, ('some/path/to/',&#xA;                                ' M(file, file, anotherfile, afile)')),&#xA;                      (commonplusroot, ('', ' M(file1, file2, file, file)')),&#xA;                      (commonplusempty, ('',' M(file1, file2, file)')),&#xA;                      (nocommonplusslash, ('',' M(file1, file2, file)')),&#xA;                      (commonplusslash, ('path/',' M(file1, file2, file)')),&#xA;                      (pypydoubleslash, ('pypy/jit/metainterp/',&#xA;                                         ' M(u.py, test_c.py, test_o.py)')),&#xA;                      ]&#xA;&#xA;    for f, wanted in files_expected:&#xA;        assert getpaths(f, listfiles=True) == wanted&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Improvements for both the function and its tests are welcome. For some context, this is how it's used:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;# Here's the kind of data we want to process. The return for listfiles=False&#xA;# should be ('bit/', ''). For True,&#xA;# ('bit/', ' M(hook.py, __init__.py, __init__.py, test_hook.py)')&#xA;&#xA;commit = {&#xA;    u'files': [{u'file': u'bit/hook.py', u'type':&#xA;                u'modified'},&#xA;               {u'file': u'bit/__init__.py',&#xA;                u'type': u'added'},&#xA;               {u'file': u'bit/test/__init__.py',&#xA;                u'type': u'added'},&#xA;               {u'file': u'bit/test/test_hook.py',&#xA;                u'type': u'added'}]&#xA;          }&#xA;&#xA;files = commit.get('files', [])&#xA;common_prefix, filenames = getpaths(files, True)&#xA;common_prefix = '/' + common_prefix&#xA;print '%s%s: ' % (common_prefix, filenames)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="90" LastEditorUserId="90" LastEditDate="2011-01-26T21:06:18.807" LastActivityDate="2011-01-27T09:41:53.407" Title="Function for finding longest common path and formatting it along with filenames" Tags="&lt;python&gt;&lt;unit-testing&gt;" AnswerCount="1" CommentCount="1" FavoriteCount="2" />
  <row Id="143" PostTypeId="2" ParentId="136" CreationDate="2011-01-21T20:17:55.463" Score="8" Body="&lt;p&gt;I'm doing a copy-pasta from &lt;a href=&quot;http://stackoverflow.com/questions/4762824/php-security-sanitize-clean/4763314#4763314&quot;&gt;My Answer to a similar question on SO&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Always remember, &lt;em&gt;Filter In, Escape Out&lt;/em&gt; for all user supplied (or untrusted) input.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;When reading user supplied data, filter it to known values.  &lt;strong&gt;DO NOT BLACKLIST!&lt;/strong&gt;  Always always always &lt;strong&gt;always&lt;/strong&gt; whitelist what you are expecting to get.  If you're expecting a hex number, validate it with a regex like: &lt;code&gt;^[a-f0-9]+$&lt;/code&gt;.  Figure out what you expect, and filter towards that.  Do none of your filenames have anything but alpha, numeric and &lt;code&gt;.&lt;/code&gt;?  Then filter to &lt;code&gt;^[a-z0-9.]+$&lt;/code&gt;.  But don't start thinking blacklisting against things.  It won't work.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;When using user-data, escape it properly for the use at hand.  If it's going in a database, either bind it as a parameterized query, or escape it with the database's escape function.  If you're calling a shell command, escape it with &lt;a href=&quot;http://us.php.net/manual/en/function.escapeshellarg.php&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;escapeshellarg()&lt;/code&gt;&lt;/a&gt;.  If you're using it in a regex pattern, escape it with &lt;a href=&quot;http://us.php.net/manual/en/function.preg-quote.php&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;preg_quote()&lt;/code&gt;&lt;/a&gt;.  There are more than that, but you get the idea.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;When outputting user data, escape it properly for the format you're outputting it as.  If you're outputting it to HTML or XML, use &lt;a href=&quot;http://us.php.net/manual/en/function.htmlspecialchars.php&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;htmlspecialchars()&lt;/code&gt;&lt;/a&gt;.  If you're outputting to raw headers for some reason, escape any linebreaks (&lt;code&gt;str_replace(array(&quot;\r&quot;, &quot;\n&quot;), array('\r', '\n'), $string)&lt;/code&gt;).  Etc, etc, etc.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But always filter using a white-list, and always escape using the correct method for the context.  Otherwise there's a significant chance you'll miss something...&lt;/p&gt;&#xA;" OwnerUserId="14" LastEditorUserId="14" LastEditDate="2011-01-21T20:35:38.610" LastActivityDate="2011-01-21T20:35:38.610" CommentCount="0" />
  <row Id="144" PostTypeId="2" ParentId="138" CreationDate="2011-01-21T20:22:39.207" Score="8" Body="&lt;p&gt;First, your query is written fine. Its structure is not a concern; the order of the froms is clearly correct, the select is appropriate. Where you could look for improvement that could change the query (code and possibly performance) would be in the &lt;code&gt;GetData&lt;/code&gt; method. If, for example, &lt;code&gt;GetData&lt;/code&gt; is &lt;em&gt;getting data&lt;/em&gt; from an external, queryable source, then you may want to offload the filtering to &lt;em&gt;it&lt;/em&gt; rather than getting all of the data points and filtering it inside your application, particularly since you have so many points of data (potentially). So maybe your query could instead be &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(from type in ValidTypes()    &#xA; select GetData(type, referencePoint).Count())&#xA;.Sum();&#xA;&#xA;// or same meaning, different phrasing&#xA;&#xA;(from type in ValidTypes()&#xA;from point in GetData(type, referencePoint)&#xA;select point).Count();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="153" LastActivityDate="2011-01-21T20:22:39.207" CommentCount="0" />
  <row Id="145" PostTypeId="1" AcceptedAnswerId="269" CreationDate="2011-01-21T20:28:47.330" Score="11" ViewCount="586" Body="&lt;p&gt;I do most of my programming in C/C++ and Perl, but I currently learning Fortran. I began by coding up a simple program, something that took me &amp;lt; 5 minutes in Perl (see &lt;a href=&quot;http://biostar.stackexchange.com/questions/4993/extracting-set-of-numbers-from-a-file&quot; rel=&quot;nofollow&quot;&gt;this thread&lt;/a&gt; from BioStar). After working for several hours on a solution in Fortran 95 (teaching myself as I go), I came to this solution.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;implicit none&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;! Variable definitions&#xA;integer                 :: argc&#xA;integer                 :: num_digits&#xA;integer                 :: i, j&#xA;integer                 :: iocode&#xA;integer                 :: line_length&#xA;integer                 :: value&#xA;character ( len=256 )   :: infile&#xA;character ( len=16 )    :: int_format&#xA;character ( len=16 )    :: int_string&#xA;character ( len=2048 )  :: line&#xA;&#xA;! Verify and parse command line arguments&#xA;argc = iargc()&#xA;if( argc &amp;lt; 1 ) then&#xA;  write(*, '(A, I0, A)') &quot;Error: please provide file name (argc=&quot;, argc, &quot;)&quot;&#xA;  stop&#xA;endif&#xA;call getarg(1, infile)&#xA;&#xA;! Open input file, croak if there is an issue&#xA;open( unit=1, file=infile, action='read', iostat=iocode )&#xA;if( iocode &amp;gt; 0 ) then&#xA;  write(*, '(A, A, A)') &quot;Error: unable to open input file '&quot;, trim(infile), &quot;'&quot;&#xA;  stop&#xA;endif&#xA;&#xA;! Process the file, print in CSV format&#xA;do while(1 == 1)&#xA;  ! Read the line, skip if it is empty&#xA;  100 read( unit=1, fmt='(A)', end=200 ) line&#xA;  line_length = len_trim(line)&#xA;  if( line_length == 0 ) then&#xA;    goto 100&#xA;  endif&#xA;&#xA;  ! The first value in the line is a string&#xA;  ! Find string boundaries and print it out&#xA;  i = 0&#xA;  do while( line(i:i) == ' ' )&#xA;    i = i+1&#xA;  end do&#xA;  j = i&#xA;  do while( line(j:j) /= ' ' )&#xA;    j = j+1&#xA;  end do&#xA;  write(*, '(A)', advance=&quot;no&quot;) line(i:j-1)&#xA;&#xA;  ! Now grab the rest of the integer values&#xA;  ! on the line, multiply them by 3, and print&#xA;  i = j&#xA;  j = 0&#xA;  do while( i &amp;lt; line_length)&#xA;    do while( line(i:i) == ' ' )&#xA;      i = i+1&#xA;    end do&#xA;    j = i&#xA;    do while( j &amp;lt; line_length .and. line(j:j) /= ' ' )&#xA;      j = j+1&#xA;    end do&#xA;    int_string = line(i:j-1)&#xA;    read(int_string, '(I)') value&#xA;    value = value*3&#xA;    write(*, '(A, I0)', advance=&quot;no&quot;) &quot;,&quot;, value&#xA;    i = j&#xA;    j = 0&#xA;  end do&#xA;&#xA;  print *&#xA;end do&#xA;200 close( 1 )&#xA;&#xA;end program&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;There is a lot that I don't like about how I've written this program, but it's hard to separate my inexperience with the new syntax from bad practice. One thing in particular that I don't like is my use of labels and the infamous &lt;code&gt;goto&lt;/code&gt; statement. I'm interested in any feedback whatsoever, but I'm particularly interested in better ways to handle the control structure of the program (without using the &lt;code&gt;goto&lt;/code&gt; statement and &lt;code&gt;end&lt;/code&gt; parameter in the &lt;code&gt;read&lt;/code&gt; function if possible).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The compilers I have access to only support features through f95.&lt;/p&gt;&#xA;" OwnerUserId="45" LastEditorUserId="22222" LastEditDate="2015-01-30T16:36:14.980" LastActivityDate="2015-01-30T16:36:14.980" Title="Extracting a set of numbers from a file" Tags="&lt;file&gt;&lt;fortran&gt;" AnswerCount="2" CommentCount="0" FavoriteCount="1" />
  <row Id="146" PostTypeId="1" AcceptedAnswerId="211" CreationDate="2011-01-21T20:58:41.327" Score="15" ViewCount="543" Body="&lt;p&gt;It's a little bit more code but i wanted to show the full class. I highlight the points i'd like input after the source.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I've cut comments since they where not in english and translated the important ones.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The class is inspired by PearDb (too old) and Zend_DB (to cluttered / unfinished at the time) and is used in a inhouse application. I know it's not idea to write your own database handler (i'd go so far to say pretty pointless :) ) but given that lets look at the code:&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Code&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?php&#xA;&#xA;class DbStatement {&#xA;&#xA;    private $oStatement;&#xA;    private $aFieldnames = array();&#xA;    private $aResultRow = array();&#xA;    private $aResultSet = array();&#xA;    private $bMetadata = true;&#xA;    private $bPreparedFetch = false;&#xA;    private $iNumRows = false;&#xA;    private $sQuery;&#xA;    private $aArgs;&#xA;    private $fQuerytime;&#xA;&#xA;    /**&#xA;     * @throws DbException&#xA;     * @param mysqli $oDb Datenbankverbindung&#xA;     * @param string $sQuery&#xA;     */&#xA;    public function __construct(mysqli $oDb, $sQuery) {&#xA;        $this-&amp;gt;oStatement = $oDb-&amp;gt;prepare($sQuery);&#xA;        $this-&amp;gt;sQuery = $sQuery;&#xA;        if($this-&amp;gt;oStatement === false) {&#xA;            switch($oDb-&amp;gt;errno) {&#xA;                case 1054:&#xA;                    throw new DbNoSuchFieldException($oDb-&amp;gt;error, $oDb-&amp;gt;errno);&#xA;                case 1146:&#xA;                    throw new DbNoSuchTableException($oDb-&amp;gt;error, $oDb-&amp;gt;errno);&#xA;                default:&#xA;                    throw new DbException(&#xA;                        &quot;Prepared Statement could not be created: &quot;.&#xA;                        $oDb-&amp;gt;error.&quot; (&quot;.$oDb-&amp;gt;errno.&quot;). Query was: '$sQuery'&quot;,&#xA;                        $oDb-&amp;gt;errno&#xA;                    );&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    /**#@+&#xA;     *&#xA;     * @param mixed $mParams,...&#xA;     */&#xA;&#xA;    public function execute() {&#xA;        $this-&amp;gt;_execute(func_get_args());&#xA;        $this-&amp;gt;_done();&#xA;    }&#xA;&#xA;    /**&#xA;     * @return null|bool|int|string|float&#xA;     */&#xA;    public function getOne() {&#xA;        $this-&amp;gt;_execute(func_get_args());&#xA;        $this-&amp;gt;_fetchRow();&#xA;        if(isset($this-&amp;gt;aResultSet[0][$this-&amp;gt;aFieldnames[0]])) {&#xA;            return $this-&amp;gt;aResultSet[0][$this-&amp;gt;aFieldnames[0]];&#xA;        }&#xA;        return null;&#xA;    }&#xA;&#xA;    /**&#xA;     * @return array&#xA;     */&#xA;    public function getCol() {&#xA;        $this-&amp;gt;_execute(func_get_args());&#xA;        $this-&amp;gt;_fetchAll();&#xA;        $sIndex = $this-&amp;gt;aFieldnames[0];&#xA;        $aReturn = array();&#xA;        foreach($this-&amp;gt;aResultSet as $aResultRow) {&#xA;            $aReturn[] = $aResultRow[$sIndex];&#xA;        }&#xA;        return $aReturn;&#xA;    }&#xA;&#xA;    /**&#xA;     * @return array&#xA;     */&#xA;    public function getRow() {&#xA;        $this-&amp;gt;_execute(func_get_args());&#xA;        $this-&amp;gt;_fetchRow();&#xA;        if(isset($this-&amp;gt;aResultSet[0])) {&#xA;            return $this-&amp;gt;aResultSet[0];&#xA;        }&#xA;        return array();&#xA;    }&#xA;&#xA;    /**&#xA;     * @return array&#xA;     */&#xA;    public function getAssoc() {&#xA;        $this-&amp;gt;_execute(func_get_args());&#xA;        $this-&amp;gt;_fetchAll();&#xA;        if(isset($this-&amp;gt;aFieldnames[0]) &amp;amp;&amp;amp; isset($this-&amp;gt;aFieldnames[1])) {&#xA;            $sIndexKey = $this-&amp;gt;aFieldnames[0];&#xA;            $sIndexValue = $this-&amp;gt;aFieldnames[1];&#xA;            $aReturn = array();&#xA;            foreach($this-&amp;gt;aResultSet as $aResultRow) {&#xA;                $aReturn[$aResultRow[$sIndexKey]] = $aResultRow[$sIndexValue];&#xA;            }&#xA;            return $aReturn;&#xA;        }&#xA;        return array();&#xA;    }&#xA;&#xA;    /**&#xA;     * @return array&#xA;     */&#xA;    public function getAll() {&#xA;        $this-&amp;gt;_execute(func_get_args());&#xA;        $this-&amp;gt;_fetchAll();&#xA;        return $this-&amp;gt;aResultSet;&#xA;    }&#xA;    /**#@-*/&#xA;&#xA;    /**&#xA;     * @return false|int&#xA;     */&#xA;    public function numRows() {&#xA;        return $this-&amp;gt;iNumRows;&#xA;    }&#xA;&#xA;    /**&#xA;     * @return int&#xA;     */&#xA;    public function affectedRows() {&#xA;        return $this-&amp;gt;oStatement-&amp;gt;affected_rows;&#xA;    }&#xA;&#xA;    /**&#xA;     * @return int&#xA;     */&#xA;    public function lastInsertId() {&#xA;        return $this-&amp;gt;oStatement-&amp;gt;insert_id;&#xA;    }&#xA;&#xA;    public function getLastExecutedQuery() {&#xA;        $sReturn = $this-&amp;gt;sQuery;&#xA;        if($this-&amp;gt;aArgs) {&#xA;            $sReturn .= &quot;; -- Argumente: ~&quot;.implode(&quot;~,~&quot;, $this-&amp;gt;aArgs).&quot;~&quot;;&#xA;        }&#xA;        return $sReturn;&#xA;    }&#xA;&#xA;    /**&#xA;     * @throws DbException&#xA;     *&#xA;     * @param array $aArgs&#xA;     */&#xA;    private function _execute($aArgs) {&#xA;        $aArgs = $this-&amp;gt;_parseFuncArgs($aArgs);&#xA;        $this-&amp;gt;aArgs = $aArgs;&#xA;        $iArgs = count($aArgs);&#xA;        if($iArgs) {&#xA;            if($this-&amp;gt;oStatement-&amp;gt;param_count !== $iArgs ) {&#xA;                throw new DbException(&#xA;                    &quot;Inserting parameters failed: &quot;.$this-&amp;gt;oStatement-&amp;gt;param_count.&#xA;                    &quot; Parameters expected but &quot;.$iArgs.&quot; passed.&quot;&#xA;                );&#xA;            }&#xA;            $aRefArgs = array();&#xA;            foreach(array_keys($aArgs) as $mIndex) {&#xA;                $aRefArgs[$mIndex] = &amp;amp;$aArgs[$mIndex];&#xA;            }&#xA;            array_unshift($aRefArgs, str_repeat(&quot;s&quot;, $iArgs));&#xA;            // Needs References&#xA;            call_user_func_array(array($this-&amp;gt;oStatement, &quot;bind_param&quot;), $aRefArgs);&#xA;        }&#xA;        $bWorked = $this-&amp;gt;oStatement-&amp;gt;execute();&#xA;        if($bWorked === false) {&#xA;            $sError = sprintf(&#xA;                &quot;Query failed: %s (%s) Query was: '%s'&quot;,&#xA;                $this-&amp;gt;oStatement-&amp;gt;error,&#xA;                $this-&amp;gt;oStatement-&amp;gt;errno,&#xA;                $this-&amp;gt;sQuery&#xA;            );&#xA;            switch($this-&amp;gt;oStatement-&amp;gt;errno) {&#xA;                case 1062:&#xA;                    throw new DbKeyViolationException($sError, $this-&amp;gt;oStatement-&amp;gt;errno);&#xA;                default:&#xA;                    throw new DbException($sError, $this-&amp;gt;oStatement-&amp;gt;errno);&#xA;            }&#xA;&#xA;        }&#xA;&#xA;        $this-&amp;gt;_prepareFetch();&#xA;    }&#xA;&#xA;    private function _prepareFetch() {&#xA;        if($this-&amp;gt;bMetadata &amp;amp;&amp;amp; !$this-&amp;gt;bPreparedFetch) {&#xA;            $oMeta = $this-&amp;gt;oStatement-&amp;gt;result_metadata();&#xA;            if($oMeta === false) {&#xA;                $this-&amp;gt;bMetadata = false;&#xA;            } else {&#xA;                $this-&amp;gt;_prepareMetadata($oMeta);&#xA;&#xA;                $this-&amp;gt;aResultRow = array_fill(0, count($this-&amp;gt;aFieldnames), null);&#xA;                // Ugly but 'bind_result' forces you to pass references&#xA;                $aRefs = array();&#xA;                foreach ($this-&amp;gt;aResultRow as $iIndex =&amp;gt; &amp;amp;$rmValue) {&#xA;                    $aRefs[$iIndex] = &amp;amp;$rmValue;&#xA;                }&#xA;&#xA;                call_user_func_array(array($this-&amp;gt;oStatement, &quot;bind_result&quot;), $this-&amp;gt;aResultRow);&#xA;                $this-&amp;gt;bPreparedFetch = true;&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    /**&#xA;     * @param mysqli_result $oMeta&#xA;     */&#xA;    private function _prepareMetadata(mysqli_result $oMeta) {&#xA;        $aFields = $oMeta-&amp;gt;fetch_fields();&#xA;        foreach($aFields as $oField) {&#xA;            $this-&amp;gt;aFieldnames[] = $oField-&amp;gt;name;&#xA;        }&#xA;    }&#xA;&#xA;    private function _fetchRow() {&#xA;        $this-&amp;gt;_fetch(true);&#xA;    }&#xA;&#xA;    private function _fetchAll() {&#xA;        $this-&amp;gt;_fetch(false);&#xA;    }&#xA;&#xA;    /*&#xA;     * @param bool $bOne One line ?&#xA;     */&#xA;    private function _fetch($bOne) {&#xA;        $this-&amp;gt;aResultSet = array();&#xA;        if($bOne !== true) {&#xA;            $this-&amp;gt;oStatement-&amp;gt;store_result();&#xA;        }&#xA;        while($this-&amp;gt;oStatement-&amp;gt;fetch()) {&#xA;&#xA;            // Deref&#xA;            $aTmp = array();&#xA;            foreach($this-&amp;gt;aResultRow as $mValue) {&#xA;                $aTmp[] = $mValue;&#xA;            }&#xA;            $this-&amp;gt;aResultSet[] = array_combine($this-&amp;gt;aFieldnames, $aTmp);&#xA;&#xA;            if($bOne === true) {&#xA;                break;&#xA;            }&#xA;        }&#xA;&#xA;        $this-&amp;gt;iNumRows = $this-&amp;gt;oStatement-&amp;gt;num_rows;&#xA;        $this-&amp;gt;_done();&#xA;    }&#xA;&#xA;    private function _done() {&#xA;        $this-&amp;gt;oStatement-&amp;gt;free_result();&#xA;    }&#xA;&#xA;    /**&#xA;     * @param array $aArgs&#xA;     * @return array&#xA;     */&#xA;    private function _parseFuncArgs($aArgs) {&#xA;        if(isset($aArgs[0]) &amp;amp;&amp;amp; is_array($aArgs[0])) {&#xA;            return $aArgs[0];&#xA;        }&#xA;        return $aArgs;&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The ugly bits (i think, thats why we are here i guess :) ) are in &lt;code&gt;_execute&lt;/code&gt; and &lt;code&gt;_prepareFetch&lt;/code&gt; as the MySqli api forced us to use references.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The class takes for granted that the passed in mysqli object is already connected to a database.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If i missed something let me know.&lt;/p&gt;&#xA;" OwnerUserId="113" LastEditorUserId="18427" LastEditDate="2013-11-23T22:00:29.377" LastActivityDate="2013-11-23T22:00:29.377" Title="A take on DB Abstraction - PHP / MySql" Tags="&lt;php&gt;&lt;mysql&gt;&lt;mysqli&gt;" AnswerCount="2" CommentCount="4" FavoriteCount="3" />
  <row Id="147" PostTypeId="1" CreationDate="2011-01-21T21:27:07.623" Score="6" ViewCount="924" Body="&lt;p&gt;I want to have fast cache in which I want to keep all my nomenclature data.&#xA;I don't want to go with Memcached because I have to do serialize/de-serialize on each object which is slow.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So I choose to be less effective in memory and keep the cache in each server instance.&#xA;I am sure I am doing it in the wrong way because the NoCache module - which skips my cache and hits the Rails cache is faster than mine.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here is how it is initialized&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$cache = Cache.new&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Here is the example usage&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;property_types = $cache['PropertyType']&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;and here is the source&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;module DirectCache&#xA;  def init_cache&#xA;  end&#xA;&#xA;  def reload_model(model_class)&#xA;    key = get_key(model_class)&#xA;    klass = key.constantize&#xA;    object = klass.scoped&#xA;    puts &quot;Loading cache for #{key}...&quot;&#xA;    if klass.respond_to?(:translates) and klass.translates?&#xA;      puts &quot;  Adding translation in the model for #{klass}&quot;&#xA;      object = object.includes(:translations)&#xA;      self.storage[key] = object.send(&quot;all&quot;)&#xA;    end&#xA;  end&#xA;&#xA;  def [] class_name_or_object&#xA;    puts &quot;Hiting cache for #{class_name_or_object}&quot;&#xA;    key = get_key(class_name_or_object)&#xA;    reload_model(class_name_or_object) if self.storage[key].blank? or self.storage[key].empty?&#xA;    raise &quot;#{key} is missing in the cache #{@cache.keys.join ', '}&quot; unless key? key&#xA;    self.storage[key]&#xA;  end&#xA;&#xA;  def init_cache&#xA;  end&#xA;&#xA;end&#xA;&#xA;module NoCache&#xA;  def reload_model(model_class)&#xA;    key = get_key(model_class)&#xA;    self.storage[key] = key.constantize&#xA;  end&#xA;&#xA;  def [] class_name_or_object&#xA;    key = get_key(class_name_or_object)&#xA;    raise &quot;#{key} is missing in the cache #{@cache.keys.join ', '}&quot; unless key? key&#xA;    klass = self.storage[key]&#xA;    object = klass.scoped&#xA;    if klass.respond_to?(:translates) and klass.translates?&#xA;      puts &quot;Adding translation in the model for #{klass}&quot;&#xA;      object = object.includes(:translations)&#xA;    end&#xA;    object.send(&quot;all&quot;)&#xA;  end&#xA;&#xA;  def init_cache&#xA;  end&#xA;&#xA;end&#xA;&#xA;class Cache&#xA;  include DirectCache&#xA;  #  include NoCache&#xA;  #  include OpenStructCache&#xA;&#xA;  @@models = [&#xA;    PropertyFunction,&#xA;    PropertyCategoryLocation,&#xA;    ConstructionType,&#xA; ....20 more ....&#xA;    ExposureType,&#xA;  ]&#xA;&#xA;  cattr_reader :models&#xA;&#xA;  def initialize&#xA;    @cache = {}&#xA;    begin&#xA;      init_cache&#xA;    rescue&#xA;      puts &quot;missing tables&quot;&#xA;    end&#xA;  end&#xA;&#xA;&#xA;  def storage&#xA;    @cache&#xA;  end&#xA;&#xA;  # returns the the key - aways string&#xA;  def get_key class_name_or_record&#xA;    case class_name_or_record&#xA;    when Class&#xA;      key = class_name_or_record.to_s&#xA;    when String&#xA;      key = class_name_or_record&#xA;    else&#xA;      key = class_name_or_record.class.to_s&#xA;    end&#xA;    key&#xA;  end&#xA;&#xA;  def key? class_name_or_object&#xA;    key = get_key(class_name_or_object)&#xA;    self.storage.keys.include? key&#xA;  end&#xA;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="164" LastEditorUserId="18427" LastEditDate="2013-11-23T21:58:54.273" LastActivityDate="2013-11-23T21:58:54.273" Title="Object cache storage for Rails" Tags="&lt;ruby&gt;&lt;ruby-on-rails&gt;&lt;cache&gt;" AnswerCount="1" CommentCount="2" FavoriteCount="1" />
  <row Id="148" PostTypeId="1" AcceptedAnswerId="149" CreationDate="2011-01-22T00:59:16.190" Score="12" ViewCount="960" Body="&lt;p&gt;Working on a personal project to keep different snippets/examples/small projects of mine organized. I want to make the most of my page width, so I decided to write a navigation menu that slides out. It works as expected, but the code is...kinda big.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I provided the HTML/CSS just in case that helps, but I'm really only looking for help with the JavaScript. Don't need anyone to rewrite the whole thing, just need...helpful advice. :)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;jQuery (updated) -&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$(function() {&#xA;    var isCtrl = false;&#xA;&#xA;    function toggleMenu() {&#xA;        var $main = $(&quot;#main&quot;); &#xA;            if(!$main.hasClass('out')) {&#xA;                $main.animate({'margin-left': '+=210px'}, 500).addClass('out');                         &#xA;                } &#xA;                else {&#xA;                    $main.animate({'margin-left': '-=210px'}, 500).removeClass('out');&#xA;                    }&#xA;                }&#xA;&#xA;    $('#tab').click(function() {&#xA;                toggleMenu();&#xA;            });&#xA;&#xA;    $(document).keyup(function (e) {&#xA;        if(e.which == 17) { isCtrl = false; }&#xA;            }).keydown(function (e) {&#xA;                if(e.which == 17) { isCtrl = true; }&#xA;                if(e.which == 97 &amp;amp;&amp;amp; isCtrl) {&#xA;                                    toggleMenu();&#xA;                                    return false;&#xA;                                }&#xA;                            });&#xA;                        });&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;html (removed unnecessary code) - &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&quot;sidebar&quot;&amp;gt;&#xA;        &amp;lt;div id=&quot;main&quot;&amp;gt;&amp;lt;/div&amp;gt;&#xA;        &amp;lt;div id=&quot;tab&quot;&amp;gt;&amp;lt;/div&amp;gt;&#xA;        &amp;lt;br class=&quot;clear&quot;&amp;gt;&#xA;    &amp;lt;/div&amp;gt;  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;css (removed unnecessary styling) - &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#sidebar {  &#xA;    top: 0;&#xA;    left: 0;&#xA;    position: relative;&#xA;    float: left;&#xA;    }&#xA;&#xA;#main {&#xA;    width: 320px;&#xA;    padding: 10px;&#xA;    float: left;&#xA;    margin-left: -340px;&#xA;    }&#xA;&#xA;#tab {&#xA;    width: 30px;&#xA;    height: 120px;&#xA;    padding: 10px;&#xA;    float: left;&#xA;    }&#xA;&#xA;.clear { clear: both; }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="86" LastEditorUserId="86" LastEditDate="2011-01-29T06:13:11.680" LastActivityDate="2011-11-05T05:29:27.610" Title="Any tips on making this JS better?" Tags="&lt;javascript&gt;&lt;jquery&gt;&lt;html&gt;&lt;css&gt;" AnswerCount="4" CommentCount="2" />
  <row Id="149" PostTypeId="2" ParentId="148" CreationDate="2011-01-22T02:06:10.973" Score="9" Body="&lt;p&gt;First, it seems that &lt;code&gt;isCtrl&lt;/code&gt; is not declared anywhere in your code. Put &lt;code&gt;var isCtrl = false;&lt;/code&gt; as your first line inside the ready function. Otherwise, you will get a JavaScript error when the first key the user presses is &lt;em&gt;not&lt;/em&gt; the &lt;kbd&gt;Ctrl&lt;/kbd&gt; key. Also, &lt;code&gt;== true&lt;/code&gt; is unnecessary within an &lt;code&gt;if&lt;/code&gt; statement; it can be omitted.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Second, this line could be improved, as it fails if the element is a member of another class:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if($('#main').attr('class') != 'out') {&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It can be rewritten using &lt;a href=&quot;http://api.jquery.com/hasClass/&quot;&gt;&lt;code&gt;.hasClass()&lt;/code&gt;&lt;/a&gt; as:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if(!$('#main').hasClass('out')) {&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In fact, you should refactor this entire block out to a separate function to avoid duplicating code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function toggleMenu() {&#xA;    if(!$('#main').hasClass('out')) {&#xA;        // ...&#xA;    } else {&#xA;        // ...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And put &lt;code&gt;toggleMenu();&lt;/code&gt; where the duplicate code was in each function. Also, if performance is a concern, you should &lt;a href=&quot;http://www.artzstudio.com/2009/04/jquery-performance-rules/#cache-jquery-objects&quot;&gt;cache the jQuery object&lt;/a&gt; &lt;code&gt;$('#main')&lt;/code&gt; by declaring another variable at the beginning of the ready function. Not doing so is slow because jQuery would have to find the matched elements within the document again.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A more minor criticism is that of braceless control statements, such as:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if(e.which == 17) isCtrl=false;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Some say that it is best to always put the code within indented braces to avoid errors caused by incorrectly placed semicolons.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Finally, the indentation doesn't look right throughout the entire code. Fix that, and your code will become somewhat more readable.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;To add:&lt;/strong&gt; It also looks like you have an extra comma at the end of:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;'margin-left': '+=210px',&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This is syntactically valid, but &lt;a href=&quot;http://netbeans.org/bugzilla/show_bug.cgi?id=164626#c6&quot;&gt;it causes problems with Internet Explorer 7 and below&lt;/a&gt;.&lt;/p&gt;&#xA;" OwnerUserId="115" LastEditorUserId="115" LastEditDate="2011-01-22T03:11:56.170" LastActivityDate="2011-01-22T03:11:56.170" CommentCount="4" />
  <row Id="150" PostTypeId="1" AcceptedAnswerId="152" CreationDate="2011-01-22T02:37:01.583" Score="36" ViewCount="1480" Body="&lt;p&gt;I have a class with quite a few attributes, most of which are known when I create an instance of the object.  So I pass all the values in the constructor:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$op = new OpenIdProvider($imgPath . $name . $ext, 'openid_highlight', &#xA;                         0, 0, 108, 68, 6, $info[0], $info[1], $name);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I'm finding that having this many parameters makes it confusing both when writing and reading the code, as it's not easy to determine which attribute each value corresponds to.  Also, this has a bit of a code smell to it - seems like there should be a better way.  Any suggestions?&lt;/p&gt;&#xA;" OwnerUserId="26" LastEditorUserId="185" LastEditDate="2011-01-22T17:14:33.217" LastActivityDate="2016-07-03T10:15:08.653" Title="Instantiating objects with many attributes" Tags="&lt;php&gt;&lt;constructor&gt;" AnswerCount="6" CommentCount="0" FavoriteCount="9" />
  <row Id="152" PostTypeId="2" ParentId="150" CreationDate="2011-01-22T04:51:00.673" Score="47" Body="&lt;p&gt;Martin Fowler's &lt;strike&gt;bible&lt;/strike&gt; book &lt;a href=&quot;http://rads.stackoverflow.com/amzn/click/0201485672&quot;&gt;&lt;em&gt;Refactoring&lt;/em&gt;&lt;/a&gt; does identify a smell called &quot;&lt;a href=&quot;http://c2.com/cgi/wiki?LongParameterList&quot;&gt;Long Parameter List&lt;/a&gt;&quot; (p78) and proposes the following refactorings:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&quot;http://refactoring.com/catalog/replaceParameterWithMethod.html&quot;&gt;Replace Parameter with Method&lt;/a&gt; (p292)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&quot;http://refactoring.com/catalog/introduceParameterObject.html&quot;&gt;Introduce Parameter Object&lt;/a&gt; (295)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&quot;http://refactoring.com/catalog/preserveWholeObject.html&quot;&gt;Preserve Whole Object&lt;/a&gt; (298)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Of these I think that &quot;Introduce Parameter Object&quot; would best suit:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You'd wrap the attributes up in their own object and pass that to the constructor.  You may face the same issue with the new object if you choose to bundle all the values directly into its' constructor, though you could use setters instead of parameters in that object.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To illustrate (sorry, my PHP-fu is weak):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$params = new OpenIDParams();&#xA;$params-&amp;gt;setSomething( $imgPath . $name . $ext );&#xA;$params-&amp;gt;setSomethingElse( 'openid_highlight' );&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$params-&amp;gt;setName( $name );&#xA;&#xA;$op = new OpenIdProvider( $params );&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This is a little more verbose but it addresses your concern about not being clear about the attributes' purpose / meaning.  Also it'll be a little less painful to add extra attributes into the equation later.&lt;/p&gt;&#xA;" OwnerUserId="28" LastEditorUserId="22222" LastEditDate="2014-06-08T21:22:39.150" LastActivityDate="2014-06-08T21:22:39.150" CommentCount="5" />
  <row Id="153" PostTypeId="2" ParentId="131" CreationDate="2011-01-22T05:24:42.827" Score="15" Body="&lt;p&gt;For some perspective on the LoD, read &quot;&lt;a href=&quot;http://haacked.com/archive/2009/07/14/law-of-demeter-dot-counting.aspx&quot;&gt;The Law of Demeter Is Not A Dot Counting Exercise&lt;/a&gt;&quot;.  In particular the part under the heading &quot;I Fought The Law and The Law Won&quot;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I think in this instance that pages, paragraphs and lines are very logical subcomponents of documents.  These each have different but related behaviour.  The each also serve different purposes.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Forcing the document to handle interactions with subcomponents will - as you say - lead to clutter (and more chance of introducing troublesome issues).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The big thing about the LoD is that it aims to reduce coupling.  However adding methods to Document doesn't &lt;em&gt;really&lt;/em&gt; reduce coupling as you're still writing code that says &quot;do x to line y&quot; - you're just asking Document to do it for you.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Don't get me wrong, the LoD is useful.  But like all principles it has to be used correctly to stay useful.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;(Funnily enough a similar &lt;a href=&quot;http://stackoverflow.com/questions/3706463/am-i-breaking-the-law-of-demeter&quot;&gt;question&lt;/a&gt; with a similar answer as been asked at SO.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;br /&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In short I don't see any benefit for you in talking to Document rather than it's contained Pages, Paras, &amp;amp; Lines.  Frankly I don't think there's any ROI for you.&lt;/p&gt;&#xA;" OwnerUserId="28" LastActivityDate="2011-01-22T05:24:42.827" CommentCount="1" />
  <row Id="154" PostTypeId="2" ParentId="150" CreationDate="2011-01-22T10:24:58.690" Score="19" Body="&lt;p&gt;In addition to LRE's answer I would suggest you consider the idea that your class needs that many constructor arguments because it's trying to do too many things.&lt;/p&gt;&#xA;" OwnerUserId="180" LastActivityDate="2011-01-22T10:24:58.690" CommentCount="0" />
  <row Id="155" PostTypeId="2" ParentId="47" CreationDate="2011-01-22T10:32:13.810" Score="7" Body="&lt;p&gt;You should provide the optional string message as last argument for assertion calls; turn this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$this-&amp;gt;assertSame(true, DatenCache::save(&quot;testCacheSimple&quot;, false, $sDatenSimple));&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Into this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$this-&amp;gt;assertSame(&#xA;  true,&#xA;  DatenCache::save(&quot;testCacheSimple&quot;, false, $sDatenSimple),&#xA;                                      &quot;a successful [describe operation] &quot;.&#xA;                                   &quot;is expected for [describe arguments]&quot;);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This form reminds me of Perl instructions do something or die &quot;message&quot;, and I use the indentation, keeping the message alone, right-aligned, on a separate line when needed, to put it in perspective:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;assert( something,                                   &quot;something expected&quot;);&#xA;assert( something else,                         &quot;something else expected&quot;);&#xA;assert( something long&#xA;        that spans multiple lines,&#xA;                                                         &quot;something long &quot;.&#xA;                                     &quot;that spans multiple lines expected&quot;);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In this way, all the messages get aligned on the right, and can be read separately.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also, you should use the most specific assertion available instead of using assertSame() all the time. When comparing with true, using assertTrue() instead would clarify the intent.&lt;/p&gt;&#xA;" OwnerUserId="185" LastActivityDate="2011-01-22T10:32:13.810" CommentCount="0" />
  <row Id="156" PostTypeId="2" ParentId="85" CreationDate="2011-01-22T11:21:24.270" Score="11" Body="&lt;p&gt;I would suggest to add comments (Javadoc-style, but probably best if much lighter) to describe the intent of each method. Even the most simple ones. I found it especially useful in JavaScript to describe:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;the type and range of arguments expected&lt;/li&gt;&#xA;&lt;li&gt;which arguments are optional and what are the default values&lt;/li&gt;&#xA;&lt;li&gt;the type of the result value, if any&lt;/li&gt;&#xA;&lt;li&gt;what is the result when provided arguments do not match expectations&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Otherwise I agree with your inline comment &quot;this needs some refactoring, it creates bound and unbound&quot;, corresponding code should be extracted into a separate function, which will also reduce nesting, which seems to be one of your worries.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Regarding the code itself, I would rename wrap() to bind() to match &lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind&quot;&gt;the bind() function added in ECMAScript 5&lt;/a&gt; and I would rename l to length in the for loop as letter l is easily confused with number 1.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I have doubts about this portion of the code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if (is('Function', ext)) {&#xA;    return ext.extend(proto); // holy closure!&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In my understanding: you check first that ext is a funciton before calling the extend() method, but:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;extend() is not defined in JavaScript, it is one of your custom methods, so there is no guarantee that you will find this property on the function. You should probably add a check.&lt;/li&gt;&#xA;&lt;li&gt;I do not understand the intent: an inline comment would help :)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;All in all, I think it's fine that the code is a bit hairy because &lt;a href=&quot;http://www.crockford.com/javascript/inheritance.html&quot;&gt;adding support for classes in JavaScript is no simple matter&lt;/a&gt;, but a lot more inline comments (up to one comment per line of code for the most complex stuff) would improve the code readability immensely.&lt;/p&gt;&#xA;" OwnerUserId="185" LastActivityDate="2011-01-22T11:21:24.270" CommentCount="2" />
  <row Id="157" PostTypeId="2" ParentId="147" CreationDate="2011-01-22T14:33:18.130" Score="2" Body="&lt;p&gt;The ActiveSupport::Cache is not mandatory in Memcached, there are a cache in memory if you use the :memory_store ( &lt;a href=&quot;http://api.rubyonrails.org/classes/ActiveSupport/Cache/MemoryStore.html&quot; rel=&quot;nofollow&quot;&gt;http://api.rubyonrails.org/classes/ActiveSupport/Cache/MemoryStore.html&lt;/a&gt; )&lt;/p&gt;&#xA;&#xA;&lt;p&gt;config.cache_store = :memory_store&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Maybe can be a good start to implement your own Cache in memory&lt;/p&gt;&#xA;" OwnerUserId="39" LastActivityDate="2011-01-22T14:33:18.130" CommentCount="0" />
  <row Id="158" PostTypeId="2" ParentId="150" CreationDate="2011-01-22T15:46:38.083" Score="7" Body="&lt;p&gt;As @LRE answer (+1) mentioned his PHP-fu is weak and since his points are correct and valid i just want to provide some more php code to illustrate :&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class OpenIdProviderOptions {&#xA;&#xA;    private $path;&#xA;    private $name = &quot;default_name&quot;;&#xA;    private $param1;&#xA;    private $optionalParam2 = &quot;foo&quot;;&#xA;&#xA;    public function __construct($path, $param1) {&#xA;         /* you might take a $options array there for bc */&#xA;         /* Also if you have 2-3 REQUIRED parameters and the rest is optional&#xA;            i like putting all the required stuff in the constructor so you don't&#xA;            have to do any &quot;is that value set&quot; checking here.&#xA;&#xA;            If you have 20 REQUIRED values you might split those into some objects&#xA;            or something ;) &#xA;         */&#xA;    }&#xA;&#xA;    public function getPath() {&#xA;        return $this-&amp;gt;path;&#xA;    }&#xA;&#xA;    /* etc */&#xA;&#xA;&#xA;}&#xA;&#xA;class OpenIdProvider {&#xA;&#xA;    private $settings;&#xA;&#xA;    public function __construct(OpenIdProviderOptions $options) {&#xA;        $this-&amp;gt;settings = $options;&#xA;    }&#xA;&#xA;    public function foo {&#xA;        $path = $this-&amp;gt;settings-&amp;gt;getPath();&#xA;    }&#xA;}&#xA;&#xA;$settings = new OpenIdProviderOptions(&quot;myopenid.example.com&quot;, &quot;i need this&quot;);&#xA;$settings-&amp;gt;setFoo(&quot;bar&quot;);&#xA;$settings-&amp;gt;setBar(&quot;fubar&quot;);&#xA;&#xA;$myProvider = new OpenIdProvider($settings);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="113" LastActivityDate="2011-01-22T15:46:38.083" CommentCount="0" />
  <row Id="159" PostTypeId="1" AcceptedAnswerId="251" CreationDate="2011-01-22T18:09:18.930" Score="18" ViewCount="11211" Body="&lt;p&gt;I installed settingslogic and in the configuration file I put the regex for the email as follows:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#config/settings.yml&#xA;defaults: &amp;amp;defaults&#xA;&#xA;  email_regex: /^([\w\.%\+\-]+)@([\w\-]+\.)+([\w]{2,})$/i&#xA;&#xA;development:&#xA;  &amp;lt;&amp;lt;: *defaults&#xA;  # neat_setting: 800&#xA;&#xA;test:&#xA;  &amp;lt;&amp;lt;: *defaults&#xA;&#xA;production:&#xA;  &amp;lt;&amp;lt;: *defaults&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;That I load in devise configuration in this way:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#config/initializers/devise.rb&#xA;  # Regex to use to validate the email address&#xA;  # config.email_regexp = /^([\w\.%\+\-]+)@([\w\-]+\.)+([\w]{2,})$/i&#xA;  config.email_regexp = eval Settings.email_regex&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It works, but what do you think about that eval? Is it the correct way to convert a string to a regex?&lt;/p&gt;&#xA;" OwnerUserId="96" LastEditorUserId="22222" LastEditorDisplayName="Mike Bethany" LastEditDate="2016-06-22T22:10:16.743" LastActivityDate="2016-06-22T22:10:16.743" Title="Use of a regex stored inside a YAML file" Tags="&lt;ruby&gt;&lt;ruby-on-rails&gt;&lt;regex&gt;&lt;converting&gt;" AnswerCount="5" CommentCount="5" FavoriteCount="2" />
  <row Id="160" PostTypeId="2" ParentId="159" CreationDate="2011-01-22T18:53:30.807" Score="5" Body="&lt;p&gt;I would definately not put the regex in the comment. That means that it needs to be changed in two places, one of which doesn't matter and will be misleading. Place a comment on the declaration of &lt;code&gt;email_regex&lt;/code&gt; that explains what it is filtering. That way if it ever changes, all the places to change are contained and easy to find.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#config/initializers/devise.rb&#xA;   # Regex to use to validate the email address&#xA;   config.email_regexp = eval Settings.email_regex &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;and&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;# Email validation regex - &amp;lt;short explanation to taste&amp;gt;&#xA;email_regex: /^([\w\.%\+\-]+)@([\w\-]+\.)+([\w]{2,})$/i &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I see no readability problems with the code, if that is the correct method of retrieving a setting. (I'm not a Ruby expert.)&lt;/p&gt;&#xA;" OwnerUserId="110" LastEditorUserId="110" LastEditDate="2011-01-22T19:27:54.277" LastActivityDate="2011-01-22T19:27:54.277" CommentCount="1" />
  <row Id="161" PostTypeId="2" ParentId="159" CreationDate="2011-01-22T19:58:08.453" Score="8" Body="&lt;p&gt;I'm not crazy about using eval for such a simple task, it's easy and it works but it just doesn't sit well with me; it's like giving your gran' an Indy car to go get a loaf of bread.  Instead you could do something like this.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;split = Settings.email_regex.split(&quot;/&quot;)&#xA;options = (split[2].include?(&quot;x&quot;) ? Regexp::EXTENDED : 0) |&#xA;  (split[2].include?(&quot;i&quot;) ? Regexp::IGNORECASE : 0) |&#xA;  (split[2].include?(&quot;m&quot;) ? Regexp::MULTILINE : 0) unless split[2].nil?&#xA;Regexp.new(split[1], options)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This will work if there are options or not and doesn't require a potentially dangerous eval.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;P.S. Sinetris made the much better suggestion of just adding &lt;code&gt;!ruby/regexp&lt;/code&gt; before your regex and wrapping it in single quotes in your settings.yml file. That still doesn't fix the issue with the RegExp class not properly dealing with string representations of regex statements though so I'll leave the above code for anyone that wants to do that outside of a YML file.&lt;/p&gt;&#xA;" OwnerDisplayName="Mike Bethany" LastEditorDisplayName="Mike Bethany" LastEditDate="2011-01-27T21:14:21.270" LastActivityDate="2011-01-27T21:14:21.270" CommentCount="7" />
  <row Id="162" PostTypeId="2" ParentId="145" CreationDate="2011-01-22T21:34:48.647" Score="1" Body="&lt;p&gt;I've seen some pretty nasty Fortran in my time: Research departments seem to be the worse source! Your code is far, far superior to their code!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In those days we were using an extended form of Fortran 77 with some structured extensions and formatting niceties. There was no avoiding GOTOs and FORMATs and their labels. I tried to keep them to a minimum and to only use them for break/cycle types of jumps like you are doing. So although I lack modern Fortran experience, you look to be on the right track.&lt;/p&gt;&#xA;" OwnerUserId="73" LastActivityDate="2011-01-22T21:34:48.647" CommentCount="1" />
  <row Id="163" PostTypeId="2" ParentId="159" CreationDate="2011-01-23T00:23:08.537" Score="3" Body="&lt;p&gt;If you want avoiding the eval you can. It's a little more trick but you can be sure, you have a regexps after this code in your devise :&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#config/initializers/devise.rb&#xA;# Regex to use to validate the email addres&#xA;# config.email_regexp = /^([\w\.%\+\-]+)@([\w\-]+\.)+([\w]{2,})$/i&#xA;Setting.email_regexp[/\/(.*)\/(.?)/]  &#xA;config.email_regexp = x ; Regexp.new(/#{$1}/)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The problem with this trick is you failed the second argument in your case the insensitive-case. You just need add a new setting like :&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;email_regexp_sensitive_case: true&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And now you just need call like this :&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#config/initializers/devise.rb&#xA;# Regex to use to validate the email addres&#xA;# config.email_regexp = /^([\w\.%\+\-]+)@([\w\-]+\.)+([\w]{2,})$/i&#xA;Setting.email_regexp[/\/(.*)\/(.?)/]  &#xA;config.email_regexp = Regexp.new(/#{$1}/, Setting.email_regexp_sensitive_case)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In my case you are sure to have a Regexp define in your email_regexp without any eval.&lt;/p&gt;&#xA;" OwnerUserId="39" LastActivityDate="2011-01-23T00:23:08.537" CommentCount="1" />
  <row Id="164" PostTypeId="1" AcceptedAnswerId="167" CreationDate="2011-01-23T02:24:12.317" Score="14" ViewCount="1857" Body="&lt;p&gt;Is this code good enough, or is it stinky? &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;using System;&#xA;using System.Collections.Generic;&#xA;using System.Linq;&#xA;using System.Text;&#xA;using System.IO;&#xA;&#xA;namespace DotNetLegends&#xA;{&#xA;    public class LogParser&#xA;    {&#xA;        /// &amp;lt;summary&amp;gt;&#xA;        /// Returns a populated Game objects that has a list of players and other information.&#xA;        /// &amp;lt;/summary&amp;gt;&#xA;        /// &amp;lt;param name=&quot;pathToLog&quot;&amp;gt;Path to the .log file.&amp;lt;/param&amp;gt;&#xA;        /// &amp;lt;returns&amp;gt;A Game object.&amp;lt;/returns&amp;gt;&#xA;        public Game Parse(string pathToLog)&#xA;        {&#xA;            Game game = new Game();&#xA;&#xA;            //On actual deployment of this code, I will use the pathToLog parameter.&#xA;            StreamReader reader = new StreamReader(@&quot;D:\Games\Riot Games\League of Legends\air\logs\LolClient.20110121.213758.log&quot;);&#xA;            var content = reader.ReadToEnd();&#xA;&#xA;            game.Id = GetGameID(content);&#xA;            game.Length = GetGameLength(content);&#xA;            game.Map = GetGameMap(content);&#xA;            game.MaximumPlayers = GetGameMaximumPlayers(content);&#xA;            game.Date = GetGameDate(content);&#xA;&#xA;            return game;&#xA;        }&#xA;&#xA;        internal string GetGameID(string content)&#xA;        {&#xA;            var location = content.IndexOf(&quot;gameId&quot;);&#xA;            var gameID = content.Substring(location + 8, 10);&#xA;            gameID = gameID.Trim();&#xA;            return gameID;&#xA;        }&#xA;&#xA;        internal string GetGameLength(string content)&#xA;        {&#xA;            var location = content.IndexOf(&quot;gameLength&quot;);&#xA;            var gamelength = content.Substring(location + 13, 6);&#xA;            gamelength = gamelength.Trim();&#xA;            var time = Convert.ToInt32(gamelength) / 60;&#xA;            return time.ToString();&#xA;        }&#xA;&#xA;        internal string GetGameMap(string content)&#xA;        {&#xA;            var location = content.IndexOf(&quot;mapId&quot;);&#xA;            var gameMap = content.Substring(location + 8, 1);&#xA;            switch (gameMap)&#xA;            {&#xA;                case &quot;2&quot;:&#xA;                    return &quot;Summoner's Rift&quot;;&#xA;                default:&#xA;                    return &quot;nul&quot;;&#xA;            }&#xA;        }&#xA;&#xA;        internal string GetGameMaximumPlayers(string content)&#xA;        {&#xA;            var location = content.IndexOf(&quot;maxNumPlayers&quot;);&#xA;            var maxPlayers = content.Substring(location + 16, 2);&#xA;            maxPlayers = maxPlayers.Trim();&#xA;            return maxPlayers;&#xA;        }&#xA;&#xA;        internal string GetGameDate(string content)&#xA;        {&#xA;            var location = content.IndexOf(&quot;creationTime&quot;);&#xA;            var creationDate = content.Substring(location + 14, 34);&#xA;            creationDate = creationDate.Trim();&#xA;            return creationDate;&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerDisplayName="Sergio Tapia" LastEditorUserId="22222" LastEditDate="2014-06-09T17:45:38.993" LastActivityDate="2014-06-09T17:45:38.993" Title="Parsing a file for a game" Tags="&lt;c#&gt;&lt;game&gt;&lt;parsing&gt;" AnswerCount="7" CommentCount="4" />
  <row Id="166" PostTypeId="2" ParentId="164" CreationDate="2011-01-23T05:03:24.143" Score="5" Body="&lt;ol&gt;&#xA;&lt;li&gt;Remove the code responsible for retrieving the log file contents.  If this is a type that is just responsible for parsing log files than that is all it should do.  Think about either passing in the file contents to this method or using Dependency Injection so that you can mock out the &lt;code&gt;StreamReader&lt;/code&gt; call in your tests.  You do have tests right?&lt;/li&gt;&#xA;&lt;li&gt;Return the appropriate types from these methods.  &lt;code&gt;GetGameLength&lt;/code&gt; should return an int and &lt;code&gt;Game.Length&lt;/code&gt; should likewise be an int.  Same thing for Maximum Players and Game Date.&lt;/li&gt;&#xA;&lt;li&gt;The 'Get' methods should be private or protected unless there is some specific reason to make them internal. &lt;/li&gt;&#xA;&lt;li&gt;If there are a finite number of maps (and they are all known) you may want to consider using an enum rather than a string.  If an enum is not appropriate you may want to create a &lt;code&gt;GameMap&lt;/code&gt; (or some such type to encapsulate the information you care about with regards to a map) and return that instead.&lt;/li&gt;&#xA;&lt;li&gt;Each 'Get' method needs to check that the location variable is set to something &gt;= 0 when you search for the specified text.&lt;/li&gt;&#xA;&lt;li&gt;Throw helpful exceptions if the log file does not contain the expected data (or the data isn't the expected type).  A NullReferenceException is not a helpful exception.&lt;/li&gt;&#xA;&lt;li&gt;There are too many magic numbers and strings here.  Move these into constants with helpful names.&lt;/li&gt;&#xA;&lt;li&gt;Add comments with examples of the log file text that you will be searching for in each 'Get' method.  This makes maintenance significantly easier as you know the type of text you were expecting to be parsing.&lt;/li&gt;&#xA;&lt;li&gt;Wrap the &lt;code&gt;StreamReader&lt;/code&gt; in a using block.&lt;/li&gt;&#xA;&lt;li&gt;Check that the file exists before attempting to load it.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;" OwnerUserId="67" LastActivityDate="2011-01-23T05:03:24.143" CommentCount="3" />
  <row Id="167" PostTypeId="2" ParentId="164" CreationDate="2011-01-23T09:09:29.140" Score="22" Body="&lt;p&gt;You have a lot of undescriptive magic numbers and code repetition whilst retrieving the contents of a field. You could eliminate the repetition and make those numbers a little more meaningful by introducing a single method:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;protected string GetFieldContent(string content, string field,&#xA;    int padding, int length)&#xA;{&#xA;    var location = content.indexOf(field);&#xA;    padding += field.Length;&#xA;&#xA;    var fieldVal = content.Substring(location + padding, length);&#xA;    fieldVal = fieldVal.Trim();&#xA;    return fieldVal;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Use it like so:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;internal string GetGameMaximumPlayers(string content)&#xA;{&#xA;    var maxPlayers = GetFieldContent(content, &quot;maxNumPlayers&quot;, 3, 2);&#xA;    return maxPlayers;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Something to note here is the padding value has changed. You no longer need to include the length of the field name itself and can just describe the number of junk characters afterwards.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Padding length&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Upon examining your code I noticed one peculiarity - the fields have inconsistent, magical padding lengths:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;gameID padding: 2&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;gameLength padding: 3&lt;/li&gt;&#xA;&lt;li&gt;mapId padding: 3&lt;/li&gt;&#xA;&lt;li&gt;maxNumPlayers padding: 3&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;creationTime padding: 2&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;As a symptom of these being magic numbers I have no idea why this is the case. This is one of the many reasons to avoid magic numbers like the plague: it's difficult to understand their meaning. I'll trust you to evaluate whether varying padding lengths is necessary, or whether you can just assume a constant padding for all fields.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;If we can assume a constant padding amount for all fields&lt;/strong&gt; then we can change the code further a little bit to make your life easier. There are two steps to this change.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;First, give your &lt;code&gt;LogParser&lt;/code&gt; class a private field:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;private const var defaultPadding = 2&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Second, &lt;code&gt;GetFieldContent&lt;/code&gt; can be refactored to produce this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;protected string GetFieldContent(string content, string field, int length)&#xA;{&#xA;    var location = content.indexOf(field);&#xA;    var padding = defaultPadding + field.Length;&#xA;&#xA;    var fieldVal = content.Substring(location + padding, length);&#xA;    fieldVal = fieldVal.Trim();&#xA;    return fieldVal;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then getting the contents of a field becomes simpler:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;var maxPlayers = GetFieldContent(content, &quot;maxNumPlayers&quot;, 2);&lt;/code&gt;&lt;/p&gt;&#xA;" OwnerUserId="109" LastEditorUserId="109" LastEditDate="2011-01-24T05:05:42.353" LastActivityDate="2011-01-24T05:05:42.353" CommentCount="0" />
  <row Id="168" PostTypeId="2" ParentId="164" CreationDate="2011-01-23T12:18:55.570" Score="1" Body="&lt;p&gt;Seems like you're doing a lot of unecessary and standard managing of a simple logfile. If you were saving the log in binary perhaps it could be excused but seeing as you're working with text files, why not go with xml? or rather, why not go with XML Fragments?  Linq to XML has excellent support for managing those kinds of files, both  creating, parsing and querying.&lt;/p&gt;&#xA;" OwnerUserId="149" LastActivityDate="2011-01-23T12:18:55.570" CommentCount="2" />
  <row Id="169" PostTypeId="2" ParentId="128" CreationDate="2011-01-23T12:23:40.070" Score="1" Body="&lt;p&gt;Seems like your abusing the factory pattern, the whole purpose of a factory is that you pass it some general object and the factory decides what is most appropriate to return. The passed object doesnt need to know about the factory but  the factory should know about the object it's passed.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you need to pass it very explicit parameters then that is a code smell in your architecture and I'd think seriously about doing some refactoring rather than just &quot;fixing&quot; this problem&lt;/p&gt;&#xA;" OwnerUserId="149" LastActivityDate="2011-01-23T12:23:40.070" CommentCount="1" />
  <row Id="170" PostTypeId="2" ParentId="138" CreationDate="2011-01-23T12:26:04.200" Score="7" Body="&lt;p&gt;Why are you doing:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Point.Radius &amp;gt; referencePoint.Radius &amp;amp;&amp;amp; point.Theta &amp;gt; referencePoint.Theta&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Seems this probably should be a function like &lt;code&gt;IsCorrectReferencePoint&lt;/code&gt; or whatnot. That will both make your code more readable and more understandable since you can simply look at the function name to see what it does.&lt;/p&gt;&#xA;" OwnerUserId="149" LastEditorUserId="316" LastEditDate="2011-01-28T23:42:21.407" LastActivityDate="2011-01-28T23:42:21.407" CommentCount="1" />
  <row Id="171" PostTypeId="2" ParentId="164" CreationDate="2011-01-23T14:09:21.540" Score="0" Body="&lt;p&gt;I would rename the methods GetGameID(), GetGameLength(), GetGameMap()... because they look like getters, that could be called in any order, while they are actually performing parsing and must be called in a given order. This is confusing at first glance.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I suggest replacing 'Get' with 'Read' or 'Parse':&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ReadGameID()&lt;/li&gt;&#xA;&lt;li&gt;ReadGameLength()&lt;/li&gt;&#xA;&lt;li&gt;ReadGameMap()&lt;/li&gt;&#xA;&lt;li&gt;...&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="185" LastActivityDate="2011-01-23T14:09:21.540" CommentCount="1" />
  <row Id="172" PostTypeId="1" AcceptedAnswerId="173" CreationDate="2011-01-23T14:33:21.713" Score="9" ViewCount="654" Body="&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This file is out of my hands. I cannot change the format or type of file I have to parse.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here is some sample data that I'm trying to parse. This is information for just &lt;strong&gt;one&lt;/strong&gt; player:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;[0] (com.riotgames.platform.gameclient.domain::PlayerParticipantStatsSummary)#8&#xA;            _profileIconId = 4&#xA;            elo = 0&#xA;            eloChange = 0&#xA;            gameId = 82736631&#xA;            gameItems = (null)&#xA;            inChat = false&#xA;            leaver = false&#xA;            leaves = 1&#xA;            level = 5&#xA;            losses = 2&#xA;            profileIconId = 4&#xA;            skinName = &quot;Vladimir&quot;&#xA;            statistics = (mx.collections::ArrayCollection)#9&#xA;              filterFunction = (null)&#xA;              length = 26&#xA;              list = (mx.collections::ArrayList)#10&#xA;                length = 26&#xA;                source = (Array)#11&#xA;                  [0] (com.riotgames.platform.gameclient.domain::RawStatDTO)#12&#xA;                    displayName = (null)&#xA;                    statTypeName = &quot;PHYSICAL_DAMAGE_TAKEN&quot;&#xA;                    value = 11156&#xA;                  [1] (com.riotgames.platform.gameclient.domain::RawStatDTO)#13&#xA;                    displayName = (null)&#xA;                    statTypeName = &quot;TOTAL_DAMAGE_TAKEN&quot;&#xA;                    value = 20653&#xA;                  [2] (com.riotgames.platform.gameclient.domain::RawStatDTO)#14&#xA;                    displayName = (null)&#xA;                    statTypeName = &quot;ITEM2&quot;&#xA;                    value = 3158&#xA;                  [3] (com.riotgames.platform.gameclient.domain::RawStatDTO)#15&#xA;                    displayName = (null)&#xA;                    statTypeName = &quot;ITEM4&quot;&#xA;                    value = 3089&#xA;                  [4] (com.riotgames.platform.gameclient.domain::RawStatDTO)#16&#xA;                    displayName = (null)&#xA;                    statTypeName = &quot;WIN&quot;&#xA;                    value = 1&#xA;                  [5] (com.riotgames.platform.gameclient.domain::RawStatDTO)#17&#xA;                    displayName = (null)&#xA;                    statTypeName = &quot;PHYSICAL_DAMAGE_DEALT_PLAYER&quot;&#xA;                    value = 18413&#xA;                  [6] (com.riotgames.platform.gameclient.domain::RawStatDTO)#18&#xA;                    displayName = (null)&#xA;                    statTypeName = &quot;TOTAL_HEAL&quot;&#xA;                    value = 16877&#xA;                  [7] (com.riotgames.platform.gameclient.domain::RawStatDTO)#19&#xA;                    displayName = (null)&#xA;                    statTypeName = &quot;ITEM0&quot;&#xA;                    value = 3083&#xA;                  [8] (com.riotgames.platform.gameclient.domain::RawStatDTO)#20&#xA;                    displayName = (null)&#xA;                    statTypeName = &quot;LARGEST_CRITICAL_STRIKE&quot;&#xA;                    value = 173&#xA;                  [9] (com.riotgames.platform.gameclient.domain::RawStatDTO)#21&#xA;                    displayName = (null)&#xA;                    statTypeName = &quot;ITEM3&quot;&#xA;                    value = 3116&#xA;                  [10] (com.riotgames.platform.gameclient.domain::RawStatDTO)#22&#xA;                    displayName = (null)&#xA;                    statTypeName = &quot;ITEM1&quot;&#xA;                    value = 0&#xA;                  [11] (com.riotgames.platform.gameclient.domain::RawStatDTO)#23&#xA;                    displayName = (null)&#xA;                    statTypeName = &quot;GOLD_EARNED&quot;&#xA;                    value = 11123&#xA;                  [12] (com.riotgames.platform.gameclient.domain::RawStatDTO)#24&#xA;                    displayName = (null)&#xA;                    statTypeName = &quot;ASSISTS&quot;&#xA;                    value = 8&#xA;                  [13] (com.riotgames.platform.gameclient.domain::RawStatDTO)#25&#xA;                    displayName = (null)&#xA;                    statTypeName = &quot;LARGEST_MULTI_KILL&quot;&#xA;                    value = 2&#xA;                  [14] (com.riotgames.platform.gameclient.domain::RawStatDTO)#26&#xA;                    displayName = (null)&#xA;                    statTypeName = &quot;MAGIC_DAMAGE_DEALT_PLAYER&quot;&#xA;                    value = 103124&#xA;                  [15] (com.riotgames.platform.gameclient.domain::RawStatDTO)#27&#xA;                    displayName = (null)&#xA;                    statTypeName = &quot;BARRACKS_KILLED&quot;&#xA;                    value = 0&#xA;                  [16] (com.riotgames.platform.gameclient.domain::RawStatDTO)#28&#xA;                    displayName = (null)&#xA;                    statTypeName = &quot;LARGEST_KILLING_SPREE&quot;&#xA;                    value = 5&#xA;                  [17] (com.riotgames.platform.gameclient.domain::RawStatDTO)#29&#xA;                    displayName = (null)&#xA;                    statTypeName = &quot;ITEM5&quot;&#xA;                    value = 0&#xA;                  [18] (com.riotgames.platform.gameclient.domain::RawStatDTO)#30&#xA;                    displayName = (null)&#xA;                    statTypeName = &quot;MINIONS_KILLED&quot;&#xA;                    value = 176&#xA;                  [19] (com.riotgames.platform.gameclient.domain::RawStatDTO)#31&#xA;                    displayName = (null)&#xA;                    statTypeName = &quot;CHAMPIONS_KILLED&quot;&#xA;                    value = 11&#xA;                  [20] (com.riotgames.platform.gameclient.domain::RawStatDTO)#32&#xA;                    displayName = (null)&#xA;                    statTypeName = &quot;MAGIC_DAMAGE_TAKEN&quot;&#xA;                    value = 8581&#xA;                  [21] (com.riotgames.platform.gameclient.domain::RawStatDTO)#33&#xA;                    displayName = (null)&#xA;                    statTypeName = &quot;NEUTRAL_MINIONS_KILLED&quot;&#xA;                    value = 12&#xA;                  [22] (com.riotgames.platform.gameclient.domain::RawStatDTO)#34&#xA;                    displayName = (null)&#xA;                    statTypeName = &quot;TOTAL_TIME_SPENT_DEAD&quot;&#xA;                    value = 189&#xA;                  [23] (com.riotgames.platform.gameclient.domain::RawStatDTO)#35&#xA;                    displayName = (null)&#xA;                    statTypeName = &quot;TURRETS_KILLED&quot;&#xA;                    value = 0&#xA;                  [24] (com.riotgames.platform.gameclient.domain::RawStatDTO)#36&#xA;                    displayName = (null)&#xA;                    statTypeName = &quot;NUM_DEATHS&quot;&#xA;                    value = 5&#xA;                  [25] (com.riotgames.platform.gameclient.domain::RawStatDTO)#37&#xA;                    displayName = (null)&#xA;                    statTypeName = &quot;TOTAL_DAMAGE_DEALT&quot;&#xA;                    value = 121538&#xA;                uid = &quot;B6F2F234-2E37-D979-E896-AA7614FCE9CB&quot;&#xA;              sort = (null)&#xA;              source = (Array)#11&#xA;            summonerName = &quot;WeFearTheSun&quot;&#xA;            teamId = 100&#xA;            userId = 21672484&#xA;            wins = 6&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now there are ten players in a game, meaning ten of that snippet above, each one with an increasing counter, [1],[2],[3], and so on.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As you can see &lt;strong&gt;inside&lt;/strong&gt; of this data there are further numbers, ie. another &lt;code&gt;[0]&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If the numbers were unique I could just parse the &lt;code&gt;[0]&lt;/code&gt;, then the &lt;code&gt;[1]&lt;/code&gt;, then the &lt;code&gt;[2]&lt;/code&gt;, etc.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Right now I'm parsing the files like so:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private IEnumerable&amp;lt;Player&amp;gt; GetGamePlayers(string content)&#xA;{&#xA;    List&amp;lt;Player&amp;gt; Players = new List&amp;lt;Player&amp;gt;();&#xA;&#xA;    var location = content.IndexOf(&quot;com.riotgames.platform.gameclient.domain::EndOfGameStats&quot;);&#xA;    var cutContent = content.Substring(location, 65000);&#xA;&#xA;    var playerOneLocation = cutContent.IndexOf(&quot;[0]&quot;);&#xA;    //var playerOneContent = cutContent.Substring(playerOneLocation, 6231);&#xA;    var playerOneContent = cutContent.Substring(playerOneLocation, 6255);&#xA;    Players.Add(ParsePlayer(playerOneContent));&#xA;&#xA;    cutContent = cutContent.Substring(playerOneLocation + 6229, cutContent.Length - playerOneLocation - 6229);&#xA;    var playerTwoLocation = cutContent.IndexOf(&quot;[1]&quot;);&#xA;    var playerTwoContent = cutContent.Substring(playerTwoLocation, 6255);&#xA;    Players.Add(ParsePlayer(playerTwoContent));&#xA;&#xA;    cutContent = cutContent.Substring(playerTwoLocation + 6229, cutContent.Length - playerTwoLocation - 6229);&#xA;    var playerThreeLocation = cutContent.IndexOf(&quot;[2]&quot;);&#xA;    var playerThreeContent = cutContent.Substring(playerThreeLocation, 6255);&#xA;    Players.Add(ParsePlayer(playerThreeContent));&#xA;&#xA;    cutContent = cutContent.Substring(playerThreeLocation + 6229, cutContent.Length - playerThreeLocation - 6229);&#xA;    var playerFourLocation = cutContent.IndexOf(&quot;[3]&quot;);&#xA;    var playerFourContent = cutContent.Substring(playerFourLocation, 6255);&#xA;    Players.Add(ParsePlayer(playerFourContent));&#xA;&#xA;    cutContent = cutContent.Substring(playerFourLocation + 6229, cutContent.Length - playerFourLocation - 6229);&#xA;    var playerFiveLocation = cutContent.IndexOf(&quot;[4]&quot;);&#xA;    var playerFiveContent = cutContent.Substring(playerFiveLocation, 6255);&#xA;    Players.Add(ParsePlayer(playerFiveContent));&#xA;&#xA;    location = cutContent.IndexOf(&quot;teamPlayerParticipantStats&quot;);&#xA;    cutContent = cutContent.Substring(location, 32000);&#xA;    var playerSixLocation = cutContent.IndexOf(&quot;[0]&quot;);&#xA;    var playerSixContent = cutContent.Substring(playerSixLocation, 6255);&#xA;    Players.Add(ParsePlayer(playerSixContent));&#xA;&#xA;    cutContent = cutContent.Substring(playerSixLocation + 6229, cutContent.Length - playerSixLocation - 6229);&#xA;    var playerSevenLocation = cutContent.IndexOf(&quot;[1]&quot;);&#xA;    var playerSevenContent = cutContent.Substring(playerSevenLocation, 6255);&#xA;    Players.Add(ParsePlayer(playerSevenContent));&#xA;&#xA;    cutContent = cutContent.Substring(playerSevenLocation + 6229, cutContent.Length - playerSevenLocation - 6229);&#xA;    var playerEightLocation = cutContent.IndexOf(&quot;[2]&quot;);&#xA;    var playerEightContent = cutContent.Substring(playerEightLocation, 6255);&#xA;    Players.Add(ParsePlayer(playerEightContent));&#xA;&#xA;    cutContent = cutContent.Substring(playerEightLocation + 6229, cutContent.Length - playerEightLocation - 6229);&#xA;    var playerNineLocation = cutContent.IndexOf(&quot;[3]&quot;);&#xA;    var playerNineContent = cutContent.Substring(playerNineLocation, 6255);&#xA;    Players.Add(ParsePlayer(playerNineContent));&#xA;&#xA;    cutContent = cutContent.Substring(playerNineLocation + 6229, cutContent.Length - playerNineLocation - 6229);&#xA;    var playerTenLocation = cutContent.IndexOf(&quot;[4]&quot;);&#xA;    var playerTenContent = cutContent.Substring(playerTenLocation, 6255);&#xA;    Players.Add(ParsePlayer(playerTenContent));&#xA;&#xA;    return Players;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I can tell the code is horrible, and there is a lot of room for improvement. How would I divide the huge content into single blocks for each individual player?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I need to get the string content:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;[0] (com.riotgames.platform.gameclient.domain::PlayerParticipantStatsSummary)#8&#xA;to&#xA;[1] (com.riotgames.platform.gameclient.domain::PlayerParticipantStatsSummary)#8&#xA;&#xA;then:&#xA;[1] (com.riotgames.platform.gameclient.domain::PlayerParticipantStatsSummary)#8&#xA;to&#xA;[2] (com.riotgames.platform.gameclient.domain::PlayerParticipantStatsSummary)#8&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerDisplayName="Sergio Tapia" LastEditorUserId="22222" LastEditorDisplayName="Sergio Tapia" LastEditDate="2016-03-31T00:21:13.193" LastActivityDate="2016-03-31T00:21:13.193" Title="Parsing a game file" Tags="&lt;c#&gt;&lt;parsing&gt;" AnswerCount="1" CommentCount="2" FavoriteCount="1" />
  <row Id="173" PostTypeId="2" ParentId="172" CreationDate="2011-01-23T16:53:49.287" Score="14" Body="&lt;p&gt;Some rules of thumb that should improve your code:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;If you have variables with names resembling &lt;code&gt;varOne&lt;/code&gt;, &lt;code&gt;varTwo&lt;/code&gt;, &lt;code&gt;varThree&lt;/code&gt;, etc - no matter what the number you should probably be using an array.&lt;/li&gt;&#xA;&lt;li&gt;If you are doing several identical actions over a sequence of values you should be using a loop.&lt;/li&gt;&#xA;&lt;li&gt;Code should never need to be repeated.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Now with these in mind let's get to work.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private IEnumerable&amp;lt;Player&amp;gt; GetGamePlayers(string content)&#xA;{&#xA;    List&amp;lt;Player&amp;gt; Players = new List&amp;lt;Player&amp;gt;();&#xA;&#xA;    // Get the endgame stats text&#xA;    string endgameStatsMarker = &quot;com.riotgames.platform.gameclient.domain::EndOfGameStats&quot;&#xA;    int endgameStatsLocation = content.IndexOf(endgameStatsMarker);&#xA;    string endgameStats = content.Substring(endgameStatsLocation);&#xA;&#xA;    // Split the endgame stats text into an array of player information sections&#xA;    string[] charBeginMarker = new string[] {&quot;(com.riotgames.platform.gameclient.domain::PlayerParticipantStatsSummary)&quot;}&#xA;    string[] playerInfoSet = endgameStats.Split(charBeginMarker, SplitStringOptions.None);&#xA;&#xA;    // don't assume there's 10; get this from the logfile&#xA;    int numPlayers = GetMaxPlayers();&#xA;&#xA;    // playerDataSet[0] is before any playerInfo begins, so we skip it.&#xA;    for (int i = 1; i &amp;lt;= numPlayers; i++);&#xA;    {&#xA;        Players.Add(ParsePlayer(playerData));&#xA;        // The string passed to ParsePlayer will be a little different now.&#xA;        // It will contain a [#] on the end except in the case of the last player.&#xA;        // This is since we split the text at the beginning of the player field&#xA;        // and AFTER the [#].&#xA;        // You will have to ensure your ParsePlayer method will work with this&#xA;        // new input.&#xA;    }&#xA;&#xA;    return Players;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;... Well's most of your code removed following some simple rules. &lt;a href=&quot;http://www.folklore.org/StoryView.py?project=Macintosh&amp;amp;story=Negative_2000_Lines_Of_Code.txt&quot;&gt;The story of Bill Atkinson&lt;/a&gt; is probably quite relevant here. ;)&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;On better parsing&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;There is one large problem in your approach to file parsing I must talk to you about.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You are &lt;em&gt;guessing&lt;/em&gt; how long the player data section is going to be based on the &lt;em&gt;current&lt;/em&gt; logfile format's appearance and hardcoding this into the program. Let's examine this method's faults. Tell me what happens when any of these things happen:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Player data sections become one character longer.&lt;/li&gt;&#xA;&lt;li&gt;Player data sections get one one more line of information.&lt;/li&gt;&#xA;&lt;li&gt;Player data sections have another array introduced to them.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;The answers (no peeking): 1. Your parsing of player data might go funny. 2. Your parsing will probably explode. 3. Your parsing will definitely explode in a horrible mess.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you were parsing the file correctly, your program would be at least an order of magnitude less likely to stuff up in each case, until a &lt;em&gt;major&lt;/em&gt; change is made to the logfile format.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The key to parsing this file is recognising that &lt;strong&gt;this file is full of human-readable &lt;em&gt;and&lt;/em&gt; computer-readable markup you are not exploiting at all.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here is what you are doing: Open file. Identify where sections split. Count the number of characters. Hardcode this into the program and extract those characters.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here is what you &lt;em&gt;should&lt;/em&gt; be doing: Open file. Identify where sections split. Determine &lt;em&gt;how&lt;/em&gt; you identified where the sections split. Write code that is able to recognise this split, and splits the file content accordingly.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Thus, the key is:&lt;/strong&gt; understanding how &lt;em&gt;you&lt;/em&gt; understand what you see, then teaching your program to understand it as well!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For instance, consider these rules:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;A character information section begins at a particular string and ends at the next occurrence of the same string, so you can just split the character information sections on that string.&lt;/li&gt;&#xA;&lt;li&gt;Once you reach a &lt;code&gt;#&lt;/code&gt; you've found a special field. It may be a simple comment or it may be an ID for each unique object, allowing reusing objects from cache in case two objects are identical. It is probably safe to ignore from a &lt;code&gt;#&lt;/code&gt; to the end of a line unless you find a use for it.&lt;/li&gt;&#xA;&lt;li&gt;A variable can be found at the beginning of a line after any whitespace. The amount of whitespace is significant (see last point).&lt;/li&gt;&#xA;&lt;li&gt;If the first character found on a line is &lt;code&gt;[&lt;/code&gt; it's an element of an array, not a variable name.&lt;/li&gt;&#xA;&lt;li&gt;A variable name ends at the first space.&lt;/li&gt;&#xA;&lt;li&gt;A variable's value is on the other side of the &lt;code&gt;=&lt;/code&gt;, removing any unnecessary spaces on the other side.&lt;/li&gt;&#xA;&lt;li&gt;If a value starts with an integer it is an integer. If it starts with quotation marks it is a string.&lt;/li&gt;&#xA;&lt;li&gt;Variables will always contain an element ID then a type declaration. The variables that follow are probably the properties of an object of that type.&lt;/li&gt;&#xA;&lt;li&gt;An array item's contents are always indented. An increase in indent depth means you're now reading the contents of the array from the line above. A decrease in indent depth means you've finished reading the contents of that array.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Nine rules just from understanding and describing how I understand what I see. They should be fairly simple to implement in the parser in the form of methods - then all of a sudden your parser can already deal with 90% of the logfile's syntax! Only a few things are missing at this point, such as parsing an array element's type declaration or inferring the type of a variable's value (string? integer?).&lt;/p&gt;&#xA;" OwnerUserId="109" LastEditorUserId="109" LastEditDate="2011-01-23T17:47:49.707" LastActivityDate="2011-01-23T17:47:49.707" CommentCount="3" />
  <row Id="174" PostTypeId="1" AcceptedAnswerId="212" CreationDate="2011-01-23T19:46:34.387" Score="11" ViewCount="1769" Body="&lt;p&gt;The code below is a plugin I wrote for &lt;code&gt;Ext.grid.GridPanel&lt;/code&gt;, which basically allows you to have a bit more control over how rows are striped in the grid. By default you can only have every other row in alternate colour. With this plugin you an have for example 5 in basic color, 5 in alternate and so on.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What bothers me about it, is that it basically is 100+ lines copied from &lt;code&gt;Ext.grid.GridView&lt;/code&gt; with no more than 10 lines of my modifications. I would love to know if there's a way to do it in a more elegant way.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;My second concern is with that it's a plugin for &lt;code&gt;Ext.grid.GridPanel&lt;/code&gt;, but it actually modifies the underlying &lt;code&gt;Ext.grid.GridView&lt;/code&gt;. As far as I know, there is no way to attach a plugin to a &lt;code&gt;GridView&lt;/code&gt; with current framework architecture, but perhaps you DO know the way.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Legal stuff: The code is largely based on ExtJS source code, and as such it's released under &lt;a href=&quot;http://www.gnu.org/copyleft/gpl.html&quot;&gt;GNU GPL license v3 license&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;MyNamespace.grid.plugins.RowStriper = Ext.extend(Object, {&#xA;  constructor : function(config) {&#xA;    config = config || {};&#xA;    Ext.apply(this, config);&#xA;  },&#xA;  init : function(parent) {&#xA;        if (parent instanceof Ext.grid.GridPanel) {&#xA;            this.parent = parent;&#xA;            this.parent.stripeInterval = this.stripeInterval;&#xA;            parent.on('destroy', this.onDestroy, this);&#xA;            Ext.apply(parent.getView(), this.parentViewOverrides);&#xA;        }&#xA;  },&#xA;  onDestroy : Ext.emptyFn,&#xA;    parentViewOverrides : {&#xA;        doRender : function(columns, records, store, startRow, colCount, stripe) {&#xA;      var templates    = this.templates,&#xA;          cellTemplate = templates.cell,&#xA;          rowTemplate  = templates.row,&#xA;          last         = colCount - 1;&#xA;&#xA;      var tstyle = 'width:' + this.getTotalWidth() + ';';&#xA;&#xA;      // buffers&#xA;      var rowBuffer = [],&#xA;          colBuffer = [],&#xA;          rowParams = {tstyle: tstyle},&#xA;          meta      = {},&#xA;          column,&#xA;          record;&#xA;&#xA;      //build up each row's HTML&#xA;      for (var j = 0, len = records.length; j &amp;lt; len; j++) {&#xA;        record    = records[j];&#xA;        colBuffer = [];&#xA;&#xA;        var rowIndex = j + startRow;&#xA;&#xA;        //build up each column's HTML&#xA;        for (var i = 0; i &amp;lt; colCount; i++) {&#xA;          column = columns[i];&#xA;&#xA;          meta.id    = column.id;&#xA;          meta.css   = i === 0 ? 'x-grid3-cell-first ' : (i == last ? 'x-grid3-cell-last ' : '');&#xA;          meta.attr  = meta.cellAttr = '';&#xA;          meta.style = column.style;&#xA;          meta.value = column.renderer.call(column.scope, record.data[column.name], meta, record, rowIndex, i, store);&#xA;&#xA;                    if (Ext.isEmpty(meta.value)) {&#xA;            meta.value = '&amp;amp;#160;';&#xA;          }&#xA;&#xA;          if (this.markDirty &amp;amp;&amp;amp; record.dirty &amp;amp;&amp;amp; Ext.isDefined(record.modified[column.name])) {&#xA;            meta.css += ' x-grid3-dirty-cell';&#xA;          }&#xA;&#xA;          colBuffer[colBuffer.length] = cellTemplate.apply(meta);&#xA;        }&#xA;&#xA;        //set up row striping and row dirtiness CSS classes&#xA;        var alt = [];&#xA;&#xA;                if (stripe &amp;amp;&amp;amp; (rowIndex % (this.grid.stripeInterval * 2)) &amp;gt; (this.grid.stripeInterval - 1)) {&#xA;          alt[0] = 'x-grid3-row-alt';&#xA;        }&#xA;&#xA;        if (record.dirty) {&#xA;          alt[1] = ' x-grid3-dirty-row';&#xA;        }&#xA;&#xA;        rowParams.cols = colCount;&#xA;&#xA;        if (this.getRowClass) {&#xA;          alt[2] = this.getRowClass(record, rowIndex, rowParams, store);&#xA;        }&#xA;&#xA;        rowParams.alt   = alt.join(' ');&#xA;        rowParams.cells = colBuffer.join('');&#xA;&#xA;        rowBuffer[rowBuffer.length] = rowTemplate.apply(rowParams);&#xA;      }&#xA;&#xA;      return rowBuffer.join('');&#xA;    },&#xA;        processRows : function(startRow, skipStripe) {&#xA;        if (!this.ds || this.ds.getCount() &amp;lt; 1) {&#xA;              return;&#xA;      }&#xA;&#xA;      var rows = this.getRows(),&#xA;                    len  = rows.length,&#xA;                    i, r;&#xA;&#xA;      skipStripe = skipStripe || !this.grid.stripeRows;&#xA;            var stripeInterval = this.grid.stripeInterval || 1;&#xA;      startRow   = startRow   || 0;&#xA;&#xA;      for (i = 0; i&amp;lt;len; i++) {&#xA;                r = rows[i];&#xA;                if (r) {&#xA;                    r.rowIndex = i;&#xA;          if (!skipStripe) {&#xA;                        r.className = r.className.replace(this.rowClsRe, ' ');&#xA;            if ((i % (stripeInterval * 2)) &amp;gt; (stripeInterval - 1)){&#xA;                            r.className += ' x-grid3-row-alt';&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;&#xA;      // add first/last-row classes&#xA;      if (startRow === 0) {&#xA;                Ext.fly(rows[0]).addClass(this.firstRowCls);&#xA;      }&#xA;&#xA;      Ext.fly(rows[rows.length - 1]).addClass(this.lastRowCls);&#xA;        }&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="187" LastEditorUserId="22222" LastEditDate="2014-06-21T05:14:33.403" LastActivityDate="2014-06-21T05:14:33.403" Title="ExtJS Grid Plugin" Tags="&lt;javascript&gt;&lt;plugin&gt;&lt;ext.js&gt;" AnswerCount="1" CommentCount="2" />
  <row Id="175" PostTypeId="2" ParentId="150" CreationDate="2011-01-24T09:42:18.467" Score="6" Body="&lt;p&gt;I think it would be better to put all of your parameters into one array.  You then construct the array in a single command when you want to call the constructor.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This approach also has the benefit that it is possible to add more options for the class, see the code below for an example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&lt;code&gt;&#xA;class OpenIdProvider&#xA;{&#xA;    public $_width = 0;&#xA;    public $_highliting = '';&#xA;    public $_Xposition = 0;&#xA;    public $_Yposition = 0;&#xA;        ...&#xA;        ...&#xA;&#xA;    /**&#xA;     * Main constractor to set array of parameters.&#xA;     * param array $parameters&#xA;     * description  _Xposition , _width , _Yposition ...&#xA;     */&#xA;    function __constrauct($parameters)&#xA;    {&#xA;        if(is_array($parameters))&#xA;            foreach($parameters as $needle=&gt;$parameter)&#xA;                $this-&gt;{'_'.$needle} = $parameter;&#xA;    }&#xA;}&#xA;$options = array('path'=&gt;$imgPath . $name . $ext,&#xA;                'highliting'=&gt; 'openid_highlight', &#xA;                 'width'=&gt;108, &#xA;                 'height'=&gt;68, &#xA;                 '...'=&gt;6, &#xA;                 '...'=&gt;$info[0], &#xA;                 '...'=&gt;$info[1],&#xA;                 '...'=&gt;$name);&#xA;$openIdObj = new OpenIdProvider($options);&#xA;&lt;/code&gt;&#xA;&lt;/pre&gt;&#xA;" OwnerUserId="182" LastEditorUserId="4203" LastEditDate="2016-07-03T10:15:08.653" LastActivityDate="2016-07-03T10:15:08.653" CommentCount="2" />
  <row Id="177" PostTypeId="1" AcceptedAnswerId="180" CreationDate="2011-01-24T17:05:50.147" Score="11" ViewCount="1763" Body="&lt;p&gt;Here's a class I'm designing:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;using System;&#xA;using System.Collections.Generic;&#xA;using System.Linq;&#xA;using System.Web;&#xA;using System.Data;&#xA;using System.Data.SqlClient;&#xA;&#xA;namespace Artworking.classes&#xA;{&#xA;&#xA;    // A group permission level&#xA;    public class PermissionGroup&#xA;    {&#xA;        public int ID;                  // Unique ID for this group&#xA;        public bool hasFullControl;     // Does this group have complete control&#xA;        public user creator;            // Who created this group&#xA;        public string groupName;        // Reference name for group&#xA;&#xA;        // Constructor for when a permission group ID is passed&#xA;        public PermissionGroup(SqlConnection cn, int ID)&#xA;        {&#xA;            using (SqlCommand cmd = new SqlCommand(&quot;SELECT creatorUserID, group_name, fullControl FROM tblATPermissionGroups WHERE ID = &quot; + ID, cn))&#xA;            {&#xA;                SqlDataReader rdr = cmd.ExecuteReader();&#xA;                if (rdr.Read())&#xA;                {&#xA;                    this.creator.ID = int.Parse(rdr[&quot;creatorUserID&quot;].ToString());&#xA;                    this.groupName = rdr[&quot;group_name&quot;].ToString();&#xA;                    this.hasFullControl = bool.Parse(rdr[&quot;fullControl&quot;].ToString());&#xA;                }&#xA;                rdr.Close();&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Am I on the right track?  Please note I'm not using the built in authentication as it needs to be backwards compatible for an old system. What I'm just checking is that I'm handling these classes properly and loading the data in correctly etc.  As I understand it I'm meant to put my SQL commands in the classes and away from the actual pages right?&lt;/p&gt;&#xA;" OwnerUserId="154" LastEditorUserId="22222" LastEditDate="2014-07-05T13:20:29.087" LastActivityDate="2014-07-05T13:20:29.087" Title="Simple ASP.NET C# class design" Tags="&lt;c#&gt;&lt;sql&gt;&lt;asp.net&gt;&lt;classes&gt;" AnswerCount="5" CommentCount="2" FavoriteCount="1" />
  <row Id="178" PostTypeId="2" ParentId="177" CreationDate="2011-01-24T17:24:56.667" Score="0" Body="&lt;p&gt;I know nothing about C#, so this is just a comment based on the design.  Is there any reason those members aren't private?  Why don't you provide accessors, or (as I've said in many comments on this site already) actually move behavior into this class rather than exposing each individual data member?  For example, this is a permission group, have a function called &quot;isAuthorized&quot; to which you can pass a command to find out if this group is allowed to do that thing.  This way when you move forward, you can make the permissions possibly more fine grained and no one else has to even know that consumes this class.&lt;/p&gt;&#xA;" OwnerUserId="55" LastEditorUserId="55" LastEditDate="2011-01-24T18:13:50.987" LastActivityDate="2011-01-24T18:13:50.987" CommentCount="0" />
  <row Id="179" PostTypeId="2" ParentId="177" CreationDate="2011-01-24T17:53:41.910" Score="0" Body="&lt;p&gt;I would agree with Mark: I'd make the members private, and then add property accessors to them. You can then control access if you need to now or in the future.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example, you might want to make one of the members read-only. Easy to do: implement the get() property but not the set() property.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Similarly, data range checking can easily be added to the set().&lt;/p&gt;&#xA;" OwnerUserId="73" LastActivityDate="2011-01-24T17:53:41.910" CommentCount="0" />
  <row Id="180" PostTypeId="2" ParentId="177" CreationDate="2011-01-24T18:19:54.843" Score="11" Body="&lt;p&gt;It is generally not a good idea to do this type of processing in the .ctor.  Move it to a Load (or some such name) method.  This however means your object is not really loaded after instantiated which is another issue.  As such, I would recommend separating the entity information (&lt;code&gt;HasFullControl&lt;/code&gt;, &lt;code&gt;Creator&lt;/code&gt;, &lt;code&gt;GroupName&lt;/code&gt;, etc) type from the type that loads the information from the database.  You could change &lt;code&gt;PermissionGroup&lt;/code&gt; type to just have the data properties and then move the loading logic to a data layer that is responsible for creating the instance a loading the data.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Concatenating text to the end of a sql string leaves you open to &lt;strong&gt;Sql Injection attacks&lt;/strong&gt; (though not in this specific case).  Use a parameter instead:  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;using (SqlCommand cmd = new SqlCommand(&quot;SELECT creatorUserID, group_name, &#xA;    fullControl FROM tblATPermissionGroups WHERE ID = @id&quot;, cn))&#xA;{&#xA;    cmd.Parameters.AddWithValue(&quot;@id&quot;, id);&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You need to wrap the &lt;code&gt;SqlDataReader&lt;/code&gt; in a using block.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Use public readonly properties rather than public fields.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Consider using a &lt;code&gt;IDbConnection&lt;/code&gt; rather than &lt;code&gt;SqlConnection&lt;/code&gt;.  Doing so will allow you to more easily mock the data call when testing this method and makes it easier to support other RDBMS's should the need arise.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Throw helpful exceptions if something goes wrong when populating the data fields.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Follow the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms229002.aspx&quot;&gt;.Net Framework naming guidelines&lt;/a&gt;&lt;/p&gt;&#xA;" OwnerUserId="67" LastActivityDate="2011-01-24T18:19:54.843" CommentCount="0" />
  <row Id="181" PostTypeId="2" ParentId="177" CreationDate="2011-01-24T18:28:08.747" Score="6" Body="&lt;p&gt;Consider C# accepted practices. As other answers mention, you have member fields marked public. In C#, you typically expose values as properties and keep members private. Starting with C# 3, you do not even need to explicitly create member fields to back your properties unless getters and setters are non-trivial. So consider replacing your fields with &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public int ID { get; private set; }&#xA;public bool HasFullControl { get; private set; }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note that I added &lt;code&gt;private&lt;/code&gt; to the setter. This is on the assumption that you do not want code external to your class setting these values, overriding your permissions, as it were. Feel free to remove that modifier if that is not the case. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Note also that C# practices dictate that publicly visible names are Pascal cased instead of your camel casing. Capitalize the first character of your namespace (including nested namespaces), classes, properties, methods, etc.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;@akmad has addressed an additional set of concerns, such as the constructor doing expensive work and the vulnerability to SQL injection in a general sense (though not specifically here, as akmad also points out). If you need to do a database call to construct your object, consider a factory approach.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public class PermissionGroup&#xA;{&#xA;    private PermissionGroup() { } // class cannot be constructed from outside&#xA;&#xA;    public static PermissionGroup GetPermissionGroup(/* your parameters */)&#xA;    {&#xA;        // build the object starting here!&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="153" LastEditorUserId="153" LastEditDate="2011-09-06T18:07:28.143" LastActivityDate="2011-09-06T18:07:28.143" CommentCount="0" />
  <row Id="182" PostTypeId="1" AcceptedAnswerId="329" CreationDate="2011-01-24T18:28:37.577" Score="8" ViewCount="933" Body="&lt;p&gt;In &lt;a href=&quot;http://codereview.stackexchange.com/questions/9/how-to-improve-very-loopy-method&quot;&gt;this question&lt;/a&gt; I answered with this Linq. While it does what I was looking for, I am not sure how easy the linq queries are for others to follow. So I am looking for feedback on formating, what comments would be helpful and other alternative approaches to moving through the children records.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    private void UpdateGridFromSourceHierarchy(int depth, IEnumerable&amp;lt;SourceFile&amp;gt; list)&#xA;    {&#xA;&#xA;        //Get the initial set of sourcefiles&#xA;        var sourceFiles = list&#xA;            .SelectMany(current =&amp;gt; current.getInvocations()&#xA;                                .Select(invocation =&amp;gt; new {current = (SourceFile) null, invocation}))&#xA;            .ToList() //This ensures that getInvocations is only called once for each sourcefile&#xA;            .GroupBy(x =&amp;gt; x.current, x =&amp;gt; x.invocation);&#xA;&#xA;        for (var currentDepth = 0; currentDepth &amp;lt;= depth; currentDepth++)&#xA;        {&#xA;            foreach (var currentGroup in sourceFiles)&#xA;            {&#xA;                int sourceFileCount = currentGroup.Count();&#xA;                int counter = 0;&#xA;&#xA;                foreach (var invocation in currentGroup)&#xA;                {&#xA;                    /*&#xA;                     * Generalized grid code goes here&#xA;                     * In my code it was a call to:&#xA;                     * UpdateGridPosition(currentGroup,invocation,counter);&#xA;                     */&#xA;                    counter++;&#xA;                }&#xA;            }&#xA;&#xA;            //Select the current sub source files&#xA;            sourceFiles = sourceFiles.SelectMany(current =&amp;gt; current.Select(invocation =&amp;gt; invocation))&#xA;                //Get all of the invocations paired with the new current level of source files&#xA;                .SelectMany(newCurrent =&amp;gt; newCurrent.getInvocations()&#xA;                                     .Select(invocation =&amp;gt; new { newCurrent, invocation }))&#xA;                //Group them so that we can loop through each set of invocations seperately&#xA;                .ToList().GroupBy(x =&amp;gt; x.newCurrent, x =&amp;gt; x.invocation);&#xA;        }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="33" LastEditorUserId="22222" LastEditDate="2015-12-05T22:02:15.657" LastActivityDate="2015-12-05T22:02:15.657" Title="Update grid from source hierarchy" Tags="&lt;c#&gt;&lt;linq&gt;" AnswerCount="5" CommentCount="0" />
  <row Id="183" PostTypeId="1" AcceptedAnswerId="184" CreationDate="2011-01-24T19:36:29.233" Score="15" ViewCount="2693" Body="&lt;p&gt;This is performance critical. I measured and determined that using the &lt;code&gt;sqrt&lt;/code&gt; is faster then using the &lt;code&gt;cos&lt;/code&gt; method.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I am aware that this code only works for some points, so that is not an issue.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;Point&lt;/code&gt; is &lt;code&gt;System.Drawing.Point&lt;/code&gt;. &lt;code&gt;_offset&lt;/code&gt; is also of type &lt;code&gt;Point&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I assumed, and the profiler seemed to confirm, that the &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; will not slow down the code unless an exception occurs. Please correct me if that is wrong.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/// &amp;lt;summary&amp;gt;&#xA;/// Convert from polar coordinates to rectangular coordinates.&#xA;/// Only works for points to the left of the origin.&#xA;/// &amp;lt;/summary&amp;gt;&#xA;/// &amp;lt;param name=&quot;radius&quot;&amp;gt;The radius of the point in pixels.&amp;lt;/param&amp;gt;&#xA;/// &amp;lt;param name=&quot;theta&quot;&amp;gt;The angle of the point in radians.&amp;lt;/param&amp;gt;&#xA;/// &amp;lt;returns&amp;gt;The point in rectangular coordinates.&amp;lt;/returns&amp;gt;&#xA;internal Point PolarToRectangular(&#xA;        double radius,&#xA;        double theta)&#xA;{&#xA;    try&#xA;    {&#xA;        double sin = Math.Sin(theta);&#xA;&#xA;        // This is faster then:&#xA;        // double cos = Math.Cos(theta);&#xA;        double cos = -Math.Sqrt(1 - (sin * sin));&#xA;&#xA;        Int32 x = _offset.X + (Int32)Math.Round(radius * cos);&#xA;        Int32 y = _offset.Y + (Int32)Math.Round(radius * sin);&#xA;&#xA;        return new Point(x, y);&#xA;    }&#xA;    catch (OverflowException ex)&#xA;    {&#xA;        ex.Data.Add(&quot;Screen polar Radius&quot;, radius);&#xA;        ex.Data.Add(&quot;Screen polar Theta&quot;, theta);&#xA;        throw;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="163" LastEditorUserId="41243" LastEditDate="2014-10-21T20:34:50.203" LastActivityDate="2014-10-21T20:34:50.203" Title="Converting from polar coordinates to rectangular coordinates" Tags="&lt;c#&gt;&lt;performance&gt;&lt;converting&gt;&lt;coordinate-system&gt;" AnswerCount="3" CommentCount="2" FavoriteCount="1" />
  <row Id="184" PostTypeId="2" ParentId="183" CreationDate="2011-01-24T19:46:04.313" Score="10" Body="&lt;p&gt;Yes I think that is going to be pretty quick. It might be tempting to move the cos calc so that it does a full Pythagoras with the radius. This will save an assignment, but I thi it requires an additional multiplication (1*1 being known already in your current version).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As a matter of personal style (possible because I code in multiple languages) but I would use different names for your sin and cos variables. most languages would not accept this, and it would, personally, have the potential to confuse me.&lt;/p&gt;&#xA;" OwnerUserId="73" LastActivityDate="2011-01-24T19:46:04.313" CommentCount="0" />
  <row Id="185" PostTypeId="1" AcceptedAnswerId="575" CreationDate="2011-01-24T20:58:58.610" Score="16" ViewCount="16044" Body="&lt;p&gt;I am unsure if my use of &lt;code&gt;Monitor.Wait&lt;/code&gt; and &lt;code&gt;Monitor.Pulse&lt;/code&gt; is correct. It seems to work alright, but there is a nagging doubt I am doing something wrong.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Am I dealing with a timeout OK, or is there a better way to do it?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;All examples I have seen use &lt;code&gt;Monitor.Wait&lt;/code&gt; with a &lt;code&gt;while&lt;/code&gt; loop, and not with an &lt;code&gt;if&lt;/code&gt; to re-check the blocking condition after &lt;code&gt;Pulse&lt;/code&gt;, but I need to determine if a timeout occurred.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;_cmdDispatcher.EnqueueCommand(cmd)&lt;/code&gt; sends a command to the device, and it responds with an event that executes the &lt;code&gt;CommResponseReceived&lt;/code&gt; method on another thread.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private readonly object _connectLock = new object();&#xA;&#xA;public bool Connect()&#xA;{&#xA;    if (this._connected) throw new InvalidOperationException(&quot;Plc is already connected.&quot;);&#xA;&#xA;    ICommand cmd = new Command(MessageIdentifier.Name);&#xA;&#xA;    try&#xA;    {&#xA;        if (this._channel.Open() &amp;amp;&amp;amp; !this._connected)&#xA;        {&#xA;            // Wait for communications to be fully established or timeout before continuing.&#xA;            lock (this._connectLock)&#xA;            {&#xA;                this._cmdDispatcher.EnqueueCommand(cmd);&#xA;&#xA;                if (!this._connectSignal)&#xA;                {&#xA;                    if (Monitor.Wait(this._connectLock, this._timeout))&#xA;                    {&#xA;                        this._connected = true;&#xA;                        this._connectSignal = false;&#xA;                        Debug.WriteLine(&quot;Connection succeeded.&quot;);&#xA;                    }&#xA;                    else&#xA;                    {&#xA;                        //TODO Log timeout.&#xA;                        Debug.WriteLine(&quot;Connection timed out.&quot;);&#xA;                    }&#xA;                }&#xA;            }&#xA;&#xA;            if (this._connected) this.OnConnectionChangedEvent(ConnectionStatus.Connected);&#xA;        }&#xA;    }&#xA;    catch (Exception ex)&#xA;    {&#xA;        //TODO Log errors.&#xA;        Debug.WriteLine(&quot;Connection failed.&quot;);&#xA;    }&#xA;&#xA;    return this._connected;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Executed in another thread when the device responds:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private void CommResponseReceived(object sender, CommsResponseEventArgs e)&#xA;{&#xA;    //&#xA;&#xA;    // Signal that communications are successfully established.&#xA;    lock (this._connectLock)&#xA;    {&#xA;        this._connectSignal = true;&#xA;        Monitor.Pulse(this._connectLock);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="64" LastEditorUserId="22222" LastEditDate="2016-06-22T22:04:04.477" LastActivityDate="2016-06-22T22:04:04.477" Title="Determining if a connection has been made to a communications device" Tags="&lt;c#&gt;&lt;.net&gt;&lt;winforms&gt;&lt;synchronization&gt;&lt;timeout&gt;" AnswerCount="3" CommentCount="2" FavoriteCount="0" />
  <row Id="186" PostTypeId="1" AcceptedAnswerId="237" CreationDate="2011-01-24T21:58:21.663" Score="54" ViewCount="166775" Body="&lt;p&gt;Imagine that I need a color palette form my Winforms application to have a consistent look.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What I did was create a static helper class, and helper methods that I can call from anywhere in my code and invoke what I need from the App.settings file.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here for example, I am getting the school name from the App.config file, so I can sell this application to other schools with minimal changes on my part.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Like so:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&amp;gt;&#xA;&amp;lt;configuration&amp;gt;&#xA;  &amp;lt;appSettings&amp;gt;&#xA;    &amp;lt;add key=&quot;schoolName&quot; value=&quot;Uboldi&quot;/&amp;gt;&#xA;  &amp;lt;/appSettings&amp;gt;&#xA;&amp;lt;/configuration&amp;gt;&#xA;&#xA;&#xA;using System;&#xA;using System.Collections.Generic;&#xA;using System.Linq;&#xA;using System.Text;&#xA;using System.Configuration;&#xA;&#xA;namespace Uboldi.Helpers&#xA;{&#xA;    public static class CustomizationHelper&#xA;    {&#xA;        public static string GetSchoolName()&#xA;        {&#xA;            return ConfigurationManager.AppSettings[&quot;schoolName&quot;];&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Usage:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;using System;&#xA;using System.Collections.Generic;&#xA;using System.ComponentModel;&#xA;using System.Data;&#xA;using System.Drawing;&#xA;using System.Linq;&#xA;using System.Text;&#xA;using System.Windows.Forms;&#xA;using Uboldi.Helpers;&#xA;&#xA;namespace Uboldi&#xA;{&#xA;    public partial class MainForm : Form&#xA;    {&#xA;        public MainForm()&#xA;        {&#xA;            InitializeComponent();&#xA;            LoadFormTitle();&#xA;        }&#xA;&#xA;        private void LoadFormTitle()&#xA;        {&#xA;            var schoolName = CustomizationHelper.GetSchoolName();&#xA;            this.Text = String.Format(&quot;Sistema {0} - Pagina Principal&quot;, schoolName);&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Are there any glaring mistakes I'm making by choosing this type of architecture?&lt;/p&gt;&#xA;" OwnerDisplayName="Sergio Tapia" LastEditorUserId="29371" LastEditDate="2015-12-14T08:11:08.527" LastActivityDate="2015-12-14T08:13:57.177" Title="Getting/setting default values from my App.config" Tags="&lt;c#&gt;" AnswerCount="8" CommentCount="0" FavoriteCount="20" />
  <row Id="187" PostTypeId="1" AcceptedAnswerId="196" CreationDate="2011-01-24T22:35:07.103" Score="18" ViewCount="714" Body="&lt;p&gt;I'm learning Django as I go. I know this model is missing user authentication, registration, comments/comment threading, and voting. But this is my starting code for my model. What are some of the things I can improve on, modify, rewrite, etc?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;from django.contrib.auth.models import User&#xA;from django.db import models&#xA;from django.contrib import admin&#xA;from django.template.defaultfilters import escape&#xA;from django.utils.translation import ugettext as _&#xA;from django.utils.encoding import force_unicode&#xA;from django.http import HttpResponse, HttpResponseRedirect&#xA;from django.core.urlresolvers import reverse&#xA;&#xA;class DateTime(models.Model):&#xA;  datetime = models.DateTimeField(auto_now_add=True)&#xA;&#xA;  def __unicode__(self):&#xA;    return unicode(self.datetime.strftime(&quot;%b %d, %Y, %I:%M %p&quot;))&#xA;&#xA;class Country(models.Model):&#xA;  country = models.CharField(max_length=50)&#xA;&#xA;  def __unicode__(self):&#xA;    return unicode(self.country)&#xA;&#xA;class Artist(models.Model):&#xA;  artist = models.CharField(max_length=50)&#xA;  country = models.ForeignKey(Country, blank=True, null=True)&#xA;  user = models.ForeignKey(User, blank=True, null=True)&#xA;  created = models.ForeignKey(DateTime)&#xA;  notes = models.TextField()&#xA;&#xA;  def __unicode__(self):&#xA;    return artist&#xA;&#xA;class Song(models.Model):&#xA;  name = models.CharField(max_length=200)&#xA;  artist = models.ForeignKey(Artist, blank=True, null=True)&#xA;  # language = models.ForeignKey(Country, blank=True, null=True)&#xA;  user = models.ForeignKey(User, blank=True, null=True)&#xA;  created = models.ForeignKey(DateTime)&#xA;  notes = models.TextField()&#xA;&#xA;  def __unicode__(self):&#xA;    return song&#xA;&#xA;class FileType(models.Model):&#xA;  file_type = models.CharField(max_length=3)&#xA;  description = models.TextField()&#xA;  user = models.ForeignKey(User, blank=True, null=True)&#xA;  created = models.ForeignKey(DateTime)&#xA;  notes = models.TextField()&#xA;&#xA;  def __unicode__(self):&#xA;    return file_type&#xA;&#xA;class Level(models.Model):&#xA;  level = models.CharField(max_length=3)&#xA;  description = models.TextField()&#xA;  user = models.ForeignKey(User, blank=True, null=True)&#xA;  created = models.ForeignKey(DateTime)&#xA;  notes = models.TextField()&#xA;&#xA;  def __unicode__(self):&#xA;    return level&#xA;&#xA;class MusicSheet(models.Model):&#xA;  version = models.CharField(max_length=2)&#xA;  song = models.ForeignKey(Song, blank=True, null=True)&#xA;  artist = models.ForeignKey(Artist, blank=True, null=True)&#xA;  file_type = models.ForeignKey(FileType, blank=True, null=True)&#xA;  level = models.ForeignKey(Level, blank=True, null=True)&#xA;  user = models.ForeignKey(User, blank=True, null=True)&#xA;  created = models.ForeignKey(DateTime)&#xA;  text = models.TextField()&#xA;  notes = models.TextField()&#xA;&#xA;#include votes&#xA;&#xA;#include comments&#xA;&#xA;#include registration code&#xA;&#xA;&#xA;########################################################################################################################&#xA;######################################## ADMIN STUFF ###################################################################&#xA;########################################################################################################################&#xA;&#xA;&#xA;class MusicSheetAdmin(admin.ModelAdmin):&#xA;  list_display = [&quot;version&quot;, &quot;song&quot;, &quot;artist&quot;, &quot;file_type&quot;, &quot;level&quot;, &quot;user&quot; , &quot;created&quot;, &quot;text&quot;, &quot;notes&quot;]&#xA;  search_fields = [&quot;version&quot;]&#xA;&#xA;class MusicSheetInline(admin.TabularInline):&#xA;  model = MusicSheet&#xA;&#xA;class DateAdmin(admin.ModelAdmin):&#xA;  list_display = [&quot;datetime&quot;]&#xA;  inlines = [MusicSheetInline]&#xA;&#xA;  def response_add(self, request, obj, post_url_continue='../%s/'):&#xA;    &quot;&quot;&quot; Determines the HttpResponse for the add_view stage.  &quot;&quot;&quot;&#xA;    opts = obj._meta&#xA;    pk_value = obj._get_pk_val()&#xA;&#xA;    msg = &quot;Song(s) were added successfully.&quot;&#xA;    # Here, we distinguish between different save types by checking for&#xA;    # the presence of keys in request.POST.&#xA;    if request.POST.has_key(&quot;_continue&quot;):&#xA;      self.message_user(request, msg + ' ' + _(&quot;You may edit it again below.&quot;))&#xA;      if request.POST.has_key(&quot;_popup&quot;):&#xA;        post_url_continue += &quot;?_popup=1&quot;&#xA;      return HttpResponseRedirect(post_url_continue % pk_value)&#xA;&#xA;    if request.POST.has_key(&quot;_popup&quot;):&#xA;      return HttpResponse(&#xA;          '&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;opener.dismissAddAnotherPopup(window, &quot;%s&quot;, &quot;%s&quot;);'&#xA;          '&amp;lt;/script&amp;gt;' % (escape(pk_value), escape(obj)))&#xA;    elif request.POST.has_key(&quot;_addanother&quot;):&#xA;      self.message_user(request, msg + ' ' + (_(&quot;You may add another %s below.&quot;) %&#xA;                                              force_unicode(opts.verbose_name)))&#xA;      return HttpResponseRedirect(request.path)&#xA;    else:&#xA;      self.message_user(request, msg)&#xA;&#xA;    for music_sheet in MusicSheet.objects.filter(created=obj):&#xA;      if not music_sheet.user:&#xA;        music_sheet.user = request.user&#xA;        music_sheet.save()&#xA;&#xA;    return HttpResponseRedirect(reverse(&quot;admin:musicsheet_musicsheet_changelist&quot;))&#xA;&#xA;&#xA;class CountryAdmin(admin.ModelAdmin):&#xA;  list_display = [&quot;country&quot;]&#xA;  search_fields = [&quot;country&quot;]&#xA;&#xA;class CountryInline(admin.TabularInline):&#xA;  model = MusicSheet&#xA;&#xA;&#xA;&#xA;class SongAdmin(admin.ModelAdmin):&#xA;  list_display = [&quot;name&quot;, &quot;artist&quot;, &quot;user&quot;, &quot;created&quot;, &quot;notes&quot;]&#xA;  search_fields = [&quot;name&quot;, &quot;artist&quot;]&#xA;&#xA;class SongInline(admin.TabularInline):&#xA;  model = MusicSheet&#xA;&#xA;&#xA;&#xA;class ArtistAdmin(admin.ModelAdmin):&#xA;  list_display = [&quot;artist&quot;, &quot;country&quot;, &quot;user&quot;, &quot;created&quot;, &quot;notes&quot;]&#xA;  search_fields = [&quot;artist&quot;, &quot;country&quot;]&#xA;&#xA;class ArtistInline(admin.TabularInline):&#xA;  model = MusicSheet&#xA;&#xA;&#xA;&#xA;class FileTypeAdmin(admin.ModelAdmin):&#xA;  list_display = [&quot;file_type&quot;, &quot;description&quot;, &quot;user&quot;, &quot;created&quot;, &quot;notes&quot;]&#xA;  search_fields = [&quot;file_type&quot;]&#xA;&#xA;class FileTypeInline(admin.StackedInline):&#xA;  model = MusicSheet&#xA;&#xA;&#xA;class LevelAdmin(admin.ModelAdmin):&#xA;  list_display = [&quot;level&quot;, &quot;description&quot;, &quot;user&quot;, &quot;created&quot;, &quot;notes&quot;]&#xA;  search_fields = [&quot;level&quot;]&#xA;&#xA;class LevelInline(admin.StackedInline):&#xA;  model = MusicSheet&#xA;&#xA;admin.site.register(MusicSheet, MusicSheetAdmin)&#xA;admin.site.register(Country, CountryAdmin)&#xA;admin.site.register(Song, SongAdmin)&#xA;admin.site.register(Artist, ArtistAdmin)&#xA;admin.site.register(FileType, FileTypeAdmin)&#xA;admin.site.register(Level, LevelAdmin)&#xA;admin.site.register(DateTime, DateAdmin)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="190" LastEditorUserId="22222" LastEditDate="2014-09-25T06:37:51.660" LastActivityDate="2014-09-25T06:37:51.660" Title="Music info model" Tags="&lt;python&gt;&lt;beginner&gt;&lt;django&gt;" AnswerCount="3" CommentCount="2" FavoriteCount="4" />
  <row Id="189" PostTypeId="2" ParentId="186" CreationDate="2011-01-24T23:46:12.303" Score="1" Body="&lt;p&gt;The presented code seems okay, there aren't any obvious problems with it. &lt;code&gt;CustomizationHelper&lt;/code&gt; could probably use a better name though to indicate what's being customized. If this is part of a larger project, putting a comment to indicate which classes are suppose to use &lt;code&gt;CustomizationHelper&lt;/code&gt; would be a good idea.&lt;/p&gt;&#xA;" OwnerUserId="71" LastActivityDate="2011-01-24T23:46:12.303" CommentCount="0" />
  <row Id="190" PostTypeId="1" AcceptedAnswerId="213" CreationDate="2011-01-25T00:13:26.037" Score="6" ViewCount="689" Body="&lt;p&gt;I've recently assembled some jQuery that allows a user to build out a bulleted list in MS Word with hyperlinks and turn that into a HTML unordered list.  Ideas for uses are website menu systems where the user may not have a clue about HTML. You can also extend this with jQuery UI plugins for effects.  Looking for edge cases.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;            /*&#xA;                The following will read in a bullet list from in a MS Word XML file and turn it into a &#xA;                unordered list with hyperlinks. Perhaps to use as a menu.&#xA;            */&#xA;            $.ajax({&#xA;                type: &quot;GET&quot;,&#xA;                async: false,&#xA;                url: &quot;Menu.xml&quot;,&#xA;                dataType: &quot;xml&quot;,&#xA;                success:function(results){&#xA;                    var currentDepth = 0;&#xA;                    $(&quot;#menu&quot;).append('&amp;lt;ul class=&quot;menuLvl'+currentDepth+'&quot;&amp;gt;&amp;lt;/ul&amp;gt;');&#xA;                    $(results).find(&quot;[nodeName=w:p]&quot;).each(function(){&#xA;                        if($(this).find(&quot;[nodeName=w:pStyle]&quot;).attr('w:val') == 'ListParagraph'){&#xA;                            var liValue = $(this).find(&quot;[nodeName=w:t]&quot;).text();&#xA;                            var hyper = $(this).find(&quot;[nodeName=w:hyperlink]&quot;).attr('r:id');&#xA;                            var placeAtDepth = parseInt($(this).find(&quot;[nodeName=w:ilvl]&quot;).attr('w:val'), 10);&#xA;&#xA;                            if(placeAtDepth &amp;gt; currentDepth){&#xA;                                $(&quot;.menuLvl&quot;+ currentDepth).append('&amp;lt;ul class=&quot;menuLvl'+ placeAtDepth +'&quot;&amp;gt;');&#xA;                            }   &#xA;&#xA;                            currentDepth = placeAtDepth;&#xA;&#xA;                            //Determine if we have an hyperlink&#xA;                            if(hyper != null){&#xA;                                var link = $(results).find('Relationship[Id='+hyper+']').attr('Target');&#xA;                                liValue = '&amp;lt;a href=&quot;'+ link +'&quot;&amp;gt;'+ liValue +'&amp;lt;/a&amp;gt;';&#xA;                            }&#xA;&#xA;                            $(&quot;.menuLvl&quot;+currentDepth).last().append('&amp;lt;li&amp;gt;'+ liValue +'&amp;lt;/li&amp;gt;');&#xA;                        }&#xA;                    });&#xA;                }&#xA;            });&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="152" LastEditorUserId="22222" LastEditDate="2013-11-24T01:28:16.323" LastActivityDate="2013-11-24T01:28:16.323" Title="Build menu from MS Word XML" Tags="&lt;javascript&gt;&lt;jquery&gt;&lt;xml&gt;" AnswerCount="1" CommentCount="0" />
  <row Id="191" PostTypeId="2" ParentId="186" CreationDate="2011-01-25T00:26:28.480" Score="8" Body="&lt;p&gt;I think that'd be fine. Another option would be to create a second constructor for the form and pass the title in:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public class MainForm : Form&#xA;{&#xA;    public MainForm()&#xA;    {&#xA;        InitializeComponent();&#xA;    }&#xA;&#xA;    public MainForm(string schoolName) : this()&#xA;    {&#xA;        this.Text = String.Format(&quot;Sistema {0} - Pagina Principal&quot;, schoolName);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This may be just personal preference, though.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You could also further extract the hardcoded form title into a config or resource file and instantiate the form like this instead:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var titleFormat = ...; // retrieve format from some place&#xA;var schoolName = CustomizationHelper.GetSchoolName();&#xA;var form = new MainForm() { Text = string.Format(titleFormat, schoolName) };&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The payoff from doing that would depend on how likely it is that it'll change in the future or whether or not you're planning to translate the application into other languages.&lt;/p&gt;&#xA;" OwnerUserId="61" LastActivityDate="2011-01-25T00:26:28.480" CommentCount="0" />
  <row Id="192" PostTypeId="2" ParentId="186" CreationDate="2011-01-25T01:12:56.610" Score="7" Body="&lt;p&gt;Is the purpose of CustomizationHelper just to abstract away the ConfigurationManager/AppConfig stuff?  Because otherwise I'd just stick with the straight ConfigurationManager call. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;The less hoops required to understand what's going on, the better in my book.  Unless you see the need to someday get SchoolName from another source (like say a Database).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In any event the class name could probably be improved, maybe something like &quot;SchoolConfiguration&quot; and have a &quot;Name&quot; property or &quot;GetName()&quot; method.&lt;/p&gt;&#xA;" OwnerUserId="50" LastActivityDate="2011-01-25T01:12:56.610" CommentCount="0" />
  <row Id="193" PostTypeId="2" ParentId="183" CreationDate="2011-01-25T03:12:37.303" Score="15" Body="&lt;p&gt;I would consider using a lookup table to find your sines. How precise an angle are you calculating for? &lt;a href=&quot;http://stackoverflow.com/questions/1382322/calculating-vs-lookup-tables-for-sine-value-performance/1382380#1382380&quot;&gt;This answer on stackoverflow&lt;/a&gt; has some interesting information on how to construct one and the benchmarks for using it to two decimal points. If you are using the full precision of a double, then your current method will be faster, but if you have a fixed precision, a lookup table will be benificial.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As long as the exception IS exceptional (and it looks to me like it is) it will add very little overhead to your run times. See: &lt;a href=&quot;http://stackoverflow.com/q/52312/487663&quot;&gt;http://stackoverflow.com/q/52312/487663&lt;/a&gt;.&lt;/p&gt;&#xA;" OwnerUserId="110" LastActivityDate="2011-01-25T03:12:37.303" CommentCount="0" />
  <row Id="194" PostTypeId="2" ParentId="182" CreationDate="2011-01-25T07:00:17.120" Score="3" Body="&lt;p&gt;&lt;strong&gt;No&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Your code looks pretty messy and that last linq statement is just a killer. To top it off the triple-nested foreach statement looks like serious code smell. I'd suggest breaking your code up into smaller methods that each do one thing which might reduce the perceived complexity of it&lt;/p&gt;&#xA;" OwnerUserId="149" LastActivityDate="2011-01-25T07:00:17.120" CommentCount="5" />
  <row Id="195" PostTypeId="2" ParentId="112" CreationDate="2011-01-25T09:26:03.907" Score="6" Body="&lt;p&gt;you don't necessarily have to call -setNetworkActivityIndicatorVisible: from the main thread. I didn't find anything in the documentation about UIApplication not being thread safe, and since your application's main thread doesn't have anything in common with the system, you are free to call it whenever you like.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;dispatch_sync: that's fine. you could also call dispatch_async, since i'm not really sure you would want do display the network indicator while the feeds are actually being set on the UI - instead you probably only want the downloading to be indicated. I would probably go for dispatch_async.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But to answer your question, that piece of code is perfectly fine ( with the minor addition that maybe you should really use only one exit point from your method ... )&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Hope this helps.&lt;/p&gt;&#xA;" OwnerUserId="156" LastActivityDate="2011-01-25T09:26:03.907" CommentCount="1" />
  <row Id="196" PostTypeId="2" ParentId="187" CreationDate="2011-01-25T10:00:20.167" Score="16" Body="&lt;p&gt;Disclaimer: I'm not a Django guru.  Here are my thoughts, for what it's worth.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Common fields&lt;/strong&gt;: &lt;code&gt;user&lt;/code&gt;, &lt;code&gt;created&lt;/code&gt;, and &lt;code&gt;nodes&lt;/code&gt; occur in almost every class.  I'd consider creating an &lt;a href=&quot;http://docs.djangoproject.com/en/dev/topics/db/models/#abstract-base-classes&quot;&gt;abstract base class&lt;/a&gt; with these three fields.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Field names&lt;/strong&gt;: for the sake of readability, I'd change &lt;code&gt;Artist.artist&lt;/code&gt; to &lt;code&gt;Artist.name&lt;/code&gt;, and &lt;code&gt;*.user&lt;/code&gt; to &lt;code&gt;*.creator&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;strong&gt;File extensions&lt;/strong&gt;: occasionally have more than 3 chars (e.g.: &lt;code&gt;.jpeg&lt;/code&gt;, &lt;code&gt;.java&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Indexing&lt;/strong&gt;: I'd add &lt;code&gt;db_index=True&lt;/code&gt; to the &lt;code&gt;name&lt;/code&gt; fields, for the very least.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Redundancy&lt;/strong&gt;: since you have &lt;code&gt;MusicSheet.song&lt;/code&gt; and &lt;code&gt;Song.artist&lt;/code&gt;, you no longer need &lt;code&gt;MusicSheet.artist&lt;/code&gt;.  It's called &lt;a href=&quot;http://en.wikipedia.org/wiki/Data_redundancy&quot;&gt;redundancy&lt;/a&gt; and it's generally a bad thing.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Primary keys, unique constraints&lt;/strong&gt;: you probably don't want two &lt;code&gt;FileType&lt;/code&gt;s with the same &lt;code&gt;file_type&lt;/code&gt;, so that field is a good candidate for &lt;a href=&quot;http://en.wikipedia.org/wiki/Primary_key&quot;&gt;primary key&lt;/a&gt; (&lt;code&gt;primary_key=True&lt;/code&gt;).  I'm not sure what &lt;code&gt;Level&lt;/code&gt; is supposed to model, but my guess is that its &lt;code&gt;level&lt;/code&gt; is a good candidate for primary key as well.  Add &lt;code&gt;unique=True&lt;/code&gt; for &lt;code&gt;Country.country&lt;/code&gt;, or add a primary key with &lt;a href=&quot;http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2&quot;&gt;country code&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;strong&gt;DateTime&lt;/strong&gt;: I don't see a need for this class.  Simply replace every occurrence of: &lt;code&gt;created = models.ForeignKey(DateTime)&lt;/code&gt; with &lt;code&gt;models.DateTimeField(auto_now_add=True)&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="144" LastActivityDate="2011-01-25T10:00:20.167" CommentCount="0" />
  <row Id="197" PostTypeId="1" AcceptedAnswerId="208" CreationDate="2011-01-25T12:11:42.320" Score="18" ViewCount="5695" Body="&lt;p&gt;I'm looking into Administration Elevation and I've come up with a solution that seems like it's perfectly sane, but I'm still in the dark about the professional methods to accomplish this.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Is there a better way to do this or is this fine? &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;using System;&#xA;using System.Diagnostics;&#xA;using System.Security.Principal;&#xA;using System.Windows.Forms;&#xA;&#xA;namespace MyVendor.Installation&#xA;{&#xA;    static class Program&#xA;    {&#xA;        [STAThread]&#xA;        static void Main()&#xA;        {&#xA;            Application.EnableVisualStyles();&#xA;            Application.SetCompatibleTextRenderingDefault(false);&#xA;&#xA;            if (!IsRunAsAdmin())           &#xA;            {&#xA;                Elevate();&#xA;                Application.Exit();&#xA;            }&#xA;            else&#xA;            {&#xA;                try&#xA;                {&#xA;                    Installer InstallerForm = new Installer();&#xA;                    Application.Run(InstallerForm);&#xA;                }&#xA;                catch (Exception e)&#xA;                {&#xA;                    //Display Exception message!&#xA;&#xA;                    Logging.Log.Error(&quot;Unrecoverable exception:&quot;, e);&#xA;                    Application.Exit();&#xA;                }&#xA;            }&#xA;        }&#xA;&#xA;        internal static bool IsRunAsAdmin()&#xA;        {&#xA;            var Principle = new WindowsPrincipal(WindowsIdentity.GetCurrent());&#xA;            return Principle.IsInRole(WindowsBuiltInRole.Administrator);&#xA;        }&#xA;&#xA;        private static bool Elevate()&#xA;        {&#xA;            var SelfProc = new ProcessStartInfo&#xA;                {&#xA;                    UseShellExecute = true,&#xA;                    WorkingDirectory = Environment.CurrentDirectory,&#xA;                    FileName = Application.ExecutablePath,&#xA;                    Verb = &quot;runas&quot;&#xA;                };&#xA;            try&#xA;            {&#xA;                Process.Start(SelfProc);&#xA;                return true;&#xA;            }&#xA;            catch&#xA;            {&#xA;                Logging.Log.Error(&quot;Unable to elevate!&quot;);&#xA;                return false;&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="95" LastEditorUserId="9357" LastEditDate="2015-02-12T18:23:56.520" LastActivityDate="2015-02-12T18:23:56.520" Title="Administration Elevation" Tags="&lt;c#&gt;&lt;authorization&gt;" AnswerCount="3" CommentCount="0" FavoriteCount="4" />
  <row Id="198" PostTypeId="2" ParentId="182" CreationDate="2011-01-25T13:24:03.787" Score="0" Body="&lt;p&gt;I decided to work a bit on the second LINQ query and here is what I came up with:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;                //Select the current sub source files             &#xA;            sourceFiles = GetNextSourceFileLevel(sourceFiles);&#xA;        }&#xA;    }&#xA;&#xA;    private IEnumerable&amp;lt;IGrouping&amp;lt;SourceFile, SourceFile&amp;gt;&amp;gt; GetNextSourceFileLevel(IEnumerable&amp;lt;IGrouping&amp;lt;SourceFile, SourceFile&amp;gt;&amp;gt; sourceFiles)&#xA;    {&#xA;        var previousLevelOfSourceFiles = sourceFiles.SelectMany(current =&amp;gt; current.Select(invocation =&amp;gt; invocation));&#xA;&#xA;        var previousLevelOfSourceFilesWithInvocations = previousLevelOfSourceFiles&#xA;            .SelectMany(newCurrent =&amp;gt; newCurrent.getInvocations()&#xA;                                          .Select(invocation =&amp;gt;new {newCurrent, invocation}));&#xA;        var listOfSourceFiles = previousLevelOfSourceFilesWithInvocations.ToList();&#xA;&#xA;        return listOfSourceFiles.GroupBy(x =&amp;gt; x.newCurrent, x =&amp;gt; x.invocation);&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I thought about making each loop in the method into its own method, and broke it up into smaller steps, I could have gone farther but did not want to have to create the annonymous class I was using.&lt;/p&gt;&#xA;" OwnerUserId="33" LastActivityDate="2011-01-25T13:24:03.787" CommentCount="0" />
  <row Id="199" PostTypeId="2" ParentId="182" CreationDate="2011-01-25T13:37:23.807" Score="3" Body="&lt;p&gt;I also decided to try spliting breaking the triple loop as mko into smaller methods, each is needed since i want to go down the hierachy x number of times, loop through the parents and update the grid based on the children so here is what I came up with. I am not sure it made it better though.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    private void UpdateGridFromSourceHierarchy(int depth, IEnumerable&amp;lt;SourceFile&amp;gt; list)&#xA;    {&#xA;        //Get the initial set of sourcefiles         &#xA;        var sourceFiles = list.SelectMany(current =&amp;gt; current.getInvocations()                                 &#xA;                                       .Select(invocation =&amp;gt; new {current = (SourceFile) null, invocation}))             &#xA;                                       .ToList() //This ensures that getInvocations is only called once for each sourcefile             &#xA;            .GroupBy(x =&amp;gt; x.current, x =&amp;gt; x.invocation);          &#xA;        for (var currentDepth = 0; currentDepth &amp;lt;= depth; currentDepth++)&#xA;        {&#xA;            LookThroughParentSourceFilesToUpdateGrid(sourceFiles);&#xA;            //Select the current sub source files             &#xA;            sourceFiles = GetNextSourceFileLevel(sourceFiles);&#xA;        }&#xA;    }&#xA;&#xA;    private void LookThroughParentSourceFilesToUpdateGrid(IEnumerable&amp;lt;IGrouping&amp;lt;SourceFile, SourceFile&amp;gt;&amp;gt; sourceFiles)&#xA;    {&#xA;        foreach (var currentGroup in sourceFiles)&#xA;        {&#xA;            currentGroup.Count();                 &#xA;            LoopThroughSourceFilesToUpdateGrid(currentGroup);&#xA;        }&#xA;    }&#xA;&#xA;    private void LoopThroughSourceFilesToUpdateGrid(IGrouping&amp;lt;SourceFile, SourceFile&amp;gt; currentGroup)&#xA;    {&#xA;        int counter = 0;&#xA;        foreach (var invocation in currentGroup)&#xA;        {&#xA;            /*                      &#xA;             * * Generalized grid code goes here&#xA;             * */                     &#xA;            counter++;&#xA;            UpdateGridPosition(currentGroup,invocation,counter);&#xA;        }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="33" LastActivityDate="2011-01-25T13:37:23.807" CommentCount="0" />
  <row Id="200" PostTypeId="1" AcceptedAnswerId="207" CreationDate="2011-01-25T14:57:14.420" Score="5" ViewCount="391" Body="&lt;p&gt;I have a database class that in &lt;code&gt;__construct()&lt;/code&gt; initialize a PDO connection and insert the instance into a $db private var.&#xA;Now i'm working on a method that can be used to query in this way:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$db = new db;&#xA;$db-&amp;gt;query(array(&#xA; 'select' =&amp;gt; 1,&#xA; 'from' =&amp;gt; 'table',&#xA; 'where' =&amp;gt; array('id' =&amp;gt; 1, 'name' =&amp;gt; 'charlie'),&#xA; 'limit' =&amp;gt; array(1, 5)&#xA;));&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I did something that works pretty nicely long time ago while PDO was something unknown, but i was wondering:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;How could i improve this code a bit&lt;/li&gt;&#xA;&lt;li&gt;How can i end it? I mean how to use the PDO then to submit the query?&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;Here's the method &lt;code&gt;query()&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;# Defining the type&#xA;     if (isset($array['select'])) { $type = 'SELECT'; $type_value = (is_int($array['select'])) ? '*' : $array['select']; }&#xA;     if (isset($array['update'])) { $type = 'UPDATE'; $type_value = $array['update']; }&#xA;     if (isset($array['delete'])) { $type = 'DELETE FROM'; $type_value = $array['delete']; }&#xA;     if (isset($array['insert'])) { $type = 'INSERT INTO'; $type_value = $array['insert']; }&#xA;     if (!isset($type)) { trigger_error(&quot;Database, 'type' not selected.&quot;); } // Error&#xA;&#xA;     # From&#xA;     if (isset($array['from'])) &#xA;     {&#xA;      $from = 'FROM'; &#xA;      $from_value = mysql_real_escape_string($array['from']); // table cannot be pdoed&#xA;     }&#xA;     # Where&#xA;     if (isset($array['where'])) &#xA;     { &#xA;      if (!is_array($array['where'])) { trigger_error(&quot;Database, 'where' key must be array.&quot;); }&#xA;      $where = 'WHERE'; $where_value = $array['where']; &#xA;      # Fixing the AND problem&#xA;      if (count($array['where']) &amp;gt; 1)&#xA;      {&#xA;       $list = $where_value;&#xA;       foreach ($list as $a =&amp;gt; $b) { $w[] = &quot;{$a} = {$b}&quot;; }&#xA;       $and = implode(' AND ', $w);&#xA;       $where_value = $and;&#xA;      }&#xA;     }&#xA;     # Limit&#xA;     if (isset($array['limit'])) &#xA;     {&#xA;      if (!is_array($array['limit'])) { trigger_error(&quot;Database, 'limit' key must be array.&quot;); }&#xA;      if (count($array['limit']) != 2) { trigger_error(&quot;Database, 'limit' array must be two-keys-long&quot;); }&#xA;      $limit_first = $array['limit'][0];&#xA;      $limit_second = $array['limit'][1];&#xA;      $limit = 'LIMIT';&#xA;      $limit_value = &quot;{$limit_first}, {$limit_second}&quot;;&#xA;     }&#xA;&#xA;     # Set&#xA;     if (isset($array['set']))&#xA;     {&#xA;      if (!is_array($array['set'])) { trigger_error(&quot;Database, 'set' key must be array.&quot;); }&#xA;      $edits = $array['set'];&#xA;      foreach ($edits as $a =&amp;gt; $b) { $e[] = &quot;{$a} = {$b}&quot;; }&#xA;      $set = 'SET';&#xA;      $set_value = implode(',', $e);&#xA;     }&#xA;&#xA;     $vals = array('from', 'from_value', 'set', 'set_value', 'where', 'where_value');&#xA;     foreach ($vals as $v) { if (empty($$v)) { $$v = ''; } }&#xA;&#xA;     $sql = &quot;&#xA;      {$type} {$type_value}&#xA;      {$from} {$from_value}&#xA;      {$set} {$set_value}&#xA;      {$where} {$where_value}&#xA;     &quot;;&#xA;&#xA;# Here there would be something like mysql_query($sql), but i'd like PDO! PDO get me hornier.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And now? How to bind parameters? Is that possible to work it out?&lt;/p&gt;&#xA;" OwnerUserId="186" LastActivityDate="2011-01-25T20:35:29.147" Title="Database method to query" Tags="&lt;php&gt;&lt;mysql&gt;&lt;pdo&gt;&lt;oop&gt;&lt;php5&gt;" AnswerCount="2" CommentCount="3" />
  <row Id="201" PostTypeId="1" AcceptedAnswerId="204" CreationDate="2011-01-25T16:13:34.917" Score="33" ViewCount="8337" Body="&lt;p&gt;I found that in PHP (or I probably can't find it) a proper &lt;code&gt;is_numeric_array($array)&lt;/code&gt; function is missing. So I created one. The problem is that I don't think it's great and I don't know how to improve it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Any suggestion?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;My first function&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function is_numeric_array($array)&#xA;{&#xA;    $i = 0;&#xA;    foreach ($array as $a =&amp;gt; $b) { if (is_int($a)) { ++$i; } }&#xA;    if (count($array) === $i) { return true; }&#xA;    else { return false; }&#xA;}&#xA;&#xA;is_numeric_array(array(0,0,0,0,0)); // true&#xA;is_numeric_array(array('str' =&amp;gt; 1, 'str2' =&amp;gt; 2, 'str3' =&amp;gt; 3)); // false&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As asked, I provide an example on how this could be any useful.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function is_numeric_array($array)&#xA;{&#xA;    # Code below&#xA;}&#xA;&#xA;function someFunction($array)&#xA;{&#xA;    if (is_numeric_array($array))&#xA;    {&#xA;        $query = $array[0];&#xA;        $param = $array[1];&#xA;        $fetch = $array[2];&#xA;    }&#xA;    else&#xA;    {&#xA;        $query = $array['query'];&#xA;        $param = $array['param'];&#xA;        $fetch = $array['fetch'];&#xA;    }&#xA;&#xA;    # Do your sql/pdo stuff here&#xA;}&#xA;&#xA;# This use is the same of ...&#xA;someFunction(array(&#xA;    'PDO SQL STATEMENT', &#xA;    array('param1' =&amp;gt; 1, 'param2' =&amp;gt; 2, 'param3' =&amp;gt; 3),&#xA;    true&#xA;));&#xA;&#xA;# ... this one.&#xA;someFunction(array(&#xA;    'query' =&amp;gt; 'PDO SQL STATEMENT',&#xA;    'param' =&amp;gt; array('param1' =&amp;gt; 1, 'param2' =&amp;gt; 2, 'param3' =&amp;gt; 3),&#xA;    'fetch' =&amp;gt; true&#xA;));&#xA;&#xA;# To choose one form instead of the other is coder's decision&#xA;# Also I know it is useless but I was just wondering why anybody actually looked forward this function&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="186" LastEditorUserId="186" LastEditDate="2014-12-05T02:13:46.193" LastActivityDate="2014-12-05T02:13:46.193" Title="is_numeric_array() is missing" Tags="&lt;php&gt;&lt;php5&gt;&lt;array&gt;" AnswerCount="7" CommentCount="5" FavoriteCount="5" />
  <row Id="202" PostTypeId="2" ParentId="201" CreationDate="2011-01-25T16:28:16.500" Score="5" Body="&lt;p&gt;This will drop out as soon as an element is found that is not an int, making the function more efficient for large arrays.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function is_numeric_array($array) {&#xA;   foreach ($array as $a=&amp;gt;$b) {&#xA;      if (!is_int($a)) {&#xA;         return false;&#xA;      }&#xA;   }&#xA;   return true;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="110" LastEditorUserId="110" LastEditDate="2011-01-25T20:45:46.807" LastActivityDate="2011-01-25T20:45:46.807" CommentCount="6" />
  <row Id="204" PostTypeId="2" ParentId="201" CreationDate="2011-01-25T16:58:01.383" Score="44" Body="&lt;p&gt;Instead of using a counter to count the keys for which the condition is true, you could just return false as soon as you find a key which is not an int and return true if the loop reaches its end without finding such a key:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;foreach ($array as $a =&amp;gt; $b) {&#xA;    if (!is_int($a)) {&#xA;        return false;&#xA;    }&#xA;}&#xA;return true;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This has the benefit that it short-circuits (i.e. it stops iterating once it finds a key that is not an int) and gets rid of the counter.&lt;/p&gt;&#xA;" OwnerUserId="128" LastEditorUserId="128" LastEditDate="2011-01-25T17:03:38.177" LastActivityDate="2011-01-25T17:03:38.177" CommentCount="2" />
  <row Id="205" PostTypeId="2" ParentId="201" CreationDate="2011-01-25T18:07:26.177" Score="6" Body="&lt;p&gt;At first I didn't realise you wanted to check see if the keys are integers. If the reason you're doing this is to make sure the keys are 0,1,2,3,4.. etc as an indexed array and not an associative array, then you could use this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function is_numeric_array($arr)&#xA;{&#xA;    return array_keys($arr) === range(0,(count($arr)-1));&#xA;}&#xA;&#xA;/*&#xA;    * Tests&#xA;*/&#xA;var_dump(is_numeric_array(array('a', 'b', 'c'))); // true&#xA;var_dump(is_numeric_array(array(&quot;0&quot; =&amp;gt; 'a', &quot;1&quot; =&amp;gt; 'b', &quot;2&quot; =&amp;gt; 'c'))); // true&#xA;var_dump(is_numeric_array(array(&quot;1&quot; =&amp;gt; 'a', &quot;0&quot; =&amp;gt; 'b', &quot;2&quot; =&amp;gt; 'c'))); // false&#xA;var_dump(is_numeric_array(array(&quot;a&quot; =&amp;gt; 'a', &quot;b&quot; =&amp;gt; 'b', &quot;c&quot; =&amp;gt; 'c'))); // false&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Benchmark results as requested:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here's the code used to test the execution:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$array = array();&#xA;for($i=0;$i&amp;lt;=500000;$i++)&#xA;{&#xA;    $array[] = &quot;some_string&quot;;&#xA;}&#xA;&#xA;$m_initial = memory_get_usage();&#xA;is_numeric_array($array);&#xA;$increase = memory_get_usage() - $m_initial;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;As you can see from the above, I tested with a linear array that had 500K strings:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The value of &lt;code&gt;$increase&lt;/code&gt; showed &lt;strong&gt;65032&lt;/strong&gt; (which is in bytes). If we converted to K&lt;b&gt;B&lt;/b&gt; this is around 64 rounded up. The result in KB shows &lt;strong&gt;63.507&lt;/strong&gt;, which in my opinion is ok.&lt;/p&gt;&#xA;" OwnerUserId="95" LastEditorUserId="22222" LastEditDate="2014-12-05T02:12:53.663" LastActivityDate="2014-12-05T02:12:53.663" CommentCount="11" />
  <row Id="206" PostTypeId="2" ParentId="201" CreationDate="2011-01-25T18:24:34.573" Score="13" Body="&lt;p&gt;Improving a little on @sepp2k answer(+1) (removing the &quot;unused variable warning&quot; some tools will spit out):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;foreach (array_keys($array) as $a)) {&#xA;    if (!is_int($a)) {&#xA;        return false;&#xA;    }&#xA;}&#xA;return true;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you want to check if it's an linear array:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;return array_merge($array) === $array;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;or @RobertPitt's solution :) (Also +1 there) &lt;/p&gt;&#xA;&#xA;&lt;h2&gt;But my main point:&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Why do you need this, i've never had use for something like this and it &lt;strong&gt;might&lt;/strong&gt; be that the solution is change and API design flaw or data structure flaw somewhere ? Doesn't have too, but might.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Response to OPs comment:&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;I'm building a db method for queries that needs of a 3 keys array. In case the array is Numeric the order must be: statement, parameters, fetch. In case it's not, so the coder is specifying the key string, the order can be different and two out of three required parameters could be empty.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Ok then let my try to do that specif to your requirements :)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;my_db_function(&#xA;    array(&quot;myquery&quot;, array(&quot;params&quot;, &quot;...&quot;), &quot;myfetchmode&quot;)&#xA;);&#xA;// or &#xA;my_db_function(&#xA;    array(&quot;params&quot; =&amp;gt; &quot;myquery&quot;, &quot;fetchmode&quot; =&amp;gt; &quot;myfetchmode, &quot;params&quot; =&amp;gt; array(&quot;myparams&quot;, &quot;...) )&#xA;); &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Maybe i misunderstood a little but it should get the point across how one could build that with a different check :)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function my_db_fuction($statement) {&#xA;&#xA;    if(isset($statement[&quot;query&quot;])) { // Assoc 'Mode'&#xA;        $query = $statement[&quot;query&quot;];&#xA;        if(isset($statement[&quot;params&quot;])) { $params = $statement[&quot;params&quot;]; } &#xA;        else { $params = array(); }&#xA;        if(isset($statement[&quot;fetchmode&quot;])) { $fetchmode = $statement[&quot;fetchmode&quot;]; }&#xA;        else { $fetchmode = &quot;select&quot;; // optional param, default value here&#xA;&#xA;    } else if(isset($statement[0]) { // Linear Array Mode&#xA;&#xA;        $query = $statement[0];&#xA;        if(isset($statement[1])) { $params = $statement[1]; } &#xA;        else { $params = array(); }&#xA;        if(isset($statement[2])) { $fetchmode = $statement[2]; }&#xA;        else { $fetchmode = &quot;select&quot;; // optional param, default value here&#xA;&#xA;    } else {&#xA;         // Error, misformed format&#xA;    }&#xA;    // Now we got our 3 variables :)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;That is still a pretty big code block but i didn't want to shorten it and risk worse readabilty. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;What i would do with that is create a my_db_stuff_param_helper($aParams) that will always return an array containing the 3 keys filled with the real values (or defaults if nothing was passed)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;  function my_db_fuction($statement) {&#xA;      $statement = my_db_parse_params($statement);&#xA;      // now e.g. $statement[&quot;query&quot;] will always be there&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;something along those lines &quot;feels&quot; (subjective, i know) better than building a generic function to do the key checking. (I guess it's  &lt;strong&gt;isset($statement[&quot;query&quot;])&lt;/strong&gt; instead of &lt;strong&gt;is_numeric_array&lt;/strong&gt; what i boilds down to :) &lt;/p&gt;&#xA;" OwnerUserId="113" LastEditorUserId="113" LastEditDate="2011-01-26T08:28:37.317" LastActivityDate="2011-01-26T08:28:37.317" CommentCount="5" />
  <row Id="207" PostTypeId="2" ParentId="200" CreationDate="2011-01-25T18:34:21.303" Score="4" Body="&lt;p&gt;That query method (and the db class) has a lot of responsibilities:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Do the PDO stuff, connection handling&lt;/li&gt;&#xA;&lt;li&gt;Be a query builder&lt;/li&gt;&#xA;&lt;li&gt;be a query executor&lt;/li&gt;&#xA;&lt;li&gt;Handle the params and possibly execute the same statement with different params (it would to that too)&lt;/li&gt;&#xA;&lt;li&gt;Do all the error checking&lt;/li&gt;&#xA;&lt;li&gt;maybe more i don't see&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Usually that functionality is handled in 2 to 3 classes, sometimes even more and not in one single function.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And you are doing some very creepy magic to achieve all the work&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;foreach ($vals as $v) { if (empty($$v)) { $$v = ''; } }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;and all that so you can write &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;array(&quot;select &quot; =&amp;gt; &quot;something&quot; , ...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;instead of &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&quot;select something&quot; ...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Also you are using &lt;code&gt;mysql_real_escape_string&lt;/code&gt; so it seems you don't want to use the pdo escaping (not binding parameters) so why try to use PDO if you limit yourself to mysql anyways ? &lt;/p&gt;&#xA;&#xA;&lt;p&gt;So far everything i spotted thinking about it for 5 minutes. Will improve upon feedback / direction from you if it helped at all :)&lt;/p&gt;&#xA;" OwnerUserId="113" LastActivityDate="2011-01-25T18:34:21.303" CommentCount="6" />
  <row Id="208" PostTypeId="2" ParentId="197" CreationDate="2011-01-25T19:03:30.140" Score="16" Body="&lt;p&gt;You can create a manifest file and set the app to require administrative privileges. This will trigger the UAC user prompt with the dimmed screen when your application is run without requiring any code on your part.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;See &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/bb756929.aspx&quot;&gt;MSDN&lt;/a&gt; for the gory details:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;This file can be created by using any text editor. The application manifest file should have the same name as the target executable file with a .manifest extension.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;pre class=&quot;lang-xml prettyprint-override&quot;&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&amp;gt;&#xA;&amp;lt;assembly xmlns=&quot;urn:schemas-microsoft-com:asm.v1&quot; manifestVersion=&quot;1.0&quot;&amp;gt; &#xA;  &amp;lt;assemblyIdentity version=&quot;1.0.0.0&quot;&#xA;     processorArchitecture=&quot;X86&quot;&#xA;     name=&quot;&amp;lt;your exec name minus extension&amp;gt;&quot;&#xA;     type=&quot;win32&quot;/&amp;gt; &#xA;  &amp;lt;description&amp;gt;Description of your application&amp;lt;/description&amp;gt; &#xA;  &amp;lt;!-- Identify the application security requirements. --&amp;gt;&#xA;  &amp;lt;trustInfo xmlns=&quot;urn:schemas-microsoft-com:asm.v2&quot;&amp;gt;&#xA;    &amp;lt;security&amp;gt;&#xA;      &amp;lt;requestedPrivileges&amp;gt;&#xA;        &amp;lt;requestedExecutionLevel&#xA;          level=&quot;requireAdministrator&quot;&#xA;          uiAccess=&quot;false&quot;/&amp;gt;&#xA;        &amp;lt;/requestedPrivileges&amp;gt;&#xA;       &amp;lt;/security&amp;gt;&#xA;  &amp;lt;/trustInfo&amp;gt;&#xA;&amp;lt;/assembly&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/blockquote&gt;&#xA;" OwnerUserId="61" LastEditorUserId="22222" LastEditDate="2014-09-25T00:24:25.867" LastActivityDate="2014-09-25T00:24:25.867" CommentCount="2" />
  <row Id="209" PostTypeId="2" ParentId="201" CreationDate="2011-01-25T20:31:58.340" Score="5" Body="&lt;p&gt;Ok, here's a shot for consistency and proper naming conventions (Since &lt;code&gt;numeric&lt;/code&gt; and &lt;code&gt;int&lt;/code&gt; mean different things all together, there's little point calling one the other...):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function isNumericArray(array $array) {&#xA;    foreach ($array as $a =&amp;gt; $b) {&#xA;        if (!is_numeric($a)) {&#xA;            return false;&#xA;        }&#xA;    }&#xA;    return true;&#xA;}&#xA;&#xA;function isIntArray(array $array) {&#xA;    foreach ($array as $a =&amp;gt; $b) {&#xA;        if (!is_int($a)) {&#xA;            return false;&#xA;        }&#xA;    }&#xA;    return true;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now, for a more OO approach, I'd build a filteriterator:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class NumericFilterIterator extends FilterIterator {&#xA;    public function accept() {&#xA;        return is_numeric(parent::current());&#xA;    }&#xA;}&#xA;&#xA;class IntFilterIterator extends FilterIterator {&#xA;    public function accept() {&#xA;        return is_int(parent::current());&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then, if you just want to iterate over the integer, just do &lt;code&gt;$it = new IntFilterIterator(new ArrayIterator($array));&lt;/code&gt;.  If you want to verify, you can do:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$it = new IntFilterIterator(new ArrayIterator($array));&#xA;if ($array != iterator_to_array($it)) {&#xA;    //Has a non-int element&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="14" LastEditorUserId="14" LastEditDate="2011-01-25T20:38:49.813" LastActivityDate="2011-01-25T20:38:49.813" CommentCount="1" />
  <row Id="210" PostTypeId="2" ParentId="200" CreationDate="2011-01-25T20:35:29.147" Score="1" Body="&lt;p&gt;You definitely want to clean the input a bit more before submitting to the database. This is particularly true for your &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, and &lt;code&gt;delete&lt;/code&gt; clauses. At the very least, run &lt;code&gt;htmlspecialchars&lt;/code&gt; and &lt;code&gt;strip_tags&lt;/code&gt;, but you should probably check for more specific requirements as well.&lt;/p&gt;&#xA;" OwnerUserId="192" LastActivityDate="2011-01-25T20:35:29.147" CommentCount="3" />
  <row Id="211" PostTypeId="2" ParentId="146" CreationDate="2011-01-25T21:11:12.583" Score="12" Body="&lt;p&gt;Maybe you could extract the common massaging before call_user_func_array in &lt;code&gt;_execute&lt;/code&gt; and &lt;code&gt;_prepareFetch&lt;/code&gt; into a helper?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private function _execute($aArgs) {&#xA;/// [...]&#xA;        $aRefArgs = array();&#xA;        foreach(array_keys($aArgs) as $mIndex) {&#xA;            $aRefArgs[$mIndex] = &amp;amp;$aArgs[$mIndex];&#xA;        }&#xA;        array_unshift($aRefArgs, str_repeat(&quot;s&quot;, $iArgs));&#xA;        // Needs References&#xA;        call_user_func_array(array($this-&amp;gt;oStatement, &quot;bind_param&quot;), $aRefArgs);&#xA;///-^ This part...&#xA;/// [...]&#xA;&#xA;private function _prepareFetch() {&#xA;/// [...]&#xA;            $this-&amp;gt;aResultRow = array_fill(0, count($this-&amp;gt;aFieldnames), null);&#xA;            // Ugly but 'bind_result' forces you to pass references&#xA;            $aRefs = array();&#xA;            foreach ($this-&amp;gt;aResultRow as $iIndex =&amp;gt; &amp;amp;$rmValue) {&#xA;                $aRefs[$iIndex] = &amp;amp;$rmValue;&#xA;            }&#xA;&#xA;            call_user_func_array(array($this-&amp;gt;oStatement, &quot;bind_result&quot;), $this-&amp;gt;aResultRow);&#xA;///-^ ... matches this one loosely. &#xA;/// [...]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Probably not worth it, good enough as-is.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is one of the most readable bits of PHP I've ever seen, should be even better with the original comments.&lt;/p&gt;&#xA;" OwnerUserId="90" LastActivityDate="2011-01-25T21:11:12.583" CommentCount="0" />
  <row Id="212" PostTypeId="2" ParentId="174" CreationDate="2011-01-25T21:56:15.180" Score="3" Body="&lt;p&gt;I don't see how to improve the duplication much: you're extending code that unfortunately wasn't meant to be extended. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;What you could do to help anyone finding your code in the wild is to highlight changes and maybe explain why you're doing the calculations you're doing. How would you generalize your code to alternate between three or more row styles?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    //set up row striping and row dirtiness CSS classes&#xA;    var alt = [];&#xA;&#xA;/// -&amp;gt; Comment about how you're making the stripe interval magic happen here&#xA;            if (stripe &amp;amp;&amp;amp; (rowIndex % (this.grid.stripeInterval * 2)) &amp;gt; (this.grid.stripeInterval - 1)) {&#xA;/// -^ Consider breaking this up into assignment into a var and subsequent if, or &#xA;///    even nesting ifs: it might be more readable by separating logical steps.&#xA;///    A helper to be used below would be an option, and if you're going to generalize&#xA;///    it could make extending easier.&#xA;&#xA;      alt[0] = 'x-grid3-row-alt';&#xA;    }&#xA;&#xA;/// [...]&#xA;&#xA;     if (!skipStripe) {&#xA;                    r.className = r.className.replace(this.rowClsRe, ' ');&#xA;        if ((i % (stripeInterval * 2)) &amp;gt; (stripeInterval - 1)){&#xA;                        r.className += ' x-grid3-row-alt';&#xA;/// -^ Same comments apply here, specially about highlighting your changes.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You could improve modularity in your version then propose a patch to make upstream easier to work with, so we don't have to suffer the same fate you did ;)&lt;/p&gt;&#xA;" OwnerUserId="90" LastActivityDate="2011-01-25T21:56:15.180" CommentCount="1" />
  <row Id="213" PostTypeId="2" ParentId="190" CreationDate="2011-01-25T22:37:59.573" Score="4" Body="&lt;p&gt;Looks fine (maybe some stricter formatting could help readibility, but not an issue), so I'll suggest completely optional improvements that might help spotting important improvements.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As a general principle, try to &lt;a href=&quot;http://en.wikipedia.org/wiki/Robustness_principle&quot; rel=&quot;nofollow&quot;&gt;be ready for bogus values in your input so you can avoid generating nonsense&lt;/a&gt;. Being more robust will also make reusing your code for somewhat different tasks easier.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$.ajax({&#xA;/// [...]&#xA;    success:function(results){&#xA;/// [...]&#xA;        $(results).find(&quot;[nodeName=w:p]&quot;).each(function(){&#xA;            if($(this).find(&quot;[nodeName=w:pStyle]&quot;).attr('w:val') == 'ListParagraph'){&#xA;                var liValue = $(this).find(&quot;[nodeName=w:t]&quot;).text();&#xA;/// -^ What if the input has an empty value here? Skip? &#xA;&#xA;                var hyper = $(this).find(&quot;[nodeName=w:hyperlink]&quot;).attr('r:id');&#xA;                var placeAtDepth = parseInt($(this).find(&quot;[nodeName=w:ilvl]&quot;).attr('w:val'), 10);&#xA;/// -^ parseInt can return a NaN, maybe you want to bail out in that case?&#xA;///    Should also handle some bogus results for .find.&#xA;&#xA;                if(placeAtDepth &amp;gt; currentDepth){&#xA;                    $(&quot;.menuLvl&quot;+ currentDepth).append('&amp;lt;ul class=&quot;menuLvl'+ placeAtDepth +'&quot;&amp;gt;');&#xA;                }&#xA;&#xA;                currentDepth = placeAtDepth;&#xA;&#xA;                //Determine if we have an hyperlink&#xA;                if(hyper != null){&#xA;                    var link = $(results).find('Relationship[Id='+hyper+']').attr('Target');&#xA;/// -^ This can result in an invalid link for broken input. But what if&#xA;       the input is malicious (JS hrefs)? &#xA;&#xA;                    liValue = '&amp;lt;a href=&quot;'+ link +'&quot;&amp;gt;'+ liValue +'&amp;lt;/a&amp;gt;';&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="90" LastActivityDate="2011-01-25T22:37:59.573" CommentCount="0" />
  <row Id="214" PostTypeId="1" AcceptedAnswerId="218" CreationDate="2011-01-25T22:41:18.287" Score="3" ViewCount="6376" Body="&lt;p&gt;I want to get empty string or the string value of the object&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Which code you will use and why?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;value = object.to_s&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;or this&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;value = object.nil? ? &quot;&quot; : object&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="164" LastEditorUserId="9390" LastEditDate="2013-08-31T01:54:31.327" LastActivityDate="2013-08-31T01:54:31.327" Title="Avoiding null in variable assignment" Tags="&lt;ruby&gt;" AnswerCount="5" CommentCount="3" />
  <row Id="216" PostTypeId="2" ParentId="214" CreationDate="2011-01-25T23:25:28.187" Score="5" Body="&lt;p&gt;I've read in &lt;a href=&quot;http://rubyglasses.blogspot.com/2007/08/actsasgoodstyle.html&quot; rel=&quot;nofollow&quot;&gt;here(act_as_good_style)&lt;/a&gt; (search for &lt;code&gt;.nil?&lt;/code&gt; first occurrence) that you should not check for &lt;code&gt;.nil?&lt;/code&gt; unless you really want to check that, while if you want to know if the object is valued you should go for something like that&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;value = object ? object.to_s : ''&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;That by the way fits very well with my policy standard behavior first(exception for very short code first when else statement too long).&lt;/p&gt;&#xA;" OwnerUserId="96" LastEditorUserId="96" LastEditDate="2011-01-26T09:52:27.470" LastActivityDate="2011-01-26T09:52:27.470" CommentCount="3" />
  <row Id="217" PostTypeId="1" AcceptedAnswerId="485" CreationDate="2011-01-25T23:27:25.303" Score="5" ViewCount="1762" Body="&lt;p&gt;This is part from an &lt;a href=&quot;http://stackoverflow.com/questions/4706151/python-3-1-memory-error-during-sampling-of-a-large-list/4706317#4706317&quot;&gt;answer to a Stack Overflow question&lt;/a&gt;. The OP needed a way to perform calculations on samples from a population, but was hitting memory errors due to keeping samples in memory. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;The function is based on part of &lt;a href=&quot;http://svn.python.org/view/python/trunk/Lib/random.py?view=markup#sample&quot;&gt;random.sample&lt;/a&gt;, but only the code branch using a set is present.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If we can tidy and comment this well enough, it might be worth publishing as a recipe at the &lt;a href=&quot;http://code.activestate.com/recipes/&quot;&gt;Python Cookbook&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import random&#xA;&#xA;def sampling_mean(population, k, times):&#xA;    # Part of this is lifted straight from random.py&#xA;    _int = int&#xA;    _random = random.random&#xA;&#xA;    n = len(population)&#xA;    kf = float(k)&#xA;    result = []&#xA;&#xA;    if not 0 &amp;lt;= k &amp;lt;= n:&#xA;        raise ValueError, &quot;sample larger than population&quot;&#xA;&#xA;    for t in xrange(times):&#xA;        selected = set()&#xA;        sum_ = 0&#xA;        selected_add = selected.add&#xA;&#xA;        for i in xrange(k):&#xA;            j = _int(_random() * n)&#xA;            while j in selected:&#xA;                j = _int(_random() * n)&#xA;            selected_add(j)&#xA;            sum_ += population[j]&#xA;&#xA;        # Partial result we're interested in&#xA;        mean = sum_/kf&#xA;        result.append(mean)&#xA;    return result&#xA;&#xA;sampling_mean(x, 1000000, 100)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Maybe it'd be interesting to generalize it so you can pass a function that calculates the value you're interested in from the sample?&lt;/p&gt;&#xA;" OwnerUserId="90" LastActivityDate="2011-01-31T16:58:31.450" Title="Randomly sampling a population and keeping means: tidy up, generalize, document?" Tags="&lt;python&gt;&lt;random&gt;" AnswerCount="1" CommentCount="1" FavoriteCount="1" />
  <row Id="218" PostTypeId="2" ParentId="214" CreationDate="2011-01-25T23:31:21.560" Score="12" Body="&lt;p&gt;If &lt;code&gt;object&lt;/code&gt; is either &lt;code&gt;nil&lt;/code&gt; or a string, you can just do &lt;code&gt;value = object || &quot;&quot;&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If it can be anything and you want to get a string, your second solution doesn't actually do what you want, since it won't turn the object into a string if it's not nil. To fix that your second solution would become &lt;code&gt;value = object.nil? ? object.to_s : &quot;&quot;&lt;/code&gt;. Of course since now you're calling &lt;code&gt;to_s&lt;/code&gt; in both solutions there is no reason to prefer the second over the first, so I'd go with the first.&lt;/p&gt;&#xA;" OwnerUserId="128" LastEditorUserId="128" LastEditDate="2011-01-26T22:43:34.617" LastActivityDate="2011-01-26T22:43:34.617" CommentCount="3" />
  <row Id="219" PostTypeId="1" AcceptedAnswerId="243" CreationDate="2011-01-25T23:41:23.607" Score="10" ViewCount="629" Body="&lt;p&gt;The requirements for this one were (&lt;a href=&quot;http://stackoverflow.com/q/4630723/555569&quot;&gt;original SO question&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Generate a random-ish sequence of items.&lt;/li&gt;&#xA;&lt;li&gt;Sequence should have each item N times.&lt;/li&gt;&#xA;&lt;li&gt;Sequence shouldn't have serial runs longer than a given number (longest below).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;The solution was actually drafted by another user, this is &lt;a href=&quot;http://stackoverflow.com/questions/4630723/using-python-for-quasi-randomization/4630784#4630784&quot;&gt;my implementation&lt;/a&gt; (influenced by &lt;a href=&quot;http://svn.python.org/view/python/trunk/Lib/random.py?view=markup#shuffle&quot;&gt;random.shuffle&lt;/a&gt;).&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;from random import random&#xA;from itertools import groupby # For testing the result&#xA;try: xrange&#xA;except: xrange = range&#xA;&#xA;def generate_quasirandom(values, n, longest=3, debug=False):&#xA;  # Sanity check&#xA;  if len(values) &amp;lt; 2 or longest &amp;lt; 1:&#xA;    raise ValueError&#xA;&#xA;  # Create a list with n * [val]&#xA;  source = []&#xA;  sourcelen = len(values) * n&#xA;  for val in values:&#xA;    source += [val] * n&#xA;&#xA;  # For breaking runs&#xA;  serial = 0&#xA;  latest = None&#xA;&#xA;  for i in xrange(sourcelen):&#xA;    # Pick something from source[:i]&#xA;    j = int(random() * (sourcelen - i)) + i&#xA;    if source[j] == latest:&#xA;      serial += 1&#xA;      if serial &amp;gt;= longest:&#xA;        serial = 0&#xA;        guard = 0&#xA;        # We got a serial run, break it&#xA;        while source[j] == latest:&#xA;          j = int(random() * (sourcelen - i)) + i&#xA;          guard += 1&#xA;          # We just hit an infinit loop: there is no way to avoid a serial run&#xA;          if guard &amp;gt; 10:&#xA;            print(&quot;Unable to avoid serial run, disabling asserts.&quot;)&#xA;            debug = False&#xA;            break&#xA;    else:&#xA;      serial = 0&#xA;    latest = source[j]&#xA;    # Move the picked value to source[i:]&#xA;    source[i], source[j] = source[j], source[i]&#xA;&#xA;  # More sanity checks&#xA;  check_quasirandom(source, values, n, longest, debug)&#xA;&#xA;  return source&#xA;&#xA;&#xA;def check_quasirandom(shuffled, values, n, longest, debug):&#xA;  counts = []&#xA;  # We skip the last entries because breaking runs in them get too hairy&#xA;  for val, count in groupby(shuffled):&#xA;    counts.append(len(list(count)))&#xA;  highest = max(counts)&#xA;  print('Longest run: %d\nMax run lenght:%d' % (highest, longest))&#xA;&#xA;  # Invariants&#xA;  assert len(shuffled) == len(values) * n&#xA;  for val in values:&#xA;    assert shuffled.count(val) == n&#xA;&#xA;  if debug:&#xA;    # Only checked if we were able to avoid a sequential run &amp;gt;= longest&#xA;    assert highest &amp;lt;= longest&#xA;&#xA;for x in xrange(10, 1000):&#xA;  generate_quasirandom((0, 1, 2, 3), 1000, x//10, debug=True)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I'd like to receive any input you have on improving this code, from style to comments to tests and anything else you can think of. &lt;/p&gt;&#xA;" OwnerUserId="90" LastEditorUserId="90" LastEditDate="2011-01-26T00:22:17.300" LastActivityDate="2011-01-27T09:29:07.290" Title="Quasi-random sequences: how to improve style and tests?" Tags="&lt;python&gt;&lt;random&gt;" AnswerCount="1" CommentCount="0" />
  <row Id="220" PostTypeId="1" AcceptedAnswerId="223" CreationDate="2011-01-26T00:28:19.200" Score="18" ViewCount="11670" Body="&lt;p&gt;I got this as an implementation of &quot;get me the median of those values&quot;. But it sort of doesn't feel right (too long, too many branch points) so I thought I'll post it here to see what you think.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?php&#xA;private function calculateMedian($aValues) {&#xA;    $aToCareAbout = array();&#xA;    foreach ($aValues as $mValue) {&#xA;        if ($mValue &amp;gt;= 0) {&#xA;            $aToCareAbout[] = $mValue;&#xA;        }&#xA;    }&#xA;    $iCount = count($aToCareAbout);&#xA;    sort($aToCareAbout, SORT_NUMERIC);&#xA;    if ($iCount &amp;gt; 2) {&#xA;        if ($iCount % 2 == 0) {&#xA;            return ($aToCareAbout[floor($iCount / 2) - 1] + $aToCareAbout[floor($iCount / 2)]) / 2;&#xA;        } else {&#xA;            return $aToCareAbout[$iCount / 2];&#xA;        }&#xA;    } elseif (isset($aToCareAbout[0])) {&#xA;        return $aToCareAbout[0];&#xA;    } else {&#xA;        return 0;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="113" LastEditorUserId="9357" LastEditDate="2016-11-08T00:09:54.707" LastActivityDate="2016-11-08T00:09:54.707" Title="Calculate a median" Tags="&lt;php&gt;&lt;statistics&gt;" AnswerCount="3" CommentCount="1" FavoriteCount="5" />
  <row Id="221" PostTypeId="2" ParentId="220" CreationDate="2011-01-26T03:37:38.067" Score="4" Body="&lt;p&gt;I'm wondering if you can just compact the above to this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private function calculateMedian($aValues) {&#xA;    $aToCareAbout = array();&#xA;    foreach ($aValues as $mValue) {&#xA;        if ($mValue &amp;gt;= 0) {&#xA;            $aToCareAbout[] = $mValue;&#xA;        }&#xA;    }&#xA;    $iCount = count($aToCareAbout);&#xA;    if ($iCount == 0) return 0;&#xA;&#xA;    // if we're down here it must mean $aToCareAbout&#xA;    // has at least 1 item in the array.&#xA;    $middle_index = floor($iCount / 2);&#xA;    sort($aToCareAbout, SORT_NUMERIC);&#xA;    $median = $aToCareAbout[$middle_index]; // assume an odd # of items&#xA;&#xA;    // Handle the even case by averaging the middle 2 items&#xA;    if ($iCount % 2 == 0)&#xA;        $median = ($median + $aToCareAbout[$middle_index - 1]) / 2;&#xA;&#xA;    return $median;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I don't write PHP but from looking at the online manual for count:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;count() may return 0 for a variable&#xA;  that isn't set, but it may also return&#xA;  0 for a variable that has been&#xA;  initialized with an empty array. Use&#xA;  isset() to test if a variable is set.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;But in your case, the function doesn't seem to care whether the array is empty or the variable isn't set -- 0 is returned in both cases. By checking what count returns we could eliminate some of the &lt;code&gt;if&lt;/code&gt; branches.&lt;/p&gt;&#xA;" OwnerUserId="71" LastEditorUserId="52915" LastEditDate="2015-10-20T16:13:18.487" LastActivityDate="2015-10-20T16:13:18.487" CommentCount="7" />
  <row Id="222" PostTypeId="1" AcceptedAnswerId="247" CreationDate="2011-01-26T04:04:45.080" Score="7" ViewCount="2030" Body="&lt;p&gt;According to the Doctrine &lt;a href=&quot;http://www.doctrine-project.org/projects/orm/1.2/docs/manual/working-with-models/en#fetching-objects&quot; rel=&quot;nofollow&quot;&gt;docs&lt;/a&gt;, you should use Array hydration rather than record hydration when retrieving data for read-only purposes.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Unfortunately, this means I have to use array syntax (as opposed to object syntax) to reference the data.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$q = Doctrine_Query::create()&#xA;    -&amp;gt;from('Post p')&#xA;    -&amp;gt;leftJoin('p.PostComment pc')&#xA;    -&amp;gt;leftJoin('pc.User u')&#xA;    -&amp;gt;where('p.post_id = ?', $id);&#xA;&#xA;$p = $q-&amp;gt;fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY);&#xA;&#xA;...&#xA;&#xA;foreach ($p['PostComment'] as $comment) {&#xA;    $this-&amp;gt;Controls-&amp;gt;Add(new CommentPanel($comment['text'], &#xA;                         $comment['User']['nickname'], &#xA;                         $comment['last_updated_ts']));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Maybe it's just me, but all of those string literals as array indexes are kinda scary.  Does anyone have some ideas for cleaning this up?&lt;/p&gt;&#xA;" OwnerUserId="26" LastActivityDate="2011-01-26T23:42:00.827" Title="Php/Doctrine array hydration" Tags="&lt;php&gt;&lt;doctrine&gt;" AnswerCount="1" CommentCount="4" FavoriteCount="1" />
  <row Id="223" PostTypeId="2" ParentId="220" CreationDate="2011-01-26T08:39:39.397" Score="14" Body="&lt;p&gt;The first part of your function filter out negative values. This has nothing to do with calculating the median itself, so should be moved away from this function. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Way I would do it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Create &lt;code&gt;array_median()&lt;/code&gt; function in a global scope (or a static method) like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/**&#xA; * Adapted from Victor T.'s answer&#xA; */&#xA;function array_median($array) {&#xA;  // perhaps all non numeric values should filtered out of $array here?&#xA;  $iCount = count($array);&#xA;  if ($iCount == 0) {&#xA;    throw new DomainException('Median of an empty array is undefined');&#xA;  }&#xA;  // if we're down here it must mean $array&#xA;  // has at least 1 item in the array.&#xA;  $middle_index = floor($iCount / 2);&#xA;  sort($array, SORT_NUMERIC);&#xA;  $median = $array[$middle_index]; // assume an odd # of items&#xA;  // Handle the even case by averaging the middle 2 items&#xA;  if ($iCount % 2 == 0) {&#xA;    $median = ($median + $array[$middle_index - 1]) / 2;&#xA;  }&#xA;  return $median;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This way we have generally available all purpose function, with naming consistent with core php functions.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And your method would look like&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/**&#xA; * The name should probably be changed, to reflect more your business intent.&#xA; */&#xA;private function calculateMedian($aValues) {&#xA;  return array_median(&#xA;    array_filter(&#xA;      $aValues, &#xA;      function($v) {return (is_numeric($v) &amp;amp;&amp;amp; $v &amp;gt;= 0);}&#xA;      // You can skip is_numeric() check here, if you know all values in $aValues are actually numeric &#xA;    )&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Either within &lt;code&gt;calculateMedian()&lt;/code&gt; or in the code that calls it, you should take care of catching the &lt;code&gt;DomainException&lt;/code&gt; that can be thrown if the array is empty)&lt;/p&gt;&#xA;" OwnerUserId="187" LastEditorUserId="187" LastEditDate="2016-05-25T06:46:00.557" LastActivityDate="2016-05-25T06:46:00.557" CommentCount="0" />
  <row Id="224" PostTypeId="1" AcceptedAnswerId="255" CreationDate="2011-01-26T11:12:35.660" Score="35" ViewCount="9942" Body="&lt;p&gt;I was trying to create a lock-free queue implementation in Java, mainly for personal learning. The queue should be a general one, allowing any number of readers and/or writers concurrently.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Would you please review it, and suggest any improvements/issues you find?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;(&lt;a href=&quot;http://stackoverflow.com/q/1634368/41283&quot;&gt;Cross-post from StackOverflow&lt;/a&gt;)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import java.util.concurrent.atomic.AtomicReference;&#xA;&#xA;public class LockFreeQueue&amp;lt;T&amp;gt; {&#xA;    private static class Node&amp;lt;E&amp;gt; {&#xA;        final E value;&#xA;        volatile Node&amp;lt;E&amp;gt; next;&#xA;&#xA;        Node(E value) {&#xA;            this.value = value;&#xA;        }&#xA;    }&#xA;&#xA;    private AtomicReference&amp;lt;Node&amp;lt;T&amp;gt;&amp;gt; head, tail;&#xA;&#xA;    public LockFreeQueue() {&#xA;        // have both head and tail point to a dummy node&#xA;        Node&amp;lt;T&amp;gt; dummyNode = new Node&amp;lt;T&amp;gt;(null);&#xA;        head = new AtomicReference&amp;lt;Node&amp;lt;T&amp;gt;&amp;gt;(dummyNode);&#xA;        tail = new AtomicReference&amp;lt;Node&amp;lt;T&amp;gt;&amp;gt;(dummyNode);&#xA;    }&#xA;&#xA;    /**&#xA;     * Puts an object at the end of the queue.&#xA;     */&#xA;    public void putObject(T value) {&#xA;        Node&amp;lt;T&amp;gt; newNode = new Node&amp;lt;T&amp;gt;(value);&#xA;        Node&amp;lt;T&amp;gt; prevTailNode = tail.getAndSet(newNode);&#xA;        prevTailNode.next = newNode;&#xA;    }&#xA;&#xA;    /**&#xA;     * Gets an object from the beginning of the queue. The object is removed&#xA;     * from the queue. If there are no objects in the queue, returns null.&#xA;     */&#xA;    public T getObject() {&#xA;        Node&amp;lt;T&amp;gt; headNode, valueNode;&#xA;&#xA;        // move head node to the next node using atomic semantics&#xA;        // as long as next node is not null&#xA;        do {&#xA;            headNode = head.get();&#xA;            valueNode = headNode.next;&#xA;            // try until the whole loop executes pseudo-atomically&#xA;            // (i.e. unaffected by modifications done by other threads)&#xA;        } while (valueNode != null &amp;amp;&amp;amp; !head.compareAndSet(headNode, valueNode));&#xA;&#xA;        T value = (valueNode != null ? valueNode.value : null);&#xA;&#xA;        // release the value pointed to by head, keeping the head node dummy&#xA;        if (valueNode != null)&#xA;            valueNode.value = null;&#xA;&#xA;        return value;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="150" LastEditorUserId="31503" LastEditDate="2014-12-15T04:53:40.843" LastActivityDate="2014-12-15T04:53:40.843" Title="Thread-Safe and Lock-Free - Queue Implementation" Tags="&lt;java&gt;&lt;multithreading&gt;&lt;thread-safety&gt;&lt;locking&gt;&lt;lock-free&gt;" AnswerCount="5" CommentCount="4" FavoriteCount="5" />
  <row Id="225" PostTypeId="2" ParentId="220" CreationDate="2011-01-26T18:19:52.007" Score="0" Body="&lt;p&gt;Personally this is the way that I would build the function:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function calculateMedian($Values)&#xA;{&#xA;    //Remove array items less than 1&#xA;    $Values = array_filter($Values,array($this,&quot;callback&quot;));&#xA;&#xA;    //Sort the array into descending order 1 - ?&#xA;    sort($Values, SORT_NUMERIC);&#xA;&#xA;    //Find out the total amount of elements in the array&#xA;    $Count = count($Values);&#xA;&#xA;    //Check the amount of remainders to calculate odd/even&#xA;    if($Count % 2 == 0)&#xA;    {&#xA;        return $Values[$Count / 2];&#xA;    }&#xA;&#xA;    return (($Values[($Count / 2)] + $Values[($Count / 2) - 1]) / 2);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;What changes have I done?&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;I have used less variables, overwriting the &lt;code&gt;$Values&lt;/code&gt; where needed&lt;/li&gt;&#xA;&lt;li&gt;Reduced the conditional statements to 1* from 2&lt;/li&gt;&#xA;&lt;li&gt;Made the code look more readable and understandable.&lt;/li&gt;&#xA;&lt;li&gt;I have however added a callback, which in turn removes the &lt;code&gt;foreach&lt;/code&gt; and if statements but a logical check would have to be used in the callback. the callback would simple be a method in your class like so:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;public function callback($value)&#xA;{&#xA;return $value &amp;gt; 0;&#xA;}&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;Unfortunately as the native function &lt;code&gt;empty&lt;/code&gt; is actually a language construct its not a valid callback, you can however use &lt;code&gt;return !empty($value);&lt;/code&gt; within your callback method to also remove other entities such as &lt;code&gt;NULL&lt;/code&gt;,&lt;code&gt;FALSE&lt;/code&gt; etc&lt;/li&gt;&#xA;&lt;li&gt;This can be removed as stated, and placed outside the function.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;*Notes: I would advise you to have some kind of linear array check to make sure the arrays are based on an integer index, as our code assumes they are, a linear chack can be done like so:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if(array_keys($Values) !== range(0,($Count-1)))&#xA;{&#xA;    return null;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;this would be added after the &lt;code&gt;$Count&lt;/code&gt; value has come into play.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Example test that I had used to test it was:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$values = array(&#xA;    0,4,7,5,6,9,5,3,2,7,5,6,4,3,7&#xA;);&#xA;echo calculateMedian($values);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;which resulted in the correct answer of 5&lt;/p&gt;&#xA;" OwnerUserId="95" LastEditorUserId="95" LastEditDate="2011-01-26T18:42:16.867" LastActivityDate="2011-01-26T18:42:16.867" CommentCount="4" />
  <row Id="226" PostTypeId="1" AcceptedAnswerId="263" CreationDate="2011-01-26T21:57:46.423" Score="22" ViewCount="1385" Body="&lt;p&gt;In our production code, we cannot use Boost or C++0x.  Formatting strings using &lt;code&gt;sprintf&lt;/code&gt; or &lt;code&gt;stringstream&lt;/code&gt; is annoying in this case, and this prompted me to write my own little &lt;code&gt;Formatter&lt;/code&gt; class.  I am curious if the implementation of this class or the use of it introduces any Undefined Behavior.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In particular, is this line fully-defined:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Reject( Formatter() &amp;lt;&amp;lt; &quot;Error Recieved&quot; &amp;lt;&amp;lt; 42 &amp;lt;&amp;lt; &quot; &quot; &amp;lt;&amp;lt; some_code &amp;lt;&amp;lt; &quot; '&quot; &amp;lt;&amp;lt; some_msg &amp;lt;&amp;lt; &quot;'&quot;);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;My belief is that it is OK, but I wanted peer-review.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Three main points of concern:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Is there a double-assignment within a single sequence point?  Is it UB? &lt;/li&gt;&#xA;&lt;li&gt;Do I have a problem with the lifetime of temporaries?&lt;/li&gt;&#xA;&lt;li&gt;Does my &lt;code&gt;Formatter&lt;/code&gt; class (or the intended use of it) introduce any UB?&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;The &lt;code&gt;Formatter&lt;/code&gt; class has both a (templatized) &lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt; and an &lt;code&gt;operator std::string&lt;/code&gt;.  The intent is to use the &lt;code&gt;Formatter()&lt;/code&gt; class as a temporary in place of a &lt;code&gt;std::string&lt;/code&gt; parameter for any function taking a &lt;code&gt;const std::string&amp;amp;&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here is the class definition:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class Formatter&#xA;{&#xA;public:&#xA; Formatter() {};&#xA; template&amp;lt;class Field&amp;gt; Formatter&amp;amp; operator&amp;lt;&amp;lt;(Field f)&#xA; {&#xA;  ss_ &amp;lt;&amp;lt; f;&#xA;  return *this;&#xA; }&#xA; operator std::string() const { return ss_.str(); }&#xA;private:&#xA; std::stringstream ss_;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And here is a complete test harness, including the above definition.  You should be able to compile &amp;amp; run as-is.  Do you see any UB?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;cstdlib&amp;gt;&#xA;#include &amp;lt;string&amp;gt;&#xA;#include &amp;lt;sstream&amp;gt;&#xA;#include &amp;lt;iostream&amp;gt;&#xA;&#xA;class Formatter&#xA;{&#xA;public:&#xA; Formatter() {};&#xA; template&amp;lt;class Field&amp;gt; Formatter&amp;amp; operator&amp;lt;&amp;lt;(Field f)&#xA; {&#xA;  ss_ &amp;lt;&amp;lt; f;&#xA;  return *this;&#xA; }&#xA; operator std::string() const { return ss_.str(); }&#xA;private:&#xA; std::stringstream ss_;&#xA;};&#xA;&#xA;void Reject(const std::string&amp;amp; msg)&#xA;{&#xA; std::cout &amp;lt;&amp;lt; &quot;Recieved Message: '&quot; &amp;lt;&amp;lt; msg &amp;lt;&amp;lt; &quot;'&quot; &amp;lt;&amp;lt; std::endl;&#xA;}&#xA;&#xA;int main()&#xA;{&#xA; const char&amp;amp; some_code = 'A';&#xA; const char* some_msg = &quot;Something&quot;;&#xA;&#xA; Reject( Formatter() &amp;lt;&amp;lt; &quot;Error Recieved&quot; &amp;lt;&amp;lt; 42 &amp;lt;&amp;lt; &quot; &quot; &amp;lt;&amp;lt; some_code &amp;lt;&amp;lt; &quot; '&quot; &amp;lt;&amp;lt; some_msg &amp;lt;&amp;lt; &quot;'&quot;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="196" LastEditorUserId="196" LastEditDate="2014-11-10T17:41:48.367" LastActivityDate="2014-11-10T17:41:48.367" Title="Formatter class" Tags="&lt;c++&gt;&lt;formatting&gt;" AnswerCount="6" CommentCount="0" FavoriteCount="1" />
  <row Id="227" PostTypeId="2" ParentId="214" CreationDate="2011-01-26T22:04:14.340" Score="2" Body="&lt;p&gt;I would do this, personally:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;value = object unless onject.nil?&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This seems a little more expressive to me.  Its something I wish we could do in C++, instead of using the ternary operator.&lt;/p&gt;&#xA;" OwnerUserId="196" LastActivityDate="2011-01-26T22:04:14.340" CommentCount="1" />
  <row Id="228" PostTypeId="2" ParentId="226" CreationDate="2011-01-26T22:12:59.910" Score="3" Body="&lt;p&gt;Looks fine.  Don't worry too much and end up over-engineering a simple solution :)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Edit:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Actually, I would make the parameters to &lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt; into const references.&lt;/p&gt;&#xA;" OwnerUserId="55" LastEditorUserId="55" LastEditDate="2011-01-26T22:48:15.187" LastActivityDate="2011-01-26T22:48:15.187" CommentCount="1" />
  <row Id="229" PostTypeId="2" ParentId="186" CreationDate="2011-01-26T22:19:12.893" Score="2" Body="&lt;p&gt;Personally I would have made them static properties rather than static methods. Just seems more natural with C#. But the concept of having a static helper class to retrieve configuration values is a sound one. It becomes even more useful when you are retrieving non-string types since you can abstract away the casting to the helper class.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Just one comment - how about some error handling in the helper class to ensure that the configuration values are actually there?&lt;/p&gt;&#xA;" OwnerUserId="275" LastActivityDate="2011-01-26T22:19:12.893" CommentCount="0" />
  <row Id="230" PostTypeId="2" ParentId="226" CreationDate="2011-01-26T22:24:55.993" Score="3" Body="&lt;p&gt;Looks ok. The empty ctor is unnecessary; the compiler generated one will do just fine. &quot;Recieved&quot; should be spelled &quot;Received&quot; :)&lt;/p&gt;&#xA;" OwnerUserId="304" LastActivityDate="2011-01-26T22:24:55.993" CommentCount="0" />
  <row Id="231" PostTypeId="2" ParentId="7" CreationDate="2011-01-26T22:29:00.797" Score="12" Body="&lt;p&gt;Here's how I would do it:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def find_multiples(min=0, max=1000):&#xA;    &quot;&quot;&quot;Finds multiples of 3 or 5 between min and max.&quot;&quot;&quot;&#xA;&#xA;    for i in xrange(min, max):&#xA;       if i%3 and i%5:&#xA;           continue&#xA;&#xA;       yield i&#xA;&#xA;if __name__ == '__main__':&#xA;    print sum(find_multiples())&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This makes find_multiples a generator for the multiples it finds. The multiples no longer need to be stored explicitly, and especially not in a global. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;It's also now takes parameters (with default values) so that the caller can specify the range of numbers to search. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;And of course, the global &quot;if&quot; block now only has to sum on the numbers generated by the function instead of hoping the global variable exists and has remained untouched by anything else that might come up.&lt;/p&gt;&#xA;" OwnerUserId="328" LastEditorUserId="328" LastEditDate="2011-01-28T21:56:44.740" LastActivityDate="2011-01-28T21:56:44.740" CommentCount="0" />
  <row Id="232" PostTypeId="2" ParentId="226" CreationDate="2011-01-26T22:29:10.570" Score="4" Body="&lt;p&gt;I think you might be worried about temporary lifetime issues. (I know I have based on similar code.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The temporary object created as a parameter for &lt;code&gt;Reject&lt;/code&gt; will have a lifetime bound to the expression it is created in. (It's in the C++ standard somewhere.) So even with your conversion operators returning values, they will all be destructed after the expression that contains &lt;code&gt;Reject&lt;/code&gt;.&lt;/p&gt;&#xA;" OwnerUserId="331" LastActivityDate="2011-01-26T22:29:10.570" CommentCount="1" />
  <row Id="233" PostTypeId="2" ParentId="214" CreationDate="2011-01-26T22:30:15.253" Score="4" Body="&lt;p&gt;I would do:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;&#xA;v = object.to_s&#xA;&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;nil.to_s returns &quot;&quot;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Remember nil is also an object in ruby.&lt;/p&gt;&#xA;" OwnerUserId="337" LastActivityDate="2011-01-26T22:30:15.253" CommentCount="0" />
  <row Id="234" PostTypeId="2" ParentId="214" CreationDate="2011-01-26T22:35:02.290" Score="3" Body="&lt;p&gt;In your specific case, using &lt;code&gt;object.to_s&lt;/code&gt;, you don't actually need to check for &lt;code&gt;nil&lt;/code&gt; at all since ruby handles this for you. If the object is &lt;code&gt;nil&lt;/code&gt; it will return an empty string.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Evidence from the irb:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;code&gt;object = nil # =&amp;gt; nil&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;code&gt;object.to_s #  =&amp;gt; &quot;&quot;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;code&gt;object = Object.new # =&amp;gt; #&amp;lt;Object:0x10132e220&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;object.to_s # =&amp;gt; &quot;#&amp;lt;Object:0x10132e220&amp;gt;&quot;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="320" LastActivityDate="2011-01-26T22:35:02.290" CommentCount="0" />
  <row Id="237" PostTypeId="2" ParentId="186" CreationDate="2011-01-26T22:46:13.177" Score="36" Body="&lt;p&gt;While somewhat of a tangent from your question but you may find it helpful nonetheless.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I would recommend looking at a custom &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/2tw134k3.aspx&quot;&gt;ConfigurationSection&lt;/a&gt; which allows you to define more complex configuration hierarchies that are strongly-typed.  I find it much easier to use a custom configuration section than having to remember a bunch of magic strings in the appSettings element and also allows you to specific which values are required, what the defaults values are, etc.  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Using a custom configuration section you could create a configuration type like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public class UboldiConfigurationSection : System.Configuration.ConfigurationSection {&#xA;    [ConfigurationProperty(&quot;schoolName&quot;)]&#xA;    public string SchoolName {&#xA;        get { return (string)this[&quot;schoolName&quot;]; }&#xA;        set { this[&quot;schoolName&quot;] = value; }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then to load that configuration type:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public static class UboldiApplication {&#xA;    public static UboldiConfigurationSection Config { get; internal set; }&#xA;&#xA;    public static void Initialize() {&#xA;        Config = ConfigurationManager.GetSection(&quot;uboldi&quot;) as UboldiConfigurationSection;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The app.config then would look something like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;configuration&amp;gt;&#xA;    &amp;lt;configSections&amp;gt;&#xA;        &amp;lt;section name=&quot;uboldi&quot; type=&quot;Uboldi.UboldiConfigurationSection, Uboldi&quot; /&amp;gt;&#xA;    &amp;lt;/configSections&amp;gt;&#xA;    &amp;lt;uboldi schoolName=&quot;Fillmore Central&quot; /&amp;gt;&#xA;&amp;lt;/configuration&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Lastly, you use the configuration by:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public void Test() {    &#xA;    //This only needs to be done once, presumably in your Program.Main method&#xA;    UboldiApplication.Initialize();&#xA;&#xA;    var name = UboldiApplication.Config.SchoolName;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;A couple of notes:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;You'll need to reference the System.Configuration assembly as it's not usually referenced in VS by default.&lt;/li&gt;&#xA;&lt;li&gt;The &lt;code&gt;ConfigurationManager.GetSection(&quot;uboldi&quot;)&lt;/code&gt; is expecting the name of the section in the app.config file.  You'll note that this matches in the example above.&lt;/li&gt;&#xA;&lt;li&gt;The section element in the app.config file uses the standard .Net type name convention to locate the specified configuration section.  In this example I am assuming that the &lt;code&gt;UboldiConfigurationSection&lt;/code&gt; type is the Uboldi namespace and in an Uboldi assembly (dll or exe).&lt;/li&gt;&#xA;&lt;li&gt;You can add hierarchy by creating &lt;code&gt;ConfigurationElement&lt;/code&gt; sub classes and using them as properties in your configuration section and elements.&lt;/li&gt;&#xA;&lt;li&gt;The link above is for a Web.config, but the same thing is possible in an app.config file.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;" OwnerUserId="67" LastEditorUserId="29371" LastEditDate="2015-12-14T08:13:57.177" LastActivityDate="2015-12-14T08:13:57.177" CommentCount="0" />
  <row Id="238" PostTypeId="2" ParentId="7" CreationDate="2011-01-26T22:55:19.263" Score="19" Body="&lt;p&gt;The UNIX Man's recommendation of using a generator rather than a list is good one. However I would recommend using a generator expressions over &lt;code&gt;yield&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def find_multiples(min=0, max=1000):&#xA;    &quot;&quot;&quot;Finds multiples of 3 or 5 between min and max.&quot;&quot;&quot;&#xA;    return (i for i in xrange(min, max) if i%3==0 or i%5==0)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This has the same benefits as using &lt;code&gt;yield&lt;/code&gt; and the added benefit of being more concise. In contrast to UNIX Man's solution it also uses &quot;positive&quot; control flow, i.e. it selects the elements to select, not the ones to skip, and the lack of the &lt;code&gt;continue&lt;/code&gt; statement simplifies the control flow¹.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;On a more general note, I'd recommend renaming the function &lt;code&gt;find_multiples_of_3_and_5&lt;/code&gt; because otherwise the name suggests that you might use it to find multiples of any number. Or even better: you could generalize your function, so that it can find the multiples of any numbers. For this the code could look like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def find_multiples(factors=[3,5], min=0, max=1000):&#xA;    &quot;&quot;&quot;Finds all numbers between min and max which are multiples of any number&#xA;       in factors&quot;&quot;&quot;&#xA;    return (i for i in xrange(min, max) if any(i%x==0 for x in factors))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;However now the generator expression is getting a bit crowded, so we should factor the logic for finding whether a given number is a multiple of any of the factors into its own function:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def find_multiples(factors=[3,5], min=0, max=1000):&#xA;    &quot;&quot;&quot;Finds all numbers between min and max which are multiples of any number&#xA;       in factors&quot;&quot;&quot;&#xA;    def is_multiple(i):&#xA;        return any(i%x==0 for x in factors)&#xA;&#xA;    return (i for i in xrange(min, max) if is_multiple(i))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;¹ Of course the solution using &lt;code&gt;yield&lt;/code&gt; could also be written positively and without &lt;code&gt;continue&lt;/code&gt;.&lt;/p&gt;&#xA;" OwnerUserId="128" LastEditorUserId="128" LastEditDate="2011-01-26T23:10:32.950" LastActivityDate="2011-01-26T23:10:32.950" CommentCount="1" />
  <row Id="239" PostTypeId="1" AcceptedAnswerId="271" CreationDate="2011-01-26T22:57:09.310" Score="11" ViewCount="1071" Body="&lt;p&gt;I'm creating some sort of &quot;portfolio&quot; website for my self (a ton of placeholder content right now...) and I was wondering if I could improve the semantics of the HTML&lt;del&gt;5&lt;/del&gt; any further, especially the &lt;code&gt;article&lt;/code&gt; stuff.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'm not completely sure if I should use &lt;code&gt;section&lt;/code&gt; elements inside it. I read through a number of HTML5 &quot;guides&quot; and a few of the element specs, but they often have different positions on this.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I think using sections would add to the semantics since the slides are a different &quot;part/section&quot; of the &quot;article&quot;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Don't rant about the CSS; it's generated by LESS.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The site can be viewed &lt;a href=&quot;http://bonsaiden.no.de/&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Manually formatted HTML&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&#xA;&amp;lt;html&amp;gt;&#xA;  &amp;lt;head&amp;gt;&#xA;    &amp;lt;title&amp;gt;A Python Twitter Client | BonsaiDen&amp;lt;/title&amp;gt;&#xA;    &amp;lt;link rel=&quot;shortcut icon&quot; href=&quot;/images/favicon.ico&quot;&amp;gt;&#xA;    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;http://fonts.googleapis.com/css?family=Ubuntu:regular,bold&quot;&amp;gt;&#xA;    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;/stylesheets/style.css&quot;&amp;gt;&#xA;&#xA;    // will get copied to a local file sooner or later&#xA;    &amp;lt;!--[if lt IE 9]&amp;gt;&#xA;      &amp;lt;script src=&quot;http://html5shim.googlecode.com/svn/trunk/html5.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&#xA;    &amp;lt;![endif]--&amp;gt;&#xA;  &amp;lt;/head&amp;gt;&#xA;&#xA;  &amp;lt;body&amp;gt;&#xA;&#xA;    // the content&#xA;    &amp;lt;article&amp;gt;&#xA;&#xA;      // quite some divs here&#xA;      &amp;lt;div&amp;gt;&#xA;        &amp;lt;div id=&quot;content&quot;&amp;gt;  // maybe use section?&#xA;&#xA;          // gets replaced via ajax&#xA;&#xA;          &amp;lt;header data-page=&quot;/atarashii&quot;&amp;gt;&#xA;            &amp;lt;h1 class=&quot;small&quot;&amp;gt;A Python Twitter Client&amp;lt;/h1&amp;gt;&#xA;            &amp;lt;div class=&quot;external&quot;&amp;gt;&#xA;              &amp;lt;a href=&quot;https://github.com/BonsaiDen/Atarashii&quot;&amp;gt;Go to Project &amp;amp;#x27A4;&amp;lt;/a&amp;gt;&#xA;            &amp;lt;/div&amp;gt;&#xA;            &amp;lt;div class=&quot;clear&quot;&amp;gt;&amp;lt;/div&amp;gt; // always hate these clear things...&#xA;          &amp;lt;/header&amp;gt;&#xA;&#xA;          &amp;lt;div&amp;gt;&#xA;            &amp;lt;p&amp;gt;A Twitter Client for GNOME...&amp;lt;/p&amp;gt;&#xA;          &amp;lt;/div&amp;gt;&#xA;&#xA;          // ajax end&#xA;&#xA;        &amp;lt;/div&amp;gt;&#xA;&#xA;        &amp;lt;div id=&quot;slideshow&quot;&amp;gt;  // maybe use section?&#xA;          &amp;lt;header&amp;gt;&#xA;            &amp;lt;h1 id=&quot;slideTitle&quot;&amp;gt;[SlideShowItem Title]&amp;lt;/h1&amp;gt;&#xA;          &amp;lt;/header&amp;gt;&#xA;&#xA;          &amp;lt;div id=&quot;slideContent&quot;&amp;gt;&#xA;            &amp;lt;p&amp;gt;[Slideshow Image]&amp;lt;/p&amp;gt;&#xA;          &amp;lt;/div&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;        &amp;lt;div class=&quot;clear&quot;&amp;gt;&amp;lt;/div&amp;gt;&#xA;      &amp;lt;/div&amp;gt;&#xA;    &amp;lt;/article&amp;gt;&#xA;&#xA;&#xA;    &amp;lt;header&amp;gt;&#xA;&#xA;      // navigation, surprise!&#xA;      &amp;lt;nav&amp;gt;&#xA;&#xA;        // really happy with this&#xA;        &amp;lt;ul&amp;gt;&#xA;          &amp;lt;li class=&quot;left&quot;&amp;gt;&#xA;            &amp;lt;h1&amp;gt;Projects&amp;lt;/h1&amp;gt;&#xA;            &amp;lt;ul&amp;gt;&#xA;              &amp;lt;li&amp;gt;&amp;lt;a href=&quot;/garden&quot;&amp;gt;JavaScript Garden&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xA;              &amp;lt;li&amp;gt;&amp;lt;a href=&quot;/shooter&quot;&amp;gt;NodeGame: Shooter&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xA;              &amp;lt;li&amp;gt;&amp;lt;a href=&quot;/atarashii&quot; class=&quot;active&quot;&amp;gt;Atarashii&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xA;            &amp;lt;/ul&amp;gt;&#xA;          &amp;lt;/li&amp;gt;&#xA;&#xA;          &amp;lt;li&amp;gt;&#xA;            &amp;lt;h1&amp;gt;Code&amp;lt;/h1&amp;gt;&#xA;            &amp;lt;ul&amp;gt;&#xA;              &amp;lt;li&amp;gt;&amp;lt;a href=&quot;/neko&quot;&amp;gt;neko.js&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xA;              &amp;lt;li&amp;gt;&amp;lt;a href=&quot;/bison&quot;&amp;gt;BiSON.js&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xA;            &amp;lt;/ul&amp;gt;&#xA;          &amp;lt;/li&amp;gt;&#xA;&#xA;          &amp;lt;li&amp;gt;&#xA;            &amp;lt;h1&amp;gt;Web&amp;lt;/h1&amp;gt;&#xA;            &amp;lt;ul&amp;gt;&#xA;              &amp;lt;li&amp;gt;&amp;lt;a href=&quot;/stackoverflow&quot;&amp;gt;Stack Overflow&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xA;              &amp;lt;li&amp;gt;&amp;lt;a href=&quot;/github&quot;&amp;gt;GitHub&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xA;              &amp;lt;li&amp;gt;&amp;lt;a href=&quot;/website&quot;&amp;gt;The Website&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xA;            &amp;lt;/ul&amp;gt;&#xA;          &amp;lt;/li&amp;gt;&#xA;&#xA;          &amp;lt;li class=&quot;right&quot;&amp;gt;&#xA;            &amp;lt;h1&amp;gt;ME&amp;lt;/h1&amp;gt;&#xA;            &amp;lt;ul class=&quot;info&quot;&amp;gt;&#xA;              &amp;lt;li&amp;gt;&amp;lt;a href=&quot;/me&quot;&amp;gt;Ivo Wetzel&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xA;              &amp;lt;li class=&quot;simple&quot;&amp;gt;&#xA;&#xA;                // div div div :/&#xA;                &amp;lt;div&amp;gt;&#xA;                  &amp;lt;div id=&quot;picture&quot;&amp;gt;&#xA;                    &amp;lt;img src=&quot;images/snufkin.png&quot; alt=&quot;Ivo Wetzel&quot;/&amp;gt;&#xA;                    &amp;lt;a href=&quot;/me&quot;&amp;gt;&amp;lt;/a&amp;gt;&#xA;                  &amp;lt;/div&amp;gt;&#xA;&#xA;                  &amp;lt;ul&amp;gt;&#xA;                    &amp;lt;li class=&quot;first&quot;&amp;gt;&amp;lt;a href=&quot;http://twitter.com/BonsaiDen&quot;&amp;gt;Twitter&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xA;                    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;mailto: ivo.wetzel@googlemail.com&quot;&amp;gt;E-Mail&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xA;                  &amp;lt;/ul&amp;gt;&#xA;&#xA;                  &amp;lt;div class=&quot;clear&quot;&amp;gt;&amp;lt;/div&amp;gt;&#xA;                &amp;lt;/div&amp;gt;&#xA;              &amp;lt;/li&amp;gt;&#xA;            &amp;lt;/ul&amp;gt;&#xA;          &amp;lt;/li&amp;gt;&#xA;        &amp;lt;/ul&amp;gt;&#xA;      &amp;lt;/nav&amp;gt;&#xA;    &amp;lt;/header&amp;gt;&#xA;&#xA;    // no real content so far but a background image thingy&#xA;    &amp;lt;footer&amp;gt;&amp;lt;/footer&amp;gt;&#xA;&#xA;    &amp;lt;script src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&#xA;    &amp;lt;script src=&quot;/javascripts/page.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&#xA;  &amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="89" LastEditorUserId="22222" LastEditDate="2015-07-27T01:21:23.680" LastActivityDate="2015-07-27T01:21:23.680" Title="Twitter client portfolio website" Tags="&lt;html&gt;" AnswerCount="5" CommentCount="6" FavoriteCount="2" />
  <row Id="240" PostTypeId="2" ParentId="186" CreationDate="2011-01-26T22:59:46.213" Score="0" Body="&lt;p&gt;I second the config section. It has the advantage to set a setting as required, throwing an exception at the GetSection call, instead of passing a null value with AppSettings[nonexistingKey] &lt;/p&gt;&#xA;" OwnerDisplayName="user395" LastActivityDate="2011-01-26T22:59:46.213" CommentCount="0" />
  <row Id="241" PostTypeId="2" ParentId="239" CreationDate="2011-01-26T23:18:50.440" Score="1" Body="&lt;p&gt;In my opinion A &lt;em&gt;section&lt;/em&gt; element is basically an &lt;em&gt;important &lt;strong&gt;sub&lt;/strong&gt; div&lt;/em&gt; by this I mean,&#xA;A section element is used to designate a notable division in your content.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;One of the best ways I have found to think about if you should use a certain element in a certain place is:  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Imagine you are using a screen reader like a blind person.&#xA;They cannot see images or color, so the fact that you have a different background for each part of you content makes no difference to them.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But,&#xA;If suddenly the screen reader starts reading out &quot;&lt;em&gt;new section&lt;/em&gt;&quot; then that makes a more sense doesn't it?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So, in my opinion.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You should not replace your content or slideshow div with a section.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;a section should be used inside of your content div.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Although,&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This may be nit picking,&#xA;but does having a content div not take the place of where an article element should be?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;hr /&gt;&#xA;Does anyone else find that w3schools is full of C***?&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;&lt;strong&gt;The &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; tag defines external content.&lt;/strong&gt;&lt;br&gt;&#xA;  The external content could be a news-article from an external provider, or a text from a web log (blog), or a text from a forum, or any other content from an external source.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;In reality if this was the case they would have called the tag &lt;code&gt;&amp;lt;external&amp;gt;&lt;/code&gt;&lt;/p&gt;&#xA;" OwnerUserId="92" LastEditorUserId="92" LastEditDate="2011-01-26T23:37:42.717" LastActivityDate="2011-01-26T23:37:42.717" CommentCount="1" />
  <row Id="242" PostTypeId="2" ParentId="131" CreationDate="2011-01-26T23:18:58.190" Score="12" Body="&lt;p&gt;I'll argue the counterpoint ...&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The LoD would say that this client code is being tied to a particular model of the Document.  In the end, the code is really interested in the lines of a document.  How reasonable is it that we tie that code to the &lt;code&gt;getPage / getParagraph / getLine&lt;/code&gt; model?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Its perfectly reasonable to believe that pages wills always be made up of paragraphs and paragraphs made up of lines, but I don't think this is the only consideration.  The other question to ask is what other models should Document support? Stated differently:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;&quot;Is it reasonable to look at a Document as a series of Lines without regard to what page or paragraph they are in?&quot;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I think it is, so I would give &lt;code&gt;Document&lt;/code&gt; a &lt;code&gt;getLines()&lt;/code&gt; method and not force our code to go through the Page/Paragraph/Line model.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This &lt;code&gt;getLines()&lt;/code&gt; method is also a good thing, because: &lt;em&gt;if it its reasonable for our &lt;code&gt;Document&lt;/code&gt;'s client to see things this way, it is reasonable that &lt;code&gt;Document&lt;/code&gt; may see things this way too&lt;/em&gt;.  That is, isn't it possible that the &lt;code&gt;Document&lt;/code&gt; &lt;em&gt;may&lt;/em&gt; have an efficient structure for moving from line to line (if not now, then perhaps in the future) that may not involve pages and paragraphs?  If so, forcing client code to go through the &lt;code&gt;getPage / getParagraph / getLine&lt;/code&gt; is hurting the opportunity to use that efficient structure.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I also think its unreasonable &quot;Forcing the document to handle interactions with subcomponents&quot; in every conceivable case, so there has to be a happy medium out there. As a counter example, consider:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;&quot;is it reasonable to look at a Library as a series of Lines without regard to what document they are in?&quot;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I don't think I'll be providing a &lt;code&gt;getLines()&lt;/code&gt; method to my &lt;code&gt;Library&lt;/code&gt; class.&lt;/p&gt;&#xA;" OwnerUserId="334" LastEditorUserId="334" LastEditDate="2011-01-27T02:20:25.700" LastActivityDate="2011-01-27T02:20:25.700" CommentCount="0" />
  <row Id="243" PostTypeId="2" ParentId="219" CreationDate="2011-01-26T23:33:23.913" Score="2" Body="&lt;p&gt;A couple of possible code improvements that I noticed:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;sourcelen = len(values) * n&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This seems unnecessarily complicated to me. I mean, after a second of thinking the reader of this line will realize that &lt;code&gt;len(values) * n&lt;/code&gt; is indeed the length of &lt;code&gt;source&lt;/code&gt;, but that's still one step of thinking more than would be required if you just did &lt;code&gt;sourcelen = len(source)&lt;/code&gt; (after populating &lt;code&gt;source&lt;/code&gt; of course).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;That being said, I don't see why you need to store the length of &lt;code&gt;source&lt;/code&gt; in a variable at all. Doing &lt;code&gt;for i in xrange(len(source)):&lt;/code&gt; isn't really less readable or less efficient than doing &lt;code&gt;for i in xrange(sourcelen):&lt;/code&gt;, so I'd just get rid of the variable altogether.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;source = []&#xA;for val in values:&#xA;  source += [val] * n&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This can be written as a list comprehension like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;source = [x for val in values for x in [val]*n]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Using list comprehensions is usually considered more idiomatic python than building up a list iteratively. It is also often more efficient.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As Fred Nurk points out, the list comprehension can also be written as&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;source = [val for val in values for _ in xrange(n)]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;which avoids the creation of a temporary list and is maybe a bit more readable.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;j = int(random() * (sourcelen - i)) + i&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;To get a random integer between &lt;code&gt;x&lt;/code&gt; (inclusive) and &lt;code&gt;y&lt;/code&gt; (exclusive), you can use &lt;code&gt;random.randrange(x,y)&lt;/code&gt;, so the above can be written as:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;j = randrange(i, len(source) - i)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;(You'll also need to import &lt;code&gt;randrange&lt;/code&gt; instead of &lt;code&gt;random&lt;/code&gt; from the random module). This makes it more immediately obviously that &lt;code&gt;j&lt;/code&gt; is a random number between &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;len(source) - i&lt;/code&gt; and introduces less room for mistakes.&lt;/p&gt;&#xA;" OwnerUserId="128" LastEditorUserId="128" LastEditDate="2011-01-27T09:29:07.290" LastActivityDate="2011-01-27T09:29:07.290" CommentCount="1" />
  <row Id="244" PostTypeId="2" ParentId="239" CreationDate="2011-01-26T23:36:32.237" Score="1" Body="&lt;p&gt;&lt;code&gt;&amp;lt;div class=&quot;clear&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; can and should be replaced by the magnificent clearfix solution&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Add this to the END of your css:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/* &amp;gt;&amp;gt; The Magnificent CLEARFIX: http://j.mp/bestclearfix */&#xA;.clearfix:before, .clearfix:after { content: &quot;\0020&quot;; display: block; height: 0; visibility: hidden; }&#xA;.clearfix:after { clear: both; }&#xA;/* fix clearfix: blueprintcss.lighthouseapp.com/projects/15318/tickets/5-extra-margin-padding-bottom-of-page */&#xA;.clearfix { zoom: 1; }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then just add &lt;code&gt;class=&quot;clearfix&quot;&lt;/code&gt; to any container that has floated elements.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You should also check out &lt;a href=&quot;http://html5boilerplate.com/&quot; rel=&quot;nofollow&quot;&gt;http://html5boilerplate.com/&lt;/a&gt; if you haven't already.&lt;/p&gt;&#xA;" OwnerUserId="296" LastActivityDate="2011-01-26T23:36:32.237" CommentCount="3" />
  <row Id="245" PostTypeId="2" ParentId="186" CreationDate="2011-01-26T23:40:07.913" Score="1" Body="&lt;p&gt;A few thoughts:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The name &quot;CustomizationHelper&quot; is not very specific. How about CustomerBrandingService? Even though it &quot;just&quot; fetches data from a config file, that may not always be the case, and it is still an application service. (Naming classes with &quot;Helper&quot; is similar to naming with &quot;Manager&quot; - see reference on that below.)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Also, while your question is reasonable and simple, it is not clear to me what decisions you will make from this. For example, if this is the basis for a whole app, I suggest some other options to consider:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;Why are you building a WinForm app in 2011? Consider WPF or Silverlight (possibly Silverlight Out-of-Browser &quot;SLOOB&quot;).&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;If you choose WPF or Silverlight, the title would be assigned most naturally using Data Binding through the Model-View-ViewModel pattern.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Pointers for more information:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1866794/naming-classes-how-to-avoid-calling-everything-a-whatevermanager&quot; title=&quot;How to avoid calling every class a Manager class&quot;&gt;How to avoid calling every class a &quot;Manager&quot; class&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms752347.aspx&quot; rel=&quot;nofollow&quot; title=&quot;Data Binding in WPF&quot;&gt;Data Binding with WPF&lt;/a&gt; (Silverlight is very similar)&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1405739/mvvm-tutorial-from-start-to-finish&quot; title=&quot;MVVM Tutorials&quot;&gt;The Model-View-ViewModel Design Pattern for WPF and Silverlight&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="9901" LastActivityDate="2011-01-26T23:40:07.913" CommentCount="0" />
  <row Id="246" PostTypeId="2" ParentId="239" CreationDate="2011-01-26T23:40:57.817" Score="7" Body="&lt;p&gt;Your &quot;the content&quot; article tag should probably be an Aside.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Mark Pilgrim's &lt;a href=&quot;http://diveintohtml5.info/semantics.html&quot; rel=&quot;nofollow&quot;&gt;&lt;strong&gt;Dive Into HTML5&lt;/strong&gt;&lt;/a&gt; recommends for Article tags:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;The article element represents a&#xA;  component of a page that consists of a&#xA;  self-contained composition in a&#xA;  document, page, application, or site&#xA;  and that is intended to be&#xA;  independently distributable or&#xA;  reusable, e.g. in syndication. This&#xA;  could be a forum post, a magazine or&#xA;  newspaper article, a Web log entry, a&#xA;  user-submitted comment, an interactive&#xA;  widget or gadget, or any other&#xA;  independent item of content.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;and for Aside tags:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;The aside element represents a section&#xA;  of a page that consists of content&#xA;  that is tangentially related to the&#xA;  content around the aside element, and&#xA;  which could be considered separate&#xA;  from that content. Such sections are&#xA;  often represented as sidebars in&#xA;  printed typography. The element can be&#xA;  used for typographical effects like&#xA;  pull quotes or sidebars, for&#xA;  advertising, for groups of nav&#xA;  elements, and for other content that&#xA;  is considered separate from the main&#xA;  content of the page.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;I believe ID=&quot;content&quot; should probably be a section as you proposed.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In my opinion, he gives the best explanations for when and where each tag should be used.&lt;/p&gt;&#xA;" OwnerUserId="317" LastEditorUserId="317" LastEditDate="2012-08-10T22:04:24.603" LastActivityDate="2012-08-10T22:04:24.603" CommentCount="2" />
  <row Id="247" PostTypeId="2" ParentId="222" CreationDate="2011-01-26T23:42:00.827" Score="3" Body="&lt;p&gt;Scary?  In what way?  I don't really get that.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It's just syntax.  If you really care, just cast the arrays as stdClass objects&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;foreach ( $p['PostComment'] as $comment )&#xA;{&#xA;  $comment = (object) $comment;&#xA;  $this-&amp;gt;Controls-&amp;gt;Add( new CommentPanel(&#xA;      $comment-&amp;gt;text&#xA;    , $comment-&amp;gt;User-&amp;gt;nickname&#xA;    , $comment-&amp;gt;last_updated_ts&#xA;  ));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="456" LastActivityDate="2011-01-26T23:42:00.827" CommentCount="3" />
  <row Id="248" PostTypeId="2" ParentId="79" CreationDate="2011-01-26T23:58:53.863" Score="4" Body="&lt;p&gt;Dependency Injection containers like Unity support a singleton concept. Unity is from Microsoft (and is open source), but there are &lt;a href=&quot;http://www.hanselman.com/blog/ListOfNETDependencyInjectionContainersIOC.aspx&quot; rel=&quot;nofollow&quot;&gt;lots of open source DI containers&lt;/a&gt;.&lt;/p&gt;&#xA;" OwnerUserId="9901" LastActivityDate="2011-01-26T23:58:53.863" CommentCount="0" />
  <row Id="249" PostTypeId="2" ParentId="112" CreationDate="2011-01-27T00:52:33.923" Score="4" Body="&lt;p&gt;Typically you want to perform UI interactions from the main thread, I would just move it to before the first dispatch_async call to turn it on. Then have it turn off in the later dispatch in the main_queue, so that it also happens on the main thread. This of course assumes that you were calling from the main thread to start with. If not you could just make another call to dispatch_async with the main_queue at the beginning.&lt;/p&gt;&#xA;" OwnerUserId="504" LastActivityDate="2011-01-27T00:52:33.923" CommentCount="0" />
  <row Id="250" PostTypeId="2" ParentId="226" CreationDate="2011-01-27T01:11:57.917" Score="5" Body="&lt;h3&gt;Just three comments:&lt;/h3&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;p&gt;I would remove the empty constructor.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;What about handling std::manipulators?&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Don't you want to pass field values by const reference?&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; template&amp;lt;class Field&amp;gt; Formatter&amp;amp; operator&amp;lt;&amp;lt;(Field const&amp;amp; f)&#xA;                                                // ^^^^^^&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3&gt;Your concerns:&lt;/h3&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;ol&gt;&#xA;  &lt;li&gt;Is there a double-assignment within a single sequence point? Is it UB? &lt;/li&gt;&#xA;  &lt;/ol&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Don't see one.&lt;br&gt;&#xA;Looks good.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;ol&gt;&#xA;  &lt;li&gt;Do I have a problem with the lifetime of temporaries?&lt;/li&gt;&#xA;  &lt;/ol&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;No. Don't think so.&lt;/p&gt;&#xA;" OwnerUserId="507" LastActivityDate="2011-01-27T01:11:57.917" CommentCount="5" />
  <row Id="251" PostTypeId="2" ParentId="159" CreationDate="2011-01-27T02:35:21.220" Score="21" Body="&lt;p&gt;If you want to use a regexp in a yaml file you need to use &lt;code&gt;!ruby/regexp&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#config/settings.yml&#xA;defaults: &amp;amp;defaults&#xA;&#xA;  email_regex: !ruby/regexp '/^([\w\.%\+\-]+)@([\w\-]+\.)+([\w]{2,})$/i'&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt;:&#xA; The solution proposed by Mike Bethany is very similar to the yaml implementation.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can take a look to what is used in Ruby 1.9.2 here (search for &quot;!ruby/regexp&quot;):&#xA;&lt;a href=&quot;https://github.com/tenderlove/psych/blob/master/lib/psych/visitors/to_ruby.rb&quot;&gt;https://github.com/tenderlove/psych/blob/master/lib/psych/visitors/to_ruby.rb&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;PS (and OT): I think, like Mike Bethany, that this basic functionality belong to the Regexp class not yaml, and need to be moved to a Regexp method. What do you think?&lt;/p&gt;&#xA;" OwnerUserId="508" LastEditorUserId="508" LastEditDate="2011-02-11T20:48:53.550" LastActivityDate="2011-02-11T20:48:53.550" CommentCount="0" />
  <row Id="252" PostTypeId="2" ParentId="226" CreationDate="2011-01-27T03:48:08.707" Score="4" Body="&lt;ul&gt;&#xA;&lt;li&gt;I'd use a &lt;code&gt;std::ostringstream&lt;/code&gt; because you don't use (seem to need) the formatting capabilities of &lt;code&gt;std::istringstream&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;What happens when formatting fails? Can you check for failure?&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="540" LastEditorUserId="540" LastEditDate="2011-01-27T03:54:18.743" LastActivityDate="2011-01-27T03:54:18.743" CommentCount="0" />
  <row Id="253" PostTypeId="2" ParentId="115" CreationDate="2011-01-27T04:34:43.130" Score="4" Body="&lt;p&gt;I'd use anonymous subroutines to make the code cleaner:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;my %output_formats = (&#xA;    'text' =&amp;gt; sub {&#xA;        # print_result_text code goes here&#xA;    },&#xA;    'xml' =&amp;gt; sub {&#xA;        # print_result_xml code goes here&#xA;    },&#xA;    # And so on&#xA;);&#xA;&#xA;sub print_result {&#xA;    my ($type, $argument1, $argument2) = @_;&#xA;&#xA;    if(exists $output_formats{$type}) {&#xA;        return $output_formats{$type}-&amp;gt;($argument1, $argument2);&#xA;    } else {&#xA;        die &quot;Type '$type' is not a valid output format.&quot;;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="550" LastActivityDate="2011-01-27T04:34:43.130" CommentCount="0" />
  <row Id="254" PostTypeId="2" ParentId="92" CreationDate="2011-01-27T04:46:33.527" Score="4" Body="&lt;p&gt;Check out &lt;a href=&quot;http://www.postgresql.org/docs/8.2/static/populate.html&quot; rel=&quot;nofollow&quot;&gt;PostgreSQL's tips on adding a lot of data into a table&lt;/a&gt;. In particular, are you sure that you need that index before &lt;code&gt;INSERT&lt;/code&gt;ing all that data? It might speed things up if you create the index after all the data has been added to the table.&lt;/p&gt;&#xA;" OwnerUserId="550" LastActivityDate="2011-01-27T04:46:33.527" CommentCount="1" />
  <row Id="255" PostTypeId="2" ParentId="224" CreationDate="2011-01-27T05:18:47.980" Score="18" Body="&lt;p&gt;Yes.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The combination of volatile and compare-and-swap operations is enough to make sure that the Node objects are safely published.&lt;/li&gt;&#xA;&lt;li&gt;The compare-and-swap must be before the assignment to a &lt;code&gt;volatile&lt;/code&gt; variable in both methods, so you're fine there. They do not need to happen atomically.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;The queue exhibits odd behavior. Let's say thread 1 stops in &lt;code&gt;putObject()&lt;/code&gt; after the CAS but before the last assignment. Next thread 2 executes &lt;code&gt;putObject()&lt;/code&gt; in its entirety. Next thread three calls &lt;code&gt;getObject()&lt;/code&gt;, and it cannot see either of the first two objects, even though thread 2 is completely done. There's a small chain being built up in-memory. Only after thread 1 completes &lt;code&gt;putObject()&lt;/code&gt; are both objects visible on the queue, which is somewhat surprising, and has weaker semantics than most non-blocking data structures.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Another way of looking at the odd API is that it's nice to have a non-blocking &lt;code&gt;put()&lt;/code&gt; but it's very strange to have a non-blocking &lt;code&gt;get()&lt;/code&gt;. It means that the queue must be used with repeated polling and sleeping.&lt;/p&gt;&#xA;" OwnerUserId="555" LastEditorUserId="555" LastEditDate="2011-01-28T01:30:08.487" LastActivityDate="2011-01-28T01:30:08.487" CommentCount="6" />
  <row Id="256" PostTypeId="2" ParentId="115" CreationDate="2011-01-27T06:17:24.057" Score="5" Body="&lt;p&gt;I find that Perl's flexibility can help you eliminate many IF/ELSIF/* code constructs, making code much easier to read.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;sub print_result {&#xA;    my ($stats, $tolerance, $outformat) = @_;&#xA;&#xA;    my $name = &quot;print_result_$outformat&quot;;&#xA;&#xA;    print &quot;$outformat is not a valid format&quot; and return&#xA;      if !main-&amp;gt;can($name);&#xA;&#xA;    no strict 'refs';&#xA;    &amp;amp;$name(@_);&#xA;}&#xA;&#xA;sub print_result_xml { ... }&#xA;sub print_result_text { ... }&#xA;sub print_result_whatever { ... }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;br&gt;&#xA;&lt;strong&gt;Walkthrough&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;print &quot;$outformat is not a valid format&quot; and return if !main-&amp;gt;can($name);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This checks the main namespace &lt;em&gt;(I presume you're not using classes, given your code sample)&lt;/em&gt; for the $name subroutine.  If it doesn't exist, print an error message and get out.  The sooner you exit from a subroutine, the easier your code will be to maintain.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; no strict 'refs';&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;no strict 'refs' turns off warnings &amp;amp; errors that would be generated for creating a subroutine reference on the fly &lt;em&gt;(You're using 'use strict', aren't you? If not, for your own sanity, and for the children, start)&lt;/em&gt;.  In this case, since you've already checked for it's existence with main-&gt;can, you're safe.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; &amp;amp;$name(@_);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now you don't need any central registry of valid formatting subroutines - just add a subroutine with the appropriate name, and your program will work as expected.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you want to be super hip &lt;em&gt;(some might say awesome)&lt;/em&gt;, you can replace the last 5 lines of the subroutine with:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;no strict 'refs';&#xA;main-&amp;gt;can($name) and &amp;amp;$name(@_) or print &quot;$outformat is not a valid format&quot;;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Whether you find that more readable or not is a simple personal preference; just keep in mind the sort of folk that will be maintaining your code in the future, and make sure to code in accordance with what makes the most sense to them.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Perl is the ultimate in flexibility, making it inherently the hippest language in existence.  Make sure to follow &lt;a href=&quot;http://blogs.perl.org&quot;&gt;http://blogs.perl.org&lt;/a&gt; and ironman.enlightenedperl.org to keep up with the latest in Modern::Perl.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;On a separate note, it's Perl, not PERL.  The distinction is important in determining reliable &amp;amp; up-to-date sources of Perl ninja-foo.&lt;/p&gt;&#xA;" OwnerUserId="575" LastEditorUserId="575" LastEditDate="2011-01-27T07:01:08.917" LastActivityDate="2011-01-27T07:01:08.917" CommentCount="2" />
  <row Id="257" PostTypeId="2" ParentId="197" CreationDate="2011-01-27T07:14:50.793" Score="2" Body="&lt;p&gt;Other options:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;First: there is a mechanism to elevate &quot;part&quot; of an application via COM Monikers: run a part of the application out of process via COM, using a correctly formatted name to elevate (this is how Explorer elevates parts of itself). See MSDN &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms679687(v=vs.85).aspx&quot; rel=&quot;nofollow&quot;&gt;http://msdn.microsoft.com/en-us/library/ms679687(v=vs.85).aspx&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Second: as Anna says: &lt;a href=&quot;http://codereview.stackexchange.com/questions/197/administration-elevation/208#208&quot;&gt;use a manifest&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Third: run via &lt;code&gt;runas&lt;/code&gt; as in the Q.&lt;/p&gt;&#xA;" OwnerUserId="584" LastActivityDate="2011-01-27T07:14:50.793" CommentCount="0" />
  <row Id="258" PostTypeId="2" ParentId="201" CreationDate="2011-01-27T07:21:27.870" Score="2" Body="&lt;p&gt;If you're actually trying to determine whether it's a sequential integer array rather than associative, i.e. something that json_encode would make an array vs an object, this is probably the fastest way to to do so:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function is_normal_array($arr) {&#xA;    $c = count($arr);&#xA;    for ($i = 0; $i &amp;lt; $c; $i++) {&#xA;        if (!isset($arr[$i])) {&#xA;            return false;&#xA;        }&#xA;    }&#xA;    return true;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;...of course the fastest code is code you never run, so consider whether you really, really need to do this, and only use it where you do.&lt;/p&gt;&#xA;" OwnerUserId="583" LastActivityDate="2011-01-27T07:21:27.870" CommentCount="1" />
  <row Id="259" PostTypeId="1" AcceptedAnswerId="261" CreationDate="2011-01-27T07:26:21.437" Score="32" ViewCount="3004" Body="&lt;p&gt;How can I clean this up?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;std::wstring LinkResolve::ResolveLink( const std::wstring&amp;amp; source ) const&#xA;{&#xA;    HRESULT errorCheck;&#xA; wchar_t linkTarget[MAX_PATH];&#xA; wchar_t expandedTarget[MAX_PATH];&#xA; wchar_t arguments[INFOTIPSIZE];&#xA;    ATL::CComPtr&amp;lt;IPersistFile&amp;gt; ipf;&#xA;    errorCheck = ipf.CoCreateInstance(CLSID_ShellLink, 0, CLSCTX_INPROC_SERVER);&#xA;    if (!SUCCEEDED(errorCheck))&#xA;    {&#xA;        throw _com_error(errorCheck);&#xA;    }&#xA;    errorCheck = ipf-&amp;gt;Load(source.c_str(), 0);&#xA;    ATL::CComPtr&amp;lt;IShellLink&amp;gt; shellLink;&#xA;    errorCheck = ipf-&amp;gt;QueryInterface(&amp;amp;shellLink);&#xA;    if (!SUCCEEDED(errorCheck))&#xA;    {&#xA;        throw _com_error(errorCheck);&#xA;    }&#xA;    errorCheck = shellLink-&amp;gt;Resolve(0, SLR_NO_UI);&#xA;    if (!SUCCEEDED(errorCheck))&#xA;    {&#xA;        throw _com_error(errorCheck);&#xA;    }&#xA;    errorCheck = shellLink-&amp;gt;GetPath(linkTarget, MAX_PATH, 0, SLGP_RAWPATH);&#xA;    if (!SUCCEEDED(errorCheck))&#xA;    {&#xA;        throw _com_error(errorCheck);&#xA;    }&#xA;    ExpandEnvironmentStringsW(linkTarget, expandedTarget, MAX_PATH);&#xA;    errorCheck = shellLink-&amp;gt;GetArguments(arguments, INFOTIPSIZE);&#xA;    if (SUCCEEDED(errorCheck))&#xA;    {&#xA;        return std::wstring(expandedTarget) + L&quot; &quot; + arguments;&#xA;    }&#xA;    else&#xA;    {&#xA;        return expandedTarget;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="22" LastEditorUserId="22222" LastEditDate="2015-07-19T00:51:04.853" LastActivityDate="2015-07-19T00:51:04.853" Title="Resolving a link" Tags="&lt;c++&gt;&lt;error-handling&gt;&lt;atl&gt;" AnswerCount="6" CommentCount="2" FavoriteCount="2" />
  <row Id="260" PostTypeId="2" ParentId="259" CreationDate="2011-01-27T07:40:39.877" Score="18" Body="&lt;p&gt;If I find my self writing the same thing over and over again I usually put it in a functiion somewhere. Even if that function in your case is as simple as this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;void check(HRESULT result) {&#xA;    if (FAILED(result)) {&#xA;        throw _com_error(result);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I think the code looks fairly straight forward if you reuse your error check code. I'm not familiar with the API that you are using, so I can't comment on if there is another way to use it that might result in cleaner code. &lt;/p&gt;&#xA;" OwnerUserId="589" LastEditorUserId="589" LastEditDate="2011-01-28T07:23:51.347" LastActivityDate="2011-01-28T07:23:51.347" CommentCount="1" />
  <row Id="261" PostTypeId="2" ParentId="259" CreationDate="2011-01-27T07:41:45.250" Score="55" Body="&lt;p&gt;Personally, I'd write a simple function:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;void ThrowOnFail( HRESULT hrcode )&#xA;{&#xA;    if (FAILED(hrcode))&#xA;        throw _com_error(hrcode);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then the function calls become:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;ThrowOnFail( ipf.CoCreateInstance(CLSID_ShellLink, 0, CLSCTX_INPROC_SERVER) );&#xA;ThrowOnFail( ipf-&amp;gt;Load(source.c_str(), 0) );&#xA;ATL::CComPtr&amp;lt;IShellLink&amp;gt; shellLink;&#xA;ThrowOnFail( ipf-&amp;gt;QueryInterface(&amp;amp;shellLink) );&#xA;ThrowOnFail( shellLink-&amp;gt;Resolve(0, SLR_NO_UI) );&#xA;ThrowOnFail( shellLink-&amp;gt;GetPath(linkTarget, MAX_PATH, 0, SLGP_RAWPATH) );&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Incidentally, you missed a check for &lt;code&gt;errorCheck&lt;/code&gt; after &lt;code&gt;Load&lt;/code&gt;. This becomes easier to spot with a check function.&lt;/p&gt;&#xA;" OwnerUserId="72" LastEditorUserId="72" LastEditDate="2013-06-03T12:12:15.730" LastActivityDate="2013-06-03T12:12:15.730" CommentCount="4" />
  <row Id="262" PostTypeId="2" ParentId="259" CreationDate="2011-01-27T07:42:57.910" Score="6" Body="&lt;p&gt;At least when using DirectX, I use a macro.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#define D3DCALL(a) { auto __ = a; if (FAILED(__)) DXTrace(__FILE__, __LINE__, __, WIDEN(#a), TRUE); }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You could get fancier and use a type with an operator=(HRESULT) to make the check.&lt;/p&gt;&#xA;" OwnerUserId="62" LastActivityDate="2011-01-27T07:42:57.910" CommentCount="3" />
  <row Id="263" PostTypeId="2" ParentId="226" CreationDate="2011-01-27T08:06:57.033" Score="7" Body="&lt;p&gt;In addition to what's already been said, I would:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;Mark the stringstream as public.  This won't affect most uses of your code, and can already be hacked around with a custom manipulator to get at the &quot;internal&quot; stream object, but it will enable those that need to access the internal stream (such as to avoid the string copy inherent in the stringstream interface), and know the specifics of their implementation that allow what they want, to do so.  Of course, 0x move semantics allay much of this need, but are still Not Quite Here Yet™.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Check the stream before returning the string; if it's in a failed state, throw an exception (or at least log the condition somewhere before returning a string).  This is unlikely to occur for most uses, but if it does happen, you'll be glad you found out the stream is failed rather than screw with formatting while wondering why &quot;it just won't work&quot;.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Regarding double-assignment, there's no assignment at all.  The sequence points should be mostly what people expect, but, exactly, it looks like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;some_function(((Formatter() &amp;lt;&amp;lt; expr_a) &amp;lt;&amp;lt; expr_b) &amp;lt;&amp;lt; expr_c);&#xA;//                          1          2          3&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The operators order it as if it was function calls, so that:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Formatter() and expr_a both occur before the insertion marked 1.&lt;/li&gt;&#xA;&lt;li&gt;The above, plus insertion 1, plus expr_b happen before insertion 2.&lt;/li&gt;&#xA;&lt;li&gt;The above, plus insertion 2, plus expr_c happen before insertion 3.&lt;/li&gt;&#xA;&lt;li&gt;Note this only limits in one direction: expr_c can happen after expr_a and before Formatter(), for example.&lt;/li&gt;&#xA;&lt;li&gt;Naturally, all of the above plus the string conversion occur before calling some_function.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;To add to the discussion on temporaries, all of the temporaries created are in the expression:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;some_function(Formatter() &amp;lt;&amp;lt; make_a_temp() &amp;lt;&amp;lt; &quot;etc.&quot;)&#xA;//            one temp       another temp     and so on&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;They will not be destroyed until the end of the full expression containing that some_function call, which means not only will the string be passed to some_function, but some_function will have already returned by that time.  (Or an exception will be thrown and they will be destroyed while unwinding, etc.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In order to handle &lt;a href=&quot;http://codepad.org/BIqNQyea&quot;&gt;all manipulators&lt;/a&gt;, such as std::endl, &lt;a href=&quot;http://codepad.org/NqXFei2o&quot;&gt;add&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;struct Formatter {&#xA;  Formatter&amp;amp; operator&amp;lt;&amp;lt;(std::ios_base&amp;amp; (*manip)(std::ios_base&amp;amp;)) {&#xA;    ss_ &amp;lt;&amp;lt; manip;&#xA;    return *this;&#xA;  }&#xA;  Formatter&amp;amp; operator&amp;lt;&amp;lt;(std::ios&amp;amp; (*manip)(std::ios&amp;amp;)) {&#xA;    ss_ &amp;lt;&amp;lt; manip;&#xA;    return *this;&#xA;  }&#xA;  Formatter&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; (*manip)(std::ostream&amp;amp;)) {&#xA;    ss_ &amp;lt;&amp;lt; manip;&#xA;    return *this;&#xA;  }&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I've used this pattern several times to wrap streams, and it's very handy in that you can use it inline (as you do) or create a Formatter variable for more complex manipulation (think a loop inserting into the stream based on a condition, etc.).  Though the latter case is only important when the wrapper does more than you have it do here. :)&lt;/p&gt;&#xA;" OwnerUserId="590" LastEditorUserId="590" LastEditDate="2011-01-27T08:23:23.790" LastActivityDate="2011-01-27T08:23:23.790" CommentCount="2" />
  <row Id="265" PostTypeId="2" ParentId="259" CreationDate="2011-01-27T08:14:40.007" Score="1" Body="&lt;p&gt;Error checks are not all the same.&#xA;sometimes you act upon special returned HResults. sometimes there is an ELSE.&#xA;sometime you want to log the error,sometime you don't..&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also - although highly unlikely to be relevant  in the com/atl world - calling a function has it's performance costs.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;so I prefer using if after the call, rather than calling a function.&#xA;How much do you save ? typing 10 chars ?&lt;/p&gt;&#xA;" OwnerUserId="597" LastActivityDate="2011-01-27T08:14:40.007" CommentCount="4" />
  <row Id="266" PostTypeId="2" ParentId="142" CreationDate="2011-01-27T09:41:53.407" Score="6" Body="&lt;pre&gt;&lt;code&gt;dirname = os.path.dirname&#xA;basename = os.path.basename&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This can be written as:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;from os.path import dirname, basename&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The from..import will check that os.path is imported (and import it if not), but is otherwise identical.  I find it more clear than repeating the names – especially when you get to three or more.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;filenames = [basename(f) for f in files if f and basename(f)]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This can be simplified, as basename on an empty string gives an empty string:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;filenames = filter(None, (basename(f) for f in files))&#xA;# or&#xA;filenames = [x for x in (basename(f) for f in files) if x]&#xA;# or&#xA;filenames = [x for x in map(basename, files) if x]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="590" LastActivityDate="2011-01-27T09:41:53.407" CommentCount="0" />
  <row Id="267" PostTypeId="2" ParentId="7" CreationDate="2011-01-27T10:22:13.827" Score="4" Body="&lt;p&gt;Regarding the use of a &lt;code&gt;main()&lt;/code&gt; function.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;One important reason for using a construct like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if __name__ == '__main__':&#xA;    main()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Is to keep the module importable and in turn much more reusable. I can't really reuse modules that runs all sorts of code when I import them. By having a main() function, as above, I can import the module and reuse relevant parts of it. Perhaps even by running the &lt;code&gt;main()&lt;/code&gt; function at my convenience.&lt;/p&gt;&#xA;" OwnerUserId="589" LastActivityDate="2011-01-27T10:22:13.827" CommentCount="0" />
  <row Id="269" PostTypeId="2" ParentId="145" CreationDate="2011-01-27T13:16:41.520" Score="6" Body="&lt;p&gt;You could get rid of the &lt;code&gt;GOTO&lt;/code&gt; statements by using labelled loops with &lt;code&gt;EXIT&lt;/code&gt; and &lt;code&gt;CYCLE&lt;/code&gt; statements.  These allow you to do the sort of flow control that you've used the &lt;code&gt;GOTO&lt;/code&gt;s for, but don't permit the less desirable features, such as computed &lt;code&gt;GOTO&lt;/code&gt;s.  Using these newer Fortran features also gives you a clearer idea of the flow control at the point at which the branching occurs.  E.g., &lt;code&gt;CYCLE&lt;/code&gt; or &lt;code&gt;EXIT&lt;/code&gt; statements send you respectively further up or down the source code, and a well chosen label may indicate what the branching is trying to achieve.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Another suggestion, although this is more of a personal preference, is to avoid the potentially endless &lt;code&gt;DO WHILE(1 == 1)&lt;/code&gt; loop by using a normal &lt;code&gt;DO&lt;/code&gt; loop with a large upper limit and adding warning message if that limit is reached before the end of file is encountered.  Plenty of people might find that overly fussy though.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Example code showing these two points:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;PROGRAM so_goto&#xA;&#xA;  IMPLICIT NONE&#xA;&#xA;  INTEGER,PARAMETER :: line_max = 100000&#xA;&#xA;  INTEGER :: i, ios, line_length&#xA;  CHARACTER( len=2048 ) :: line&#xA;&#xA;  OPEN(UNIT=10,FILE=&quot;so_goto.txt&quot;,ACTION=&quot;read&quot;)&#xA;&#xA;  fread: DO i=1,line_max&#xA;    READ(UNIT=10,FMT='(A)',IOSTAT=ios) line&#xA;    IF( ios &amp;lt; 0 ) EXIT fread&#xA;    line_length = LEN_TRIM(line)&#xA;    IF( line_length == 0 ) CYCLE fread&#xA;&#xA;    IF( i == line_max ) THEN&#xA;      print*,&quot;BTW, you've hit your read limit before the end of the file.&quot;&#xA;    ENDIF&#xA;  ENDDO fread&#xA;  CLOSE(10)&#xA;&#xA;END PROGRAM so_goto&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerDisplayName="user633" LastEditorDisplayName="user633" LastEditDate="2011-01-27T14:07:04.040" LastActivityDate="2011-01-27T14:07:04.040" CommentCount="2" />
  <row Id="270" PostTypeId="2" ParentId="159" CreationDate="2011-01-27T13:26:03.990" Score="3" Body="&lt;p&gt;As Sinetris mentioned, YAML has support for loading an instance of Regexp from a string.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;require 'yaml'&#xA;YAML.load('!ruby/regexp /abc/ix')&#xA;# =&amp;gt; /abc/ix&#xA;YAML.load('!ruby/regexp /abc/ix').class&#xA;# =&amp;gt; Regexp &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://apidock.com/ruby/Regexp/yaml_new/class&quot; rel=&quot;nofollow&quot;&gt;http://apidock.com/ruby/Regexp/yaml_new/class&lt;/a&gt;&lt;/p&gt;&#xA;" OwnerUserId="705" LastActivityDate="2011-01-27T13:26:03.990" CommentCount="0" />
  <row Id="271" PostTypeId="2" ParentId="239" CreationDate="2011-01-27T13:39:23.010" Score="1" Body="&lt;p&gt;Looking through the code, one of the no-brainers for me that jump out immediately is the the separation of the profile anchor and image. The overlay effect is important, obviously, but this can be achieved much more cleanly with a bit of CSS elbow grease: &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;a {&#xA;    background: #fff;&#xA;    display: block;&#xA;    height: 128px;&#xA;    width: 128px;&#xA;}&#xA;&#xA;a img:hover {&#xA;    opacity: 0.9;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;sup&gt;See: &lt;a href=&quot;http://www.jsfiddle.net/yijiang/Tv7AP/&quot; rel=&quot;nofollow&quot;&gt;http://www.jsfiddle.net/yijiang/Tv7AP/&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Looking at the code, it &lt;em&gt;seems like&lt;/em&gt; the only reason why you have a &lt;code&gt;div#navigation &amp;gt; a&lt;/code&gt; structure is for the background 'shadow'. If that is the case, you can easily get rid of the outer &lt;code&gt;div&lt;/code&gt; by using either &lt;code&gt;box-shadow&lt;/code&gt; or a 1px wide background image repeated along the y axis with some padding: &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;nav {&#xA;    -moz-box-shadow: 0 3px 0 rgba(0, 0, 0, 0.3), 0 -3px 0 rgba(0, 0, 0, 0.3);&#xA;    -webkit-box-shadow: 0 3px 0 rgba(0, 0, 0, 0.3), 0 -3px 0 rgba(0, 0, 0, 0.3);&#xA;    box-shadow: 0 3px 0 rgba(0, 0, 0, 0.3), 0 -3px 0 rgba(0, 0, 0, 0.3);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Additionally, seeing &lt;code&gt;li class=&quot;right&quot;&lt;/code&gt; makes me slightly sad, but seeing &lt;code&gt;li class=&quot;left&quot;&lt;/code&gt; makes me sadder still - since the &lt;em&gt;only&lt;/em&gt; reason you're using the &lt;code&gt;left&lt;/code&gt; class is to avoid double borders (the right class is to give the profile section a bit more space, apparently), you can really using only one class:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;nav ul li {&#xA;    border-right: 4px solid #052C4F;&#xA;}&#xA;&#xA;nav ul li.right {&#xA;    border-right: 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="697" LastActivityDate="2011-01-27T13:39:23.010" CommentCount="4" />
  <row Id="272" PostTypeId="2" ParentId="259" CreationDate="2011-01-27T13:59:01.980" Score="1" Body="&lt;p&gt;I think you can do much of the same by using &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/h31ekh7e.aspx&quot; rel=&quot;nofollow&quot;&gt;Compiler com support&lt;/a&gt; here is an example.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#import &quot;CLSID:lnkfile&quot; //use the clsid of the ShellLink class.&#xA;&#xA;IPersistFilePtr ptr = IPersistFilePtr.CreateInstance(...);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;_com_ptr_t::CreateInstance()&lt;/code&gt; will throw an exception (of type &lt;code&gt;_com_error&lt;/code&gt; if the call fails)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;All other ifs in your code can be replaced by using the smart pointers generated by #import. I know I am a little skimpy on details but it has been a long time since I have touched COM.&lt;/p&gt;&#xA;" OwnerUserId="712" LastActivityDate="2011-01-27T13:59:01.980" CommentCount="1" />
  <row Id="273" PostTypeId="2" ParentId="92" CreationDate="2011-01-27T14:00:43.447" Score="3" Body="&lt;p&gt;WHERE NOT EXISTS is not fast SQL.  How about a union of the two selects, inside a select distinct?  I haven't got a postgresql instance to test this on, but maybe something like this:&#xA;INSERT INTO nodes (node, geom, geom)&#xA;SELECT DISTINCT ON (node), geom1, geom2&#xA;FROM&#xA;  (SELECT source AS node,&#xA;          geography( ST_Transform(geom_source,4326)) AS geom1,&#xA;          geom_source AS geom2&#xA;     FROM view_topo&#xA;UNION&#xA;  SELECT target AS node,&#xA;         geography( ST_Transform(geom_target,4326)) AS geom1,&#xA;         geom_target AS geom2&#xA;    FROM view_topo)&lt;/p&gt;&#xA;" OwnerDisplayName="user722" LastActivityDate="2011-01-27T14:00:43.447" CommentCount="2" />
  <row Id="274" PostTypeId="2" ParentId="182" CreationDate="2011-01-27T14:15:31.787" Score="2" Body="&lt;p&gt;This looks really weird:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    var sourceFiles = list&#xA;        .SelectMany(current =&amp;gt; current.getInvocations()&#xA;                            .Select(invocation =&amp;gt; new {current = (SourceFile) null, invocation}))&#xA;        .ToList() //This ensures that getInvocations is only called once for each sourcefile&#xA;        .GroupBy(x =&amp;gt; x.current, x =&amp;gt; x.invocation);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Why do you need to create a property &lt;code&gt;current&lt;/code&gt; with null value and then group by it? Am I missing something?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also if you do not use &lt;code&gt;current&lt;/code&gt; variable from &lt;code&gt;SelectMany&lt;/code&gt; lambda in &lt;code&gt;Select&lt;/code&gt; statement then I think it is better to reduce nesting and pull &lt;code&gt;Select&lt;/code&gt; out from &lt;code&gt;SelectMany&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    var sourceFiles = list&#xA;        .SelectMany(current =&amp;gt; current.getInvocations())&#xA;        .Select(invocation =&amp;gt; new {current = (SourceFile) null, invocation})&#xA;        .ToList() //This ensures that getInvocations is only called once for each sourcefile&#xA;        .GroupBy(x =&amp;gt; x.current, x =&amp;gt; x.invocation);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Your code looks wrong to me (regarding grouping by null value). And if it wrong how can we improve it's readability?&lt;/p&gt;&#xA;" OwnerUserId="645" LastActivityDate="2011-01-27T14:15:31.787" CommentCount="3" />
  <row Id="275" PostTypeId="2" ParentId="2" CreationDate="2011-01-27T14:37:09.013" Score="5" Body="&lt;p&gt;Using a generator is also possible :&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;print sum(n for n in range(1000) if n % 3 == 0 or n % 5 == 0)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note that intent is not really clear here. For shared code, I would prefer something like&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def euler001(limit):&#xA;    return sum(n for n in range(limit) if n % 3 == 0 or n % 5 == 0)&#xA;&#xA;print euler001(1000)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerDisplayName="user740" LastActivityDate="2011-01-27T14:37:09.013" CommentCount="0" />
  <row Id="276" PostTypeId="1" CreationDate="2011-01-27T14:52:33.480" Score="20" ViewCount="11406" Body="&lt;p&gt;I'm trying to design a well defined yet simple interface for the unit of work and repository patterns. My UoW's are exposed to services and services then &quot;get repositories&quot; that it needs to query. I know returning &lt;code&gt;IQueryable&amp;lt;T&amp;gt;&lt;/code&gt; for repositories is a religious war. Because repositories are only exposed to the service, all queries are performed inside the service and therefore I can test the queries. Is there anything I should change for these interfaces? All criticisms are greatly appreciated!&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public interface IUnitOfWork : IDisposable&#xA;{&#xA;    bool IsActive { get; }&#xA;&#xA;    bool WasCommitted { get; }&#xA;&#xA;    /// &amp;lt;summary&amp;gt;&#xA;    /// Commits all changes made on the unit of work.&#xA;    /// &amp;lt;/summary&amp;gt;&#xA;    void Commit();&#xA;&#xA;    bool WasRolledBack { get; }&#xA;&#xA;    /// &amp;lt;summary&amp;gt;&#xA;    /// Rolls back all changes made on the unit of work.&#xA;    /// &amp;lt;/summary&amp;gt;&#xA;    void Rollback();&#xA;&#xA;    /// &amp;lt;summary&amp;gt;&#xA;    /// Returns an instance of an entity with the specified key that is attached to the unit of work without&#xA;    /// loading the entity from a repository.&#xA;    /// &amp;lt;/summary&amp;gt;&#xA;    /// &amp;lt;param name=&quot;id&quot;&amp;gt;&amp;lt;/param&amp;gt;&#xA;    /// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&#xA;    T Load&amp;lt;T&amp;gt;(int id)&#xA;        where T : class;&#xA;&#xA;    void Attach&amp;lt;T&amp;gt;(T entity)&#xA;        where T : class, IIdentifiable;&#xA;&#xA;    void Detach&amp;lt;T&amp;gt;(T entity)&#xA;        where T : class;&#xA;&#xA;    IRepository&amp;lt;T&amp;gt; GetRepository&amp;lt;T&amp;gt;()&#xA;        where T : class;&#xA;}&#xA;&#xA;public interface IRepository&amp;lt;T&amp;gt;&#xA;    where T : class&#xA;{&#xA;&#xA;    IUnitOfWork UnitOfWork { get; }&#xA;&#xA;    void Add(T entity);&#xA;&#xA;    void Remove(T entity);&#xA;&#xA;    /// &amp;lt;summary&amp;gt;&#xA;    /// Returns an instance of an entity with the specified key that is attached to the unit of work by loading&#xA;    /// the entity from the repository.&#xA;    /// &amp;lt;/summary&amp;gt;&#xA;    /// &amp;lt;param name=&quot;id&quot;&amp;gt;&amp;lt;/param&amp;gt;&#xA;    /// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&#xA;    T Get(int id);&#xA;&#xA;    IQueryable&amp;lt;T&amp;gt; All();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="731" LastActivityDate="2012-06-15T07:10:17.927" Title="Interface for unit of work pattern and repository pattern" Tags="&lt;c#&gt;&lt;design-patterns&gt;" AnswerCount="4" CommentCount="0" FavoriteCount="15" />
  <row Id="277" PostTypeId="2" ParentId="12" CreationDate="2011-01-27T14:57:07.827" Score="12" Body="&lt;p&gt;Personally I think your going the wrong way about things, you can easily pass in a query string into the &lt;code&gt;select&lt;/code&gt; method and set the 2nd param to true to bypass backticks.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So the output would place the sub query string within the main query select.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I would do something along the lines of:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class MyModel extends Model&#xA;{&#xA;    public function getRows()&#xA;    {&#xA;        //Create a subquery and render it to a stirng&#xA;        $sub = $this-&amp;gt;db-&amp;gt;select('number')-&amp;gt;from('numbers')-&amp;gt;where('numberID', 2)-&amp;gt;_compile_select();&#xA;&#xA;        //Clear the data from the CI Arrays&#xA;        $this-&amp;gt;db-&amp;gt;_reset_select();&#xA;&#xA;        //Build the main query passing in the sub-query and disabling backticks&#xA;        $this-&amp;gt;db-&amp;gt;select(&quot;word,(&quot; . $sub . &quot;)&quot;, false)-&amp;gt;where('wordID', 3);&#xA;&#xA;        //Get the results&#xA;        $result = $this-&amp;gt;get(&quot;words&quot;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Sources:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;@ &lt;a href=&quot;https://bitbucket.org/ellislab/codeigniter/src/b84189dcdfe3/system/database/DB_active_rec.php#cl-1693&quot;&gt;_compile_select()&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;@ &lt;a href=&quot;https://bitbucket.org/ellislab/codeigniter/src/b84189dcdfe3/system/database/DB_active_rec.php#cl-2022&quot;&gt;_reset_select()&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Firstly let me just state that the code above may not be fully working as i have not test machine a.t.m, but I do know that this is possible and you do not need all the extra logic specified.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It seems pretty simple to me without creating new &lt;code&gt;$db&lt;/code&gt;'s.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I also would recommend you encapsulate the logic above into a class so you can pass the object's around and make life simpler as the above is a &lt;strong&gt;POC&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;h1&gt;Concept:&lt;/h1&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class InnerQuery extends CI_DB_active_record&#xA;{&#xA;    public function __construct()&#xA;    {   &#xA;    }&#xA;&#xA;    public function __call($method,$params = array())&#xA;    {&#xA;        //Remove methods that modify the database&#xA;        switch(strtolower($method))&#xA;        {&#xA;             case 'get':&#xA;             case 'count_all_results':&#xA;             case 'get_where':&#xA;                 trigger_error(&quot;Cannot use {$method} in InnerQuery&quot;);&#xA;             break;&#xA;        }&#xA;        return $this;&#xA;    }&#xA;&#xA;    public function compile()&#xA;    {&#xA;        return &quot;(&quot; . $this-&amp;gt;_compile_select() . &quot;)&quot;;&#xA;    }&#xA;&#xA;    public function __tostring()&#xA;    {&#xA;        return $this-&amp;gt;compile();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Ok so the above class extends the same object as &lt;code&gt;$this-&amp;gt;db&lt;/code&gt; in your controller, so you can use all the methods to build a query such as&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$this-&amp;gt;InnerQuery-&amp;gt;select(&quot;item as item_key&quot;)-&amp;gt;from(&quot;inner_table&quot;)-&amp;gt;where(&quot;foo&quot;,&quot;zed&quot;);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You should disable the parent methods that change the database or run any queries as this is only used to build a select string.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;so you should in thoery be able to do:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$this-&amp;gt;db-&amp;gt;select(&quot;word&quot;)-&amp;gt;where('wordID', 3);&#xA;$this-&amp;gt;db-&amp;gt;select($this-&amp;gt;InnerQuery,false);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;which would use the DB class to build your query and can just be passed into the outer select and the &lt;code&gt;__tostring&lt;/code&gt; will return the &lt;code&gt;(SELECT ...)&lt;/code&gt; with braces and pass it into the main query.&lt;/p&gt;&#xA;" OwnerUserId="95" LastEditorUserId="95" LastEditDate="2011-01-27T20:37:30.240" LastActivityDate="2011-01-27T20:37:30.240" CommentCount="4" />
  <row Id="278" PostTypeId="1" AcceptedAnswerId="330" CreationDate="2011-01-27T15:08:44.323" Score="13" ViewCount="385" Body="&lt;p&gt;I've got a flat array of &amp;lt; 1000 items and I need to find the indices of a smaller tuple/array within the array.  The tuple to find can be a varying length (generally between 2 and 5 items, order is important).   &lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is my initial naive implementation.  My main concerns are:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;This seems like a CS 101 problem, so I'm pretty sure I'm overdoing it.  &lt;/li&gt;&#xA;&lt;li&gt;Readability.  I can break this down into smaller methods, but it's essentially a utility function in a much larger class.  I guess I could extract it into its own class, but that feels like overkill as well.  As-is, it's just too long for me to grok the whole thing in one pass.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public int[] findIndices(final Object[] toSearch, final Object[] toFind) &#xA;{&#xA;    Object first = toFind[0];&#xA;&#xA;    List&amp;lt;Integer&amp;gt; possibleStartIndices = new ArrayList&amp;lt;Integer&amp;gt;();&#xA;    int keyListSize = toFind.length;&#xA;    for (int i = 0; i &amp;lt;= toSearch.length - keyListSize; i++) &#xA;    {&#xA;        if (first.equals(toSearch[i])) &#xA;        {&#xA;            possibleStartIndices.add(i);&#xA;        }&#xA;    }&#xA;&#xA;    int[] indices = new int[0];&#xA;    for (int startIndex : possibleStartIndices) &#xA;    {&#xA;        int endIndex = startIndex + keyListSize;&#xA;        Object[] possibleMatch = Arrays.copyOfRange(toSearch, startIndex, endIndex);&#xA;        if (Arrays.equals(toFind, possibleMatch)) {&#xA;            indices = toIndexArray(startIndex, endIndex);&#xA;            break;&#xA;        }&#xA;    }&#xA;    return indices;&#xA;}&#xA;&#xA;private int[] toIndexArray(final int startIndex, final int endIndex) &#xA;{&#xA;    int[] indices = new int[endIndex - startIndex];&#xA;    for (int i = 0; i &amp;lt; indices.length; i++)&#xA;        indices[i] = startIndex + i;&#xA;&#xA;    return indices;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="256" LastEditorUserId="22222" LastEditDate="2013-12-23T02:31:20.837" LastActivityDate="2013-12-23T02:31:20.837" Title="Finding subtuple in larger collection?" Tags="&lt;java&gt;&lt;array&gt;&lt;search&gt;" AnswerCount="4" CommentCount="4" />
  <row Id="279" PostTypeId="2" ParentId="278" CreationDate="2011-01-27T15:21:18.510" Score="4" Body="&lt;p&gt;As a quick tip, I would suggest you skip the step of finding possible start indexes.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Instead, as you are already iterating over the whole list to find possible start indexes, then why don't you check that index right away when you find it? Would be something like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public int[] findIndices(final Object[] toSearch, final Object[] toFind) &#xA;{&#xA;    Object first = toFind[0];&#xA;&#xA;    int keyListSize = toFind.length;&#xA;    for (int startIndex = 0; startIndex &amp;lt;= toSearch.length - keyListSize; startIndex++) &#xA;    {&#xA;        if (first.equals(toSearch[startIndex])) &#xA;        {&#xA;            int endIndex = startIndex + keyListSize;&#xA;            Object[] possibleMatch = Arrays.copyOfRange(toSearch, startIndex, endIndex);&#xA;            if (Arrays.equals(toFind, possibleMatch)) {&#xA;                return toIndexArray(startIndex, endIndex);&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    return new int[0];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="707" LastActivityDate="2011-01-27T15:21:18.510" CommentCount="1" />
  <row Id="280" PostTypeId="2" ParentId="2" CreationDate="2011-01-27T15:27:51.710" Score="33" Body="&lt;p&gt;The sum 3+6+9+12+...+999 = 3(1+2+3+...+333) = 3 (n(n+1))/2 for n = 333. And 333 = 1000/3, where &quot;/&quot; is integral arithmetic.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also, note that multiples of 15 are counted twice.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def sum_factors_of_n_below_k(k, n):&#xA;    m = (k-1) // n&#xA;    return n * m * (m+1) // 2&#xA;&#xA;def solution_01():&#xA;    return (sum_factors_of_n_below_k(1000, 3) + &#xA;            sum_factors_of_n_below_k(1000, 5) - &#xA;            sum_factors_of_n_below_k(1000, 15))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerDisplayName="user767" LastEditorUserId="9875" LastEditDate="2012-01-12T16:09:38.763" LastActivityDate="2012-01-12T16:09:38.763" CommentCount="1" />
  <row Id="281" PostTypeId="1" AcceptedAnswerId="331" CreationDate="2011-01-27T15:45:58.250" Score="9" ViewCount="701" Body="&lt;p&gt;Similar piece of code to that I recently posted as:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://codereview.stackexchange.com/questions/259/the-same-if-block-over-and-over-again-oh-my&quot;&gt;Resolving a link&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I have another piece of code which cannot be as easily extracted out into a method:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#define THROW_LAST_WINDOWS_ERROR()\&#xA;    WindowsApi::Exception::Throw(::GetLastError(), __FILE__,  __LINE__)&#xA;&#xA;#define THROW_MANUAL_WINDOWS_ERROR(x)\&#xA;    WindowsApi::Exception::Throw(x, __FILE__,  __LINE__)&#xA;&#xA;Process CreateNormalProcess(&#xA;    ProcessSnapshot *parent,&#xA;    const UNICODE_STRING&amp;amp; name, &#xA;    const unsigned __int32 pid,&#xA;    const std::vector&amp;lt;ToolHelpThread&amp;gt;&amp;amp; threads&#xA;    )&#xA;{&#xA;    std::wstring nameStr(name.Buffer, name.Length/sizeof(wchar_t));&#xA;    std::wstring commandLine;&#xA;    std::wstring mainModulePath;&#xA;    std::wstring error;&#xA;    std::vector&amp;lt;Module&amp;gt; modules;&#xA;    try&#xA;    {&#xA;        using WindowsApi::Dll::NtDll;&#xA;        using WindowsApi::AutoArray;&#xA;        HANDLE hProc = OpenProcess(&#xA;            PROCESS_VM_READ | PROCESS_QUERY_INFORMATION, FALSE,&#xA;            pid);&#xA;        if (hProc == 0)&#xA;        {&#xA;            THROW_LAST_WINDOWS_ERROR();&#xA;        }&#xA;&#xA;        //Populate the process environment block&#xA;        NtDll ntDll;&#xA;        PEB peb;&#xA;        AutoArray procInfoBuf = ntDll.NtQueryInformationProcess(&#xA;            ProcessBasicInformation,&#xA;            hProc,&#xA;            sizeof(PROCESS_BASIC_INFORMATION)&#xA;            );&#xA;        BOOL rpmError = ReadProcessMemory(&#xA;            hProc,&#xA;            procInfoBuf.GetAs&amp;lt;PROCESS_BASIC_INFORMATION&amp;gt;()-&amp;gt;PebBaseAddress,&#xA;            &amp;amp;peb,&#xA;            sizeof(peb),&#xA;            0);&#xA;        if (rpmError == 0)&#xA;        {&#xA;            THROW_LAST_WINDOWS_ERROR();&#xA;        }&#xA;&#xA;        RTL_USER_PROCESS_PARAMETERS procParameters;&#xA;        rpmError = ReadProcessMemory(hProc,&#xA;            peb.ProcessParameters,&#xA;            &amp;amp;procParameters,&#xA;            sizeof(procParameters),&#xA;            0);&#xA;        if (rpmError == 0)&#xA;        {&#xA;            THROW_LAST_WINDOWS_ERROR();&#xA;        }&#xA;&#xA;        commandLine.assign(ReadRemoteUnicodeString(hProc,&#xA;            procParameters.CommandLine));&#xA;        mainModulePath.assign(ReadRemoteUnicodeString(hProc,&#xA;            procParameters.ImagePathName));&#xA;&#xA;        PEB_LDR_DATA ldrData;&#xA;        rpmError = ReadProcessMemory(hProc,&#xA;            peb.Ldr,&#xA;            static_cast&amp;lt;void *&amp;gt;(&amp;amp;ldrData),&#xA;            sizeof(PEB_LDR_DATA),&#xA;            0);&#xA;        if (rpmError == 0)&#xA;        {&#xA;            THROW_LAST_WINDOWS_ERROR();&#xA;        }&#xA;&#xA;        void * endPointer = static_cast&amp;lt;void *&amp;gt;&#xA;            (reinterpret_cast&amp;lt;char *&amp;gt;(peb.Ldr) + (reinterpret_cast&amp;lt;char *&amp;gt;(&amp;amp;ldrData.InLoadOrderModuleList) - reinterpret_cast&amp;lt;char *&amp;gt;(&amp;amp;ldrData)));&#xA;        void * currentListEntry = ldrData.InLoadOrderModuleList.Flink;&#xA;        while (currentListEntry != endPointer)&#xA;        {&#xA;            LDR_MODULE loaderModule;&#xA;            rpmError = ReadProcessMemory(&#xA;                hProc,&#xA;                currentListEntry,&#xA;                &amp;amp;loaderModule,&#xA;                sizeof(loaderModule),&#xA;                0);&#xA;            if (rpmError == 0)&#xA;            {&#xA;                THROW_LAST_WINDOWS_ERROR();&#xA;            }&#xA;            std::wstring moduleName = ReadRemoteUnicodeString(hProc, loaderModule.FullDllName);&#xA;            modules.push_back(Module(&#xA;                moduleName,&#xA;                loaderModule.BaseAddress,&#xA;                loaderModule.SizeOfImage&#xA;                ));&#xA;            currentListEntry = loaderModule.InLoadOrderModuleList.Flink;&#xA;        }&#xA;&#xA;        CloseHandle(hProc);&#xA;    }&#xA;    catch (const ErrorAccessDeniedException&amp;amp;)&#xA;    {&#xA;        error.assign(L&quot;ERROR: Could not access additional information because access &quot;&#xA;            L&quot;was denied while attempting to open the process. Are you admin? Do you &quot;&#xA;            L&quot;have SeDebugPrivilege?&quot;);&#xA;    }&#xA;    catch (const ErrorInvalidParameterException&amp;amp;)&#xA;    {&#xA;        error.assign(L&quot;ERROR: The process terminated before additional information &quot;&#xA;            L&quot;could be extracted&quot;);&#xA;    }&#xA;    catch (const ErrorPartialCopyException&amp;amp;)&#xA;    {&#xA;        error.assign(L&quot;ERROR: Couldn't copy a data structure from this process. Either &quot;&#xA;            L&quot;the process terminated before information extraction, or you are running &quot;&#xA;            L&quot;the 32 bit version of pevFind on a 64 bit machine.&quot;);&#xA;    }&#xA;&#xA;    if (!error.empty())&#xA;    {&#xA;        if (nameStr.empty())&#xA;        {&#xA;            nameStr = error;&#xA;        }&#xA;        if (commandLine.empty())&#xA;        {&#xA;            commandLine = error;&#xA;        }&#xA;        if (mainModulePath.empty())&#xA;        {&#xA;            mainModulePath = error;&#xA;        }&#xA;    }&#xA;&#xA;    return Process(&#xA;        parent,&#xA;        pid,&#xA;        nameStr, &#xA;        commandLine,&#xA;        mainModulePath,&#xA;        threads,&#xA;        modules);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The problem here is twofold:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;I can't extract out the duplicated if blocks into a method, because it's necessary that they embed the &lt;code&gt;__FILE__&lt;/code&gt; and &lt;code&gt;__LINE__&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;I can't put the conditional check into a macro, because the controlled method spans multiple lines:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;MYMACRO(&#xA;    Function(&#xA;    Call,&#xA;    Spanning,&#xA;    Multiple,&#xA;    Lines));&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;doesn't seem to expand correctly.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;" OwnerUserId="22" LastEditorUserId="22222" LastEditDate="2015-08-04T19:30:08.030" LastActivityDate="2015-08-04T19:30:08.030" Title="Resolving a link - follow-up" Tags="&lt;c++&gt;&lt;macros&gt;" AnswerCount="5" CommentCount="2" FavoriteCount="1" />
  <row Id="282" PostTypeId="2" ParentId="79" CreationDate="2011-01-27T16:07:20.607" Score="13" Body="&lt;p&gt;If you are using .NET 4.0, you can take advantage of the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd642331.aspx&quot;&gt;System.Lazy&lt;/a&gt; class. It ensures the instance is created only once.&lt;/p&gt;&#xA;" OwnerUserId="781" LastActivityDate="2011-01-27T16:07:20.607" CommentCount="2" />
  <row Id="283" PostTypeId="1" AcceptedAnswerId="285" CreationDate="2011-01-27T16:07:55.520" Score="17" ViewCount="11443" Body="&lt;pre&gt;&lt;code&gt;void removeForbiddenChar(string* s)&#xA;{&#xA;    string::iterator it;&#xA;&#xA;    for (it = s-&amp;gt;begin() ; it &amp;lt; s-&amp;gt;end() ; ++it){&#xA;        switch(*it){&#xA;        case '/':case '\\':case ':':case '?':case '&quot;':case '&amp;lt;':case '&amp;gt;':case '|':&#xA;            *it = ' ';&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I used this function to remove a string that has any of the following character: \, /, :, ?, &quot;, &amp;lt;, &gt;, |. This is for a file's name. This program runs fine. It simply change a character of the string to a blank when the respective character is the forbidden character. However, I have a feeling against this use of switch statement. I simply exploit the case syntax here, but this, somehow nags me. I just don't like it. Anybody else got a better suggestion of a better implementation in this case?&lt;/p&gt;&#xA;" OwnerUserId="530" LastActivityDate="2011-05-06T23:28:05.300" Title="Function for removing forbidden characters" Tags="&lt;c++&gt;&lt;strings&gt;" AnswerCount="6" CommentCount="5" FavoriteCount="1" />
  <row Id="284" PostTypeId="2" ParentId="148" CreationDate="2011-01-27T16:08:25.733" Score="5" Body="&lt;p&gt;idealmachine's advice is pretty sound.&#xA;One more minor criticism, using if's to set boolean values is a bit redundant.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if(e.which == 17) { isCtrl = false; }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You can rewrite that a bit more elegantly as&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;isCtrl = e.which != 17;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="782" LastActivityDate="2011-01-27T16:08:25.733" CommentCount="0" />
  <row Id="285" PostTypeId="2" ParentId="283" CreationDate="2011-01-27T16:14:58.407" Score="18" Body="&lt;p&gt;Declare a string containing the illegal characters: &lt;code&gt;&quot;\\/:?&quot;&amp;lt;&amp;gt;|&quot;&lt;/code&gt;. All you need to do is check if the char is in the array, so use a native function for that, or write a method &lt;code&gt;CharInString(char* needle, string* haystack)&lt;/code&gt; which loops through the contents of the provided haystack to check if the needle is inside it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Your loop should end up looking like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;string illegalChars = &quot;\\/:?\&quot;&amp;lt;&amp;gt;|&quot;&#xA;for (it = s-&amp;gt;begin() ; it &amp;lt; s-&amp;gt;end() ; ++it){&#xA;    bool found = illegalChars.find(*it) != string::npos;&#xA;    if(found){&#xA;        *it = ' ';&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It's more maintainable and readable. You can tell if you've duplicated a character quite easily and since you can do it with &lt;em&gt;any&lt;/em&gt; target string and &lt;em&gt;any&lt;/em&gt; string of illegalChars you've just created for yourself a generic &lt;code&gt;RemoveIllegalChars(string* targetString, string* illegalChars)&lt;/code&gt; method usable anywhere in your program.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;sub&gt;I may be using those pointers wrong. My C++fu is weak... for now.&lt;/sub&gt;&lt;/p&gt;&#xA;" OwnerUserId="109" LastEditorUserId="109" LastEditDate="2011-01-27T18:00:01.130" LastActivityDate="2011-01-27T18:00:01.130" CommentCount="3" />
  <row Id="286" PostTypeId="1" AcceptedAnswerId="304" CreationDate="2011-01-27T16:21:45.617" Score="3" ViewCount="606" Body="&lt;p&gt;This is some of the code I have:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;[window setLevel:kCGScreenSaverWindowLevel];&#xA;[window setOpaque:NO];&#xA;[window setStyleMask:0];&#xA;[window setBackgroundColor:[NSColor colorWithCalibratedWhite:0.0 alpha:0.3]];&#xA;[window setAlphaValue:0];&#xA;&#xA;[window setFrame:[window frameRectForContentRect:[[window screen] frame]] display:YES animate:YES];&#xA;&#xA;[window makeKeyAndOrderFront:self];&#xA;[[window animator] setAlphaValue:1.0];&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I was just wondering if there was any way to compact it, all of those commands to my window. Any ways to improve it too?&lt;/p&gt;&#xA;" OwnerUserId="790" LastEditorUserId="9357" LastEditDate="2016-03-24T19:14:10.783" LastActivityDate="2016-03-24T19:14:10.783" Title="Initializing a window in Cocoa" Tags="&lt;objective-c&gt;&lt;cocoa&gt;" AnswerCount="3" CommentCount="3" FavoriteCount="0" />
  <row Id="287" PostTypeId="2" ParentId="283" CreationDate="2011-01-27T16:29:40.010" Score="16" Body="&lt;p&gt;you could always use transform&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;algorithm&amp;gt;&#xA;#include &amp;lt;string&amp;gt;&#xA;#include &amp;lt;iostream&amp;gt;&#xA;&#xA;const std::string forbiddenChars = &quot;\\/:?\&quot;&amp;lt;&amp;gt;|&quot;;&#xA;static char ClearForbidden(char toCheck)&#xA;{&#xA;    if(forbiddenChars.find(toCheck) != string::npos)&#xA;    {&#xA;         return ' ';&#xA;    }&#xA;&#xA;    return toCheck;&#xA;}&#xA;&#xA;int main()&#xA;{&#xA;    std::string str = &quot;EXAMPLE:&quot;;&#xA;    std::transform(str.begin(), str.end(), str.begin(), ClearForbidden);&#xA;    std::cout &amp;lt;&amp;lt; str &amp;lt;&amp;lt; std::endl;&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="803" LastEditorUserId="803" LastEditDate="2011-01-28T16:14:14.327" LastActivityDate="2011-01-28T16:14:14.327" CommentCount="2" />
  <row Id="288" PostTypeId="2" ParentId="283" CreationDate="2011-01-27T16:30:26.797" Score="5" Body="&lt;p&gt;One thing that I would change about your function (in addition to Jonathan's recommendation of using a string to store the forbidden characters), is the argument type of &lt;code&gt;removeForbiddenChar&lt;/code&gt; to &lt;code&gt;string&amp;amp;&lt;/code&gt; instead of &lt;code&gt;string*&lt;/code&gt;. It is generally considered good practice in C++ to use references over pointers where possible (see for example &lt;a href=&quot;http://www.parashift.com/c++-faq-lite/references.html#faq-8.6&quot; rel=&quot;nofollow&quot;&gt;this entry&lt;/a&gt; in the C++ faq-lite).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;One further, minor cosmetic change I'd recommend is renaming the function to &lt;code&gt;removeForbiddenChars&lt;/code&gt; (plural) as that is more descriptive of what it does.&lt;/p&gt;&#xA;" OwnerUserId="128" LastActivityDate="2011-01-27T16:30:26.797" CommentCount="1" />
  <row Id="289" PostTypeId="2" ParentId="48" CreationDate="2011-01-27T16:41:24.583" Score="4" Body="&lt;p&gt;aaaah, a CodeIgniter fella :-)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'm just working on a CI project myself and already implemented some of the &lt;strong&gt;optimization&lt;/strong&gt; you could use for your CMS as well... so let's have a look:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;p&gt;for as little &lt;strong&gt;overhead&lt;/strong&gt; as possible, try implementing &lt;strong&gt;lazy-loading&lt;/strong&gt; of your files (libraries, models...)&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;for &lt;strong&gt;caching&lt;/strong&gt; purposes, you can use KHCache - a library that allows you to cache parts of the website instead of full page&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;instead of always doing $this-&gt;db-&gt;..., you can create a &lt;strong&gt;helper function&lt;/strong&gt;, for instance &quot;function _db()&quot; and then simply do _db()-&gt;where...&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;also, you can optionally create a helper function to give you the &lt;strong&gt;results array&lt;/strong&gt; automatically, so -&gt;result_array() will not be neccessary anymore: function res() {} ... $query = res(_db()-&gt;where...);&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;now, for the &lt;strong&gt;code&lt;/strong&gt; :-)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$query = &#xA;    $db&#xA;      -&amp;gt;where('page_status', 1)&#xA;      -&amp;gt;where('page_slug', strtolower($page_slug))&#xA;      -&amp;gt;get('pages')&#xA;      -&amp;gt;result_array();&#xA;&#xA;$page_id = $query[0]['id'];&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;here, you seem to be selecting &lt;strong&gt;all values from DB&lt;/strong&gt;, while in need of a single first ID - try limiting number of results or this will create overhead in your database&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$db-&amp;gt;where...-&amp;gt;limit(1);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;the second query could probably use a &lt;strong&gt;LEFT JOIN&lt;/strong&gt; instead of a regular JOIN, although I leave it to you to decide (the JOIN approach might not list everything you need)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$db-select...-&amp;gt;join('pages_modules lpm', 'moduleid = lpm.module_id', 'left')&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;I guess that's all... just remember to put correct &lt;strong&gt;indexes&lt;/strong&gt; on your SQL fields and use the &lt;strong&gt;EXPLAIN&lt;/strong&gt; statement to check for bottlenecks&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;good luck!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;" OwnerUserId="777" LastEditorUserId="777" LastEditDate="2011-01-28T20:36:54.077" LastActivityDate="2011-01-28T20:36:54.077" CommentCount="5" />
  <row Id="292" PostTypeId="2" ParentId="131" CreationDate="2011-01-27T16:51:16.763" Score="2" Body="&lt;p&gt;I also agree that this code violates LoD. The caller is tying the implementation down to a model of nested objects.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Adding a bunch of filter methods also doesn't seem like the right idea, but this is an opportunity in disguise. You really want a general filtering method that can take a &quot;verb&quot; to apply to the matching elements. Or, alternatively, a filter method that takes a predicate and returns just the collection of matching elements.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is one of the useful things about LoD. It helps you uncover places where you are operating at a low level of abstraction, and raise the level. In this case, once you introduce general predicates or verbs, you'll be very likely to find other places to use the same idiom. What begins as a local cleanup can uncover a very general mode of expression.&lt;/p&gt;&#xA;" OwnerUserId="806" LastActivityDate="2011-01-27T16:51:16.763" CommentCount="0" />
  <row Id="293" PostTypeId="2" ParentId="164" CreationDate="2011-01-27T16:57:45.853" Score="2" Body="&lt;p&gt;You have basically created a &lt;strong&gt;procedural implementation&lt;/strong&gt; of your own mechanism to &lt;strong&gt;serialize&lt;/strong&gt; a game object to and from a file wich is ok if you want to be in full controll of the file format. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Have you looked at the concept of &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/7ay27kt9%28v=VS.80%29.aspx&quot; rel=&quot;nofollow&quot;&gt;dotnet-serialisation&lt;/a&gt;? There you can see how &lt;strong&gt;declarative&lt;/strong&gt; style could minimize the code to write by attaching Attributes to the Game-Class and/or its properties.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There are implementatins for binary, xml and json&lt;/p&gt;&#xA;" OwnerUserId="796" LastActivityDate="2011-01-27T16:57:45.853" CommentCount="2" />
  <row Id="294" PostTypeId="1" AcceptedAnswerId="312" CreationDate="2011-01-27T16:58:46.913" Score="5" ViewCount="404" Body="&lt;p&gt;I have created this code for user error logging, and I am wondering if there is anything that can be improved. The point is that this error handler would ONLY catch user errors created in-code by trigger_error(), and would display, log, and/or email the error, depending on the config settings. The error logging class is loaded by an autoloader function. For production, all error levels would be set to 0, and the user error handler would never be set, and the class would never be loaded.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Config file:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; // user error display level (change for production)&#xA; define('LEV_USER_ERROR_DISPLAY_LEVEL', E_USER_ERROR);&#xA;&#xA; // user error logging level (change for production)&#xA; define('LEV_USER_ERROR_LOG_LEVEL', E_USER_ERROR | E_USER_WARNING | E_USER_NOTICE);&#xA;&#xA; // user error email alert level&#xA; define('LEV_USER_ERROR_EMAIL_LEVEL', 0);&#xA;&#xA; // user error email address list (e.g. 'someone1@somewhere.com, someone2@somewhere.com')&#xA; define('LEV_USER_ERROR_EMAIL_ADDRESSES', '');&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Init file:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;   // set user error handler&#xA;   if (LEV_USER_ERROR_LOG_LEVEL | LEV_USER_ERROR_DISPLAY_LEVEL | LEV_USER_ERROR_EMAIL_LEVEL) {&#xA;    set_error_handler('lev_user_error_handler::user_error_handler', LEV_USER_ERROR_LOG_LEVEL | LEV_USER_ERROR_DISPLAY_LEVEL | LEV_USER_ERROR_EMAIL_LEVEL);&#xA;   }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Error logging class file:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?php&#xA;&#xA; // user error handler&#xA; class lev_user_error_handler {&#xA;&#xA;  // user error handler&#xA;  public static function user_error_handler($error_level, $message, $file_name, $line_number) {&#xA;   if ((LEV_USER_ERROR_LOG_LEVEL | LEV_USER_ERROR_DISPLAY_LEVEL) == 0) return true;&#xA;   switch ($error_level) {&#xA;    case E_USER_ERROR:&#xA;     if (LEV_USER_ERROR_DISPLAY_LEVEL &amp;amp; E_USER_ERROR) {&#xA;      echo '[' . date('Y-m-d h:i:s') . '] User Level Error: &quot;' . $message . '&quot;, File: &quot;'.$file_name.'&quot;, Line: '.$line_number.'&amp;lt;br /&amp;gt;';&#xA;     }&#xA;     if (LEV_USER_ERROR_LOG_LEVEL &amp;amp; E_USER_ERROR) {&#xA;      error_log('[' . date('Y-m-d h:i:s') . '] User Error: &quot;' . $message . '&quot;, File: &quot;'.$file_name.'&quot;, Line: '.$line_number.', Request: &quot;' . $_SERVER['ORIG_PATH_INFO'] . &quot;\&quot;\n&quot;, 3, 'application/logs/user_error_log.txt');&#xA;     }&#xA;     if (LEV_USER_ERROR_EMAIL_LEVEL &amp;amp; E_USER_ERROR) {&#xA;      error_log('[' . date('Y-m-d h:i:s') . '] User Error: &quot;' . $message . '&quot;, File: &quot;'.$file_name.'&quot;, Line: '.$line_number.', Request: &quot;' . $_SERVER['ORIG_PATH_INFO'] . '&quot;', 1, LEV_USER_ERROR_EMAIL_ADDRESSES, 'From: no-reply@' . preg_replace('/^.+?\./i', '', $_SERVER['SERVER_NAME']));&#xA;     }&#xA;     die;&#xA;     break;&#xA;    case E_USER_WARNING:&#xA;     if (LEV_USER_ERROR_DISPLAY_LEVEL &amp;amp; E_USER_WARNING) {&#xA;      echo '[' . date('Y-m-d h:i:s') . '] User Level Warning: &quot;' . $message . '&quot;, File: &quot;'.$file_name.'&quot;, Line: '.$line_number.'&amp;lt;br /&amp;gt;';&#xA;     }&#xA;     if (LEV_USER_ERROR_LOG_LEVEL &amp;amp; E_USER_WARNING) {&#xA;      error_log('[' . date('Y-m-d h:i:s') . '] User Warning: &quot;' . $message . '&quot;, File: &quot;'.$file_name.'&quot;, Line: '.$line_number.', Request: &quot;' . $_SERVER['ORIG_PATH_INFO'] . &quot;\&quot;\n&quot;, 3, 'application/logs/user_error_log.txt');&#xA;     }&#xA;     if (LEV_USER_ERROR_EMAIL_LEVEL &amp;amp; E_USER_WARNING) {&#xA;      error_log('[' . date('Y-m-d h:i:s') . '] User Error: &quot;' . $message . '&quot;, File: &quot;'.$file_name.'&quot;, Line: '.$line_number.', Request: &quot;' . $_SERVER['ORIG_PATH_INFO'] . '&quot;', 1, LEV_USER_ERROR_EMAIL_ADDRESSES, 'From: no-reply@' . preg_replace('/^.+?\./i', '', $_SERVER['SERVER_NAME']));&#xA;     }&#xA;     break;&#xA;    case E_USER_NOTICE:&#xA;     if (LEV_USER_ERROR_DISPLAY_LEVEL &amp;amp; E_USER_NOTICE) {&#xA;      echo '[' . date('Y-m-d h:i:s') . '] User Level Notice: &quot;' . $message . '&quot;, File: &quot;'.$file_name.'&quot;, Line: '.$line_number.'&amp;lt;br /&amp;gt;';&#xA;     }&#xA;     if (LEV_USER_ERROR_LOG_LEVEL &amp;amp; E_USER_NOTICE) {&#xA;      error_log('[' . date('Y-m-d h:i:s') . '] User Notice: &quot;' . $message . '&quot;, File: &quot;'.$file_name.'&quot;, Line: '.$line_number.', Request: &quot;' . $_SERVER['ORIG_PATH_INFO'] . &quot;\&quot;\n&quot;, 3, 'application/logs/user_error_log.txt');&#xA;     }&#xA;     if (LEV_USER_ERROR_EMAIL_LEVEL &amp;amp; E_USER_NOTICE) {&#xA;      error_log('[' . date('Y-m-d h:i:s') . '] User Error: &quot;' . $message . '&quot;, File: &quot;'.$file_name.'&quot;, Line: '.$line_number.', Request: &quot;' . $_SERVER['ORIG_PATH_INFO'] . '&quot;', 1, LEV_USER_ERROR_EMAIL_ADDRESSES, 'From: no-reply@' . preg_replace('/^.+?\./i', '', $_SERVER['SERVER_NAME']));&#xA;     }&#xA;     break;&#xA;    default:&#xA;     // call PHP internal error handler&#xA;     return false;&#xA;   }&#xA;   // do not call PHP internal error handler&#xA;   return true;&#xA;  }&#xA; }&#xA;?&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="797" LastEditorUserId="49750" LastEditDate="2015-08-27T12:54:41.307" LastActivityDate="2015-08-27T12:54:41.307" Title="User error logging" Tags="&lt;php&gt;&lt;error-handling&gt;&lt;php5&gt;" AnswerCount="2" CommentCount="0" />
  <row Id="295" PostTypeId="2" ParentId="278" CreationDate="2011-01-27T17:11:17.220" Score="1" Body="&lt;p&gt;For &amp;lt;1000 items, unless checking each item is prohibitively expensive, I'd say Pablo has the right idea of just checking on the first pass. This eliminates O(n) from the algorithm. For a larger list, or where checking each item is expensive, something more complicated like a Boyer-Moore style algorithm like mtnygard suggests might be appropriate.&lt;/p&gt;&#xA;" OwnerUserId="820" LastActivityDate="2011-01-27T17:11:17.220" CommentCount="0" />
  <row Id="296" PostTypeId="1" CreationDate="2011-01-27T17:17:24.273" Score="14" ViewCount="1654" Body="&lt;p&gt;I've just started learning CSS/HTML a week ago and I made a quick site today. It looks pretty good, but I think that I reused/wrote some really messy CSS. This is because I haven't used the &lt;code&gt;float&lt;/code&gt; property in CSS too well, so I keep using &lt;code&gt;position:relative&lt;/code&gt; and &lt;code&gt;top&lt;/code&gt; to offset the &lt;code&gt;float&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;HTML:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&#xA;&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.1//EN&quot; &quot;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&quot;&amp;gt;&#xA;&amp;lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xml:lang=&quot;en&quot;&amp;gt;&#xA;&amp;lt;head&amp;gt;    &#xA;    &amp;lt;title&amp;gt;Kevin Li&amp;lt;/title&amp;gt;&#xA;    &amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/style.css&quot; /&amp;gt;&#xA;&amp;lt;/head&amp;gt;&#xA;&#xA;&amp;lt;body&amp;gt;&#xA;    &amp;lt;div id=&quot;wrapper&quot;&amp;gt;&#xA;        &amp;lt;div id=&quot;header&quot;&amp;gt;&#xA;            &amp;lt;h1&amp;gt;Kevin Li&amp;lt;/h1&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;&#xA;        &amp;lt;div id=&quot;links&quot;&amp;gt;&#xA;            &amp;lt;ul&amp;gt;&#xA;                &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;    &#xA;                &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Biography&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;    &#xA;                &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;    &#xA;                &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Blog&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;    &#xA;                &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Images&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;    &#xA;                &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Contact Me&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xA;            &amp;lt;/ul&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;&#xA;        &amp;lt;div class=&quot;sidebar_left&quot;&amp;gt;&#xA;            Lorem ipsum dolor sit amet...&amp;lt;br /&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;&#xA;        &amp;lt;div id=&quot;post&quot;&amp;gt;&#xA;            &amp;lt;b&amp;gt;Introduction&amp;lt;/b&amp;gt;&amp;lt;br /&amp;gt;&#xA;            &amp;lt;i&amp;gt;Thursday, January 27, 2011&amp;lt;/i&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;&#xA;        &amp;lt;br /&amp;gt;&#xA;&#xA;        &amp;lt;div id=&quot;content&quot;&amp;gt;&#xA;            &amp;lt;img id=&quot;tree&quot; src=&quot;images/c2_i6.png&quot; /&amp;gt;   &#xA;            &amp;lt;p&amp;gt;&#xA;                Lorem ipsum dolor sit amet...&amp;lt;br /&amp;gt;&#xA;                &amp;lt;br /&amp;gt;&#xA;                &amp;lt;img id=&quot;blackwhite&quot; src=&quot;images/c3_i7.png&quot; /&amp;gt; Ut venenatis diam nunc...&amp;lt;br /&amp;gt;&#xA;                &amp;lt;br /&amp;gt;&#xA;            &amp;lt;/p&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;&#xA;        &amp;lt;div id=&quot;footer&quot;&amp;gt;&#xA;            &amp;lt;b&amp;gt;Copyright 2010 Kevin Li&amp;lt;/b&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;&amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;CSS:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/* General Elements* /&#xA;body {&#xA;    background: #53777a;&#xA;    font-family: Garamond, Baskerville, &quot;Baskerville Old Face&quot;, &quot;Hoefler Text&quot;, &quot;Times New Roman&quot;, serif;      &#xA;}&#xA;&#xA;h1 {&#xA;    font-size: 28pt;       &#xA;}&#xA;&#xA;h2 {}&#xA;&#xA;p {}&#xA;&#xA;a:link {&#xA;    color: black;&#xA;    text-decoration: none;&#xA;}&#xA;&#xA;a:visited {&#xA;    color: purple;&#xA;    text-decoration: none;&#xA;}&#xA;a:hover {&#xA;    color: green;&#xA;    text-decoration: underline;&#xA;}&#xA;a:active {&#xA;    color:yellow;&#xA;    text-decoration: none;&#xA;}&#xA;&#xA;/* Curvy Shapes */&#xA; #wrapper, #footer {&#xA;    -moz-border-radius-bottomright: 50px;&#xA;        -moz-border-radius-topleft: 50px;&#xA;       -moz-border-radius-topright: 50px;&#xA;     -moz-border-radius-bottomleft: 50px;&#xA;        border-bottom-right-radius: 50px;&#xA;            border-top-left-radius: 50px;&#xA;           border-top-right-radius: 50px;&#xA;         border-bottom-left-radius: 50px;&#xA;}&#xA;&#xA;#links {&#xA;    -moz-border-radius-bottomright: 50px;&#xA;     -moz-border-radius-bottomleft: 50px;&#xA;        border-bottom-right-radius: 50px;&#xA;         border-bottom-left-radius: 50px;&#xA;}&#xA;&#xA;#header {    &#xA;     -moz-border-radius-topleft: 50px;&#xA;    -moz-border-radius-topright: 50px;&#xA;         border-top-left-radius: 50px;&#xA;        border-top-right-radius: 50px;    &#xA;}&#xA;&#xA;/* Structure */&#xA;#wrapper {&#xA;    width: 900px;&#xA;    margin: 0 auto;&#xA;    margin-top: 30px;&#xA;    overflow: auto;&#xA;    background: #E0E4CC;&#xA;    padding: 20px;&#xA;    -moz-border-radius-bottomright: 50px;&#xA;        -moz-border-radius-topleft: 50px;&#xA;       -moz-border-radius-topright: 50px;&#xA;     -moz-border-radius-bottomleft: 50px;&#xA;        border-bottom-right-radius: 50px;&#xA;            border-top-left-radius: 50px;&#xA;           border-top-right-radius: 50px;&#xA;         border-bottom-left-radius: 50px;       &#xA;}&#xA;&#xA;#header {&#xA;    text-align: center;&#xA;    background: #ECD078;&#xA;    padding: 4px;&#xA;}&#xA;&#xA;#links {&#xA;    width: 900px;&#xA;    background-color: #A7DBD8;&#xA;    position: relative;&#xA;    top: -20px;&#xA;    text-align: center;&#xA;}&#xA;&#xA;#links ul {&#xA;    list-style-type: none;&#xA;    padding: 5px;&#xA;}&#xA;&#xA;#links li{&#xA;    display: inline;&#xA;    font-size: 14pt;&#xA;    padding: 20px;&#xA;}&#xA;&#xA;.sidebar_left {&#xA;    float: left;&#xA;    width: 180px;&#xA;    margin-left: 10px;&#xA;    position: relative;&#xA;    top: -10px;&#xA;    text-align: justify;&#xA;    line-height: 150%;&#xA;}&#xA;&#xA;#post {&#xA;    float: right;&#xA;    width: 680px;&#xA;    margin-left: 0px;&#xA;    margin-right: 10px;&#xA;    position: relative;&#xA;    top: -25px;&#xA;    text-align: justify;&#xA;    line-height: 150%;      &#xA;}&#xA;&#xA;#post b {&#xA;    font-size: 18pt;&#xA;    text-decoration: underline;&#xA;}&#xA;&#xA;#content {&#xA;    float: right;&#xA;    width: 680px;&#xA;    margin-left: 0px;&#xA;    margin-right: 10px;&#xA;    position: relative;&#xA;    top: -25px;&#xA;    text-align: justify;&#xA;    text-indent: 25px;&#xA;    line-height: 150%;&#xA;}&#xA;&#xA;#social {&#xA;    float: right;&#xA;}&#xA;&#xA;#footer {&#xA;    width: 890px;&#xA;    background: #A7DBD8;&#xA;    float: left;&#xA;    padding: 5px;&#xA;    text-align: right;&#xA;}&#xA;&#xA;#footer b {&#xA;    margin-left: 10px;&#xA;}&#xA;&#xA;/* End Structure */&#xA;&#xA;/*images*/&#xA;.navimg {&#xA;    width: 2px;&#xA;    height: 20px;&#xA;}&#xA;&#xA;#tree {&#xA;    width: 175px;&#xA;    height: 200px;&#xA;    float: right;&#xA;    margin-left: 20px;&#xA;    margin-top: 24px;&#xA;}&#xA;&#xA;#blackwhite {&#xA;    width: 200px;&#xA;    height: 125px;&#xA;    float: left;&#xA;    margin-right: 20px;&#xA;    margin-top: 10px;       &#xA;}&#xA;&#xA;#quickshot {&#xA;    width: 125px;&#xA;    height: 100px;&#xA;    display: block;&#xA;    margin-left: auto;&#xA;    margin-right: auto;        &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;By the way, I know it doesn't validate. I am working on that now.&lt;/p&gt;&#xA;" OwnerUserId="830" LastEditorUserId="35408" LastEditDate="2014-01-24T18:17:55.923" LastActivityDate="2014-02-03T21:14:15.810" Title="Review website done after one week of learning HTML and CSS" Tags="&lt;html&gt;&lt;css&gt;" AnswerCount="7" CommentCount="7" FavoriteCount="4" />
  <row Id="299" PostTypeId="2" ParentId="7" CreationDate="2011-01-27T17:38:27.180" Score="3" Body="&lt;p&gt;Just in case you're not familiar with the generator technique being used above, here's the same function done in 3 ways, starting with something close to your original, then using a &lt;a href=&quot;http://docs.python.org/tutorial/datastructures.html#list-comprehensions&quot; rel=&quot;nofollow&quot;&gt;list comprehension&lt;/a&gt;, and then using a &lt;a href=&quot;http://docs.python.org/tutorial/classes.html#generator-expressions&quot; rel=&quot;nofollow&quot;&gt;generator expression&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;# Finds sum of all multiples of 3 and 5 from 0 to 999 in various ways&#xA;&#xA;def find_multiples():&#xA;    numbers = []&#xA;    for i in range(0,1000):&#xA;        if  i%3 == 0 or i%5 == 0: numbers.append(i)&#xA;    return numbers&#xA;&#xA;def find_multiples_with_list_comprehension():&#xA;    return [i for i in range(0,1000) if  i%3 == 0 or i%5 == 0]&#xA;&#xA;def find_multiples_with_generator():&#xA;    return (i for i in range(0,1000) if  i%3 == 0 or i%5 == 0)&#xA;&#xA;if __name__ == '__main__':&#xA;    numbers1 = find_multiples()&#xA;    numbers2 = find_multiples_with_list_comprehension()&#xA;    numbers3 = list(find_multiples_with_generator())&#xA;    print numbers1 == numbers2 == numbers3&#xA;    print sum(numbers1)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;find_multiples()&lt;/code&gt; is pretty close to what you were doing, but slightly more Pythonic. It avoids the &lt;code&gt;global&lt;/code&gt; (icky!) and returns a list.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Generator expressions (contained in parentheses, like a tuple) are more efficient than list comprehensions (contained in square brackets, like a list), but don't actually return a list of values -- they return an object that can be iterated through. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;So that's why I called &lt;code&gt;list()&lt;/code&gt; on &lt;code&gt;find_multiples_with_generator()&lt;/code&gt;, which is actually sort of pointless, since you could also simply do &lt;code&gt;sum(find_multiples_with_generator()&lt;/code&gt;, which is your ultimate goal here. I'm just trying to show you that generator expressions and list comprehensions look similar but behave differently. (Something that tripped me up early on.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The other answers here really solve the problem, I just thought it might be worth seeing these three approaches compared.&lt;/p&gt;&#xA;" OwnerUserId="824" LastActivityDate="2011-01-27T17:38:27.180" CommentCount="0" CommunityOwnedDate="2011-01-27T17:38:27.180" />
  <row Id="300" PostTypeId="1" AcceptedAnswerId="316" CreationDate="2011-01-27T17:43:18.330" Score="19" ViewCount="1563" Body="&lt;p&gt;I am in the process of learning Clojure. I am fairly new to functional programming and would like to know if my code smells or if there are any performance implications with my approach.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;; Returns the the given sequence with the given item appended to it.&#xA;(defn snoc [xs x] (concat xs [x]))&#xA;&#xA;; Returns the Fibonacci sequence up to the highest number less than max.&#xA;(defn fib [max] &#xA;  (loop [a 1, b 1, acc [1]] &#xA;    (if (&amp;gt; b max) &#xA;      acc&#xA;      (recur b (+ a b) (snoc acc b)))))&#xA;&#xA;; Project Euler Problem 2: Attempt A&#xA;(defn pe2a []&#xA;  (reduce +&#xA;    (filter even? (fib 4000000))))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;For &lt;a href=&quot;http://projecteuler.net/index.php?section=problems&amp;amp;id=2&quot;&gt;reference&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Each new term in the Fibonacci&#xA;  sequence is generated by adding the&#xA;  previous two terms. By starting with 1&#xA;  and 2, the first 10 terms will be:&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;By considering the terms in the&#xA;  Fibonacci sequence whose values do not&#xA;  exceed four million, find the sum of&#xA;  the even-valued terms.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;" OwnerUserId="8" LastEditorUserId="9357" LastEditDate="2013-12-22T22:22:00.313" LastActivityDate="2013-12-22T22:22:00.313" Title="Project Euler Problem 2 in Clojure" Tags="&lt;functional-programming&gt;&lt;project-euler&gt;&lt;clojure&gt;&lt;fibonacci-sequence&gt;" AnswerCount="3" CommentCount="1" FavoriteCount="3" />
  <row Id="302" PostTypeId="2" ParentId="276" CreationDate="2011-01-27T17:52:10.953" Score="0" Body="&lt;p&gt;Your interface breaks the &lt;a href=&quot;http://en.wikipedia.org/wiki/Law_of_Demeter&quot; rel=&quot;nofollow&quot;&gt;Law of Demeter&lt;/a&gt;.  Or said simply I cannot use &lt;code&gt;IUnitOfWork UnitOfWork { get; }&lt;/code&gt; on &lt;code&gt;IRespository&lt;/code&gt; without understanding &lt;code&gt;IUnitOfWork&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I would change IRespository too&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public interface IRepository&amp;lt;T&amp;gt;&#xA;    where T : class&#xA;{&#xA;&#xA;    bool IsActive { get; }&#xA;&#xA;    bool WasCommitted { get; }&#xA;&#xA;    /// &amp;lt;summary&amp;gt;&#xA;    /// Commits all changes made on the unit of work.&#xA;    /// &amp;lt;/summary&amp;gt;&#xA;    void Commit();&#xA;&#xA;    bool WasRolledBack { get; }&#xA;&#xA;    /// &amp;lt;summary&amp;gt;&#xA;    /// Rolls back all changes made on the unit of work.&#xA;    /// &amp;lt;/summary&amp;gt;&#xA;    void Rollback();&#xA;&#xA;    /// &amp;lt;summary&amp;gt;&#xA;    /// Returns an instance of an entity with the specified key that is attached to the unit of work without&#xA;    /// loading the entity from a repository.&#xA;    /// &amp;lt;/summary&amp;gt;&#xA;    /// &amp;lt;param name=&quot;id&quot;&amp;gt;&amp;lt;/param&amp;gt;&#xA;    /// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&#xA;    T Load&amp;lt;T&amp;gt;(int id)&#xA;        where T : class;&#xA;&#xA;    void Attach&amp;lt;T&amp;gt;(T entity)&#xA;        where T : class, IIdentifiable;&#xA;&#xA;    void Detach&amp;lt;T&amp;gt;(T entity)&#xA;        where T : class;&#xA;&#xA;    IRepository&amp;lt;T&amp;gt; GetRepository&amp;lt;T&amp;gt;()&#xA;        where T : class;&#xA;&#xA;    void Add(T entity);&#xA;&#xA;    void Remove(T entity);&#xA;&#xA;    /// &amp;lt;summary&amp;gt;&#xA;    /// Returns an instance of an entity with the specified key that is attached to the unit of work by loading&#xA;    /// the entity from the repository.&#xA;    /// &amp;lt;/summary&amp;gt;&#xA;    /// &amp;lt;param name=&quot;id&quot;&amp;gt;&amp;lt;/param&amp;gt;&#xA;    /// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&#xA;    T Get(int id);&#xA;&#xA;    IQueryable&amp;lt;T&amp;gt; All();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Notice how it is a copy of IUnitOfWork, is UnitOfWork really needed.  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;How did you create the interface?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is where you should do TDD.  Write the test first about what you want the code to do.  Then your interface should be created in order to accomplish the test.  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example if you call the method &lt;code&gt;Rollback();&lt;/code&gt; and cannot write a test were &lt;code&gt;WasRollbacked&lt;/code&gt; property was used, they you might not need the property.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Do not put in more than needed to any interface.  They interface becomes noise.  I would recommend reading &lt;a href=&quot;http://rads.stackoverflow.com/amzn/click/0132350882&quot; rel=&quot;nofollow&quot;&gt;Clean Code by Robert Martin&lt;/a&gt; to understand more of these ideas in a in depth way.&lt;/p&gt;&#xA;" OwnerUserId="841" LastActivityDate="2011-01-27T17:52:10.953" CommentCount="1" />
  <row Id="303" PostTypeId="2" ParentId="296" CreationDate="2011-01-27T17:53:49.703" Score="4" Body="&lt;p&gt;Your CSS doesn't handle what happens if the reader closes down the window to smaller than your planned size.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Test: resize window to less than 900px.&#xA;Results: Window is cut off.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This is a design issue, more than a coding issue.&lt;/p&gt;&#xA;" OwnerUserId="845" LastEditorUserId="845" LastEditDate="2011-01-27T18:01:11.443" LastActivityDate="2011-01-27T18:01:11.443" CommentCount="0" />
  <row Id="304" PostTypeId="2" ParentId="286" CreationDate="2011-01-27T17:57:47.047" Score="4" Body="&lt;p&gt;This is a highly readable style, and simple. You might be able to make a loop and run through the list in some fashion, but it's unlikely to actually lower complexity, just shift it around a bit.&lt;/p&gt;&#xA;" OwnerUserId="845" LastActivityDate="2011-01-27T17:57:47.047" CommentCount="2" />
  <row Id="305" PostTypeId="2" ParentId="296" CreationDate="2011-01-27T18:00:12.207" Score="1" Body="&lt;p&gt;I didn't look at your site, as I can't afford to click on random links right now.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;However, I add &lt;code&gt;overflow: hidden;&lt;/code&gt; to the parent element to make sure it wraps its immediate floated child elements. Take my example and try it with and with out the overflow.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;HTML:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&quot;page&quot;&amp;gt;&#xA;    &amp;lt;div id=&quot;main&quot;&amp;gt;main content&amp;lt;/div&amp;gt;&#xA;    &amp;lt;div id=&quot;side&quot;&amp;gt;side content&amp;lt;/div&amp;gt;&#xA;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;CSS:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;div#page{&#xA;  overflow: hidden;&#xA;  background-color: #ccc;&#xA;}&#xA;&#xA;div#main{&#xA;  float: left;&#xA;}&#xA;&#xA;div#side{&#xA;  float: right;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="8" LastActivityDate="2011-01-27T18:00:12.207" CommentCount="0" />
  <row Id="307" PostTypeId="2" ParentId="278" CreationDate="2011-01-27T18:08:04.960" Score="3" Body="&lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt; Original code is wrong. Added better below.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Something like this could do it in one pass (I think - I haven't checked it to death). Note that I only return the first index as the next ones can be calculated easily by just doing a new array i, i+1, ..., i+n-1 etc. Simpler (and slower) than Boyer Moore but still &lt;em&gt;O&lt;/em&gt;(n):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public static &amp;lt;T&amp;gt; int indexOf(final T[] target, final T[] candidate) {&#xA;&#xA;    for (int t = 0, i = 0; i &amp;lt; target.length; i++) {&#xA;        if (target[i].equals(candidate[t])) {&#xA;            t++;&#xA;            if (t == candidate.length) {&#xA;                return i-t+1;&#xA;            }&#xA;        } else {&#xA;            t = 0;&#xA;        }&#xA;    }&#xA;&#xA;    return -1;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Edit: This should work better, no?&lt;/strong&gt; It's not as clean and simple, but now I'm more confident that it's actually correct. What happens is that when we fail, we backtrack and restart. &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public static &amp;lt;T&amp;gt; int indexOf(final T[] target, final T[] candidate) {&#xA;    int t = 0, i = 0;    &#xA;    while (i &amp;lt; target.length)&#xA;    {&#xA;        if (target[i].equals(candidate[t])) {&#xA;            t++;&#xA;            if (t == candidate.length) {&#xA;                return i-t+1;&#xA;            }&#xA;        } else {&#xA;            i -= t;&#xA;            t = 0;&#xA;        }&#xA;        i++;&#xA;    }    &#xA;    return -1;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="851" LastEditorUserId="851" LastEditDate="2011-01-28T15:18:51.793" LastActivityDate="2011-01-28T15:18:51.793" CommentCount="3" />
  <row Id="308" PostTypeId="2" ParentId="164" CreationDate="2011-01-27T18:10:10.730" Score="2" Body="&lt;p&gt;You could also replace:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;StreamReader reader = new StreamReader(@&quot;D:\Games\Riot Games\League of Legends\air\logs\LolClient.20110121.213758.log&quot;);&#xA;var content = reader.ReadToEnd();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;with:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var content = File.ReadAllText(@&quot;D:\Games...log&quot;);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;ReadAllText&lt;/code&gt; method, as MSDN says: Opens a text file, reads all lines of the file into a string, and then closes the file.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Which is even shorter than &lt;code&gt;using&lt;/code&gt; block.&lt;/p&gt;&#xA;" OwnerUserId="201" LastActivityDate="2011-01-27T18:10:10.730" CommentCount="0" />
  <row Id="311" PostTypeId="1" CreationDate="2011-01-27T18:47:23.210" Score="3" ViewCount="633" Body="&lt;p&gt;I wrote a BST in C a while back and may use it at some point. &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; search_tree tree_make_empty( search_tree tree )&#xA; {&#xA;   if ( tree != NULL )&#xA;   {&#xA;       tree_make_empty( tree-&amp;gt;left );&#xA;       tree_make_empty( tree-&amp;gt;right );&#xA;       free( tree );&#xA;   }&#xA;   return NULL;&#xA; }&#xA;&#xA; tree_position tree_find( CHAR_DATA *target, search_tree tree )&#xA; {&#xA;     if ( tree == NULL )&#xA;       return NULL;&#xA;&#xA;     if ( target &amp;lt; tree-&amp;gt;hatedata-&amp;gt;target_char )&#xA;       return tree_find( target, tree-&amp;gt;left );&#xA;     else if ( target &amp;gt; tree-&amp;gt;hatedata-&amp;gt;target_char )&#xA;       return tree_find( target, tree-&amp;gt;right );&#xA;     else&#xA;       return tree;&#xA; }&#xA;&#xA; search_tree tree_insert( HATE_DATA *hatedata, search_tree tree )&#xA; {&#xA;     if ( tree == NULL )&#xA;     {&#xA;       tree = (HATE_NODE * ) malloc( sizeof( HATE_NODE ) );&#xA;&#xA;       if ( tree == NULL )&#xA;          bug( &quot;tree_insert: out of space!&quot; );&#xA;       else&#xA;       {&#xA;          tree-&amp;gt;hatedata = hatedata;&#xA;          tree-&amp;gt;left = tree-&amp;gt;right = NULL;&#xA;       }&#xA;     }&#xA;     else if ( hatedata-&amp;gt;target_char &amp;lt; tree-&amp;gt;hatedata-&amp;gt;target_char )&#xA;       tree-&amp;gt;left = tree_insert( hatedata, tree-&amp;gt;left );&#xA;     else if ( hatedata-&amp;gt;target_char &amp;gt; tree-&amp;gt;hatedata-&amp;gt;target_char )&#xA;          tree-&amp;gt;right = tree_insert( hatedata, tree-&amp;gt;right );&#xA;&#xA;     return tree;&#xA; }&#xA;&#xA; tree_position tree_find_min( search_tree tree )&#xA; {&#xA;    if ( tree == NULL )&#xA;       return NULL;&#xA;    else if ( tree-&amp;gt;left == NULL )&#xA;       return tree;&#xA;    else&#xA;       return tree_find_min( tree-&amp;gt;left );&#xA; }&#xA;&#xA; search_tree tree_delete( HATE_DATA *hatedata, search_tree tree )&#xA; {&#xA;    tree_position pos;&#xA;&#xA;    if ( tree == NULL )&#xA;       bug( &quot;tree_delete: not found&quot; );&#xA;    else if ( hatedata-&amp;gt;target_char &amp;lt; tree-&amp;gt;hatedata-&amp;gt;target_char )&#xA;       tree-&amp;gt;left = tree_delete( hatedata, tree-&amp;gt;left );&#xA;    else if ( hatedata-&amp;gt;target_char &amp;gt; tree-&amp;gt;hatedata-&amp;gt;target_char )&#xA;         tree-&amp;gt;right = tree_delete( hatedata, tree-&amp;gt;right );&#xA;    else if ( tree-&amp;gt;left &amp;amp;&amp;amp; tree-&amp;gt;right )&#xA;    {&#xA;       pos = tree_find_min( tree-&amp;gt;right );&#xA;       tree-&amp;gt;hatedata = pos-&amp;gt;hatedata;&#xA;       tree-&amp;gt;right = tree_delete( tree-&amp;gt;hatedata, tree-&amp;gt;right );&#xA;    }&#xA;    else&#xA;    {&#xA;       pos = tree;&#xA;       if ( tree-&amp;gt;left == NULL )&#xA;         tree = tree-&amp;gt;right;&#xA;       else if ( tree-&amp;gt;right == NULL )&#xA;         tree = tree-&amp;gt;left;&#xA;       free( pos );&#xA;    }&#xA;&#xA;    return tree;&#xA; }&#xA;&#xA; HATE_DATA *tree_retrieve( tree_position pos )&#xA; {&#xA;    return pos-&amp;gt;hatedata;&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;...&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; struct hate_data&#xA; {&#xA;    CHAR_DATA *target_char;&#xA;    int hate_amount;&#xA; };&#xA;&#xA; struct hate_node&#xA; {&#xA;    HATE_DATA *hatedata;&#xA;    search_tree left;&#xA;    search_tree right;&#xA; };&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;...&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;mob-&amp;gt;hatedata = tree_make_empty( NULL );&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Example use:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if ( IS_NPC(victim) )&#xA;{&#xA;     HATE_DATA *hatedata;&#xA;   tree_position P;&#xA;&#xA;   if( ( P = tree_find( ch, victim-&amp;gt;hatedata )) == NULL || tree_retrieve( P )-&amp;gt;target_char != ch )&#xA;   {&#xA;     int test;&#xA;     hatedata = (HATE_DATA * ) malloc( sizeof( HATE_DATA ) );&#xA;     hatedata-&amp;gt;target_char = ch;&#xA;     test = number_range( 1, 50 );&#xA;     hatedata-&amp;gt;hate_amount = test;&#xA;     victim-&amp;gt;hatedata = tree_insert( hatedata, victim-&amp;gt;hatedata );&#xA;     ch_printf( ch, &quot;It should now hate you for %d.\n\r&quot;, test );&#xA;   }&#xA;   else&#xA;   {&#xA;     hatedata = tree_retrieve(tree_find( ch, victim-&amp;gt;hatedata ));&#xA;     ch_printf(ch, &quot;You are already hated for %d!\n\r&quot;, hatedata-&amp;gt;hate_amount );&#xA;   }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Any suggestions? Look okay? Ways to optimize?&lt;/p&gt;&#xA;" OwnerUserId="877" LastActivityDate="2011-01-27T21:44:13.223" Title="How does this Binary Search Tree look?" Tags="&lt;optimization&gt;&lt;c&gt;" AnswerCount="3" CommentCount="2" FavoriteCount="1" />
  <row Id="312" PostTypeId="2" ParentId="294" CreationDate="2011-01-27T18:47:38.700" Score="3" Body="&lt;p&gt;Personally I think that working with 50% native and 50% your code does not work very well, because of things such as trigger_error does not allow custom bits to be sent.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;That being said if you named your class &lt;code&gt;Error&lt;/code&gt; and created it to be abstract that implements a logger interface (optional) you would be able to do more with it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Creating custom constants such as &lt;code&gt;LOG&lt;/code&gt;,&lt;code&gt;SHOW_ERROR&lt;/code&gt;,&lt;code&gt;SEND_MAIL&lt;/code&gt; combined with a custom static function would be a better option, as doing things such as:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Error::Trigger(&quot;Cannot divide by 0&quot;, Error::LOG | Error::SHOW_ERROR);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;makes more sense to have specific control over errors.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here's a small example how I would improve the above&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;abstract class Error&#xA;{&#xA;    public const LOG = 0;&#xA;    public const SEND_MAIL = 1;&#xA;    public const SHOW_ERROR = 2;&#xA;    /*...*/&#xA;&#xA;    public static function Monitor(){}; /*Used for set_error_handler*/&#xA;&#xA;    public static function Trigger($Message,$bits = Error::LOG | Error::SEND_MAIL,$Context = false)&#xA;    {&#xA;        if($bits &amp;amp; Error:LOG)&#xA;        {&#xA;             //Log it&#xA;        }&#xA;&#xA;        if($bits &amp;amp; Error:SEND_MAIL)&#xA;        {&#xA;             //Send it&#xA;        }&#xA;&#xA;        /*Lastly*/&#xA;        if($bits &amp;amp; Error:LOG)&#xA;        {&#xA;             //Show it&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;you would then bind the Monitor to the error_reportng and call the Error::Trigger depending on what type of error has been triggered, or you could extend the class and run the parent static method&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class ErrorHandler extends Error&#xA;{&#xA;    public fucntion Monitor(/*...*/)&#xA;    {&#xA;        parent::Trigger(/*...*/);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And allow your class to handle &lt;strong&gt;all&lt;/strong&gt; errors as you then have more control over the decision on what to do.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;you can then set the default error handling to a combination of options such as:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; define(&quot;DEFAULT_ERROR_HANDLING&quot;,Error:log | Error::SEND_MAIL);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;and change &lt;code&gt;$bits&lt;/code&gt; in the parameter section of trigger to &lt;code&gt;$bits = DEFAULT_ERROR_HANDLING&lt;/code&gt;&lt;/p&gt;&#xA;" OwnerUserId="95" LastEditorUserId="95" LastEditDate="2011-01-27T18:53:03.043" LastActivityDate="2011-01-27T18:53:03.043" CommentCount="2" />
  <row Id="313" PostTypeId="2" ParentId="294" CreationDate="2011-01-27T18:49:20.077" Score="1" Body="&lt;h2&gt;Preface:&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;I'm not going to talk about alternatives to trigger_error for now.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Edit: Someone else did, perfect ! :)&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;About the config:&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;I assume those settings are what you are using in development ? &lt;/p&gt;&#xA;&#xA;&lt;p&gt;If so: I'd like to advice against that. You should always produce at least E_NOTICE free code and only logging those errors to a file isn't going to help you achieve that.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Why ?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The E_NOTICE error you are going to see mostly is &lt;strong&gt;$asd is an undefined variable&lt;/strong&gt;. That will point you to errors in your code very quickly and you don't have to think about (&quot;why doesn't it work, i put the value into the function&quot;) or similar problems coming from typos. Maybe your IDE warns you about those but let php do it too.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Init:&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Usually an error handler isn't a static function. I'm not sure what php version will throw an E_STRICT warning.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also &lt;code&gt;&quot;class::function&quot;&lt;/code&gt; is not the best way to pass a callback. &lt;a href=&quot;http://de3.php.net/manual/en/language.pseudo-types.php#language.types.callback&quot; rel=&quot;nofollow&quot;&gt;(See here for php callbacks)&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;You might want to use &lt;code&gt;set_error_handler(&quot;class&quot;, &quot;function&quot;);&lt;/code&gt;. That help if you decide you don't want to use a static function but an object because it works the same way &lt;code&gt;set_error_handler($obj, &quot;function&quot;);&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;The handler:&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;You are repeating&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;'[' . date('Y-m-d h:i:s') . '] User Error: &quot;' . $message . '&quot;, File: &quot;'.$file_name.'&quot;, Line: '.$line_number.'&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;many times there. Put that into an extra method. It will help you if you want to change the logfile name or the date or something like that.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also it helps with the distinction you are already makeing betten the 2 log files.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Displaying errors ?&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;You should &lt;em&gt;never&lt;/em&gt; display errors in production. I'd use &lt;code&gt;ini_get(&quot;display_errors&quot;)&lt;/code&gt; to figure out how the server is configure and honor that at all costs.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;If you don't want the errors displayed in development (maybe many ajax calls ?)&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://getfirebug.com/&quot; rel=&quot;nofollow&quot;&gt;Look into firebug.&lt;/a&gt; It lets you see the errors if you got the firefox plugin installed without cluttering the pages output.&lt;/p&gt;&#xA;" OwnerUserId="113" LastEditorUserId="113" LastEditDate="2011-01-27T18:56:03.820" LastActivityDate="2011-01-27T18:56:03.820" CommentCount="2" />
  <row Id="314" PostTypeId="2" ParentId="281" CreationDate="2011-01-27T18:50:37.933" Score="1" Body="&lt;p&gt;This answer is not the best one, but you could create a new variable for each time you're assigning a value to rpmError and have one if statement where the last one is to check if any of them are equal to 0.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Note: This will not work if it is absolutely necessary that those errors are thrown before the next check.&lt;/p&gt;&#xA;" OwnerUserId="23" LastActivityDate="2011-01-27T18:50:37.933" CommentCount="1" />
  <row Id="315" PostTypeId="2" ParentId="9" CreationDate="2011-01-27T19:12:58.543" Score="7" Body="&lt;p&gt;I refactored it for you. I did all of this without testing, so there's likely a bunch of bugs and off-by-one errors. I also made some assumptions about the code that you didn't include. Now that the code's a lot smaller, it should be easier for you to find those bugs.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A couple of important points:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;p&gt;Recursion is a fundamental concept in programming. If you are a professional programmer, you absolutely must be comfortable with it, or you will never be able to deal with nested structures effectively.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;If you copy and paste, you're doing it wrong. Every time you hit Ctrl+C, a kitten dies. No no no.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;If you have variables named &lt;code&gt;something1&lt;/code&gt;, &lt;code&gt;something2&lt;/code&gt;, &lt;code&gt;something3&lt;/code&gt;, etc. &lt;em&gt;you're doing it wrong&lt;/em&gt;. At the very least, those should be an array.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;You had &lt;code&gt;depth&lt;/code&gt; as a &lt;code&gt;double&lt;/code&gt; but were comparing it to literal values other than zero. That's bad.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;Here you go:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private void update(int depth)&#xA;{&#xA;    Console.WriteLine(&quot;update with level &quot; + depth);&#xA;&#xA;    Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority.Normal, new Action(delegate()&#xA;    {&#xA;        List&amp;lt;Grid&amp;gt; grids = new List&amp;lt;Grid&amp;gt;();&#xA;&#xA;        Dependencies.Children.Clear();&#xA;&#xA;        Grid grid = MakeOuterGrid(grids, focus, e.Width, e.Height, depth);&#xA;&#xA;        List&amp;lt;SourceFile&amp;gt; list = focus.getInvocations();&#xA;&#xA;        for (int i = 1; i &amp;lt;= depth; i++)&#xA;        {&#xA;            int invocCount = CountInvocations(focus, i + 1);&#xA;            int counter = 0;&#xA;            MakeRecursiveGrids(grids, null, focus, i, invocCount, i, ref counter);&#xA;        }&#xA;&#xA;        foreach (Grid grid in grids)&#xA;        {&#xA;            Dependencies.Children.Add(grid);&#xA;            Contacts.AddPreviewContactDownHandler(grid, DownOnSourceFile);&#xA;        }&#xA;    }));&#xA;}&#xA;&#xA;void AdjustTop(int depth, int table) {&#xA;    int[][] depthTable = new int[][] {&#xA;        new int[] { 163, 108,  81,  65,  54,  46 },&#xA;        new int[] { 488, 324, 244, 195, 163, 139 },&#xA;        new int[] {  -1, 540, 406, 325, 271, 232 },&#xA;        new int[] {  -1,  -1, 569, 455, 379, 325 },&#xA;        new int[] {  -1,  -1,  -1, 585, 488, 418 },&#xA;        new int[] {  -1,  -1,  -1,  -1, 596, 511 },&#xA;    }&#xA;&#xA;    int[] depths = depthTable[table];&#xA;    if ((depth &amp;lt; depths.Length) &amp;amp;&amp;amp; (depths[depth - 1] != -1)) {&#xA;        Canvas.SetTop(depths[depth - 1]);&#xA;    }&#xA;}&#xA;&#xA;SizeChangedEventHandler UpdateBindings(Line line) {&#xA;    SizeChangedEventHandler act = (Object o, SizeChangedEventArgs args) =&amp;gt;&#xA;    {&#xA;        BindingOperations.GetBindingExpressionBase(line, Line.X1Property).UpdateTarget();&#xA;        BindingOperations.GetBindingExpressionBase(line, Line.Y1Property).UpdateTarget();&#xA;        BindingOperations.GetBindingExpressionBase(line, Line.X2Property).UpdateTarget();&#xA;        BindingOperations.GetBindingExpressionBase(line, Line.Y2Property).UpdateTarget();&#xA;    };&#xA;&#xA;    return act;&#xA;}&#xA;&#xA;int CountInvocations(SourceFile source, int depth)&#xA;{&#xA;    int count = 0;&#xA;&#xA;    if (depth &amp;gt; 0)&#xA;    {&#xA;        foreach (SourceFile inner in source.getInvocations())&#xA;        {&#xA;            count = count + CountInvocations(inner, depth - 1);&#xA;        }&#xA;    }&#xA;    else&#xA;    {&#xA;        count = source.Count;&#xA;    }&#xA;&#xA;    return count;&#xA;}&#xA;&#xA;Grid MakeGrid(List&amp;lt;Grid&amp;gt; grids, SourceFile source)&#xA;{&#xA;    Grid grid = new Grid();&#xA;    grid.Width = 50;&#xA;    grid.Height = 50;&#xA;    grid.Tag = source;&#xA;    source.setGrid(grid);&#xA;    grids.Add(grid);&#xA;&#xA;    Ellipse ellipse = new Ellipse();&#xA;    ellipse.Width = 50;&#xA;    ellipse.Height = 50;&#xA;    ellipse.Fill = Brushes.Red;&#xA;&#xA;    grid.Children.Add(ellipse);&#xA;&#xA;    return grids;&#xA;}&#xA;&#xA;void MakeRecursiveGrids(List&amp;lt;Grid&amp;gt; grids, SourceFile outer, SourceFile source,&#xA;    int maxDepth, int invocCount, int recurseDepth, ref int counter)&#xA;{&#xA;    if (recurseDepth &amp;gt; 0)&#xA;    {&#xA;        foreach (SourceFile inner in source)&#xA;        {&#xA;            MakeRecursiveGrids(grids, source, inner, maxDepth, invocCount,&#xA;                recurseDepth - 1, ref counter);&#xA;        }&#xA;    }&#xA;    else&#xA;    {&#xA;        MakeGrid(grids, outer, inner, depth, maxDepth, invocCount, counter);&#xA;        counter++;&#xA;    }&#xA;}&#xA;&#xA;Grid MakeGrid(List&amp;lt;Grid&amp;gt; grids, SourceFile outer, SourceFile inner,&#xA;    int depth, int[] depths, int invocCount, int counter)&#xA;{&#xA;    Grid grid = MakeGrid(grids, inner);&#xA;&#xA;    MakeViewbox(grid, grid.Width, grid.Height, inner.getName());&#xA;&#xA;    AdjustTop(depth, depths);&#xA;    Canvas.SetLeft(grid, counter * (1000 / (invocCount + 1)));&#xA;&#xA;    MakeLine(grids, grid, outer, inner);&#xA;&#xA;    return grid;&#xA;}&#xA;&#xA;Grid MakeOuterGrid(List&amp;lt;Grid&amp;gt; grids, SourceFile inner, int width, int height,&#xA;    int depth)&#xA;{&#xA;    Grid grid = MakeGrid(grids, inner);&#xA;&#xA;    MakeViewbox(grid, width, height, inner.getName());&#xA;&#xA;    AdjustTop(depth, 0);&#xA;    Canvas.SetLeft(grid, 500);&#xA;&#xA;    return grid;&#xA;}&#xA;&#xA;Binding MakeBinding(Object parameter, Grid grid)&#xA;{&#xA;    Binding binding = new Binding();&#xA;    binding.Path = new PropertyPath(parameter);&#xA;    binding.Converter = new MyConverter();&#xA;    binding.ConverterParameter = grid;&#xA;}&#xA;&#xA;void MakeLine(List&amp;lt;Grid&amp;gt; grids, Grid grid, SourceFile outer, SourceFile inner)&#xA;{&#xA;    Grid g2 = outer.getGrid();&#xA;&#xA;    Line line = new Line();&#xA;    line.Stroke = Brushes.Green;&#xA;    line.StrokeThickness = 10;&#xA;&#xA;    Binding x1 = MakeBinding(Canvas.LeftProperty, g2);&#xA;    Binding y1 = MakeBinding(Canvas.TopProperty, g2);&#xA;    Binding x2 = MakeBinding(Canvas.LeftProperty, grid);&#xA;    Binding y2 = MakeBinding(Canvas.TopProperty, grid);&#xA;&#xA;    Grid g = findGrid(grids, outer, inner);&#xA;    x1.Source = g;&#xA;    y1.Source = g;&#xA;    x2.Source = grid;&#xA;    y2.Source = grid;&#xA;&#xA;    line.SetBinding(Line.X1Property, x1);&#xA;    line.SetBinding(Line.Y1Property, y1);&#xA;    line.SetBinding(Line.X2Property, x2);&#xA;    line.SetBinding(Line.Y2Property, y2);&#xA;&#xA;    Dependencies.Children.Add(line);&#xA;&#xA;    Contacts.AddPreviewContactDownHandler(line, OnLineDown);&#xA;&#xA;    line.Tag = new Call(outer, inner);&#xA;&#xA;    SizeChangedEventHandler act = UpdateBindings(line);&#xA;    inner.getGrid().SizeChanged += act;&#xA;    g1.SizeChanged += act;&#xA;}&#xA;&#xA;void MakeViewBox(Grid grid, int width, int height, string text)&#xA;{&#xA;    Viewbox box = new Viewbox();&#xA;    box.Width = width;&#xA;    box.Height = height;&#xA;&#xA;    TextBox textBox = new TextBox();&#xA;    textBox.Text = text;&#xA;&#xA;    box.Child = textBox;&#xA;&#xA;    grid.Children.Add(box);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="816" LastActivityDate="2011-01-27T19:12:58.543" CommentCount="0" />
  <row Id="316" PostTypeId="2" ParentId="300" CreationDate="2011-01-27T19:15:11.683" Score="11" Body="&lt;pre&gt;&lt;code&gt;(defn snoc [xs x] (concat xs [x]))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;There is a reason &lt;code&gt;snoc&lt;/code&gt; is not defined by default in clojure: Since appending at the end of a singly linked list takes O(n) time, this is actually quite expensive. When building up non-lazy lists tail-recursively in a functional language, you often build the list the wrong way around (using &lt;code&gt;cons&lt;/code&gt; instead of &lt;code&gt;snoc&lt;/code&gt;) and then reverse it at the end to avoid that cost.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;However in this case there is actually a nicer way: by using a lazy sequence rather than a strict list, we can avoid the need for &lt;code&gt;loop&lt;/code&gt;/&lt;code&gt;recur&lt;/code&gt; and save the cost of building up the list. We can also separate the logic of creating the Fibonacci numbers from the logic which decides how many numbers we want by first creating a lazy sequence containing all Fibonacci numbers and then using &lt;code&gt;take-while&lt;/code&gt; to take those less than the given maximum. This will lead to the following code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;;; A lazy sequence containing all fibonacci numbers&#xA;(def fibs&#xA;  (letfn&#xA;    [(fibsrec [a b]&#xA;      (lazy-seq (cons a (fibsrec b (+ a b)))))]&#xA;    (fibsrec 1 1)))&#xA;&#xA;;; A function which returns all fibonacci numbers which are less than max&#xA;(defn fibs-until [max]&#xA;  (take-while #(&amp;lt;= % max) fibs))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="128" LastActivityDate="2011-01-27T19:15:11.683" CommentCount="2" />
  <row Id="317" PostTypeId="2" ParentId="311" CreationDate="2011-01-27T19:18:01.680" Score="5" Body="&lt;p&gt;In &lt;code&gt;tree_find&lt;/code&gt; and &lt;code&gt;tree_find_min&lt;/code&gt; [edit: and even in &lt;code&gt;tree_insert&lt;/code&gt;] you're not really gaining anything from using recursion. For example, I think &lt;code&gt;tree_find_min&lt;/code&gt; would probably be clearer something like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;tree_position tree_find_min( search_tree tree )&#xA;{&#xA;   if ( tree == NULL )&#xA;      return NULL;&#xA;   while (tree-&amp;gt;left != NULL)&#xA;       tree = tree-&amp;gt;left;&#xA;   return tree;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;As a side-benefit, this may also be faster with some compilers. In code like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; HATE_DATA *hatedata;&#xA;&#xA; /* ... */&#xA;&#xA; hatedata = (HATE_DATA * ) malloc( sizeof( HATE_DATA ) );&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I'd change it to look more like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; hatedata = malloc(sizeof(*hatedata));&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The cast accomplishes nothing useful in C, and can cover up the bug of forgetting to &lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/code&gt; to get the proper prototype for &lt;code&gt;malloc&lt;/code&gt;. Using &lt;code&gt;sizeof(*hatedata)&lt;/code&gt; instead of &lt;code&gt;sizeof(HATE_DATA)&lt;/code&gt; means that changing the type only requires changing it in one place (where you've defined the variable), instead of everywhere you've done an allocation.&lt;/p&gt;&#xA;" OwnerUserId="489" LastEditorUserId="489" LastEditDate="2011-01-27T19:40:22.940" LastActivityDate="2011-01-27T19:40:22.940" CommentCount="1" />
  <row Id="318" PostTypeId="2" ParentId="79" CreationDate="2011-01-27T19:22:58.003" Score="4" Body="&lt;p&gt;Here's an example from Wikipedia's Double-checked locking page:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public class MySingleton&#xA;{&#xA;    private static object myLock = new object();&#xA;    private static MySingleton mySingleton = null;&#xA;&#xA;    private MySingleton()&#xA;    { }&#xA;&#xA;    public static MySingleton GetInstance()&#xA;    {&#xA;        if (mySingleton == null)    // check&#xA;        {&#xA;            lock (myLock)&#xA;            {&#xA;                if (mySingleton == null)    // double check&#xA;                {&#xA;                    MySingleton newSingleton = new MySingleton();&#xA;                    System.Threading.Thread.MemoryBarrier();&#xA;                    mySingleton = newSingleton;&#xA;                }&#xA;            }&#xA;        }&#xA;&#xA;        return mySingleton;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Notice the use of &lt;code&gt;System.Threading.Thread.MemoryBarrier();&lt;/code&gt;, unlike GWLlosa's answer. See &lt;a href=&quot;http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html&quot; rel=&quot;nofollow&quot;&gt;The &quot;Double-checked locking is broken&quot; declaration&lt;/a&gt; for an explanation. (It is written for Java, but the same principles apply.)&lt;/p&gt;&#xA;" OwnerDisplayName="user894" LastActivityDate="2011-01-27T19:22:58.003" CommentCount="0" />
  <row Id="319" PostTypeId="2" ParentId="187" CreationDate="2011-01-27T19:35:27.657" Score="5" Body="&lt;p&gt;A few things come to mind:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Lose the DateTime model and instead add a DateTimeField directly to the models that need it. The ForeignKey buys you nothing except incuring an additional database join for even the simplest of operations.&lt;/li&gt;&#xA;&lt;li&gt;You probably did this only so you could paste this code in one piece, but if not: You should put your admin code in a file called admin.py inside your application. That way you can use the &lt;a href=&quot;http://docs.djangoproject.com/en/dev/ref/contrib/admin/#hooking-adminsite-instances-into-your-urlconf&quot; rel=&quot;nofollow&quot;&gt;admin autodiscover feature&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;In DateAdmin you overwrite the response_add method to (as far as I can see) set the user/creator field. This can be acomplished much easier by overwriting the &lt;a href=&quot;http://docs.djangoproject.com/en/dev/ref/contrib/admin/#django.contrib.admin.ModelAdmin.save_model&quot; rel=&quot;nofollow&quot;&gt;save_model method&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="890" LastEditorUserId="890" LastEditDate="2011-01-27T19:44:47.813" LastActivityDate="2011-01-27T19:44:47.813" CommentCount="0" />
  <row Id="320" PostTypeId="2" ParentId="9" CreationDate="2011-01-27T19:44:05.510" Score="2" Body="&lt;p&gt;Instead of &lt;code&gt;Grid g&lt;/code&gt; and &lt;code&gt;Ellipse e&lt;/code&gt;, use &lt;code&gt;Grid grid&lt;/code&gt; and &lt;code&gt;Ellipse ellipse&lt;/code&gt;. A loc with &lt;code&gt;e.size=&lt;/code&gt; says less than &lt;code&gt;ellipse.Size=&lt;/code&gt;.&lt;/p&gt;&#xA;" OwnerUserId="885" LastEditorUserId="26200" LastEditDate="2013-11-24T21:30:21.623" LastActivityDate="2013-11-24T21:30:21.623" CommentCount="1" />
  <row Id="321" PostTypeId="2" ParentId="183" CreationDate="2011-01-27T19:53:05.457" Score="2" Body="&lt;p&gt;As a completely untested micro-optimisation, I would suspect &lt;code&gt;(Int32)(radius * cosTheta + 0.5)&lt;/code&gt; is going to be marginally quicker than &lt;code&gt;(Int32)Math.Round(radius * cosTheta)&lt;/code&gt;. It does, however, round up on 0.5 instead of rounding down, which may not be what you want.&lt;/p&gt;&#xA;" OwnerUserId="265" LastActivityDate="2011-01-27T19:53:05.457" CommentCount="0" />
  <row Id="322" PostTypeId="2" ParentId="311" CreationDate="2011-01-27T19:54:45.647" Score="1" Body="&lt;p&gt;Using the comparison than operators &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; on pointers seems a bit redundant.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Depending on how the heap is working you may end up with a tree that looks like a list.&lt;br&gt;&#xA;Without understand the properties of HATE_DATA it is imposable to know if this is a good or even valuable usage of theses operators.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If the data inside the pointer &lt;code&gt;target_char&lt;/code&gt; has some intrinsic property that would allow you to do a more meaningful comparison then you can define/use a function to do the comparison or you can document the properties of HATE_DATA that make using these operators meaningful in this context.&lt;/p&gt;&#xA;" OwnerUserId="507" LastActivityDate="2011-01-27T19:54:45.647" CommentCount="0" />
  <row Id="324" PostTypeId="2" ParentId="224" CreationDate="2011-01-27T20:08:37.713" Score="2" Body="&lt;p&gt;I tweaked your code a little but I think your approach is good.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As I alluded to in the comment, there's no guarantee of fairness between threads compareAndSetting the head, so a really unlucky thread could be stuck for a while if there are a lot of consumers.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I don't think this data structure should hold nulls, since there's no way to distinguish between getting a null or getting from an empty queue, so I throw the NPE.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I refactored the logic a bit in getObject to remove redundant null checks.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And I renamed some vars to be hungarianlike.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import java.util.concurrent.atomic.AtomicReference;&#xA;&#xA;public class LockFreeQueue&amp;lt;T&amp;gt; {&#xA;private static class Node&amp;lt;E&amp;gt; {&#xA;    E value;&#xA;    volatile Node&amp;lt;E&amp;gt; next;&#xA;&#xA;    Node(E value) {&#xA;        this.value = value;&#xA;    }&#xA;}&#xA;&#xA;private final AtomicReference&amp;lt;Node&amp;lt;T&amp;gt;&amp;gt; refHead, refTail;&#xA;public LockFreeQueue() {&#xA;    // have both head and tail point to a dummy node&#xA;    Node&amp;lt;T&amp;gt; dummy = new Node&amp;lt;T&amp;gt;(null);&#xA;    refHead = new AtomicReference&amp;lt;Node&amp;lt;T&amp;gt;&amp;gt;(dummy);&#xA;    refTail = new AtomicReference&amp;lt;Node&amp;lt;T&amp;gt;&amp;gt;(dummy);&#xA;}&#xA;&#xA;/**&#xA; * Puts an object at the end of the queue.&#xA; */&#xA;public void putObject(T value) {&#xA;    if (value == null) throw new NullPointerException();&#xA;&#xA;    Node&amp;lt;T&amp;gt; node = new Node&amp;lt;T&amp;gt;(value);&#xA;    Node&amp;lt;T&amp;gt; prevTail = refTail.getAndSet(node);&#xA;    prevTail.next = node;&#xA;}&#xA;&#xA;/**&#xA; * Gets an object from the beginning of the queue. The object is removed&#xA; * from the queue. If there are no objects in the queue, returns null.&#xA; */&#xA;public T getObject() {&#xA;    Node&amp;lt;T&amp;gt; head, next;&#xA;&#xA;    // move head node to the next node using atomic semantics&#xA;    // as long as next node is not null&#xA;    do {&#xA;        head = refHead.get();&#xA;        next = head.next;&#xA;        if (next == null) {&#xA;            // empty list&#xA;            return null;&#xA;        }&#xA;        // try until the whole loop executes pseudo-atomically&#xA;        // (i.e. unaffected by modifications done by other threads)&#xA;    } while (!refHead.compareAndSet(head, next));&#xA;&#xA;    T value = next.value;&#xA;&#xA;    // release the value pointed to by head, keeping the head node dummy&#xA;    next.value = null;&#xA;&#xA;    return value;&#xA;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="715" LastEditorUserId="715" LastEditDate="2011-02-14T02:33:37.127" LastActivityDate="2011-02-14T02:33:37.127" CommentCount="4" />
  <row Id="325" PostTypeId="2" ParentId="296" CreationDate="2011-01-27T20:28:20.107" Score="17" Body="&lt;p&gt;A few quick comments looking through the source:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You did very well in structuring things semantically.  I only see a few &lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; tags.  That said, you probably want to include more semantic markup for some things, e.g.,&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&quot;post&quot;&amp;gt;&#xA;    &amp;lt;b&amp;gt;Introduction&amp;lt;/b&amp;gt;&amp;lt;br /&amp;gt;&#xA;    &amp;lt;i&amp;gt;Thursday, January 27, 2011&amp;lt;/i&amp;gt;&#xA;&amp;lt;/div&amp;gt;&#xA;&amp;lt;br /&amp;gt;&#xA;&amp;lt;div id=&quot;content&quot;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If I were to rework it, I would do:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&quot;post&quot;&amp;gt;&#xA; &amp;lt;h1&amp;gt;Introduction&amp;lt;/h1&amp;gt;&#xA; &amp;lt;h2&amp;gt;Thursday, blah blah&amp;lt;/h2&amp;gt;&#xA;&amp;lt;/div&amp;gt;&#xA;&amp;lt;div id=&quot;content&quot;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then your CSS will style those elements:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;div#post h1 { ... }&#xA;div#post h2 { ... }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;For your images, unless you need a javascript id selector, I'd probably make them a class, rather than unique ID's.  It looks like your images will all be styled similarly, so why not group them using a class?  Or just override the CSS defaults for the image tag.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Finally, you should probably use a CSS reset.  Browsers all use different defaults, so the only sensible thing is to use a reset so that all styling attributes start out the same across all browsers.  Eric Meyer is the CSS guru, he has his reset at &lt;a href=&quot;http://meyerweb.com/eric/tools/css/reset/&quot;&gt;http://meyerweb.com/eric/tools/css/reset/&lt;/a&gt; (along with more explanation about why to use it).&lt;/p&gt;&#xA;" OwnerUserId="918" LastEditorUserId="110" LastEditDate="2011-01-28T23:39:20.927" LastActivityDate="2011-01-28T23:39:20.927" CommentCount="5" />
  <row Id="326" PostTypeId="1" AcceptedAnswerId="3738" CreationDate="2011-01-27T20:48:43.133" Score="4" ViewCount="35106" Body="&lt;p&gt;Oftentimes I find myself wanting the total number of rows returned by a query even though I only may display 50 or so per page. Instead of doing this in multiple queries like so:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;SELECT first_name, &#xA;       last_name, &#xA;       (SELECT count(1) FROM  sandbox.PEOPLE WHERE trunc(birthday) = trunc(sysdate) ) as totalRows&#xA;FROM  sandbox.PEOPLE &#xA;WHERE trunc(birthday) = trunc(sysdate);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It has been recommended to me to do this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;SELECT first_name, &#xA;            last_name, &#xA;            count(*) over () totalRows&#xA;FROM  sandbox.PEOPLE&#xA;WHERE trunc(birthday) = trunc(sysdate);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I am just looking for what is better as far as performance and if performance is a wash. Does this really improve readability of SQL? It is certainly cleaner/easier to write.&lt;/p&gt;&#xA;" OwnerUserId="152" LastEditorUserId="22222" LastEditDate="2016-11-07T23:57:46.427" LastActivityDate="2016-11-07T23:57:46.427" Title="Returning total number of rows in query" Tags="&lt;sql&gt;&lt;oracle&gt;" AnswerCount="1" CommentCount="7" FavoriteCount="3" />
  <row Id="327" PostTypeId="2" ParentId="77" CreationDate="2011-01-27T21:01:20.130" Score="3" Body="&lt;p&gt;That's a large piece of code.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I highly recommended to use lower camel case for variables.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here are some hints from me, just only micro-refactoring.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;pre&gt;&lt;code&gt;if(term.length &amp;gt;= 3) {&#xA;  if(replaced)&#xA;    load_data(1, term, true, false);&#xA;  else&#xA;    load_data(1, term, true, true);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;into:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if(term.length &amp;gt;= 3) {&#xA;  load_data(1, term, true, !replaced);                        &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;pre&gt;&lt;code&gt;function load_data(page, search, action, save) {&#xA;   if(save == null)&#xA;     save = false;&#xA;   else&#xA;     save = true;&#xA; ...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;into:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function load_data(page, search, action, save) {&#xA;  save = save == null ? false : true;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;pre&gt;&lt;code&gt;for(var j in rows[i]) {&#xA;   if(j != 'id' &amp;amp;&amp;amp; j != 'actions')&#xA;     row.append('&amp;lt;td class=&quot;'+j+'td&quot;&amp;gt;'+(rows[i][j] == null ? '' : rows[i][j])+'&amp;lt;/td&amp;gt;');&#xA;   if(j == 'actions' &amp;amp;&amp;amp; rows[i][j] != null &amp;amp;&amp;amp; options.actions)&#xA;     row.append(rows[i][j]);&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;into:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for(var j in rows[i]) {&#xA;  var rowsIJ = rows[i][j];&#xA;&#xA;  if(j != 'id' &amp;amp;&amp;amp; j != 'actions')&#xA;    row.append('&amp;lt;td class=&quot;'+j+'td&quot;&amp;gt;'+(rowsIJ == null ? '' : rowsIJ)+'&amp;lt;/td&amp;gt;');&#xA;  if(j == 'actions' &amp;amp;&amp;amp; rowsIJ != null &amp;amp;&amp;amp; options.actions)&#xA;    row.append(rowsIJ);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="562" LastEditorUserId="62429" LastEditDate="2015-06-27T03:49:27.023" LastActivityDate="2015-06-27T03:49:27.023" CommentCount="1" />
  <row Id="328" PostTypeId="2" ParentId="276" CreationDate="2011-01-27T21:03:43.257" Score="0" Body="&lt;p&gt;I don't remember exactly where I got my implementation, but a lot of it is borrowed from the Spring Framework...&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The only three methods that my IUnitOfWork interface exposes are Initialize(), Commit(), and Rollback(). Then I inherit from that for an INhibernateUnitOfWork, which simply exposes the NHibernate Session via a property as well... I guess this part may depend on what you are using for the persistence storage mechanism...&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But what it allows me to do in my repository class then is to simply take in the unit of work as an injectable dependency. Essentially, each of my Get(id), Load(id), Find(), Save(), Update(), etc. methods just make a call against the Repository.UnitOfWork.Session property.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In essence, it's really close to what you've already implemented... Not sure why you want the GetRepository method, but you may have some use case for that which I do not. For me, my UnitOfWork is Request lifetime object whose Initialize() and Commit() / Rollback() functionality is handled by an HTTP module hooking the BeginRequest and EndRequest events. That is, the UnitOfWork instance is only ever touched by said HTTP Module, and by the repositories that simply use it to get a reference to the current Session object.&lt;/p&gt;&#xA;" OwnerDisplayName="user925" LastActivityDate="2011-01-27T21:03:43.257" CommentCount="0" />
  <row Id="329" PostTypeId="2" ParentId="182" CreationDate="2011-01-27T21:14:56.843" Score="7" Body="&lt;p&gt;Leaving aside the problem of deeply nested code for now, I think readability is greatly improved by the use of LINQ syntax:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var sourceFiles = from file in list&#xA;                  from invocation in file.getInvocations()&#xA;                  group invocation by (SourceFile)null into groupedByInvoker&#xA;                  select groupedByInvoker;&#xA;&#xA;for (var currentDepth = 0; currentDepth &amp;lt; depth; currentDepth++)&#xA;{&#xA;    foreach (var invokerGroup in sourceFiles)&#xA;    {&#xA;        int sourceFileCount = currentGroup.Count();&#xA;        int counter = 0;&#xA;&#xA;        foreach (var invocation in invokerGroup) {&#xA;            // Do stuff&#xA;            counter++;&#xA;        }&#xA;    }&#xA;&#xA;    sourceFiles = from invokerGroup in sourceFiles&#xA;                  from file in invokerGroup&#xA;                  from invocation in file.getInvocations()&#xA;                  group invocation by file into groupedByInvoker&#xA;                  select groupedByInvoker;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;For me, this makes the SelectMany a lot easier to follow. There are some other tweaks to the queries too:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;You can just group by null directly, rather than projecting to an anonymous type and selecting that back out as the key.&lt;/li&gt;&#xA;&lt;li&gt;You don't need to convert to a list if you follow it by a groupby. The groupby traverses and stores the result of the enumerable anyway. You can test this by removing the ToList and adding a break point/debug output inside getInvocations.&lt;/li&gt;&#xA;&lt;li&gt;By forcing it to evaluate to to a list instead of allowing deferred execution you are actually calling getInvocation too many times. When &lt;code&gt;currentDepth == depth - 1&lt;/code&gt;, you don't need to evaluate sourceFiles again and so you don't need to call getInvocations. With deferred execution, because the final sourceFiles is never read getInvocations is never called and everything is fine and dandy.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="265" LastActivityDate="2011-01-27T21:14:56.843" CommentCount="1" />
  <row Id="330" PostTypeId="2" ParentId="278" CreationDate="2011-01-27T21:19:34.823" Score="4" Body="&lt;p&gt;Here is an O(mn) solution.  Given that haystack is about 1000 in length and needle is 5 or smaller, the simplest code to do the search is probably the best.  But if testing for equality is expensive, there are things we can do to mitigate that, although I'm not sure switching to KMP or BM will help so much given that we're dealing with Object here.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// assumes no null entries&#xA;// returns starting index of first occurrence of needle within haystack or -1&#xA;public int indexOf(final Object[] haystack, final Object[] needle) &#xA;{&#xA;    foo: for (int a = 0; a &amp;lt; haystack.length - needle.length; a++) {&#xA;        for (int b = 0; b &amp;lt; needle.length; b++) {&#xA;            if (!haystack[a+b].equals(needle[b])) continue foo;&#xA;        }&#xA;        return a;&#xA;    }&#xA;    return -1;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="715" LastEditorUserId="715" LastEditDate="2011-01-28T22:17:59.730" LastActivityDate="2011-01-28T22:17:59.730" CommentCount="10" />
  <row Id="331" PostTypeId="2" ParentId="281" CreationDate="2011-01-27T21:19:52.887" Score="5" Body="&lt;p&gt;The MYMACRO call &lt;em&gt;should&lt;/em&gt; be fine.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#define D3DCALL(a) { auto __ = a; if (FAILED(__)) DXTrace(__FILE__, __LINE__, __, WIDEN(#a), TRUE); }&#xA;D3DCALL(D3DXCreateSphere(&#xA;    D3DDev.get(),&#xA;    radius,&#xA;    slices,&#xA;    slices,&#xA;    &amp;amp;retval-&amp;gt;Mesh._Myptr,&#xA;    &amp;amp;retval-&amp;gt;Adjacency._Myptr&#xA;));&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I use this in my own source code all the time. The main way you get problems is if you try to conditionally compile within the macro call.&lt;/p&gt;&#xA;" OwnerUserId="62" LastEditorUserId="62" LastEditDate="2014-05-28T22:38:22.483" LastActivityDate="2014-05-28T22:38:22.483" CommentCount="0" />
  <row Id="333" PostTypeId="2" ParentId="281" CreationDate="2011-01-27T21:31:53.767" Score="7" Body="&lt;p&gt;If the question is how to take something like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;HANDLE hProc = OpenProcess(&#xA;            PROCESS_VM_READ | PROCESS_QUERY_INFORMATION, FALSE,&#xA;            pid);&#xA;        if (hProc == 0)&#xA;        {&#xA;            THROW_LAST_WINDOWS_ERROR();&#xA;        }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And reduce it to a one-liner, I usually use a &lt;code&gt;verify&lt;/code&gt; macro:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;template&amp;lt;class Eval&amp;gt; RetVal Verify(Eval eval, static const string&amp;amp; file, unsigned line)&#xA;{&#xA;  if( !eval )&#xA;    throw MyException(error_string, file, line);&#xA;  else &#xA;    return eval;&#xA;}&#xA;&#xA;#define verify(EVAL) (Verify(EVAL, __FILE__, __LINE__))&#xA;&#xA;// ...&#xA;&#xA;HANDLE hProc = verify( OpenProcess(PROCESS_VM_READ | PROCESS_QUERY_INFORMATION, FALSE, pid ));&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="196" LastActivityDate="2011-01-27T21:31:53.767" CommentCount="1" />
  <row Id="334" PostTypeId="2" ParentId="281" CreationDate="2011-01-27T21:33:34.217" Score="1" Body="&lt;p&gt;Adapted from Charles' answer from your original post, would something like this work?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#define THROW_LAST_WINDOWS_ERROR(condition) ThrowOnFail(condition, __FILE__, __LINE__)&#xA;&#xA;void ThrowOnFail(const BOOL condition, LPCSTR file_name, const int file_line)&#xA;{&#xA;  if (!condition)&#xA;    WindowsApi::Exception::Throw(::GetLastError(), file_name, file_line);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then error handling would look something like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;THROW_LAST_WINDOWS_ERROR(ReadProcessMemory(hProc,&#xA;                                           procInfoBuf.GetAs&amp;lt;PROCESS_BASIC_INFORMATION&amp;gt;()-&amp;gt;PebBaseAddress,&#xA;                                           &amp;amp;peb,&#xA;                                           sizeof(peb),&#xA;                                           0));&#xA;THROW_LAST_WINDOWS_ERROR(ReadProcessMemory(hProc,&#xA;                                           peb.Ldr,&#xA;                                           static_cast&amp;lt;void *&amp;gt;(&amp;amp;ldrData),&#xA;                                           sizeof(PEB_LDR_DATA),&#xA;                                           0));&#xA;// ...&#xA;    while (currentListEntry != endPointer)&#xA;    {&#xA;        LDR_MODULE loaderModule;&#xA;&#xA;        THROW_LAST_WINDOWS_ERROR(ReadProcessMemory(&#xA;            hProc,&#xA;            currentListEntry,&#xA;            &amp;amp;loaderModule,&#xA;            sizeof(loaderModule),&#xA;            0));&#xA;&#xA;    // ...&#xA;    } &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="71" LastActivityDate="2011-01-27T21:33:34.217" CommentCount="0" />
  <row Id="335" PostTypeId="2" ParentId="283" CreationDate="2011-01-27T21:42:26.190" Score="3" Body="&lt;p&gt;C comes with a helpful function &lt;code&gt;size_t strcspn(const char *string, const char *delimiters)&lt;/code&gt; that you can implement this on top of. The ASCII version is pretty fast; it uses a bit vector to test for the delimiter characters.&lt;/p&gt;&#xA;" OwnerUserId="331" LastActivityDate="2011-01-27T21:42:26.190" CommentCount="1" />
  <row Id="336" PostTypeId="2" ParentId="311" CreationDate="2011-01-27T21:44:13.223" Score="2" Body="&lt;p&gt;An even better way to do the malloc is with this macro (simplified version of g_new in GLib):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#define my_new(type, count)  ((type*)malloc (sizeof (type) * (count)))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The advantages of this are:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;less typing, more clarity&lt;/li&gt;&#xA;&lt;li&gt;assignment to the wrong type will be a compiler warning&lt;/li&gt;&#xA;&lt;li&gt;you can't accidentally sizeof() the wrong thing&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Also, of course, malloc can return NULL. The easiest way to deal with that is to make a wrapper function that handles it.&lt;/p&gt;&#xA;" OwnerUserId="493" LastActivityDate="2011-01-27T21:44:13.223" CommentCount="0" />
  <row Id="339" PostTypeId="2" ParentId="148" CreationDate="2011-01-27T23:09:58.323" Score="3" Body="&lt;p&gt;You don't need to wrap toggleMenu in a function, you can just use&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$('#tab').click(toggleMenu);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you don't include the parenthesis, it's taken to mean a reference to the function rather than a function invocation.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It's a bad idea to try and manually keep track of keyboard modifiers. For instance, if your website looses focus while the key is held down, it will think it's still down when you return focus, even if it isn't.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The keyboard event has a &lt;code&gt;ctrlKey&lt;/code&gt; property which will be &lt;code&gt;true&lt;/code&gt; if the control key is being held down.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It's also probably a good idea to put the key code into a variable which describes which key it is, as having to remember what &lt;code&gt;97&lt;/code&gt; maps to can be tricky.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$(document).keydown(function (e) {&#xA;    if (e.ctrlKey &amp;amp;&amp;amp; e.which === aKey) {&#xA;        toggleMenu();&#xA;        return false;&#xA;    }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Lastly, it might be a good idea to extract the offset into variable.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var menuSize = '210px';&#xA;var $main = $(&quot;#main&quot;); &#xA;&#xA;function toggleMenu() {&#xA;    if(!$main.hasClass('out')) {&#xA;        $main.animate({'margin-left': '+=' + menuSize}, 500).addClass('out');                         &#xA;    } else {&#xA;        $main.animate({'margin-left': '-=' + menuSize}, 500).removeClass('out');&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="265" LastActivityDate="2011-01-27T23:09:58.323" CommentCount="0" />
  <row Id="340" PostTypeId="1" AcceptedAnswerId="353" CreationDate="2011-01-27T23:39:15.980" Score="5" ViewCount="469" Body="&lt;p&gt;This JS function is intended to retrieve or place a value into an object with the nested keys as a string.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var obj = {a: {b: [4]}};&#xA;parse_obj_key(obj, &quot;a.b.0&quot;) should equal 4.&#xA;parse_obj_key(obj, &quot;a.c&quot;, 2) should add another element to &quot;a&quot; named &quot;c&quot; with value 2.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The method works, but I'd like to clean it up if possible (or a more polished implementation which is publicly available).  I'd also love to know of any edge-case failures which can be found.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function parse_obj_key(obj, loc, val){&#xA;    var _o = obj;&#xA;    while (true){ &#xA;        var pos = loc.indexOf('.');                        &#xA;&#xA;        if (!_o || typeof _o != 'object'){&#xA;            $.log(&quot;Invalid obj path: &quot; + loc + &quot;\n&quot; + JSON.stringify(obj));&#xA;            return null;      &#xA;        }                                                    &#xA;&#xA;        if (pos === -1){&#xA;            if (val){&#xA;                _o[loc] = val;                 &#xA;                return obj;                                           &#xA;            } else {&#xA;                if (!isNaN(parseInt(loc)))&#xA;                    loc = parseInt(loc);&#xA;&#xA;                return _o[loc];&#xA;            }&#xA;        }&#xA;        var part = loc.substring(0, pos);                    &#xA;        var loc = loc.substring(pos + 1);                     &#xA;&#xA;        if (!isNaN(parseInt(part)))&#xA;            part = parseInt(part);   &#xA;&#xA;        if (!(part in _o)){&#xA;            if (val)&#xA;                _o[part] = new object;                                        &#xA;            else&#xA;                return null;                                           &#xA;        }&#xA;        _o = _o[part];                      &#xA;    }                                                                         &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="958" LastActivityDate="2013-08-09T15:47:26.887" Title="Javascript Object Placement / String Parsing Method" Tags="&lt;javascript&gt;&lt;parsing&gt;" AnswerCount="3" CommentCount="1" FavoriteCount="1" />
  <row Id="341" PostTypeId="1" CreationDate="2011-01-27T23:57:41.817" Score="2" ViewCount="1835" Body="&lt;p&gt;This works but there must be a better way:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;txtBox.InputScope = new InputScope { Names = { new InputScopeName { NameValue = InputScopeNameValue.Text } } };&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="962" LastActivityDate="2011-02-09T10:06:30.763" Title="Better way of setting input scope on text box in WP7" Tags="&lt;c#&gt;" AnswerCount="1" CommentCount="0" ClosedDate="2014-12-15T17:22:19.563" />
  <row Id="342" PostTypeId="2" ParentId="283" CreationDate="2011-01-28T00:30:28.267" Score="5" Body="&lt;p&gt;Or, here's yet another way you could do it by using all stuff from the STL:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;algorithm&amp;gt;&#xA;#include &amp;lt;string&amp;gt;&#xA;#include &amp;lt;iostream&amp;gt;&#xA;&#xA;bool isForbidden( char c )&#xA;{&#xA;    static std::string forbiddenChars( &quot;\\/:?\&quot;&amp;lt;&amp;gt;|&quot; );&#xA;&#xA;    return std::string::npos != forbiddenChars.find( c );&#xA;}&#xA;&#xA;int main()&#xA;{&#xA;    std::string myString( &quot;hell?o&quot; );&#xA;&#xA;    std::replace_if( myString.begin(), myString.end(), isForbidden, ' ' );&#xA;&#xA;    std::cout &amp;lt;&amp;lt; &quot;Now: &quot; &amp;lt;&amp;lt; myString &amp;lt;&amp;lt; std::endl;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="55" LastActivityDate="2011-01-28T00:30:28.267" CommentCount="0" />
  <row Id="343" PostTypeId="1" AcceptedAnswerId="345" CreationDate="2011-01-28T01:09:00.223" Score="11" ViewCount="1219" Body="&lt;p&gt;I started out with the best of intentions, but this form got hacky real fast.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It's purpose is to serve as a create new Student form. Also, if you want to view an existing Students information.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Think of it as the CRU of CRUD.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here it is:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;using System;&#xA;using System.Collections.Generic;&#xA;using System.ComponentModel;&#xA;using System.Data;&#xA;using System.Drawing;&#xA;using System.Linq;&#xA;using System.Text;&#xA;using System.Windows.Forms;&#xA;using Tutomentor.Branding;&#xA;using Tutomentor.Data.Repositories;&#xA;&#xA;namespace Tutomentor.UI.Students&#xA;{&#xA;    public partial class StudentInformation : Form&#xA;    {&#xA;        StudentRepository repo = new StudentRepository();&#xA;        bool IsCreating = false;&#xA;        Student student;&#xA;&#xA;        public StudentInformation()&#xA;        {&#xA;            InitializeComponent();&#xA;            LoadComboBoxes();&#xA;            LoadBranding();&#xA;            IsCreating = true;&#xA;        }&#xA;&#xA;        public StudentInformation(int studentID)&#xA;        {&#xA;            InitializeComponent();&#xA;            LoadComboBoxes();&#xA;            LoadBranding();&#xA;&#xA;            student = repo.FindStudent(studentID);&#xA;            LoadStudentInformation(student);&#xA;&#xA;        }&#xA;&#xA;        private void LoadComboBoxes()&#xA;        {&#xA;            cmbGrade.DisplayMember = &quot;Name&quot;;&#xA;            cmbGrade.ValueMember = &quot;ID&quot;;&#xA;            cmbGradeParalelo.DisplayMember = &quot;Name&quot;;&#xA;            cmbGradeParalelo.ValueMember = &quot;ID&quot;;&#xA;            GradeRepository repo = new GradeRepository();&#xA;            cmbGrade.DataSource = repo.FindAllGrades();&#xA;        }      &#xA;&#xA;        private void LoadStudentInformation(Student student)&#xA;        {&#xA;            cmbGrade.SelectedValue = student.GradeParalelo.Grade.ID;&#xA;            cmbGradeParalelo.SelectedValue = student.IDGrade;&#xA;            txtRude.Text = student.RUDE.ToString();&#xA;            txtNombrePadre.Text = student.FatherName;&#xA;            txtProfesionPadre.Text = student.FatherProfession;&#xA;            txtCelularPadre.Text = student.MobilePhoneFather;&#xA;            txtLugarDeTrabajoPadre.Text = student.PlaceofWorkFather;&#xA;&#xA;            txtNombreMadre.Text = student.MotherName;&#xA;            txtProfesionMadre.Text = student.MotherProfession;&#xA;            txtCelularMadre.Text = student.MobilePhoneMother;&#xA;            txtLugarDeTrabajoMadre.Text = student.PlaceofWorkMother;&#xA;&#xA;            txtObservaciones.Text = student.Observations;&#xA;&#xA;            txtNombre.Text = student.Name;&#xA;            txtApellidoPaterno.Text = student.FatherLastName;&#xA;            txtApellidoMaterno.Text = student.MotherLasteName;&#xA;            dtpFechaNacimiento.Value = Convert.ToDateTime(student.DateOfBirth);&#xA;            txtLugarNacimiento.Text = student.PlaceOfBirth;&#xA;            SetSex(student.Sex);&#xA;            txtCarnet.Text = student.Carnet;&#xA;            txtTelefono.Text = student.Telephone;&#xA;            txtCelular.Text = student.MobilePhone;&#xA;            txtDireccion.Text = student.Address;&#xA;        }&#xA;&#xA;        private void SetSex(string p)&#xA;        {&#xA;            if (p == &quot;M&quot;)&#xA;            {&#xA;                sexoMasculino.Checked = true;&#xA;                sexoFemenino.Checked = false;&#xA;            }&#xA;            else&#xA;            {&#xA;                sexoMasculino.Checked = false;&#xA;                sexoFemenino.Checked = true;&#xA;            }&#xA;        }&#xA;&#xA;        private void LoadBranding()&#xA;        {&#xA;            this.Text = &quot;Tutomentor - Agregando nuevo alumnos.&quot;;&#xA;            this.BackColor = Brand.PrimaryColor;&#xA;            panelBorderLeft.BackColor = Brand.HeaderColor;&#xA;            panelBorderRight.BackColor = Brand.HeaderColor;&#xA;            panelSeparator1.BackColor = Brand.SeparatorColor;&#xA;        }&#xA;&#xA;        private void cmbGrade_SelectedIndexChanged(object sender, EventArgs e)&#xA;        {&#xA;            LoadGradeParalelos();&#xA;        }&#xA;&#xA;        private void LoadGradeParalelos()&#xA;        {&#xA;            GradeParaleloRepository repo = new GradeParaleloRepository();&#xA;            Int64 gradeID = Convert.ToInt64(cmbGrade.SelectedValue);&#xA;            cmbGradeParalelo.DataSource = repo.FindAllGradeParalelos().Where(g =&amp;gt; g.IDGrade == gradeID);&#xA;        }&#xA;&#xA;        private void btnSave_Click(object sender, EventArgs e)&#xA;        {&#xA;            SaveInformation();&#xA;        }&#xA;&#xA;        private void SaveInformation()&#xA;        {&#xA;            if (IsCreating)&#xA;            {&#xA;                Student newStudent = new Student();&#xA;                Int64 gradeId = Convert.ToInt64(cmbGradeParalelo.SelectedValue);&#xA;                newStudent.IDGrade = gradeId;&#xA;                newStudent.RUDE = Convert.ToInt64(txtRude.Text);&#xA;&#xA;                /*Parents information.*/&#xA;                newStudent.FatherName = txtNombrePadre.Text;&#xA;                newStudent.FatherProfession = txtProfesionPadre.Text;&#xA;                newStudent.MobilePhoneFather = FormatPhoneNumber(txtCelularPadre.Text);&#xA;                newStudent.PlaceofWorkFather = txtLugarDeTrabajoPadre.Text;&#xA;&#xA;                newStudent.MotherName = txtNombreMadre.Text;&#xA;                newStudent.MotherProfession = txtProfesionMadre.Text;&#xA;                newStudent.MobilePhoneMother = FormatPhoneNumber(txtCelularMadre.Text);&#xA;                newStudent.PlaceofWorkMother = txtLugarDeTrabajoMadre.Text;&#xA;&#xA;                /*newStudent information*/&#xA;                newStudent.Name = txtNombre.Text;&#xA;                newStudent.FatherLastName = txtApellidoPaterno.Text;&#xA;                newStudent.MotherLasteName = txtApellidoMaterno.Text;&#xA;                newStudent.DateOfBirth = dtpFechaNacimiento.Value.ToShortDateString();&#xA;                newStudent.PlaceOfBirth = txtLugarNacimiento.Text;&#xA;                newStudent.Sex = sexoMasculino.Checked ? sexoMasculino.Text : sexoFemenino.Text;&#xA;                newStudent.Telephone = FormatPhoneNumber(txtTelefono.Text);&#xA;                newStudent.MobilePhone = FormatPhoneNumber(txtCelular.Text);&#xA;                newStudent.Address = txtDireccion.Text;&#xA;                newStudent.Carnet = FormatPhoneNumber(txtCarnet.Text);&#xA;                newStudent.Observations = txtObservaciones.Text;&#xA;&#xA;                repo.Add(newStudent);&#xA;                repo.Save();&#xA;                MessageBox.Show(&quot;Se guardo el registro exitosamente.&quot;,&#xA;                    &quot;Exito!&quot;,&#xA;                    MessageBoxButtons.OK,&#xA;                    MessageBoxIcon.Information,&#xA;                    MessageBoxDefaultButton.Button1);&#xA;                ClearForm();&#xA;            }&#xA;            else&#xA;            {&#xA;                Int64 gradeId = Convert.ToInt64(cmbGradeParalelo.SelectedValue);&#xA;                student.IDGrade = gradeId;&#xA;                student.RUDE = Convert.ToInt64(txtRude.Text);&#xA;&#xA;                /*Parents information.*/&#xA;                student.FatherName = txtNombrePadre.Text;&#xA;                student.FatherProfession = txtProfesionPadre.Text;&#xA;                student.MobilePhoneFather = FormatPhoneNumber(txtCelularPadre.Text);&#xA;                student.PlaceofWorkFather = txtLugarDeTrabajoPadre.Text;&#xA;&#xA;                student.MotherName = txtNombreMadre.Text;&#xA;                student.MotherProfession = txtProfesionMadre.Text;&#xA;                student.MobilePhoneMother = FormatPhoneNumber(txtCelularMadre.Text);&#xA;                student.PlaceofWorkMother = txtLugarDeTrabajoMadre.Text;&#xA;&#xA;                /*student information*/&#xA;                student.Name = txtNombre.Text;&#xA;                student.FatherLastName = txtApellidoPaterno.Text;&#xA;                student.MotherLasteName = txtApellidoMaterno.Text;&#xA;                student.DateOfBirth = dtpFechaNacimiento.Value.ToShortDateString();&#xA;                student.PlaceOfBirth = txtLugarNacimiento.Text;&#xA;                student.Sex = sexoMasculino.Checked ? sexoMasculino.Text : sexoFemenino.Text;&#xA;                student.Telephone = FormatPhoneNumber(txtTelefono.Text);&#xA;                student.MobilePhone = FormatPhoneNumber(txtCelular.Text);&#xA;                student.Address = txtDireccion.Text;&#xA;                student.Carnet = FormatPhoneNumber(txtCarnet.Text);&#xA;                student.Observations = txtObservaciones.Text;&#xA;&#xA;                repo.Save();&#xA;                MessageBox.Show(&quot;Se guardo el registro exitosamente.&quot;,&#xA;                    &quot;Exito!&quot;,&#xA;                    MessageBoxButtons.OK,&#xA;                    MessageBoxIcon.Information,&#xA;                    MessageBoxDefaultButton.Button1);                &#xA;                this.Close();&#xA;            }&#xA;&#xA;        }&#xA;&#xA;        private string FormatPhoneNumber(string p)&#xA;        {&#xA;            return p.Insert(3, &quot;-&quot;);&#xA;        }&#xA;&#xA;        private void btnClear_Click(object sender, EventArgs e)&#xA;        {&#xA;            ClearForm();&#xA;        }&#xA;&#xA;        private void ClearForm()&#xA;        {&#xA;            Action&amp;lt;Control.ControlCollection&amp;gt; func = null;&#xA;&#xA;            func = (controls) =&amp;gt;&#xA;            {&#xA;                foreach (Control control in controls)&#xA;                    if (control is TextBox)&#xA;                        (control as TextBox).Clear();&#xA;                    else&#xA;                        func(control.Controls);&#xA;            };&#xA;&#xA;            func(Controls);&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I don't know how to improve this class because every line of code is needed.&lt;/p&gt;&#xA;" OwnerDisplayName="Sergio Tapia" LastEditorUserId="9357" LastEditDate="2016-10-29T02:06:22.130" LastActivityDate="2016-10-29T02:06:22.130" Title="Form to create new students or view existing student information" Tags="&lt;c#&gt;&lt;.net&gt;&lt;winforms&gt;" AnswerCount="6" CommentCount="2" FavoriteCount="1" />
  <row Id="344" PostTypeId="2" ParentId="343" CreationDate="2011-01-28T01:20:27.110" Score="3" Body="&lt;p&gt;Look at your code within this block inside the &lt;code&gt;SaveInformation&lt;/code&gt; method.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if (IsCreating) &#xA;{&#xA;   // code here&#xA;}&#xA;else&#xA;{&#xA;   // and here&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Start refactoring with this. How many lines of code are actually different here? Outside of a different object name (&lt;code&gt;newStudent&lt;/code&gt; vs. &lt;code&gt;student&lt;/code&gt;), there are not very many. Looks to me like you can create a method with the &lt;code&gt;Student&lt;/code&gt; object as a parameter so that you can populate each of the relevant attributes.&lt;/p&gt;&#xA;" OwnerUserId="153" LastActivityDate="2011-01-28T01:20:27.110" CommentCount="0" />
  <row Id="345" PostTypeId="2" ParentId="343" CreationDate="2011-01-28T01:24:11.757" Score="8" Body="&lt;p&gt;You can simplify SaveInformation:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private void SaveInformation()&#xA;{&#xA;    if (IsCreating)&#xA;    {&#xA;        Student newStudent = new Student();&#xA;        repo.Add(newStudent);&#xA;    }&#xA;&#xA;    Int64 gradeId = Convert.ToInt64(cmbGradeParalelo.SelectedValue);&#xA;    newStudent.IDGrade = gradeId;&#xA;    newStudent.RUDE = Convert.ToInt64(txtRude.Text);&#xA;&#xA;    /*Parents information.*/&#xA;    newStudent.FatherName = txtNombrePadre.Text;&#xA;    newStudent.FatherProfession = txtProfesionPadre.Text;&#xA;    newStudent.MobilePhoneFather = FormatPhoneNumber(txtCelularPadre.Text);&#xA;    newStudent.PlaceofWorkFather = txtLugarDeTrabajoPadre.Text;&#xA;&#xA;    newStudent.MotherName = txtNombreMadre.Text;&#xA;    newStudent.MotherProfession = txtProfesionMadre.Text;&#xA;    newStudent.MobilePhoneMother = FormatPhoneNumber(txtCelularMadre.Text);&#xA;    newStudent.PlaceofWorkMother = txtLugarDeTrabajoMadre.Text;&#xA;&#xA;    /*newStudent information*/&#xA;    newStudent.Name = txtNombre.Text;&#xA;    newStudent.FatherLastName = txtApellidoPaterno.Text;&#xA;    newStudent.MotherLasteName = txtApellidoMaterno.Text;&#xA;    newStudent.DateOfBirth = dtpFechaNacimiento.Value.ToShortDateString();&#xA;    newStudent.PlaceOfBirth = txtLugarNacimiento.Text;&#xA;    newStudent.Sex = sexoMasculino.Checked ? sexoMasculino.Text : sexoFemenino.Text;&#xA;    newStudent.Telephone = FormatPhoneNumber(txtTelefono.Text);&#xA;    newStudent.MobilePhone = FormatPhoneNumber(txtCelular.Text);&#xA;    newStudent.Address = txtDireccion.Text;&#xA;    newStudent.Carnet = FormatPhoneNumber(txtCarnet.Text);&#xA;    newStudent.Observations = txtObservaciones.Text;&#xA;&#xA;    repo.Save();&#xA;    MessageBox.Show(&quot;Se guardo el registro exitosamente.&quot;,&#xA;            &quot;Exito!&quot;,&#xA;            MessageBoxButtons.OK,&#xA;            MessageBoxIcon.Information,&#xA;            MessageBoxDefaultButton.Button1);&#xA;&#xA;    if (IsCreating)&#xA;    {&#xA;        ClearForm();&#xA;    }&#xA;    else&#xA;    {&#xA;        this.Close();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The second one is a style thing. Some people like this others hate it. &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    private void SetSex(string p)&#xA;    {&#xA;        sexoMasculino.Checked = (p == &quot;M&quot;);&#xA;        sexoFemenino.Checked  = !sexoMasculino.Checked;&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Additional note: It is unclear from the given text if p will have already been sanitized. As a result (and depending on expected usage) you want to also check for &quot;m&quot; (if this is a possibility).&lt;/p&gt;&#xA;" OwnerUserId="507" LastEditorUserId="507" LastEditDate="2011-01-28T12:46:56.357" LastActivityDate="2011-01-28T12:46:56.357" CommentCount="5" />
  <row Id="346" PostTypeId="1" AcceptedAnswerId="349" CreationDate="2011-01-28T01:28:04.327" Score="0" ViewCount="260" Body="&lt;p&gt;It's clever, but makes me vomit a little:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;file = '0123456789abcdef123'&#xA;&#xA;path = os.sep.join([ file[ x:(x+2) ] for x in range(0,5,2) ])&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="972" LastEditorUserId="9390" LastEditDate="2013-08-31T01:39:07.043" LastActivityDate="2013-08-31T01:39:07.043" Title="Generating filesystem paths from a fixed string" Tags="&lt;python&gt;" AnswerCount="2" CommentCount="0" FavoriteCount="1" />
  <row Id="347" PostTypeId="2" ParentId="346" CreationDate="2011-01-28T02:00:30.617" Score="10" Body="&lt;p&gt;Is there are reason you're not just doing:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;path = os.sep.join([file[0:2], file[2:4], file[4:6]])&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I think that my version is a little easier to parse (as a human), but if you need to extend the number of groups, your code is more extensible.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Edit: and if we're looking for things that are easy to read but not necessarily the best way to do it...&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;slash = os.sep&#xA;path = file[0:2] + slash + file[2:4] + slash + file[4:6]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="976" LastActivityDate="2011-01-28T02:00:30.617" CommentCount="0" />
  <row Id="348" PostTypeId="2" ParentId="283" CreationDate="2011-01-28T02:04:13.407" Score="4" Body="&lt;p&gt;Solution with no conditional branching.&lt;br&gt;&#xA;Swapping space for time optimization.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Simplified algorithm:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;void removeForbiddenChar(string* s)&#xA;{&#xA;    for (string::iterator it = s-&amp;gt;begin() ; it &amp;lt; s-&amp;gt;end() ; ++it)&#xA;    {&#xA;        // replace element with their counterpart in the map&#xA;        // This replaces forbidden characters with space.&#xA;        (*it) = charMap[*it];&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Or the C++0x version:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;void removeForbiddenChar(std::string* s)&#xA;{&#xA;    std::transform(s-&amp;gt;begin(), s-&amp;gt;end(), [](char c) =&amp;gt; {return charMap[c];});&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Just need the data:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;char    charMap[] =&#xA;                            // The majority of characters in this array&#xA;                            // map the poistion to the same character code.&#xA;                            //  charMap['A']  == 'A'&#xA;                            // For forbidden characters a space is in the position&#xA;                            //  charMap['&amp;lt;']  == ' '&#xA;                            //  Note: \xxx is an octal escape sequence&#xA;                            &quot;\000\001\002\003\004\005\006\007&quot;&#xA;                            &quot;\010\011\012\013\014\015\016\017&quot;&#xA;                            &quot;\020\021\022\023\024\025\026\027&quot;&#xA;                            &quot;\030\031\032\033\034\035\036\037&quot;&#xA;                            &quot;\040\041 \043\044\045\046\047&quot; // replaced \042(&quot;) with space&#xA;                            &quot;\050\051\052\053\054\055\056 &quot; // replaced \057(/) with space&#xA;                            &quot;\060\061\062\063\064\065\066\067&quot;&#xA;                            &quot;\070\071 \073 \075  &quot; // replaced \072(:)\074(&amp;lt;)\076(&amp;gt;)\077(?) with space&#xA;                            &quot;\100\101\102\103\104\105\106\107&quot;&#xA;                            &quot;\110\111\112\113\114\115\116\117&quot;&#xA;                            &quot;\120\121\122\123\124\125\126\127&quot;&#xA;                            &quot;\130\131\132\133 \135\136\137&quot; // replaced \134(\)&#xA;                            &quot;\140\141\142\143\144\145\146\147&quot;&#xA;                            &quot;\150\151\152\153\154\155\156\157&quot;&#xA;                            &quot;\160\161\162\163\164\165\166\167&quot;&#xA;                            &quot;\170\171\172\173\174\175\176\177&quot;&#xA;                            &quot;\200\201\202\203\204\205\206\207&quot;&#xA;                            &quot;\210\211\212\213\214\215\216\217&quot;&#xA;                            &quot;\220\221\222\223\224\225\226\227&quot;&#xA;                            &quot;\230\231\232\233\234\235\236\237&quot;&#xA;                            &quot;\240\241\242\243\244\245\246\247&quot;&#xA;                            &quot;\250\251\252\253\254\255\256\257&quot;&#xA;                            &quot;\260\261\262\263\264\265\266\267&quot;&#xA;                            &quot;\270\271\272\273\274\275\276\277&quot;&#xA;                            &quot;\300\301\302\303\304\305\306\307&quot;&#xA;                            &quot;\310\311\312\313\314\315\316\317&quot;&#xA;                            &quot;\320\321\322\323\324\325\326\327&quot;&#xA;                            &quot;\330\331\332\333\334\335\336\337&quot;&#xA;                            &quot;\340\341\342\343\344\345\346\347&quot;&#xA;                            &quot;\350\351\352\353\354\355\356\357&quot;&#xA;                            &quot;\360\361\362\363\364\365\366\367&quot;&#xA;                            &quot;\370\371\372\373\374\375\376\377&quot;;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="507" LastEditorUserId="507" LastEditDate="2011-01-28T14:28:02.050" LastActivityDate="2011-01-28T14:28:02.050" CommentCount="0" />
  <row Id="349" PostTypeId="2" ParentId="346" CreationDate="2011-01-28T02:20:27.817" Score="2" Body="&lt;p&gt;I have no idea what you're trying to do here, but it looks like you're splitting a string into groups of two a specified number of times? Despite the magic constants, etc. there's really no better way to &lt;strong&gt;do&lt;/strong&gt; it, but I think there's certainly a better way to format it (I'm assuming these are directories since you're using os.sep):&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The below is I think a more clear way to write it:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;file = '0123456789abcdef123'&#xA;dir_len = 2&#xA;path_len = 3&#xA;&#xA;path = os.sep.join(file[ x:(x+2) ] for x in range(0, dir_len * path_len-1, dir_len))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note that the [] around the list comprehension is gone - it's now a &lt;a href=&quot;http://linuxgazette.net/100/pramode.html&quot; rel=&quot;nofollow&quot;&gt;generator&lt;/a&gt;. For this example it really doesn't matter which one you use, but since this is Code Review generators are another Python concept you should look at.&lt;/p&gt;&#xA;" OwnerUserId="975" LastActivityDate="2011-01-28T02:20:27.817" CommentCount="0" />
  <row Id="350" PostTypeId="2" ParentId="296" CreationDate="2011-01-28T02:20:54.187" Score="3" Body="&lt;p&gt;A few semantic issues:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Do not use &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; tags.&lt;/strong&gt;&lt;br&gt;&#xA;If you must, you can use &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;, or even better, &lt;code&gt;&amp;lt;span class=&quot;bold&quot;&amp;gt;&amp;lt;/span&amp;gt;&lt;/code&gt;, and then style the class in your CSS.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Do not use &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; tags.&lt;/strong&gt;&lt;br&gt;&#xA;If you must, you can use &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;, or even better, &lt;code&gt;&amp;lt;span class=&quot;italic&quot;&amp;gt;&amp;lt;/span&amp;gt;&lt;/code&gt;, and then style the class in your CSS.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Do not use &lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt; tags for spacing.&lt;/strong&gt;&lt;br&gt;&#xA;If you require spacing, use &lt;code&gt;margin-bottom&lt;/code&gt; or &lt;code&gt;padding-bottom&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;" OwnerUserId="92" LastEditorUserId="22222" LastEditDate="2014-01-05T00:21:19.497" LastActivityDate="2014-01-05T00:21:19.497" CommentCount="8" />
  <row Id="352" PostTypeId="2" ParentId="343" CreationDate="2011-01-28T03:54:59.730" Score="5" Body="&lt;p&gt;Sorry folks, I cannot comment on anyone's reply because of my points. But I would refactor Martin York's SetSex() method to look like this: &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private void SetSex(string p)&#xA;{&#xA;      sexoMasculino.Checked = p.Equals(&quot;m&quot;, StringComparison.OrdinalIgnoreCase);&#xA;      sexoFemenino.Checked = !sexoMasculino.Checked;            &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="448" LastActivityDate="2011-01-28T03:54:59.730" CommentCount="4" />
  <row Id="353" PostTypeId="2" ParentId="340" CreationDate="2011-01-28T04:15:38.687" Score="3" Body="&lt;p&gt;Here is what's wrong with your code:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;Do not use variable names like &lt;code&gt;_o&lt;/code&gt;. Get an editor with good auto-completion.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;code&gt;typeof _o != 'object'&lt;/code&gt; does not do what you think it does: &lt;code&gt;typeof([1,2]) // &quot;object&quot;&lt;/code&gt;.&#xA;In general, doing those kinds of checks is a code smell.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;code&gt;if (!isNaN(parseInt(loc))) loc = parseInt(loc);&lt;/code&gt;. Confusing and not needed.&lt;br&gt;&#xA;JavaScript: &lt;code&gt;['a', 'b'][&quot;1&quot;] // 'b'&lt;/code&gt;. Same goes for the other &lt;code&gt;isNaN&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;code&gt;in&lt;/code&gt;. Do not do that check. &lt;code&gt;null&lt;/code&gt; is a value, but what you want to return is the lack of value. It is &lt;code&gt;undefined&lt;/code&gt; in JavaScript, and it is what will be returned if there is no value.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Consider using &lt;code&gt;split&lt;/code&gt; instead of &lt;code&gt;indexOf&lt;/code&gt; and &lt;code&gt;substring&lt;/code&gt;. It is much faster and makes the code more readable.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;So, here is a neat version for you:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function chained(obj, chain, value){&#xA;    var assigning = (value !== undefined);&#xA;    // split chain on array and property accessors&#xA;    chain = chain.split(/[.\[\]]+/);       &#xA;    // remove trailing ']' from split   &#xA;    if (!chain[chain.length - 1]) chain.pop();&#xA;    // traverse 1 level less when assigning&#xA;    var n = chain.length - assigning; &#xA;    for (var i = 0, data = obj; i &amp;lt; n; i++) {&#xA;        data = data[chain[i]];&#xA;        // if (data === undefined) return; // uncomment to handle bad chain keys      &#xA;    }&#xA;&#xA;    if (assigning) {&#xA;        data[chain[n]] = value;&#xA;        return obj;&#xA;    } else {&#xA;        return data;       &#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Blogged: &lt;a href=&quot;http://glebm.blogspot.com/2011/01/javascript-chained-nested-assignment.html&quot; rel=&quot;nofollow&quot;&gt;http://glebm.blogspot.com/2011/01/javascript-chained-nested-assignment.html&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Please come up with further improvements :)&lt;/p&gt;&#xA;" OwnerUserId="993" LastEditorUserId="993" LastEditDate="2013-08-09T15:47:26.887" LastActivityDate="2013-08-09T15:47:26.887" CommentCount="8" />
  <row Id="354" PostTypeId="1" AcceptedAnswerId="372" CreationDate="2011-01-28T05:33:47.420" Score="14" ViewCount="1062" Body="&lt;p&gt;I wrote a bunch of Ruby code for a book project I've just finished. One criticism is that it is fine code but not very &quot;ruby like&quot;. I agree my style was simplified for communication reasons, and although it's procedural code, it still feels &quot;ruby-like&quot; to me. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;For the representative example below, any ideas on making it more &quot;Ruby like&quot;?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;# Genetic Algorithm in the Ruby Programming Language&#xA;&#xA;# The Clever Algorithms Project: http://www.CleverAlgorithms.com&#xA;# (c) Copyright 2010 Jason Brownlee. Some Rights Reserved. &#xA;# This work is licensed under a Creative Commons Attribution-Noncommercial-Share Alike 2.5 Australia License.&#xA;&#xA;def onemax(bitstring)&#xA;  sum = 0&#xA;  bitstring.size.times {|i| sum+=1 if bitstring[i].chr=='1'}&#xA;  return sum&#xA;end&#xA;&#xA;def random_bitstring(num_bits)&#xA;  return (0...num_bits).inject(&quot;&quot;){|s,i| s&amp;lt;&amp;lt;((rand&amp;lt;0.5) ? &quot;1&quot; : &quot;0&quot;)}&#xA;end&#xA;&#xA;def binary_tournament(pop)&#xA;  i, j = rand(pop.size), rand(pop.size)&#xA;  j = rand(pop.size) while j==i&#xA;  return (pop[i][:fitness] &amp;gt; pop[j][:fitness]) ? pop[i] : pop[j]&#xA;end&#xA;&#xA;def point_mutation(bitstring, rate=1.0/bitstring.size)&#xA;  child = &quot;&quot;&#xA;   bitstring.size.times do |i|&#xA;     bit = bitstring[i].chr&#xA;     child &amp;lt;&amp;lt; ((rand()&amp;lt;rate) ? ((bit=='1') ? &quot;0&quot; : &quot;1&quot;) : bit)&#xA;  end&#xA;  return child&#xA;end&#xA;&#xA;def crossover(parent1, parent2, rate)&#xA;  return &quot;&quot;+parent1 if rand()&amp;gt;=rate&#xA;  point = 1 + rand(parent1.size-2)&#xA;  return parent1[0...point]+parent2[point...(parent1.size)]&#xA;end&#xA;&#xA;def reproduce(selected, pop_size, p_cross, p_mutation)&#xA;  children = []  &#xA;  selected.each_with_index do |p1, i|&#xA;    p2 = (i.modulo(2)==0) ? selected[i+1] : selected[i-1]&#xA;    p2 = selected[0] if i == selected.size-1&#xA;    child = {}&#xA;    child[:bitstring] = crossover(p1[:bitstring], p2[:bitstring], p_cross)&#xA;    child[:bitstring] = point_mutation(child[:bitstring], p_mutation)&#xA;    children &amp;lt;&amp;lt; child&#xA;    break if children.size &amp;gt;= pop_size&#xA;  end&#xA;  return children&#xA;end&#xA;&#xA;def search(max_gens, num_bits, pop_size, p_crossover, p_mutation)&#xA;  population = Array.new(pop_size) do |i|&#xA;    {:bitstring=&amp;gt;random_bitstring(num_bits)}&#xA;  end&#xA;  population.each{|c| c[:fitness] = onemax(c[:bitstring])}&#xA;  best = population.sort{|x,y| y[:fitness] &amp;lt;=&amp;gt; x[:fitness]}.first  &#xA;  max_gens.times do |gen|&#xA;    selected = Array.new(pop_size){|i| binary_tournament(population)}&#xA;    children = reproduce(selected, pop_size, p_crossover, p_mutation)    &#xA;    children.each{|c| c[:fitness] = onemax(c[:bitstring])}&#xA;    children.sort!{|x,y| y[:fitness] &amp;lt;=&amp;gt; x[:fitness]}&#xA;    best = children.first if children.first[:fitness] &amp;gt;= best[:fitness]&#xA;    population = children&#xA;    puts &quot; &amp;gt; gen #{gen}, best: #{best[:fitness]}, #{best[:bitstring]}&quot;&#xA;    break if best[:fitness] == num_bits&#xA;  end&#xA;  return best&#xA;end&#xA;&#xA;if __FILE__ == $0&#xA;  # problem configuration&#xA;  num_bits = 64&#xA;  # algorithm configuration&#xA;  max_gens = 100&#xA;  pop_size = 100&#xA;  p_crossover = 0.98&#xA;  p_mutation = 1.0/num_bits&#xA;  # execute the algorithm&#xA;  best = search(max_gens, num_bits, pop_size, p_crossover, p_mutation)&#xA;  puts &quot;done! Solution: f=#{best[:fitness]}, s=#{best[:bitstring]}&quot;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="997" LastEditorUserId="9357" LastEditDate="2015-01-29T19:12:08.147" LastActivityDate="2015-09-15T19:05:28.540" Title="Genetic algorithm for Clever Algorithms project" Tags="&lt;ruby&gt;&lt;genetic-algorithm&gt;" AnswerCount="4" CommentCount="5" FavoriteCount="5" />
  <row Id="355" PostTypeId="2" ParentId="354" CreationDate="2011-01-28T05:38:41.173" Score="4" Body="&lt;p&gt;An easy one is to remove the &lt;code&gt;return&lt;/code&gt; at the end of each method. Ruby automatically does a return of the last value. It's actually an extra method call to use &lt;code&gt;return&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strike&gt;The only time you specifically need to use return is&lt;/strike&gt; You don't even need to use return if you are returning multiple values:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def f&#xA;  [1,2]&#xA;end&#xA;&#xA;a,b = f&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Again, using &lt;code&gt;return&lt;/code&gt; costs an extra method call and those add up. If you can optimize your code by not using them you've just given yourself some free optimization.&lt;/p&gt;&#xA;" OwnerDisplayName="Mike Bethany" LastEditorUserId="656" LastEditDate="2011-01-28T23:47:29.310" LastActivityDate="2011-01-28T23:47:29.310" CommentCount="4" />
  <row Id="356" PostTypeId="1" CreationDate="2011-01-28T05:55:18.000" Score="0" ViewCount="585" Body="&lt;p&gt;I'm new to Hibernate so I need some advice/direction on doing Transactions.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I have a DAO like&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public class MyDao extends HibernateDaoSupport implements IMyDao {&#xA;&#xA; @Override&#xA; public Foo getFoo(int id) {&#xA;&#xA;  return (Foo)getHibernateTemplate().load(Foo.class, id);&#xA;&#xA; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;With this setup (using HibernateDaoSupport), will Hibernate/Spring handle transactions for me? Some of the examples I see say yes, others show using&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Transaction tx = getHibernateTemplate().getSessionFactory().getCurrentSession().beginTransaction();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;to get a Transaction in every DAO method.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Right now I'm assuming my minimal DAO is correct but I want to do a &quot;larger&quot; transaction that includes a couple of Hibernate calls in one method. Would I use the manual Transaction method there? Do I have to use it everywhere? Thanks.&lt;/p&gt;&#xA;" OwnerUserId="820" LastEditorUserId="820" LastEditDate="2011-02-01T04:03:47.593" LastActivityDate="2011-02-01T04:03:47.593" Title="Hibernate transaction advice" Tags="&lt;java&gt;&lt;hibernate&gt;" AnswerCount="2" CommentCount="3" ClosedDate="2011-02-03T17:01:00.213" />
  <row Id="357" PostTypeId="2" ParentId="354" CreationDate="2011-01-28T07:03:32.667" Score="6" Body="&lt;p&gt;Ruby library is quite powerful:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;onemax(bitstring)&lt;/code&gt; can be simply &lt;code&gt;bitstring.count('1')&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;random_bitstring(num_bits)&lt;/code&gt; is probably better off implemented as &lt;code&gt;rand(2**num_bits).to_s(2)&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The first thing to check out is this &lt;a href=&quot;http://ruby-doc.org/core-2.0/Enumerable.html&quot; rel=&quot;nofollow&quot;&gt;http://ruby-doc.org/core-2.0/Enumerable.html&lt;/a&gt;&lt;/p&gt;&#xA;" OwnerUserId="993" LastEditorUserId="993" LastEditDate="2013-02-27T20:17:10.653" LastActivityDate="2013-02-27T20:17:10.653" CommentCount="1" />
  <row Id="358" PostTypeId="2" ParentId="340" CreationDate="2011-01-28T07:40:59.673" Score="0" Body="&lt;p&gt;I know little about javascript, and thought yours solution is fine.&#xA;glebm's code seems not working for &lt;code&gt;parse_obj_key(obj, &quot;a.c.c.c&quot;, 2)&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I trying to modify your code to a recursion style, and it works, the &quot;new object&quot; goes wrong on my firefox, so I change it to = {}&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function parse_obj_key(obj, loc, val) {&#xA;    if(!obj || typeof obj != 'object') {&#xA;        alert(&quot;error&quot;)&#xA;        return null&#xA;    }&#xA;    var pos = loc.indexOf('.');&#xA;    var part = loc.substring(0, pos);&#xA;    var endpart = loc.substring(pos+1);&#xA;&#xA;    if (!isNaN(parseInt(part)))&#xA;        part = parseInt(part);&#xA;&#xA;    if (pos === -1) {&#xA;        if (val) {&#xA;            obj[loc] = val&#xA;            return obj&#xA;        }&#xA;        else&#xA;            return obj[loc]&#xA;    }&#xA;&#xA;    if (val) {&#xA;        if (!(part in obj)) &#xA;            obj[part] = {}&#xA;&#xA;        parse_obj_key(obj[part], endpart, val)&#xA;        return obj&#xA;    }&#xA;    else {&#xA;        return parse_obj_key(obj[part], endpart, val)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerDisplayName="user989" LastActivityDate="2011-01-28T07:40:59.673" CommentCount="1" />
  <row Id="359" PostTypeId="1" CreationDate="2011-01-28T07:56:03.023" Score="5" ViewCount="793" Body="&lt;p&gt;I want to write an Android &lt;a href=&quot;http://developer.android.com/reference/android/widget/ListAdapter.html&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;ListAdapter&lt;/code&gt;&lt;/a&gt; to serve data from a database that look like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;CREATE TABLE note (_id integer primary key autoincrement,&#xA;                   content text not null)&#xA;CREATE TABLE tag (_id integer primary key autoincrement,&#xA;                  name text not null);&#xA;CREATE TABLE relation (_id integer primary key autoincrement,&#xA;                       noteid integer not null,&#xA;                       tagid integer not null,&#xA;                       idx integer not null);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I use this database to store notes and their associated tags as an ordered list. One requirement of the ListAdapter is that it must be able to update the ListView contents if the underlying data changes. I can query all the notes in the database with this query:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;SELECT note._id AS noteid, &#xA;       note.content, &#xA;       relation.idx AS tagidx,&#xA;       tag.name&#xA;FROM note&#xA;LEFT JOIN relation ON (relation.noteid = note._id)&#xA;LEFT JOIN tag ON (tag._id = relation.tagid)&#xA;ORDER BY noteid, tagidx;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Which will give me results looking like this (null values shown for clarity):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;0|foo bar baz|0|x&#xA;1|hello world|null|null&#xA;2|one more nn|0|yy&#xA;2|one more nn|1|y&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;As you can see, a note with more than one tag will be located on more than one row in the result. This means that I can't look at the cursor size to determine the number of notes, I need to traverse the entire Cursor to get a count. I don't want to do that.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The solution I have come up with so far is to use two cursors: one with the query mentioned above and one with a query containing the number of rows in the notes table (&lt;code&gt;select count(*) from notes&lt;/code&gt;). In the constructor I call &lt;code&gt;intializeCursors()&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private void initializeCursors() {&#xA;    notesCursor.moveToFirst();&#xA;    countCursor.moveToFirst();&#xA;    count = countCursor.getInt(0);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I have implemented  &lt;code&gt;getItem()&lt;/code&gt; like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public Note getItem(int position) {&#xA;    // notes is a List of notes that we have already read.&#xA;    if (position &amp;lt; notes.size()) { &#xA;        return notes.get(position);&#xA;    }&#xA;&#xA;    int cursorPosition = notes.size();&#xA;    while (cursorPosition &amp;lt;= position) {&#xA;        // Creates a note by reading the correct number of rows.&#xA;        Note note = NotesDb.noteFrom(notesCursor); &#xA;        notes.add(note);&#xA;        ++cursorPosition;&#xA;    }&#xA;    return notes.get(position);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The adapter assumes that the cursors are being managed by some &lt;a href=&quot;http://developer.android.com/reference/android/app/Activity.html&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;Activity&lt;/code&gt;&lt;/a&gt; that has called &lt;a href=&quot;http://developer.android.com/reference/android/app/Activity.html#startManagingCursor(android.database.Cursor)&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;startManagingCursor()&lt;/code&gt;&lt;/a&gt; on them.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So far so good, I guess. The problem is now how to handle the cursor being &lt;a href=&quot;http://developer.android.com/reference/android/database/Cursor.html#requery()&quot; rel=&quot;nofollow&quot;&gt;requeried&lt;/a&gt;. Since I have two cursors I need to register listeners for both of them and when I have received &lt;a href=&quot;http://developer.android.com/reference/android/database/DataSetObserver.html#onChanged()&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;onChange()&lt;/code&gt;&lt;/a&gt; for both of them I can &lt;code&gt;initializeCursors()&lt;/code&gt; and notify any listeners registered to my &lt;a href=&quot;http://developer.android.com/reference/android/widget/ListAdapter.html&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;ListAdapter&lt;/code&gt;&lt;/a&gt; of a change in the its data.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The requery scenario is the actual reason that I needed two cursors in the first place. I have not figured out a way to count the number of notes in a required cursor other than asking the database using another cursor.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is the best I have so far. I want to check the sanity of this approach with this group. :-) Is this two cursor approach too complicated? Perhaps I have missed some part of the API that solves this nicely for me?&lt;/p&gt;&#xA;" OwnerUserId="589" LastEditorUserId="62429" LastEditDate="2015-06-04T14:16:15.693" LastActivityDate="2015-06-04T14:16:15.693" Title="Android ListAdapter design advice" Tags="&lt;java&gt;&lt;android&gt;&lt;sqlite&gt;" AnswerCount="1" CommentCount="0" FavoriteCount="1" />
  <row Id="361" PostTypeId="2" ParentId="343" CreationDate="2011-01-28T10:38:25.383" Score="2" Body="&lt;pre&gt;&lt;code&gt;public StudentInformation()&#xA;    {&#xA;        InitializeComponent();&#xA;        LoadComboBoxes();&#xA;        LoadBranding();&#xA;        IsCreating = true;&#xA;    }&#xA;&#xA;    public StudentInformation(int studentID)&#xA;    {&#xA;        InitializeComponent();&#xA;        LoadComboBoxes();&#xA;        LoadBranding();&#xA;&#xA;        student = repo.FindStudent(studentID);&#xA;        LoadStudentInformation(student);&#xA;&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;can be refactored to,&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// default IsCreating to true&#xA;bool IsCreating = true;&#xA;&#xA;public StudentInformation()&#xA;    {&#xA;        InitializeComponent();&#xA;        LoadComboBoxes();&#xA;        LoadBranding();&#xA;    }&#xA;&#xA;    public StudentInformation(int studentID) : this()&#xA;    {&#xA;        IsCreating = false;&#xA;        student = repo.FindStudent(studentID);&#xA;        LoadStudentInformation(student);&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Also there is lot of code in your Form control class which should be part of controller (MVC) / presenter (MVP) like using those repositories also save information should be with controller part to notify the model to save data.&lt;/p&gt;&#xA;" OwnerUserId="1019" LastActivityDate="2011-01-28T10:38:25.383" CommentCount="0" />
  <row Id="362" PostTypeId="1" AcceptedAnswerId="375" CreationDate="2011-01-28T11:14:15.870" Score="11" ViewCount="1490" Body="&lt;p&gt;Should my class pass parameters internally or reference class level scoped variables?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'm not sure on the best approach or style for procedure calls that have parameters. Should I go with the class level scoped variables?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public class YouOweTheGovernment&#xA;{&#xA;    public float AmountToPay { get; private set; }&#xA;    public float ArbitraryTaxRate { get; private set; }&#xA;    public float Salary { get; private set; }&#xA;&#xA;    public YouOweTheGovernment(float taxRate, float salary)&#xA;    {&#xA;        this.ArbitraryTaxRate = taxRate;&#xA;        this.Salary = salary;&#xA;&#xA;        CalculateAmount();&#xA;    }&#xA;&#xA;    private void CalculateAmount()&#xA;    {&#xA;        this.AmountToPay = (this.Salary * (this.ArbitraryTaxRate / 100));&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Or explicitly pass parameters into a procedure?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public class YouOweTheGovernment&#xA;{&#xA;    public float AmountToPay { get; private set; }&#xA;    public float ArbitraryTaxRate { get; private set; }&#xA;    public float Salary { get; private set; }&#xA;&#xA;    public YouOweTheGovernment(float taxRate, float salary)&#xA;    {&#xA;        this.ArbitraryTaxRate = taxRate;&#xA;        this.Salary = salary;&#xA;&#xA;        CalculateAmount(this.Salary, this.ArbitraryTaxRate);&#xA;    }&#xA;&#xA;    private void CalculateAmount(float salary, float taxRate)&#xA;    {&#xA;        this.AmountToPay = (salary * (taxRate / 100));&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In my contrived example I think the first is clearer, but as a class grows in size and complexity it would make it harder to track what is coming from where.&lt;/p&gt;&#xA;" OwnerUserId="785" LastEditorUserId="22222" LastEditDate="2014-12-15T18:00:24.100" LastActivityDate="2014-12-15T18:02:29.840" Title="&quot;Do you owe the government?&quot; classes" Tags="&lt;c#&gt;&lt;classes&gt;&lt;finance&gt;" AnswerCount="5" CommentCount="1" FavoriteCount="4" />
  <row Id="363" PostTypeId="2" ParentId="362" CreationDate="2011-01-28T11:54:52.367" Score="4" Body="&lt;p&gt;Since this is Code Review, I will first start with mentioning that you are not validating the logical correctness of your numbers, salary can't be negative, for example (Unless you're an evil employer). You may have left it out to shorten the question, but consider it a reminder.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If the Calculate amount function does just this single line, then a better approach for you is to take its line &lt;code&gt;this.AmountToPay = (salary * (taxRate / 100));&lt;/code&gt; and put it in the constructor as well. If it is one line, why call a function, load a stack frame and store registers? Just inline that line of logic in the constructor itself, this way &lt;code&gt;AmountToPay&lt;/code&gt; will be initialized with the values from the constructor's arguments, so its access will be faster because it's a local variable (beating the first example), and the logic that updates the &lt;code&gt;AmountToPay&lt;/code&gt; will not need a function call including stacking up arguments (beating the second example).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If, however, you plan on creating more than one constructor, then keep all the shared code in one place (An &lt;code&gt;init()&lt;/code&gt; function).&#xA;For example suppose we wanted another constructor which also took your loans, then you might do this.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;YouOweTheGov(float taxRate, float salary, float loans)&#xA;{&#xA;... Process logic relating to loans..&#xA;init(taxRate,salary); // this function updates ArbitraryTaxRate,Salary,AmountToPay&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Keep the shared logic in one place, don't call a function if it does a very small piece of code at the constructor because of function preparation overhead (and construction will happen a lot, especially when passing or returning objects!), but rather add the code in the constructor itself. If you have more than one constructor then keep all shared code in a function (don't repeat code!)&lt;/p&gt;&#xA;" OwnerUserId="1025" LastEditorUserId="18427" LastEditDate="2014-12-15T17:59:33.923" LastActivityDate="2014-12-15T17:59:33.923" CommentCount="2" />
  <row Id="364" PostTypeId="1" AcceptedAnswerId="384" CreationDate="2011-01-28T12:15:44.040" Score="8" ViewCount="2114" Body="&lt;p&gt;I've built a custom control that generates a tab style navigation.  Each page might have different tabs to display, the aim was to modularise it so I can make global changes to all the tabs.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;TabMenu.ascx&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;%@ Control Language=&quot;C#&quot; AutoEventWireup=&quot;true&quot; CodeFile=&quot;TabMenu.ascx.cs&quot; Inherits=&quot;TabMenu&quot; %&amp;gt;&#xA;&#xA;&amp;lt;asp:Panel runat=&quot;server&quot; ID=&quot;TabMenuWrapper&quot; CssClass=&quot;tabWrapper&quot;&amp;gt;&#xA;&#xA;&amp;lt;/asp:Panel&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;TabMenu.ascx.cs&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;using System;&#xA;using System.Collections.Generic;&#xA;using System.Web;&#xA;using System.Web.UI;&#xA;using System.Web.UI.WebControls;&#xA;using System.Collections;&#xA;&#xA;public partial class TabMenu : System.Web.UI.UserControl&#xA;{&#xA;    public string TabGroup { get; set; }    // The tab group this control belongs to&#xA;    public int SelectedTab { get; set; }    // Index of selected tab&#xA;&#xA;    protected void Page_Load(object sender, EventArgs e)&#xA;    {&#xA;        ArrayList tabCollection = new ArrayList();&#xA;        MenuTab myTab;&#xA;&#xA;        // Artorking tab group&#xA;        if (this.TabGroup.ToLower() == &quot;artwork&quot;)&#xA;        {&#xA;            myTab = new MenuTab() { linkURL = &quot;artworkHome.aspx&quot;, linkText = &quot;First!&quot; };&#xA;            tabCollection.Add(myTab);&#xA;&#xA;            myTab = new MenuTab() { linkURL = &quot;artworkHome.aspx&quot;, linkText = &quot;Second!&quot; };&#xA;            tabCollection.Add(myTab);&#xA;&#xA;            myTab = new MenuTab() { linkURL = &quot;artworkHome.aspx&quot;, linkText = &quot;3rd!&quot; };&#xA;            tabCollection.Add(myTab);&#xA;&#xA;            myTab = new MenuTab() { linkURL = &quot;artworkHome.aspx&quot;, linkText = &quot;Fourth!&quot; };&#xA;            tabCollection.Add(myTab);            &#xA;        }&#xA;&#xA;        // Add tabs to the page&#xA;        for (int i = 0; i &amp;lt; tabCollection.Count; i++)&#xA;        {&#xA;            MenuTab thisTab = ((MenuTab)(tabCollection[i]));&#xA;            thisTab.CreateTab();&#xA;&#xA;            if (i == this.SelectedTab)&#xA;            {&#xA;                thisTab.tabPanel.CssClass = &quot;tab tabSelected&quot;;&#xA;            }&#xA;&#xA;            TabMenuWrapper.Controls.Add(thisTab.tabPanel);&#xA;        }&#xA;        TabMenuWrapper.Controls.Add(new Panel(){CssClass = &quot;clear&quot;});&#xA;&#xA;    }&#xA;}&#xA;&#xA;// A menu tab&#xA;public class MenuTab&#xA;{&#xA;    public string linkURL;&#xA;    public string linkText;&#xA;    public HyperLink tabLink;&#xA;    public Panel tabPanel;&#xA;&#xA;    // Create internal controls&#xA;    public void CreateTab()&#xA;    {&#xA;        this.tabLink = new HyperLink() { NavigateUrl = this.linkURL, Text = this.linkText };&#xA;        this.tabPanel = new Panel() { CssClass = &quot;tab&quot; };&#xA;        this.tabPanel.Controls.Add(this.tabLink);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Used as follows:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;CrystalControls:TabMenu runat=&quot;server&quot; ID=&quot;TopMenu&quot; TabGroup=&quot;Artwork&quot; SelectedTab=&quot;1&quot; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And renders like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;tab&quot;&amp;gt;&#xA;&#xA;  &amp;lt;a href=&quot;Controls/artworkHome.aspx&quot;&amp;gt;First!&amp;lt;/a&amp;gt;&#xA;&#xA; &amp;lt;/div&amp;gt;&amp;lt;div class=&quot;tab tabSelected&quot;&amp;gt;&#xA;&#xA;  &amp;lt;a href=&quot;Controls/artworkHome.aspx&quot;&amp;gt;Second!&amp;lt;/a&amp;gt;&#xA;&#xA; &amp;lt;/div&amp;gt;&amp;lt;div class=&quot;tab&quot;&amp;gt;&#xA;&#xA;  &amp;lt;a href=&quot;Controls/artworkHome.aspx&quot;&amp;gt;3rd!&amp;lt;/a&amp;gt;&#xA;&#xA; &amp;lt;/div&amp;gt;&amp;lt;div class=&quot;tab&quot;&amp;gt;&#xA;&#xA;  &amp;lt;a href=&quot;Controls/artworkHome.aspx&quot;&amp;gt;Fourth!&amp;lt;/a&amp;gt;&#xA;&#xA; &amp;lt;/div&amp;gt;&amp;lt;div class=&quot;clear&quot;&amp;gt;&#xA;&#xA;&#xA;&#xA; &amp;lt;/div&amp;gt;&#xA;&#xA;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Is this a good design?&lt;/p&gt;&#xA;" OwnerUserId="154" LastActivityDate="2012-01-14T21:08:24.447" Title="ASP.net custom user control design" Tags="&lt;c#&gt;&lt;asp.net&gt;" AnswerCount="3" CommentCount="0" FavoriteCount="1" />
  <row Id="365" PostTypeId="1" AcceptedAnswerId="367" CreationDate="2011-01-28T12:26:13.537" Score="6" ViewCount="270" Body="&lt;p&gt;I've had to make several functions to turn some structures into strings. I am a still green when it comes C so I am unsure if I am doing this a very awkward way. The system I am coding for does not have snprintf, I know that would be far more elegant, however I cannot use it.&#xA;Any advice?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;int device_to_string(char* const asString, pDevice dev, size_t maxLength)&#xA;{&#xA;  char* ipAsString;&#xA;  size_t actualLength;&#xA;  struct in_addr addr;&#xA;&#xA;  if (dev == NULL)&#xA;  {&#xA;    return NULL_ERROR;&#xA;  }&#xA;&#xA;  addr.s_addr = dev-&amp;gt;ip;&#xA;  ipAsString = inet_ntoa(addr);&#xA;&#xA;  actualLength = strlen(&quot;name=&quot;)  + strlen(dev-&amp;gt;name) +&#xA;                 strlen(&quot;&amp;amp;ip=&quot;)   + strlen(ipAsString) +&#xA;                 strlen(&quot;&amp;amp;mac=&quot;)  + strlen(dev-&amp;gt;mac)  +&#xA;                 strlen(&quot;&amp;amp;type=&quot;) + strlen(dev-&amp;gt;type) + 1;&#xA;&#xA;  if (actualLength &amp;gt; maxLength)&#xA;  {&#xA;    return SIZE_ERROR;&#xA;  }&#xA;&#xA;  strncat(asString, &quot;name=&quot;,    strlen(&quot;name=&quot;));&#xA;  strncat(asString, dev-&amp;gt;name,  strlen(dev-&amp;gt;name));&#xA;  strncat(asString, &quot;&amp;amp;ip=&quot;,     strlen(&quot;&amp;amp;ip=&quot;));&#xA;  strncat(asString, ipAsString, strlen(ipAsString));&#xA;  strncat(asString, &quot;&amp;amp;mac=&quot;,    strlen(&quot;&amp;amp;mac=&quot;));&#xA;  strncat(asString, dev-&amp;gt;mac,   strlen(dev-&amp;gt;mac));&#xA;  strncat(asString, &quot;&amp;amp;type=&quot;,   strlen(&quot;&amp;amp;type=&quot;));&#xA;  strncat(asString, dev-&amp;gt;type,  strlen(dev-&amp;gt;type));&#xA;&#xA;  asString[actualLength] = '\0';&#xA;&#xA;  return NO_ERROR;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1028" LastActivityDate="2011-01-30T10:29:11.240" Title="Struct to web style string" Tags="&lt;c&gt;&lt;strings&gt;" AnswerCount="4" CommentCount="4" FavoriteCount="1" />
  <row Id="366" PostTypeId="1" AcceptedAnswerId="373" CreationDate="2011-01-28T12:30:47.890" Score="11" ViewCount="9567" Body="&lt;p&gt;I've been doing a simple Tic-Tac-Toe with PHP, generating only HTML code.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A few notes:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;I didn't bother yet to give an AI to the opponents (the Os), and it is intentional. &lt;/li&gt;&#xA;&lt;li&gt;There is no CSS style to it, I intend to append it with a css file.  &lt;/li&gt;&#xA;&lt;li&gt;tictactoe.php is naturally the name of the script itself, so each links are refering to the page itself.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Now I don't know if I did everything correctly, here are my concern:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;If I want to expand the functionalities of the game in the future (adding javascript, opponent AIs, new game features), I fear that the structure of the code is not adapted for it. Should I change my code so it is Object Oriented? &lt;strong&gt;EDIT&lt;/strong&gt; I have in mind to add new feature to the game, like powers who would change the state of the board, like rewind to a previous state and; some css and javascript in a non-intrusive way and add some way to check if options are disabled (like javascript/flash), or check for the version of the browser for html5/css3 features.&lt;/li&gt;&#xA;&lt;li&gt;As for now, it is easy to &quot;cheat&quot; and directly introduce the wished board state. I would like to prevent that, and if possible without using javascript, as I want the game to be playable also without it.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;table&amp;gt;&#xA;&amp;lt;?php&#xA;//Determine if a player as aligned three of its symbols and return the id of the player (1&#xA;//for X Player, -1 for O Player(Computer)). Otherwise return 0;&#xA;function isWinState($board){&#xA;    $winning_sequences = '012345678036147258048642';&#xA;    for($i=0;$i&amp;lt;=21;$i+=3){&#xA;        $player = $board[$winning_sequences[$i]];&#xA;        if($player == $board[$winning_sequences[$i+1]]){&#xA;            if($player == $board[$winning_sequences[$i+2]]){&#xA;                if($player!=0){&#xA;                    return $player;&#xA;                }&#xA;            } &#xA;        }   &#xA;    }&#xA;    return 0;&#xA;}&#xA;&#xA;//Player O plays its turn at random&#xA;function OsTurn($board){&#xA;    if(in_array(0,$board)){&#xA;        $i = mt_rand(0,8);&#xA;        while($board[$i]!=0){&#xA;            $i = mt_rand(0,8);&#xA;        }&#xA;        $board[$i]=-1;&#xA;    }&#xA;    return $board;&#xA;}&#xA;&#xA;$winstate = 0;&#xA;$values = array();&#xA;&#xA;if(empty($_GET['values'])){&#xA;    //initializing the board&#xA;    $values = array_fill(0,9,0);&#xA;    //determine who begins at random&#xA;    if(mt_rand(0,1)){&#xA;        $values = OsTurn($values);&#xA;    }&#xA;}else{&#xA;    //get the board&#xA;    $values = explode(',',$_GET['values']);&#xA;    //Check if a player X won, if not, player 0 plays its turn.&#xA;    $winstate = isWinState($values);&#xA;    if($winstate==0){&#xA;        $values = OsTurn($values);&#xA;    }&#xA;    //Check if a player 0 won&#xA;    $winstate = isWinState($values);    &#xA;}&#xA;//Display the board as a table&#xA;for($i=0;$i&amp;lt;9;$i++){&#xA;    //begin of a row&#xA;    if(fmod($i,3)==0){echo '&amp;lt;tr&amp;gt;';}&#xA;    echo '&amp;lt;td&amp;gt;';&#xA;    //representation of the player token, depending on the ID&#xA;    if($values[$i]==1){&#xA;        echo 'X';&#xA;    }else if($values[$i]==-1){&#xA;        echo 'O';&#xA;    }else{&#xA;        //If noone put a token on this, and if noone won, make a link to allow player X to&#xA;        //put its token here. Otherwise, empty space.&#xA;        if($winstate==0){&#xA;            $values_link = $values;&#xA;            $values_link[$i]=1;&#xA;            echo '&amp;lt;a href=&quot;tictactoe.php?values='.implode(',',$values_link).'&quot;&amp;gt;&amp;amp;nbsp;&amp;lt;/a&amp;gt;';&#xA;        }else{&#xA;            echo '&amp;amp;nbsp;';&#xA;        }&#xA;    }&#xA;    echo '&amp;lt;/td&amp;gt;';&#xA;    //end of a row&#xA;    if(fmod($i,3)==2){echo '&amp;lt;/tr&amp;gt;';}&#xA;}&#xA;?&amp;gt;&#xA;&amp;lt;/table&amp;gt;&#xA;&amp;lt;?php&#xA;//If someone won, display the message&#xA;if($winstate!=0){&#xA;    echo '&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;Player '.(($winstate==1)?'X':'O').' won!&amp;lt;/b&amp;gt;&amp;lt;/p&amp;gt;';&#xA;}&#xA;?&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1029" LastEditorUserId="22222" LastEditDate="2013-12-24T01:16:06.733" LastActivityDate="2013-12-24T01:16:06.733" Title="Simple Tic-Tac-Toe PHP/Pure HTML" Tags="&lt;php&gt;&lt;game&gt;" AnswerCount="1" CommentCount="1" />
  <row Id="367" PostTypeId="2" ParentId="365" CreationDate="2011-01-28T12:36:22.930" Score="4" Body="&lt;p&gt;Yeah, without &lt;code&gt;snprintf&lt;/code&gt; and &lt;code&gt;sprintf&lt;/code&gt; it gets a bit tedious, but I think this code is actually quite clear. You use your horizontal and vertical whitespace very well, and it's clear what you're doing with each block of code. You have also controlled for any possible issues that might come up (null pointer, insufficient buffer length, etc). Maybe there's a more concise way to do it, but in terms of clarity and maintainability I think this code will suffice.&lt;/p&gt;&#xA;" OwnerUserId="45" LastActivityDate="2011-01-28T12:36:22.930" CommentCount="0" />
  <row Id="368" PostTypeId="2" ParentId="286" CreationDate="2011-01-28T13:01:31.183" Score="0" Body="&lt;p&gt;Depending on how you feel about the use of Objective-C 2.0 properties you can you can:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;window.level = kCGScreenSaverWindowLevel;&#xA;[window setOpaque:NO];&#xA;window.styleMask = 0;&#xA;window.backgroundColor = [NSColor colorWithCalibratedWhite:0.0 alpha:0.3];&#xA;window.alphaValue = 0;&#xA;&#xA;[window setFrame:[window frameRectForContentRect:window.screen.frame] display:YES animate:YES];&#xA;&#xA;[window makeKeyAndOrderFront:self];&#xA;[window.animator setAlphaValue:1.0];&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I had programmed in C# for many years before taking up Objective-C and I still find the bracket notation hard to read at times. For my own readability I would would also introduce a variable for the new frame.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;NSRect newFrame = [window frameRectForContentRect:window.screen.frame];&#xA;[window setFrame:newFrame display:YES animate:YES];&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1031" LastActivityDate="2011-01-28T13:01:31.183" CommentCount="0" />
  <row Id="369" PostTypeId="1" AcceptedAnswerId="387" CreationDate="2011-01-28T13:13:39.513" Score="23" ViewCount="41361" Body="&lt;p&gt;In our console app, the parsing of application arguments is done like so:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;using System.Linq;&#xA;&#xA;namespace Generator&#xA;{&#xA;    internal class Program&#xA;    {&#xA;        public static void Main(string[] args)&#xA;        {&#xA;            var param1 = args.SingleOrDefault(arg =&amp;gt; arg.StartsWith(&quot;p1:&quot;));&#xA;            if (!string.IsNullOrEmpty(param1))&#xA;            {&#xA;                param1  = param1.Replace(&quot;p1:&quot;, &quot;&quot;);&#xA;            }&#xA;            //...&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It's supposed to be called like this:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;pre&gt;&lt;code&gt;`Generator.exe p1:somevalue`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Is there a better/simpler way to parse arguments?&lt;/p&gt;&#xA;" OwnerUserId="201" LastEditorUserId="59481" LastEditDate="2015-12-14T01:48:40.767" LastActivityDate="2015-12-14T01:48:40.767" Title="Parsing console application arguments" Tags="&lt;c#&gt;&lt;parsing&gt;&lt;console&gt;" AnswerCount="6" CommentCount="1" FavoriteCount="7" />
  <row Id="370" PostTypeId="2" ParentId="369" CreationDate="2011-01-28T13:34:13.460" Score="0" Body="&lt;p&gt;You could use foreach for iterating through the agruments and then for your argument with index 1 you could use regular expression to retrieve parsed text after p1: &lt;/p&gt;&#xA;" OwnerUserId="1019" LastActivityDate="2011-01-28T13:34:13.460" CommentCount="1" />
  <row Id="371" PostTypeId="2" ParentId="369" CreationDate="2011-01-28T13:38:52.283" Score="19" Body="&lt;p&gt;With such an implementation you will have to repeat yourself for each param.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Alternative:  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var parsedArgs = args&#xA;    .Select(s =&amp;gt; s.Split(new[] {':'}, 1))&#xA;    .ToDictionary(s =&amp;gt; s[0], s =&amp;gt; s[1]);&#xA;string p1 = parsedArgs[&quot;p1&quot;];&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="645" LastActivityDate="2011-01-28T13:38:52.283" CommentCount="5" />
  <row Id="372" PostTypeId="2" ParentId="354" CreationDate="2011-01-28T13:41:09.987" Score="20" Body="&lt;p&gt;First a note on your general design: You use hashmaps to represent members of the population. I'd rather recommend you create a little class to represent them:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class Individual&#xA;  include Comparable&#xA;&#xA;  attr_reader :bitstring, :fitness&#xA;&#xA;  def initialize(bitstring)&#xA;    @bit_string = bitstring&#xA;    @fitness = onemax(bitstring)&#xA;  end&#xA;&#xA;  def &amp;lt;=&amp;gt;(other)&#xA;    fitness &amp;lt;=&amp;gt; other.fitness&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You'll now use &lt;code&gt;Individual.new(bitstring)&lt;/code&gt; to create a new individual (which will automatically calculate its own fittness) and &lt;code&gt;individual.bitstring&lt;/code&gt; and &lt;code&gt;individual.fitness&lt;/code&gt; to get an individual's bitstring or fitness respectively.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This has the benefit that now the logic of how to calculate an individuals fitness lives in the &lt;code&gt;Individual&lt;/code&gt; class instead of in multiple place in the &lt;code&gt;search&lt;/code&gt; method. This is a more natural place for it and makes it easier to find and change should you ever decide to use a different fitness function.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also note that I included Comparable, implementing &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; based on fitness. This means that you can now compare individuals to each other such that an individual is greater than another if and only if its fitness is greater. This allows you to use &lt;code&gt;&amp;gt;&lt;/code&gt; on two individuals as well as methods like &lt;code&gt;max&lt;/code&gt; to get the individual with the greatest fitness out of an array of individuals. It also allows you to call &lt;code&gt;sort&lt;/code&gt; on array of individuals without passing a block. This will simplify your code in some places.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;In a comment you mentioned that you don't want to use classes. However I still think that it would greatly improve your design to have the logic for creating new individuals and calculating their fitness in one single place, so you should at least factor it out into a method like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def create_individual(bitstring)&#xA;    {:bitstring =&amp;gt; bitstring, :fitness =&amp;gt; onemax(bitstring)}&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Now some notes on particular pieces of code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;bitstring.size.times {|i| sum+=1 if bitstring[i].chr=='1'}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;As has already been mentioned, this can easily be replaced with a call to &lt;code&gt;count&lt;/code&gt;. However as a general note I want to point out that it's good practice to avoid index-based loops wherever possible, so if &lt;code&gt;count&lt;/code&gt; did not exist, I'd write the above like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;bitstring.each_char {|c| sum+=1 if c == '1'}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Or for 1.8.6 compability:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;bitstring.each_byte {|b| sum+=1 if b.chr == '1'}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(0...num_bits).inject(&quot;&quot;){|s,i| s&amp;lt;&amp;lt;((rand&amp;lt;0.5) ? &quot;1&quot; : &quot;0&quot;)}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;When dealing with &lt;code&gt;inject&lt;/code&gt;, it's usually a good idea to keep the function simple, so it's more easily understandable. Often you can separate the logic of generating the elements from the logic of combining them, by using &lt;code&gt;map&lt;/code&gt; before &lt;code&gt;inject&lt;/code&gt;. This would make your code look like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(0...num_bits).map {|i| (rand&amp;lt;0.5) ? &quot;1&quot; : &quot;0&quot;}.inject(&quot;&quot;) {|s,i| s&amp;lt;&amp;lt;i}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now there's two things to notice here:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Whenever you call &lt;code&gt;map&lt;/code&gt; on a range from 0 to some size, you might rather want to use &lt;code&gt;Array.new(size) {block}&lt;/code&gt; which creates an array of the given size by calling the block &lt;code&gt;size&lt;/code&gt; times.&lt;/li&gt;&#xA;&lt;li&gt;The smaller &lt;code&gt;inject&lt;/code&gt; is now much easier to understand, but happens to be equivalent to calling &lt;code&gt;join&lt;/code&gt;, so let's just do that.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;So your code becomes:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Array.new(num_bits) { (rand&amp;lt;0.5) ? &quot;1&quot; : &quot;0&quot; }.join&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This way you create a temporary array, which you didn't before, but on the other hand your code became much more understandable, so that little inefficiency should be worth it.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(pop[i][:fitness] &amp;gt; pop[j][:fitness]) ? pop[i] : pop[j]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Thanks to the &lt;code&gt;Individual&lt;/code&gt; class this now looks like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(pop[i] &amp;gt; pop[j]) ? pop[i] : pop[j]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This isn't much different, but note that it now has the form &lt;code&gt;(x &amp;gt; y) ? x : y&lt;/code&gt;, which incidentally means &quot;the maximum of two objects&quot;. In other words we can simplify this code by using the &lt;code&gt;max&lt;/code&gt; method:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;[ pop[i], pop[j] ].max&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;bitstring.size.times do |i|&#xA;  bit = bitstring[i].chr&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Again this should be &lt;code&gt;bitstring.each_char do |bit|&lt;/code&gt; or &lt;code&gt;bitstring.each_byte do |b| bit = b.chr&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&quot;&quot;+parent1 if rand()&amp;gt;=rate&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;s&gt;I'm not sure what the &lt;code&gt;&quot;&quot;+&lt;/code&gt; is supposed to do here. Remove it. Note that &lt;code&gt;&quot;&quot;+x&lt;/code&gt; is not a way to turn &lt;code&gt;x&lt;/code&gt; into a string in ruby (like it would be in e.g. Java). Calling &lt;code&gt;&quot;&quot;+x&lt;/code&gt; when &lt;code&gt;x&lt;/code&gt; is not a string (or &quot;duck-string&quot;), will cause a type error.&lt;/s&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The fact that you're using &lt;code&gt;&quot;&quot;+&lt;/code&gt; to create a copy is less than obvious (thus the above paragraph). If you use the &lt;code&gt;dup&lt;/code&gt; method, whose sole purpose it is to create a copy, instead, it will be much more understandable.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;I'd also change the &lt;code&gt;crossover&lt;/code&gt; method to return an individual rather than a string, which makes the code a bit simpler.&lt;/p&gt;&#xA;" OwnerUserId="128" LastEditorUserId="128" LastEditDate="2015-09-15T19:05:28.540" LastActivityDate="2015-09-15T19:05:28.540" CommentCount="3" />
  <row Id="373" PostTypeId="2" ParentId="366" CreationDate="2011-01-28T13:58:39.723" Score="7" Body="&lt;p&gt;There isn't really a reason to make this &quot;more object-oriented&quot; if you don't need to. To add more AI constructs, for example, you can do:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;switch ($aiLevel) {&#xA;   case 1: $values = $OsTurn($values);&#xA;   case 2: $values = $betterAi($values);&#xA;   case 3: $values = $unbeatableAi($values);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Adding more features could be done in a similiar manner. I'm not sure exacly wht you have in mind, so I can only make some general comments. Break down everything into functions, and make sure that it's easy to see the flow of the program. The way you've structured your code is good. It should not be difficult to add more features if you use similiar style.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;CSS won't affect your script; it just changes how the page looks. You'll just need to be sure you use the right elements when outputting html. Javascript may be trickier, but there are many ways of doing that including form elements (possibly hidden) and page submits. There may be other ways that I'm not aware of as I'm not primarily a web programmer.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I believe when you are talking about cheating, you're saying that you can send a winning board value set to the script by typing the URL yourself. To prevent this you need a way to preserve state. A cookie would be an easy way to start; store the current state of the board in it after every page call, and check that the only change was the placing of another piece. A more robust, but somewhat more involved, solution would be to use session variables to store the state. This would avoid the &quot;cookys are bad&quot; problem and the possibility that someone might fake the cooky!&lt;/p&gt;&#xA;" OwnerUserId="110" LastEditorUserId="110" LastEditDate="2011-01-28T15:30:45.790" LastActivityDate="2011-01-28T15:30:45.790" CommentCount="5" />
  <row Id="374" PostTypeId="1" AcceptedAnswerId="392" CreationDate="2011-01-28T14:08:51.607" Score="8" ViewCount="926" Body="&lt;p&gt;Here is the skeleton of my (first!) Django app:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;# models.py&#xA;class Task(models.Model):&#xA;    description = models.CharField(max_length = 200)&#xA;    ...&#xA;&#xA;# forms.py&#xA;class AddTaskForm(forms.ModelForm):&#xA;    class Meta:&#xA;        model = Task&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I then created two views using &lt;code&gt;AddTaskForm&lt;/code&gt;: one to create a new instance, the other to edit an existing one.  I was able to refactor those two views (and the function they call) into one, but I'm not sure I got the best possible result...&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;# urls.py:&#xA;(r'^yata/add_task/$',              'yata.views.edit'),&#xA;(r'^yata/(?P&amp;lt;task_id&amp;gt;\d+)/edit/$', 'yata.views.edit'),&#xA;&#xA;# views.py&#xA;def edit(request, task_id = None):&#xA;    t = get_object_or_404(Task, pk=task_id) if task_id else None&#xA;    if request.method == 'POST':&#xA;        form = AddTaskForm(request.POST, instance=t)&#xA;        if form.is_valid():&#xA;            form.save()&#xA;            return HttpResponseRedirect('/yata/')&#xA;    else:&#xA;        form = AddTaskForm(instance = t)&#xA;&#xA;    # Either the form was not valid, or we've just created it&#xA;    d = {'form': form}&#xA;    if task_id:&#xA;        # The template needs the id to decide if the form's action&#xA;        # is .../add_task or .../{{id}}/edit&#xA;        d['id'] = t.id&#xA;    return render_to_response('yata/edit.html', d, &#xA;        context_instance=RequestContext(request))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And here is the corresponding part of the template:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;# edit.html&#xA;{% if id %}&#xA;    &amp;lt;form action=&quot;/yata/{{ id }}/edit/&quot; method=&quot;post&quot;&amp;gt;&#xA;{% else %}&#xA;    &amp;lt;form action=&quot;/yata/add_task/&quot; method=&quot;post&quot;&amp;gt;&#xA;{% endif %}&#xA;{{ form.as_p }}&#xA;&amp;lt;input type=&quot;submit&quot; value=&quot;Save!&quot; /&amp;gt;&#xA;&amp;lt;/form&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Is there a better Django idiom to handle this 'add or create' issue? &#xA;Or can this be considered a correct way?&lt;/p&gt;&#xA;" OwnerUserId="917" LastEditorUserId="917" LastEditDate="2011-01-28T14:16:24.063" LastActivityDate="2014-06-05T01:14:08.473" Title="An idiom to use the same view function to create or edit an object?" Tags="&lt;python&gt;&lt;django&gt;" AnswerCount="2" CommentCount="0" FavoriteCount="1" />
  <row Id="375" PostTypeId="2" ParentId="362" CreationDate="2011-01-28T14:31:21.287" Score="6" Body="&lt;p&gt;I try to use &lt;strong&gt;class level scoped variables&lt;/strong&gt; unless there is a specific reason not to.  My reasoning for this is that it feels cleaner from an API standpoint.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Some of the reasons I would pass explicit parameters:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Increase the re-usability of the method.&lt;/li&gt;&#xA;&lt;li&gt;Make it clear to sub-types what variables are required for the method.&lt;/li&gt;&#xA;&lt;li&gt;Decouple the method from the specifics of the containing type.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;I would guess (hope) that there is much more reasoned and academic writing on this topic but I'm far enough removed from my collegiate days to have no idea what the name of that topic would be.  As such, I tend to choose based on what &quot;feels&quot; right.  If a method exists simply to clean up another method and/or encapsulate some bit of logic I tend to use a class-level scoped variable.&lt;/p&gt;&#xA;" OwnerUserId="67" LastEditorUserId="18427" LastEditDate="2014-12-15T18:02:29.840" LastActivityDate="2014-12-15T18:02:29.840" CommentCount="1" />
  <row Id="376" PostTypeId="2" ParentId="362" CreationDate="2011-01-28T14:58:13.230" Score="2" Body="&lt;p&gt;In addition to the suggestions posted already, I'd recommend going a step farther with your &lt;code&gt;CalculateAmount&lt;/code&gt; method:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public class YouOweTheGovernment&#xA;{&#xA;    public float AmountToPay { get; private set; }&#xA;    public float ArbitraryTaxRate { get; private set; }&#xA;    public float Salary { get; private set; }&#xA;&#xA;    public YouOweTheGovernment(float taxRate, float salary)&#xA;    {&#xA;        this.ArbitraryTaxRate = taxRate;&#xA;        this.Salary = salary;&#xA;&#xA;        this.AmountToPay = CalculateAmount(this.Salary, this.ArbitraryTaxRate);&#xA;    }&#xA;&#xA;    private float CalculateAmount(float salary, float taxRate)&#xA;    { &#xA;       return (salary * (taxRate / 100));&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Since this removes the side effect assignment, the constructor reads cleaner and that method can be reused more easily. If you don't want an immutable object, you'll have to recalculate every time the &lt;code&gt;salary&lt;/code&gt; and &lt;code&gt;taxRate&lt;/code&gt; change. But it looks like you do since you have the setters private.&lt;/p&gt;&#xA;" OwnerUserId="110" LastActivityDate="2011-01-28T14:58:13.230" CommentCount="0" />
  <row Id="377" PostTypeId="2" ParentId="365" CreationDate="2011-01-28T14:58:38.637" Score="4" Body="&lt;p&gt;One thing I would personally do would be to move the string concatenation into its own function since I see you have repeated the same 2 lines multiple times:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;strncat(asString, &quot;name=&quot;,    strlen(&quot;name=&quot;));&#xA;strncat(asString, dev-&amp;gt;name,  strlen(dev-&amp;gt;name));&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I'd have something like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;void addParam( char *paramString, const char *paramName, const char *paramValue )&#xA;{&#xA;    strncat( paramString, paramName, strlen( paramName );&#xA;    strncat( paramString, paramValue, strlen( paramValue );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Reduces the length of your function and makes it slightly cleaner, imho.&lt;/p&gt;&#xA;" OwnerUserId="55" LastActivityDate="2011-01-28T14:58:38.637" CommentCount="0" />
  <row Id="379" PostTypeId="2" ParentId="364" CreationDate="2011-01-28T17:03:20.863" Score="3" Body="&lt;p&gt;Yes the design looks good but it would be really better if you could replace that ArrayList with a Generic Collection.&lt;/p&gt;&#xA;" OwnerUserId="1038" LastActivityDate="2011-01-28T17:03:20.863" CommentCount="0" />
  <row Id="380" PostTypeId="2" ParentId="186" CreationDate="2011-01-28T17:15:12.503" Score="0" Body="&lt;p&gt;I think the appSettings section is a pretty neat solution for something as simple as your example, and I use this frequently over creating config sections, when no hierarchy is required. I do however find the following pattern useful to add consistency to the way appSettings are used, adding some typing, building in the idea of whether the setting is expected to be found in the .config file, and providing the ability to specify a default value.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public static class AppSettingsHelper&#xA;{&#xA;    private static TReturnType LoadAppSetting&amp;lt;TReturnType&amp;gt;(string name, bool required, TReturnType defaultValue)&#xA;    {&#xA;        // Check for missing settings&#xA;        if (!ArrayExt.Contains&amp;lt;string&amp;gt;(ConfigurationManager.AppSettings.AllKeys, name))&#xA;        {&#xA;            if (required)&#xA;                throw new ConfigurationErrorsException(string.Format(&quot;Required setting missing: {0}&quot;, name));&#xA;            else&#xA;                return defaultValue;&#xA;        }&#xA;&#xA;        // Read the setting and return it&#xA;        AppSettingsReader reader = new AppSettingsReader();&#xA;        return (TReturnType)reader.GetValue(name, typeof(TReturnType));&#xA;    }&#xA;&#xA;    //example boolean property&#xA;    public static bool IsSomethingSet&#xA;    {&#xA;        get&#xA;        {&#xA;            return ApplicationSettingsHelper.LoadAppSetting&amp;lt;bool&amp;gt;(&#xA;                &quot;settingName&quot;,&#xA;                true,&#xA;                false);&#xA;        }&#xA;    }&#xA;&#xA;    //int property&#xA;    public static int SomeCount&#xA;    {&#xA;        get&#xA;        {&#xA;            return ApplicationSettingsHelper.LoadAppSetting&amp;lt;int&amp;gt;(&#xA;                &quot;someCount&quot;,&#xA;                true,&#xA;                0);&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Use like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if (AppSettingsHelper.IsSomethingSet)&#xA;{&#xA;    Console.WriteLine(AppSettingsHelper.SomeCount);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerDisplayName="user1054" LastEditorDisplayName="user1054" LastEditDate="2011-01-28T17:21:58.123" LastActivityDate="2011-01-28T17:21:58.123" CommentCount="0" />
  <row Id="381" PostTypeId="2" ParentId="281" CreationDate="2011-01-28T17:28:51.643" Score="1" Body="&lt;p&gt;You should also have a variant for explicitly testing return values. For example, &lt;code&gt;CreateFile&lt;/code&gt; will return &lt;code&gt;INVALID_HANDLE_VALUE&lt;/code&gt; which is &lt;code&gt;!=0&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;EDIT: Ah, I think I understand the question now. You want to know how to accomplish this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;int x= foo();&#xA;if (x==error) { blah(); }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;in a macro.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The easiest way is to split the variable declaration and variable setting:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;int x;&#xA;if ((x= foo())==error) { blah(); }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;which you can then wrap in a macro: &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#define MYMACRO(x) if ((x)==error) { blah(); }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;which you can then use as:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;int x;&#xA;MYMACRO(x= foo());&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="331" LastEditorUserId="331" LastEditDate="2011-02-01T21:21:10.620" LastActivityDate="2011-02-01T21:21:10.620" CommentCount="0" />
  <row Id="382" PostTypeId="2" ParentId="362" CreationDate="2011-01-28T18:43:01.800" Score="7" Body="&lt;p&gt;Don't store what you can calculate:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public class YouOweTheGovernment&#xA;{&#xA;    public float AmountToPay&#xA;    {&#xA;        get { return Salary * (ArbitraryTaxRate / 100); }&#xA;    }&#xA;    public float ArbitraryTaxRate { get; private set; }&#xA;    public float Salary { get; private set; }&#xA;&#xA;    public YouOweTheGovernment(float taxRate, float salary)&#xA;    {&#xA;        this.ArbitraryTaxRate = taxRate;&#xA;        this.Salary = salary;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Your &lt;code&gt;AmountToPay&lt;/code&gt; field is basically a cache, and caching is notoriously problematic. Case in point: even your tiny code here has a cache invalidation bug. If you change the tax rate or salary, you aren't recalculating the amount to pay.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Every time you add a field, ask yourself &quot;does this field store unique information that no other field stores?&quot; If the answer is no, don't create the field. The less state you have, the easier it is to understand your code.&lt;/p&gt;&#xA;" OwnerUserId="816" LastActivityDate="2011-01-28T18:43:01.800" CommentCount="6" />
  <row Id="383" PostTypeId="1" AcceptedAnswerId="402" CreationDate="2011-01-28T19:52:59.890" Score="10" ViewCount="2905" Body="&lt;p&gt;&lt;strong&gt;Goal:&lt;/strong&gt; To create a countdown to our next available live stream.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Details:&lt;/strong&gt; We live stream six times a week all (PST).&#xA;1. Sunday at 8:00 a.m.&#xA;2. Sunday at 10:00 a.m.&#xA;3. Sunday at 12:00 p.m.&#xA;4. Sunday at 6:30 p.m.&#xA;5. Wednesday at 7:00 p.m.&#xA;6. Saturday at 10:00 a.m.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;My approach:&lt;/strong&gt; I check what day it is and what time it is then create the countdown to the next stream. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'm sure what I have done can be cleaned up and improved, so tell me how.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?php&#xA;// Countdown Stuff&#xA;$year = date(Y);&#xA;$month = date(m);&#xA;$month_day = date(d);&#xA;$day = date(w);&#xA;$hour = date(G);&#xA;$min = date(i);&#xA;$addDay = 0;&#xA;&#xA;// It's Sunday&#xA;if ( $day == 0 ) {&#xA;    if ( $hour &amp;lt; 8 ) {&#xA;       $hour = 8;&#xA;       $min = 0;&#xA;    } &#xA;    else if ( $hour &amp;lt; 10 ) {&#xA;       $hour = 10;&#xA;       $min = 0;&#xA;    } &#xA;    else if ( $hour &amp;lt; 12 ) {&#xA;       $hour = 12;&#xA;       $min = 0;&#xA;    }&#xA;    else if ( $hour &amp;lt;= 18 &amp;amp;&amp;amp; $min &amp;lt; 30 ) {&#xA;       $hour = 18;&#xA;        $min = 30;&#xA;    } &#xA;    else {&#xA;     $addDay = 3;&#xA;       $hour = 19;&#xA;       $min = 0;&#xA;    }&#xA;} &#xA;// It's Monday&#xA;else if ( $day == 1 ) {&#xA;    $addDay = 2;&#xA;      $hour = 19;&#xA;      $min = 0;&#xA;} &#xA;// It's Tuesday&#xA;else if ( $day == 2 ) {&#xA;    $addDay = 1;&#xA;      $hour = 19;&#xA;      $min = 0;&#xA;} &#xA;// It's Wednesday&#xA;else if ( $day == 3) {&#xA;&#xA;    if ( $hour &amp;lt; 19 ) {&#xA;       $hour = 19;&#xA;       $min = 0;&#xA;    } else {&#xA;     $addDay = 3;&#xA;       $hour = 10;&#xA;       $min = 0;&#xA;    }&#xA;} &#xA;// It's Thursday&#xA;else if ( $day == 4 ) {&#xA;    $addDay = 2;&#xA;      $hour = 10;&#xA;      $min = 0;&#xA;} &#xA;// It's Friday&#xA;else if ( $day == 5 ) {&#xA;    $addDay = 1;&#xA;      $hour = 10;&#xA;      $min = 0;&#xA;} &#xA;// All that's left is Saturday&#xA;else {&#xA;&#xA;    if ( $hour &amp;lt; 10 ) {&#xA;       $hour = 10;&#xA;       $min = 0;&#xA;    } else {&#xA;     $addDay = 1;&#xA;       $hour = 8;&#xA;       $min = 0;&#xA;    }&#xA;}&#xA;&#xA;&#xA;$build_date = $year . '-' . $month . '-' . $month_day . ' ' . $hour . ':' . $min . ':00';&#xA;$date = new DateTime($build_date);&#xA;&#xA;if ( $addDay ) {&#xA;    $date-&amp;gt;modify(&quot;+$addDay day&quot;);&#xA;}&#xA;&#xA;$date = strtotime($date-&amp;gt;format(&quot;Y-m-d G:i:s&quot;));&#xA;$now = strtotime(&quot;now&quot;);&#xA;$count = $date - $now;&#xA;?&amp;gt;&#xA;&#xA;&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;&#xA;var myTime = &amp;lt;?=$count?&amp;gt;;&#xA;$('#countdown').countdown({ until: myTime}); &#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1069" LastEditorUserId="22222" LastEditDate="2013-11-24T01:20:48.030" LastActivityDate="2015-01-02T20:41:26.120" Title="Checking date &amp; time in PHP" Tags="&lt;php&gt;&lt;datetime&gt;" AnswerCount="4" CommentCount="0" FavoriteCount="2" />
  <row Id="384" PostTypeId="2" ParentId="364" CreationDate="2011-01-28T20:53:58.727" Score="4" Body="&lt;p&gt;It might be better to render the control as an unordered list.  This is more semantically correct and normal practice for menu-type controls (which tabs are, if you think about it).&lt;/p&gt;&#xA;" OwnerUserId="1073" LastActivityDate="2011-01-28T20:53:58.727" CommentCount="1" />
  <row Id="385" PostTypeId="2" ParentId="128" CreationDate="2011-01-28T21:08:47.497" Score="7" Body="&lt;p&gt;Where are CollectionB and CollectionC coming from?  The approach I'd shoot for is to have a variety of factories that all accept the same type of input, and then store them in some type of collection.  For example, if one has a list of objects to be created, one object per line, and the portion of each line before the first blank defines the type of each item, one could have a factories that take a string and yield an appropriately-configured object.  For example, if the input looked like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;square 0,5,5,29&#xA;line 5,2 19,23 6,8&#xA;text 0,29,Hello there!&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;one could have a SquareFactory, LineFactory, and TextFactory all of which inherit from GraphicObjectFactory, which accept a string and return GraphicObject.  One could then have a Dictionary that maps String to GraphicsObjectFactory, and put in it an instance of each of the above mentioned factories.  To allow the file reader to handle more types of graphics objects, just add more factories into the Dictionary.&lt;/p&gt;&#xA;" OwnerUserId="1078" LastActivityDate="2011-01-28T21:08:47.497" CommentCount="2" />
  <row Id="386" PostTypeId="2" ParentId="72" CreationDate="2011-01-28T21:29:42.190" Score="5" Body="&lt;p&gt;Having a time parameter for each iteration of a PID loop would imply that it may safely be run at a variable frequency; while there are occasions when that may be unavoidable, and there are ways of handling such variations safely, I would expect most conditions that would cause the sampling loop time to vary would also create considerable 'noise' in the D term, limiting its usefulness.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;One approach I've not seen discussed is replacing the PID loop with an IIR filter.  A PID loop is a special case of an IIR filter, but with the second tap's time constant being infinitesimal, and the third tap's time constant being nearly infinite.  The difference between the first two taps represents the delta, and the third tap represents the integral.  Using more &quot;realistic&quot; time constants for the filter taps yields results which differ from a &quot;pure&quot; IIR filter, but in ways that are apt to be beneficial.  Using a short-but-not-infinitesimal time constant on the second stage allows one to reduce the amount of high-frequency noise.  Using a finite time constant on the third term allows one to effectively limit the &quot;wind-up&quot;.  Although going beyond three stages would make it harder to analyze system behavior, it may allow the PID system to better deal with various delay factors in the real-world system being controlled.&lt;/p&gt;&#xA;" OwnerUserId="1078" LastActivityDate="2011-01-28T21:29:42.190" CommentCount="2" />
  <row Id="387" PostTypeId="2" ParentId="369" CreationDate="2011-01-28T21:34:05.680" Score="23" Body="&lt;p&gt;I'd recommend taking advantage of the excellent &lt;a href=&quot;http://tirania.org/blog/archive/2008/Oct-14.html&quot;&gt;Mono.Options&lt;/a&gt; module.  It's a single &lt;code&gt;.cs&lt;/code&gt; file you can drop in to your solution and get full-featured parsing of GNU getopt-style command lines.  (Things like &lt;code&gt;-x -y -z&lt;/code&gt;, which is equivalent to &lt;code&gt;-xyz&lt;/code&gt;, or &lt;code&gt;-k value&lt;/code&gt;, or &lt;code&gt;--long-opt&lt;/code&gt;, and so forth.)&lt;/p&gt;&#xA;" OwnerUserId="1082" LastActivityDate="2011-01-28T21:34:05.680" CommentCount="0" />
  <row Id="388" PostTypeId="2" ParentId="224" CreationDate="2011-01-28T21:47:44.563" Score="3" Body="&lt;p&gt;I don't like your 'put' routine.  The 'odd behavior' others have noticed means the algorithm loses one of the main advantages of being 'lock-free': immunity from priority inversion or asynchronously-terminated threads.  If a thread gets waylaid in the middle of a queue-write operation, the queue will be completely broken unless or until the queue finishes its work.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The solution is to CompareAndSet the last node's &quot;next&quot; pointer before updating the &quot;tail&quot; pointer; if the &quot;last node&quot;'s &quot;next&quot; pointer is non-null, that means it's not the last node anymore and one must traverse links to find the real last node, repeat the CompareAndSet on it, and hope it's still the last node.&lt;/p&gt;&#xA;" OwnerUserId="1078" LastActivityDate="2011-01-28T21:47:44.563" CommentCount="3" />
  <row Id="389" PostTypeId="2" ParentId="383" CreationDate="2011-01-28T21:59:45.143" Score="4" Body="&lt;p&gt;I don't have time to look over everything, but I noticed you only set &lt;code&gt;$min&lt;/code&gt; to something other than &lt;code&gt;0&lt;/code&gt; once. You could add the following above &lt;code&gt;$build_date&lt;/code&gt;, and then remove all the &lt;code&gt;$min = 0;&lt;/code&gt;s, and you'd clear up a few lines:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if($min == date('i')) {&#xA;  $min = 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If it didn't change, which would only happen when you set it to &lt;code&gt;30&lt;/code&gt; in that one instance, then set it to &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;&#xA;" OwnerUserId="86" LastEditorUserId="22222" LastEditDate="2015-01-02T20:41:26.120" LastActivityDate="2015-01-02T20:41:26.120" CommentCount="0" />
  <row Id="390" PostTypeId="2" ParentId="362" CreationDate="2011-01-28T22:03:22.830" Score="4" Body="&lt;p&gt;The second &lt;code&gt;CalculateAmount&lt;/code&gt; method is evil.  If a class invariant is supposed to be that &lt;code&gt;AmountToPay&lt;/code&gt; is the amount of tax due for Salary and &lt;code&gt;ArbitraryTaxRate&lt;/code&gt;, calling &lt;code&gt;CalculateAmount&lt;/code&gt; with anything other than those parameters would break the class invariant.  If you want to pass &lt;code&gt;Salary&lt;/code&gt; and &lt;code&gt;ArbitraryTaxRate&lt;/code&gt; to a method, then that method should either:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Be a function which returns the calculated amount but does not disturb anything in the class, or&lt;/li&gt;&#xA;&lt;li&gt;Set the backing fields for &lt;code&gt;Salary&lt;/code&gt; and &lt;code&gt;ArbitraryTaxRate&lt;/code&gt; to the indicated values, and update &lt;code&gt;AmountToPay&lt;/code&gt; appropriately.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;If you use the first approach, you could opt to make the function static.  It's possible that changes in tax rules might require the function to make use of instance variables that weren't in the original parameter list.  Such a change could be problematic if the function were public (suggesting that perhaps it shouldn't be static) but shouldn't pose any difficulty if it's private.&lt;/p&gt;&#xA;" OwnerUserId="1078" LastEditorUserId="18427" LastEditDate="2014-12-15T18:01:01.760" LastActivityDate="2014-12-15T18:01:01.760" CommentCount="0" />
  <row Id="391" PostTypeId="2" ParentId="369" CreationDate="2011-01-28T22:03:45.450" Score="5" Body="&lt;p&gt;There's a &lt;a href=&quot;http://stackoverflow.com/q/491595/4794&quot;&gt;related question on Stack Overflow&lt;/a&gt;. There, the consensus seems to be &lt;a href=&quot;http://tirania.org/blog/archive/2008/Oct-14.html&quot;&gt;Mono.Options&lt;/a&gt; as already suggested here by &lt;a href=&quot;http://codereview.stackexchange.com/questions/369/is-there-a-better-way-to-parse-console-application-arguments/387#387&quot;&gt;josh3736&lt;/a&gt;.&lt;/p&gt;&#xA;" OwnerUserId="1089" LastActivityDate="2011-01-28T22:03:45.450" CommentCount="2" />
  <row Id="392" PostTypeId="2" ParentId="374" CreationDate="2011-01-28T22:49:48.980" Score="2" Body="&lt;p&gt;I have looked at your code and I think that it actually looks pretty clean and straight forward. However, I would suggest that you make it more DRY by using &lt;a href=&quot;http://docs.djangoproject.com/en/dev/topics/http/urls/#reverse&quot; rel=&quot;nofollow&quot;&gt;reverse()&lt;/a&gt; to figure out what action to assign to the form.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;views.py:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if task_id:&#xA;    action = reverse(edit, args=[task_id])&#xA;else:&#xA;    action = reverse(edit)&#xA;d['action'] = action&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;edit.html:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;form action=&quot;{{ action }}&quot; method=&quot;post&quot;&amp;gt;&#xA;    {{ form.as_p }}&#xA;    &amp;lt;input type=&quot;submit&quot; value=&quot;Save!&quot; /&amp;gt;&#xA;&amp;lt;/form&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="589" LastActivityDate="2011-01-28T22:49:48.980" CommentCount="1" />
  <row Id="393" PostTypeId="2" ParentId="383" CreationDate="2011-01-28T22:56:44.060" Score="3" Body="&lt;p&gt;A few things that jumped out.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In your date() calls you are passing constants instead of strings e.g. you use date(Y) as opposed to date('Y'), this issues a notice error. PHP will assume that you meant a string, but it is best to be explicit.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The getdate() function will gives you all that information instead of calling date() 6 times.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For what you are wanting to do, I would recommend taking a look at the mktime() function. Once you calculate the next live stream time from your current time, simply pass those values to mktime() and do a time() - mktime() and thats how many seconds you have until the event. mktime produces a UNIX timestamp, so you can pass that to the date() function or into a DateTime object to format, change timezone, etc.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you are going to have a lot of if/elseif statements like that, it would be cleaner to use a switch statement.&lt;/p&gt;&#xA;" OwnerUserId="1090" LastActivityDate="2011-01-28T22:56:44.060" CommentCount="0" />
  <row Id="394" PostTypeId="2" ParentId="138" CreationDate="2011-01-28T23:06:47.027" Score="2" Body="&lt;p&gt;I don't like writing a statement that combines both &quot;fluent&quot; and &quot;expression&quot; syntax for LINQ. (See SO: &lt;a href=&quot;http://stackoverflow.com/questions/214500/which-linq-syntax-do-you-prefer-fluent-or-query-expression/214610#214610&quot;&gt;Which LINQ syntax do you prefer? Fluent or Query Expression&lt;/a&gt;)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I also would choose multiple &lt;code&gt;where&lt;/code&gt; clauses over a single &lt;code&gt;where&lt;/code&gt; with &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;. So, either:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var points = from type in ValidTypes()&#xA;    from point in GetData(type)&#xA;    where point.Theta &amp;gt; referencePoint.Theta&#xA;    where point.Radius &amp;gt; referencePoint.Radius&#xA;    select point;&#xA;&#xA;var count = points.Count();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;or&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var count = ValidTypes&#xA;    .Select(type =&amp;gt; type.GetData())&#xA;    .Where(point.Theta &amp;gt; referencePoint.Theta)&#xA;    .Where(point.Radius &amp;gt; referencePoint.Radius)&#xA;    .Count();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I'd look at the code before &amp;amp; after, and see if one of these lends itself to further refactoring.&lt;/p&gt;&#xA;" OwnerUserId="316" LastActivityDate="2011-01-28T23:06:47.027" CommentCount="1" />
  <row Id="395" PostTypeId="1" CreationDate="2011-01-28T23:26:01.420" Score="11" ViewCount="2292" Body="&lt;p&gt;I would like to solicit advice on everyone's thoughts on how best to combat the &lt;a href=&quot;http://en.wikipedia.org/wiki/Anemic_Domain_Model&quot; rel=&quot;nofollow&quot;&gt;Anemic Domain Model anti-pattern&lt;/a&gt; when building out a system based on web services.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;One of our goals is to build a set of core web services that expose the most basic services we reuse repeatedly in our organization, which is the creating of domain models.  Right now we have a small library that we share and reuse but as we grow our team it would be much nicer to centralize these basic services.  Over time our systems are going to change as some of the data may come from the cloud (Salesforce.com or AWS) so we're &lt;strong&gt;not just isolating basic DAO code in a web service but also application integration&lt;/strong&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example, our customer data comes from the accounting, CRM, and order processing systems.  Configuration is a real pain because every app that ships needs to be bundled with the core library and configuration on each system.  I would like to centralize the creation of models, ala, SOA, but retain a rich model higher up in the Service Layer / Facade.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you think in general that this is a bad I'd be interested in hearing why!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;My thought is to define a domain object &lt;code&gt;Employee&lt;/code&gt; that has an &lt;code&gt;EmployeeService&lt;/code&gt; injected.  At runtime the &lt;code&gt;EmployeeService&lt;/code&gt; implementation is an &lt;code&gt;EmployeeWebServiceClientImpl&lt;/code&gt; that implements said interface.  &lt;code&gt;EmployeeWebServiceClientImpl&lt;/code&gt; uses a web service proxy to the server.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;On the server-side of the web service we have &lt;code&gt;EmployeeWebService&lt;/code&gt; invoking &lt;code&gt;EmployeeDao&lt;/code&gt; to query the database.  Could just as easily be a class calling out to Salesforce.com to get data.  We would share a library that contained the domain model and interface so you would deserialize the web service response directly into a class that contained the needed business logic.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Below is some example code in order from client to server:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;//Example of client&#xA;public static void main(String[] args) {&#xA;    try {&#xA;        Employee employee = Employee.getEmployee(&quot;james&quot;);&#xA;        if (employee.isEligibleForRaise()) {&#xA;            System.out.println(&quot;Give that man a raise!&quot;);&#xA;        }&#xA;    } catch (RuntimeException e) {&#xA;        System.out.println(&quot;Oh no!&quot;);&#xA;    }&#xA;}&#xA;&#xA;&#xA;//Employee Domain Object&#xA;public class Employee {&#xA;&#xA;  private String name;&#xA;&#xA;  private String username;&#xA;&#xA;  private static EmployeeService service;&#xA;&#xA;  public static Employee getEmployee(String username) {&#xA;    return service.getEmployee(username);&#xA;  }&#xA;&#xA;  public static List&amp;lt;Employee&amp;gt; getAllEmployees() {&#xA;    return service.getAllEmployees();&#xA;  }&#xA;&#xA;  public boolean isEmployeeEligibleForRaise() {&#xA;    //business logic here&#xA;    return true;&#xA;  }&#xA;&#xA;&#xA;//Getters &amp;amp; Setters&#xA;&#xA; ...&#xA;}&#xA;&#xA;//EmployeeWebServiceClientImpl&#xA;public class EmployeeWebServiceClientImpl implements EmployeeService {&#xA;&#xA;  //A client web service proxy to our core basic services&#xA;  BaseWebServiceProxy proxy;&#xA;&#xA;  @Override&#xA;  public Employee getEmployee(String username) {&#xA;    return proxy.getEmployee(username);&#xA;  }&#xA;&#xA;  @Override&#xA;  public List&amp;lt;Employee&amp;gt; getAllEmployees() {&#xA;    return proxy.getAllEmployees();&#xA;  }&#xA;}&#xA;&#xA;&#xA;//On the server-side we have EmployeeWebService&#xA;public class EmployeeWebService implements EmployeeService {&#xA;&#xA;  EmployeeDao employeeDao;&#xA;&#xA;  @Override&#xA;  public List&amp;lt;Employee&amp;gt; getAllEmployees() {&#xA;    return employeeDao.getAllEmployees();&#xA;  }&#xA;&#xA;  @Override&#xA;  public Employee getEmployee(String username) {&#xA;    return employeeDao.getEmployee(username);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Is that making sense?  Basically the plan is to keep core business logic in the &lt;code&gt;Employee&lt;/code&gt; domain object but isolate the data access logic in a web service.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Thoughts?&lt;/p&gt;&#xA;" OwnerUserId="1086" LastEditorUserId="22222" LastEditDate="2014-11-02T19:05:32.723" LastActivityDate="2014-11-02T19:05:32.723" Title="Pattern Against Anemic Domain Model" Tags="&lt;java&gt;&lt;design-patterns&gt;" AnswerCount="2" CommentCount="0" FavoriteCount="1" />
  <row Id="397" PostTypeId="2" ParentId="383" CreationDate="2011-01-29T01:25:02.493" Score="2" Body="&lt;p&gt;Of course, now if your company decides to change streams from Sunday at 8:00am to Tuesday at 2, you're going to have to go in and hack this code. And if you mess up a ';' or '?php' or junior developer passes &quot;NO WAY&quot; to strtotime()?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Evolve your approach. You should be storing the stream times externally; either in a file or a database. You should be querying those times, doing a strtotime() difference between them and now, then taking the minimum positive element and displaying that. &lt;/p&gt;&#xA;" OwnerUserId="1093" LastActivityDate="2011-01-29T01:25:02.493" CommentCount="0" />
  <row Id="398" PostTypeId="2" ParentId="395" CreationDate="2011-01-29T01:42:43.187" Score="3" Body="&lt;p&gt;You're adding a lot of complexity here. Plus, you're going against the point of a &lt;a href=&quot;http://martinfowler.com/eaaCatalog/serviceLayer.html&quot; rel=&quot;nofollow&quot;&gt;Service Layer&lt;/a&gt; and Domain Model. Your Domain Model should probably use either &lt;a href=&quot;http://martinfowler.com/eaaCatalog/activeRecord.html&quot; rel=&quot;nofollow&quot;&gt;Active Record&lt;/a&gt; or &lt;a href=&quot;http://martinfowler.com/eaaCatalog/dataMapper.html&quot; rel=&quot;nofollow&quot;&gt;Data Mapper&lt;/a&gt;. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;The point of a Service Layer is to act as an end point (API) that holds common business logic that deals with integration of domain model objects. Your service layer should just query repositories and delegate calls to process business logic to your domain model (which should hold as much business logic as possible). Injecting it into your domain model adds persistence concerns, which it should not care about.  &lt;/p&gt;&#xA;" OwnerUserId="1093" LastActivityDate="2011-01-29T01:42:43.187" CommentCount="1" />
  <row Id="399" PostTypeId="2" ParentId="343" CreationDate="2011-01-29T01:56:04.840" Score="1" Body="&lt;p&gt;One could also argue that you're mixing a lot of presentation code with business logic (creation/modification of data). Don't do that. &lt;a href=&quot;http://en.wikipedia.org/wiki/Separation_of_presentation_and_content&quot; rel=&quot;nofollow&quot;&gt;Separate presentation from content&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Have the form call a ViewModel/Controller style of object that handles saving student information and contains the repository. Then the form code can focus purely on presentational elements, and the other object can handle validation, modification, etc. &lt;a href=&quot;http://insideria.com/2010/10/pragmatic-design-patterns-sepa.html&quot; rel=&quot;nofollow&quot;&gt;Separation of concerns&lt;/a&gt; is good, young padawan.&lt;/p&gt;&#xA;" OwnerUserId="1093" LastActivityDate="2011-01-29T01:56:04.840" CommentCount="0" />
  <row Id="401" PostTypeId="1" CreationDate="2011-01-29T03:33:00.837" Score="6" ViewCount="493" Body="&lt;p&gt;I've made a SPL-based class named &quot;Recordset&quot; that wraps both MySQLi_STMT and MySQLi_Result objects and allows treating either as a 3-dimensional array.  It requires PHP5.3+.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'm pretty bummed about the slow foreach loop over my Recordset object, by the slower internal seek and fetch speeds within Recordset, and by the fact that nothing can even compare to the old &lt;code&gt;while ($MySQLI_STMT-&amp;gt;fetch()) {}&lt;/code&gt;. I've already cached certain result information, such as num_rows and class name, and try to avoid chaining internal function calls, which speeds things up considerably.  Unfortunately, this cuts down on proper internal data validation checks.  The constant data_seek calls do slow things a little.  I'd like for this to work better.  Any suggestions or insight how to speed up foreach loops and internal row fetching?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here's excerpts of the important parts...&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class Recordset implements Iterator, ArrayAccess, Countable {&#xA;&#xA;    private $MySQLi_set; // MySQLi_STMT or MySQLi_Result object&#xA;    private $MySQLi_set_type; // cache of MySQLi_STMT or MySQLi_Result object type to avoid repeat instanceof calls&#xA;    private $field_metadata; // array of field info objects returned by query&#xA;    private $num_rows; // cache row count to avoid repeat mysqli_x-&amp;gt;num_rows call&#xA;    private $bind_row; // binding array for MySQLi_STMT results&#xA;    private $pointer; // for tracking iterations over records in query&#xA;&#xA;&#xA;    function __construct($sql) {&#xA;        $bind_params = func_get_args();&#xA;        array_shift($bind_params);&#xA;        try {&#xA;            if (count($bind_params) === 0) {&#xA;                // expecting MYSQLI_Result obj returned, replace code as necessary&#xA;                $this-&amp;gt;MySQLi_set = DB_Main::query($sql);  &#xA;                }&#xA;            else {&#xA;                // expecting MySQLi_STMT obj returned, replace code as necessary&#xA;                $this-&amp;gt;MySQLi_set = DB_Main::statement($sql, $bind_params);  &#xA;                }&#xA;            }&#xA;        catch (Exception $e) {&#xA;            throw new RuntimeException(((count($bind_params)) ? 'Statement' : 'Query') . ' failed:  ' . $e-&amp;gt;getMessage(), $e-&amp;gt;getCode(), $e);&#xA;            }&#xA;        // cache name of object to avoid repeat instanceof calls&#xA;        $this-&amp;gt;MySQLi_set_type = get_class($this-&amp;gt;MySQLi_set);&#xA;        if ($this-&amp;gt;MySQLi_set_type === 'mysqli_result') {&#xA;            // set $this-&amp;gt;field_metadata to array of field info objects&#xA;            $this-&amp;gt;field_metadata = $this-&amp;gt;MySQLi_set-&amp;gt;fetch_fields();&#xA;            }&#xA;        else if ($this-&amp;gt;MySQLi_set_type === 'mysqli_stmt') {&#xA;            // Set up special handling for MySQLi_STMT objects&#xA;            // set $this-&amp;gt;field_metadata to array of field info objects used later for result bindings for MySQLi_STMT object&#xA;            $result_metadata = $this-&amp;gt;MySQLi_set-&amp;gt;result_metadata();&#xA;            $this-&amp;gt;field_metadata = $result_metadata-&amp;gt;fetch_fields();   &#xA;            $result_metadata-&amp;gt;free_result();&#xA;            unset($result_metadata);&#xA;            // store results to allow object to act as a countable, seekable array&#xA;            if (!$this-&amp;gt;MySQLi_set-&amp;gt;store_result())&#xA;                throw new RuntimeException('MySQLi_STMT Result failed to store.  Error: ' . $this-&amp;gt;MySQLi_set-&amp;gt;error);&#xA;            // because bind_result() cannot bind to an object or array, use the 'call_user_func_array()' technique instead&#xA;            $this-&amp;gt;bind_row = array();&#xA;            $bind_row2 = array();&#xA;            foreach($this-&amp;gt;field_metadata as $field)&#xA;                 $bind_row2[$field-&amp;gt;name] =&amp;amp; $this-&amp;gt;bind_row[$field-&amp;gt;name];&#xA;            if (!call_user_func_array(array($this-&amp;gt;MySQLi_set, 'bind_result'), $this-&amp;gt;bind_row))&#xA;                throw new RuntimeException($this-&amp;gt;MySQLi_set-&amp;gt;error);&#xA;            if ($this-&amp;gt;MySQLi_set-&amp;gt;error)&#xA;                throw new RuntimeException($this-&amp;gt;MySQLi_set-&amp;gt;error);&#xA;            }&#xA;        else {&#xA;            throw new RuntimeException('No MySQLi_STMT or MySQLi_Result object to work with.  Class: ' . $this-&amp;gt;MySQLi_set_type . ' attempted.');&#xA;            }&#xA;        // cache row count to avoid constant calls to MySQLi_x-&amp;gt;num_rows&#xA;        $this-&amp;gt;num_rows = $this-&amp;gt;MySQLi_set-&amp;gt;num_rows;&#xA;        // if rows were returned, set internal pointer to 0&#xA;        if ($this-&amp;gt;num_rows &amp;gt; 0) $this-&amp;gt;pointer = 0;&#xA;        }&#xA;&#xA;&#xA;    function fetchRow($offset = null) {&#xA;        // private function internally using regular fetch() methods to progress through records&#xA;        // sets $this-&amp;gt;bind_row to an associative array of the next record for MySQLi_STMT wrapped objects&#xA;        $this-&amp;gt;MySQLi_set-&amp;gt;data_seek((($offset !== null) ? (int) $offset : $this-&amp;gt;pointer));&#xA;        if ($this-&amp;gt;MySQLi_set_type === 'mysqli_result')&#xA;            return $this-&amp;gt;MySQLi_set-&amp;gt;fetch_assoc();&#xA;        // else this is a MySQLi_STMT object&#xA;        $fetch_status = $this-&amp;gt;MySQLi_set-&amp;gt;fetch();&#xA;        if ($fetch_status === true) return $this-&amp;gt;bind_row;&#xA;        else if ($fetch_status === null) return null; // no more rows&#xA;        // MySQLi_STMT row fetch failed&#xA;        throw new RuntimeException('Error fetching row: . ' . $this-&amp;gt;MySQLi_set-&amp;gt;error);&#xA;        }&#xA;&#xA;&#xA;    function count() {return $this-&amp;gt;num_rows;}&#xA;&#xA;    function current() {return $this-&amp;gt;fetchRow();}&#xA;&#xA;    function key() {return $this-&amp;gt;pointer;}&#xA;&#xA;    function next() {$this-&amp;gt;pointer++;}&#xA;&#xA;    function rewind() {$this-&amp;gt;pointer = 0;}&#xA;&#xA;    function valid() {return $this-&amp;gt;offsetExists($this-&amp;gt;pointer);}&#xA;&#xA;&#xA;    function offsetExists($offset) {&#xA;        // Part of the ArrayAccess interface.  Used to determine if the selected record in the set actually exists or is out of bounds.&#xA;        // Example: 'isset($Recordset[22])' returns true if there were 23 or more records returned from the query.&#xA;        return ((int) $offset &amp;lt; $this-&amp;gt;num_rows AND (int) $offset &amp;gt;= 0);&#xA;        }&#xA;&#xA;&#xA;    function offsetGet($offset) {&#xA;        // Part of the ArrayAccess interface.  Used to retrieve the assoc array of the chosen record in line.&#xA;        // allow index referencing without altering &quot;internal array pointer&quot;&#xA;        // Example: 'print_r($Recordset[22])' prints the 23rd record returned by the query.&#xA;        if (!((int) $offset &amp;lt; $this-&amp;gt;num_rows AND (int) $offset &amp;gt;= 0))&#xA;            throw new OutOfBoundsException('Out of range of result set.');&#xA;        return $this-&amp;gt;fetchRow($offset);&#xA;        }&#xA;&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The code is roughly 200 lines long, so instead of making a giant post, here's a pastebin link...  &lt;a href=&quot;http://pastebin.com/n17MuEzf&quot; rel=&quot;nofollow&quot;&gt;http://pastebin.com/n17MuEzf&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;b&gt;Use...&lt;/b&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Objects are created by passing in an sql query string.  For handling prepared statements, simply pass in additional arguments as the prepared binding parameters.  In those cases, there is a behind-the-scenes &lt;code&gt;bind_param&lt;/code&gt; going on generating the MySQLi_STMT object to be wrapped.  That part isn't included here, so for the purposes of this post, pretend it's magic.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example to automatically handle the query as a prepared statement and output rows:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$recordset = new Recordset(&quot;SELECT * FROM tblComments WHERE(parentBlogID = ?)&quot;, 2);&#xA;if (count($recordset) &amp;gt; 0) {&#xA;    foreach ($recordset as $record)&#xA;        echo $record['commentText'] . '&amp;lt;br&amp;gt;';&#xA;    }&#xA;else echo &quot;No records returned.&quot;;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;b&gt;Advantages...&lt;/b&gt;&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Allows accessing result rows by array key (&lt;code&gt;echo $Recordset[295]['title'];&lt;/code&gt;) or by foreach loops (&lt;code&gt;foreach ($Recordsetas $rec) {echo $rec['title'];}&lt;/code&gt;).&lt;/li&gt;&#xA;&lt;li&gt;Allows you to get a row by index number without interfering with the internal result pointer.  In other words, right in the middle of a foreach loop, you can do &lt;code&gt;$x = $Recordset[259]['ID'];&lt;/code&gt; without causing the internal result row pointer to jump out of order.&lt;/li&gt;&#xA;&lt;li&gt;Allows exchanging this class out for regular 3-dimensional arrays of result dumps.&lt;/li&gt;&#xA;&lt;li&gt;Avoids duplication of result binding code for every statement throughout an application.&lt;/li&gt;&#xA;&lt;li&gt;Lets you still access functions and properties of the wrapped MySQLi object directly (&lt;code&gt;$Recordset-&gt;attr_get(1)&lt;/code&gt;).&lt;/li&gt;&#xA;&lt;li&gt;Would allow plugging in automatic output filters or template handling.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;&lt;b&gt;Tests...&lt;/b&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here's some speed tests iterating over 10000 records from a localhost table with 6 columns.  This test was done with prepared statement results either wrapped in Recordset or not.  Timing is measured starting before and ending after each entire loop call..&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;b&gt;With Recordset...&lt;/b&gt;&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;foreach($Recordset as $rec) {$x = $rec;}&lt;/code&gt; ... &lt;br&gt;&#xA;0.1033s&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;for ($i = 0, $count = count($Recordset); $i &amp;lt; $count; $i++) {$x = $Recordset[$i];}&lt;/code&gt; ... &lt;br&gt;&#xA;0.0445s&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;for ($i = 0, $count = count($Recordset); $i &amp;lt; $count; $i++) {$x = $Recordset-&amp;gt;fetchRow($i);}&lt;/code&gt; ... &lt;br&gt;&#xA;0.0344 s&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;while ($x = $Recordset[$i]) {$i++; if (!isset($Recordset[$i])) break;}&lt;/code&gt; ... &lt;br&gt;&#xA;0.0542 s&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;&lt;b&gt;Without Recordset, but still using the &quot;bind to array&quot; technique and pre-storing results...&lt;/b&gt;&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;for ($i=0, $count=MySQLI_STMT-&amp;gt;num_rows; $i &amp;lt; $count; $i++)) {$MySQLI_STMT-&amp;gt;fetch(); $x = $bind_row;}&lt;/code&gt; ...&lt;br&gt;&#xA;0.0414 s&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;while ($MySQLI_STMT-&amp;gt;fetch()) {$x = $bind_row;}&lt;/code&gt; ... &lt;br&gt;&#xA;0.009 s&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="807" LastEditorUserId="807" LastEditDate="2011-01-29T20:48:39.080" LastActivityDate="2012-02-20T14:39:17.373" Title="MySQLi_Recordset: blending SPL and Statement/Query results" Tags="&lt;php&gt;&lt;php5&gt;&lt;mysqli&gt;&lt;spl&gt;" AnswerCount="1" CommentCount="5" CommunityOwnedDate="2011-01-29T17:17:09.107" />
  <row Id="402" PostTypeId="2" ParentId="383" CreationDate="2011-01-29T05:28:32.003" Score="11" Body="&lt;p&gt;To add to Andrew's answer about taking advantage of what type of timestamps can be creating using strtotime(), your code can be reduced to around 25 lines...&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?php&#xA;&#xA;$schedule = array(&#xA;    'this Sunday 8am',&#xA;    'this Sunday 10am',&#xA;    'this Sunday 12pm',&#xA;    'this Sunday 6:30pm',&#xA;    'this Wednesday 7pm',&#xA;    'this Saturday 10am'&#xA;    );&#xA;&#xA;$current_time = strtotime('now');&#xA;foreach ($schedule as &amp;amp;$val) {&#xA;    $val = strtotime($val);&#xA;    // fix schedule to next week if time resolved to the past&#xA;    if ($val - $current_time &amp;lt; 0) $val += 604800; &#xA;    }&#xA;sort($schedule);&#xA;$countdown = $schedule[0] - $current_time;&#xA;&#xA;?&amp;gt;&#xA;&#xA;&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;&#xA;    var myTime = &amp;lt;?php echo $countdown; // just personally prefer full tags ?&amp;gt;;&#xA;    $('#countdown').countdown({ until: myTime}); &#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;To add to visionary-software-solutions' answer, it would be best to store the schedule in a database or a separate xml/text/json/etc type file.  This way, you can have staff simply use an internal webform to change schedules instead of having the PHP dev hard-code the changes every time.  In that webpage, you can allow staff to only select a weekday and time, and have the page translate that into a string usable by &lt;code&gt;strtotime()&lt;/code&gt; in this countdown script.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Edit: fixed &lt;code&gt;strtotime()&lt;/code&gt; values.  Careful with &quot;this day&quot; vs &quot;next&quot;.  For some insight into what type of strings &lt;code&gt;strtotime()&lt;/code&gt; can take, see: &lt;a href=&quot;http://www.gnu.org/software/tar/manual/html_node/Date-input-formats.html&quot;&gt;http://www.gnu.org/software/tar/manual/html_node/Date-input-formats.html&lt;/a&gt;&lt;/p&gt;&#xA;" OwnerUserId="807" LastEditorUserId="807" LastEditDate="2011-01-29T06:57:50.737" LastActivityDate="2011-01-29T06:57:50.737" CommentCount="0" />
  <row Id="403" PostTypeId="1" CreationDate="2011-01-29T05:37:09.230" Score="3" ViewCount="639" Body="&lt;p&gt;Theme-swap functionality will be done via a better-looking &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; at the top of the page, but for right now, it's just thrown on the button. The theme preference should persist through page refreshes through the use of cookies.  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'm going to do five different themes, each in two different sizes, since the site is very bad in &lt;code&gt;800x600&lt;/code&gt; and still quite bad in &lt;code&gt;1024x768&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Let me know if it breaks or simply doesn't work. I've noticed a bug that happens once in a blue moon, but I think that's because the browser might be doing parallel work and one script gets too far ahead of the other.  I'll have to research it more, but I think it's good enough right now to ask for opinions.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The page will eventually display via &lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt; for those that don't have JavaScript turned on but for right now, it'll just display a message that says:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Please turn JavaScript on!&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;How it works:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Non-JavaScript page is displayed with &lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;If JavaScript is enabled, it loads the theme-preference from cookies.&lt;/li&gt;&#xA;&lt;li&gt;JavaScript then applies the preferred theme via AJAX fetching the appropriate theme (&lt;code&gt;skin[x].html&lt;/code&gt;) and the content of the page (&lt;code&gt;[page_name.html]&lt;/code&gt;).&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;The code isn't perfect yet, and I'll definitely have to remove the use of another person's image as the background for the second skin, but it's almost done.  About half of the code deals with merely re-positioning the elements when the window is resized.  For the sake of brevity, some code is not shown.  I apologize for its length.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;index.html&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&quot;text/javascript&quot;&amp;gt; &#xA;window.onresize = function() { setContentPositions(); setJSMenuPositions(); }&#xA;$('html').addClass('js');&#xA;&amp;lt;/script&amp;gt; &#xA;&#xA;&#xA;&#xA;&amp;lt;script type=&quot;text/javascript&quot;&amp;gt; &#xA;$().ready(function() {&#xA;&#xA;getThemeInfo();&#xA;&#xA;AJAX_LoadResponseIntoElement(&quot;mybody&quot;, &quot;skin1.txt&quot;, function() {&#xA;  AJAX_LoadResponseIntoElement(&quot;contentdiv&quot;, &quot;index.txt&quot;, initPage);&#xA;  });&#xA;&#xA;&#xA;if (themeSelect&amp;gt;1) { themeSwapNoInc();}&#xA;&#xA;});&#xA;&amp;lt;/script&amp;gt; &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;funcs.js&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function getThemeInfo()&#xA;{&#xA;themeSelect=checkCookie();&#xA;}&#xA;&#xA;function themeSwap()&#xA;{&#xA;  themeSelect++;&#xA;  if (themeSelect&amp;gt;2 || themeSelect&amp;lt;1) {themeSelect=1;}&#xA;  $('html').addClass('js');&#xA;&#xA;  switch(themeSelect) {&#xA;    case 1:&#xA;      AJAX_LoadResponseIntoElement(&quot;mybody&quot;, &quot;skin1.txt&quot;, function() {&#xA;        AJAX_LoadResponseIntoElement(&quot;contentdiv&quot;, &quot;index.txt&quot;, initPage);&#xA;        });&#xA;&#xA;      document.body.style.backgroundImage=&quot;url(http://www.solarcoordinates.com/images/bg2b.png)&quot;;&#xA;      document.body.style.backgroundRepeat=&quot;repeat-x&quot;;&#xA;&#xA;      break;&#xA;&#xA;    case 2:&#xA;      AJAX_LoadResponseIntoElement(&quot;mybody&quot;, &quot;skin2.txt&quot;, function() {&#xA;        AJAX_LoadResponseIntoElement(&quot;contentdiv&quot;, &quot;index.txt&quot;, initPage);&#xA;        });&#xA;&#xA;      document.body.style.backgroundImage=&quot;url(http://www.constantcollide.com/wp-content/themes/killerbrown/images/texture.jpg)&quot;;&#xA;      document.body.style.backgroundRepeat=&quot;repeat&quot;;&#xA;&#xA;      break;&#xA;  }&#xA;&#xA;  setCookie(&quot;themeSelection&quot;,themeSelect,365);&#xA;&#xA;}&#xA;&#xA;&#xA;&#xA;function themeSwapNoInc()&#xA;{  &#xA;  themeSelect--;&#xA;  themeSwap();&#xA;}&#xA;&#xA;&#xA;&#xA;function initPage()&#xA;{&#xA;    $('#vertnav .kwicks').kwicks({&#xA;        defaultKwick:0,&#xA;        max : 205,&#xA;        spacing : 3,&#xA;        isVertical : true&#xA;    });&#xA;&#xA;setContentPositions();&#xA;replaceCSSMenu();&#xA;showContainer();&#xA;setJSMenuPositions();&#xA;&#xA;}&#xA;&#xA;&#xA;&#xA;function showContainer()&#xA;{&#xA;    $('html').removeClass('js');&#xA;}&#xA;&#xA;&#xA;function AJAX_LoadResponseIntoElement (elementId, fetchFileName, cfunc) {&#xA;  var XMLHRObj;&#xA;  if (window.XMLHttpRequest) { XMLHRObj=new XMLHttpRequest(); }&#xA;    else { XMLHRObj=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;); }&#xA;&#xA;  XMLHRObj.onreadystatechange=function()&#xA;    {&#xA;    if (XMLHRObj.readyState==4 &amp;amp;&amp;amp; XMLHRObj.status==200)&#xA;      {&#xA;      document.getElementById(elementId).innerHTML=XMLHRObj.responseText;&#xA;      cfunc();&#xA;      }&#xA;    }&#xA;  XMLHRObj.open(&quot;GET&quot;,fetchFileName,true);&#xA;  XMLHRObj.send();&#xA;}&#xA;&#xA;&#xA;function findLeft(obj) {&#xA;  var curleft = 0;&#xA;&#xA;  if (obj.offsetParent) { do {curleft += obj.offsetLeft;} while (obj = obj.offsetParent);} &#xA;  else { curleft += obj.offsetLeft; }&#xA;&#xA;  return curleft;&#xA;}&#xA;&#xA;&#xA;function findTop(obj) {&#xA;   var curtop = 0;&#xA;&#xA;  if (obj.offsetParent) { do {curtop += obj.offsetTop;} while (obj = obj.offsetParent);}&#xA;  else { curtop += obj.offsetTop; }&#xA;&#xA;  return curtop;&#xA;}&#xA;&#xA;&#xA;function findmyparent(e) {&#xA;    var srcElement = e.srcElement ? e.srcElement : e.target;&#xA;&#xA;    if (srcElement.className.search(&quot;jsmenu&quot;)==-1 &amp;amp;&amp;amp; srcElement.className.search(&quot;kwick&quot;)==-1 &amp;amp;&amp;amp; srcElement.className!=&quot;vertnav&quot; &amp;amp;&amp;amp; srcElement.className!=&quot;active&quot;) &#xA;    { &#xA;        document.getElementById(&quot;jsmenu&quot; + lastindex).style.display=&quot;none&quot;;&#xA;        submenuvisible=false;&#xA;    } &#xA;}&#xA;&#xA;&#xA;function getContentHeight() { return window.innerHeight; }&#xA;&#xA;function getContentWidth() { return window.innerWidth; }&#xA;&#xA;function setContentPositions() {&#xA;&#xA;&#xA;  var DOMheight = getContentHeight()? getContentHeight(): window.document.body.parentElement.clientHeight;&#xA;  var DOMwidth = getContentWidth()? getContentWidth(): window.document.body.parentElement.clientWidth;&#xA;&#xA;  var y_lbound, x_lbound, x_ubound;&#xA;  var container_ymod, container_ymin;&#xA;  var container_xmod, container_xmax, container_xmin;&#xA;  var content_xmod, content_xmax, content_xmin;&#xA;&#xA;&#xA;switch (themeSelect) {&#xA;&#xA;  case 1:&#xA;&#xA;    y_lbound=727;&#xA;    x_lbound=910;&#xA;    x_ubound=1400;&#xA;&#xA;    container_ymod=-240;&#xA;    container_ymin=487;&#xA;&#xA;    container_xmod=-240;&#xA;    container_xmax=1160;&#xA;    container_xmin=670;&#xA;&#xA;    content_xmod=-490;&#xA;    content_xmax=910;&#xA;    content_xmin=420;&#xA;&#xA;&#xA;    break;&#xA;&#xA;  case 2:&#xA;&#xA;    y_lbound=710;&#xA;    x_lbound=910;&#xA;    x_ubound=1400;&#xA;&#xA;    container_ymod=-178;&#xA;    container_ymin=532;&#xA;&#xA;    container_xmod=-300;&#xA;    container_xmax=1100;&#xA;    container_xmin=610;&#xA;&#xA;    content_xmod=-350;&#xA;    content_xmax=1050;&#xA;    content_xmin=560;&#xA;&#xA;&#xA;&#xA;    break;&#xA;&#xA;  default:&#xA;&#xA;&#xA;} // end switch&#xA;&#xA;&#xA;&#xA;    if (DOMheight &amp;gt; y_lbound) {  document.getElementById('containerdiv').style.height = (DOMheight+container_ymod) + 'px';   }&#xA;      else { document.getElementById('containerdiv').style.height = container_ymin + 'px'; }&#xA;&#xA;    if (DOMwidth &amp;gt; x_lbound) {&#xA;        if (DOMwidth &amp;lt; x_ubound) {&#xA;            document.getElementById('containerdiv').style.width = (DOMwidth+container_xmod) + 'px';&#xA;            document.getElementById('contentdiv').style.width = (DOMwidth+content_xmod) + 'px'; &#xA;        } else {&#xA;            document.getElementById('containerdiv').style.width = container_xmax +'px';&#xA;            document.getElementById('contentdiv').style.width = content_xmax + 'px'; &#xA;        }&#xA;    } else {&#xA;        document.getElementById('containerdiv').style.width = container_xmin + 'px';&#xA;        document.getElementById('contentdiv').style.width = content_xmin + 'px'; &#xA;    }&#xA;&#xA;&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;jsmenucontent.js&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function setJSMenuPositions()&#xA;{&#xA;    var popupleft = findLeft(document.getElementById('kwick1'))+168;&#xA;    var popuptop = findTop(document.getElementById('kwick1'));&#xA;&#xA;    document.getElementById('jsmenu0').style.left = popupleft + &quot;px&quot;;&#xA;    document.getElementById('jsmenu0').style.top = popuptop -12+ &quot;px&quot;;&#xA;&#xA;    document.getElementById('jsmenu1').style.left = popupleft + &quot;px&quot;;&#xA;    document.getElementById('jsmenu1').style.top = popuptop +33+ &quot;px&quot;;&#xA;&#xA;    document.getElementById('jsmenu2').style.left = popupleft + &quot;px&quot;;&#xA;    document.getElementById('jsmenu2').style.top = popuptop +77+ &quot;px&quot;;&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1099" LastEditorUserId="59481" LastEditDate="2015-12-14T01:46:24.077" LastActivityDate="2015-12-14T01:46:24.077" Title="Skin/theme swap" Tags="&lt;javascript&gt;&lt;ajax&gt;" AnswerCount="1" CommentCount="6" FavoriteCount="2" />
  <row Id="404" PostTypeId="1" CreationDate="2011-01-29T05:39:15.903" Score="7" ViewCount="3006" Body="&lt;p&gt;I'm thinking about how to do a color transition for a line in WPF. I'm looking for this to be as simple and succinct as possible, and also the &quot;correct&quot; way in the WPF world.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is what I have, taking the line from it's previous color to &lt;code&gt;Colors.LightGreen&lt;/code&gt; in 0.1 seconds.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Line TargetLine = GetMyTargetLine();&#xA;&#xA;var s = new Storyboard(){ Duration = new Duration(TimeSpan.FromSeconds(0.1f)) };&#xA;s.Children.Add(new ColorAnimation(Colors.LightGreen, s.Duration));&#xA;Storyboard.SetTarget(s.Children[0], TargetLine);&#xA;Storyboard.SetTargetProperty(s.Children[0], new PropertyPath(&quot;Stroke.Color&quot;));&#xA;s.Begin();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And it is functional. Is this the proper way to do it in the WPF mindset? It just seems very clunky and verbose way to express what I want to do. Thoughts?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt;&#xA;With Snowbear's advice I can at least get it to 4 lines. The entire context of the storyboard is right here so I don't think it's a big deal to reference the only child by index. If it were any more complex than this I'd agree that it should be a named variable.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    Line TargetLine = GetMyTargetLine();        &#xA;&#xA;    var story = new Storyboard() { Children = { new ColorAnimation(color, new Duration(TimeSpan.FromSeconds(0.1))) } };&#xA;    Storyboard.SetTarget(story.Children[0], TargetLine);&#xA;    Storyboard.SetTargetProperty(story.Children[0], new PropertyPath(&quot;Stroke.Color&quot;));&#xA;    story.Begin();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="491" LastEditorUserId="491" LastEditDate="2011-01-30T20:07:49.880" LastActivityDate="2011-06-23T05:11:07.800" Title="Animating the color of a line in WPF" Tags="&lt;c#&gt;&lt;wpf&gt;" AnswerCount="2" CommentCount="1" />
  <row Id="410" PostTypeId="2" ParentId="185" CreationDate="2011-01-29T07:54:04.583" Score="5" Body="&lt;p&gt;I believe you are using them correctly as-is, but if I was working on your team, I would deny you a commit on basic principal:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;Monitor.Wait&lt;/code&gt; and &lt;code&gt;Monitor.Pulse&lt;/code&gt; are amazingly low-level constructs with very difficult semantics to try to figure out after you've written them.  Assuming this is used in a large application, I'm going to have to search for every possible reference to the object contained by &lt;code&gt;_connectLock&lt;/code&gt; and see how its used, just to make sure that the only thing that &lt;code&gt;Pulse&lt;/code&gt;s it is the connection code.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It doesn't look like you're doing anything here that you couldn't just use &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.threading.manualresetevent%28v=VS.80%29.aspx&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;System.Threading.ManualResetEvent&lt;/code&gt;&lt;/a&gt; for instead, which has a much simpler API for your application's future maintenance developers to figure out.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;P.S. Remember that your application's future maintenance developer might be you.  Also remember that in the future you will be older, and thus crankier and more forgetful than you are now.&lt;/p&gt;&#xA;" OwnerUserId="1106" LastEditorUserId="8891" LastEditDate="2012-01-31T21:34:12.907" LastActivityDate="2012-01-31T21:34:12.907" CommentCount="6" />
  <row Id="411" PostTypeId="2" ParentId="276" CreationDate="2011-01-29T08:09:50.390" Score="2" Body="&lt;p&gt;I think your interfaces are mostly well-defined, with a couple exceptions:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I don't think Load, Attach and Detach should be members of IUnitOfWork, but rather IRepository.  It seems that the repository that manages objects of type T would be the best place to place methods that acts on that type.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The UnitOfWork property on IRepository does not belong there. Things that modify one repository shouldn't be allowed to go and get other repositories to modify on their own.  If they need them, pass them in explicitly.  Otherwise, you're hiding from potential callers the fact that your implementation actually depends on more than just the one repository, and hiding your dependencies like you're ashamed of them is one of my least favorite code smells.&lt;/p&gt;&#xA;" OwnerUserId="1106" LastActivityDate="2011-01-29T08:09:50.390" CommentCount="2" />
  <row Id="412" PostTypeId="2" ParentId="340" CreationDate="2011-01-29T09:04:34.990" Score="0" Body="&lt;p&gt;My code is based off glebm's, but I've changed it so that array lookups must always use the &lt;code&gt;.&lt;/code&gt; syntax. I made a few other tweaks such as creating an object chain if assigning to a nested key that doesn't yet exist.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function parse_obj_key(obj, key, value){&#xA;    var is_assigning = (value !== undefined);&#xA;    key = key.split('.');     &#xA;&#xA;    var data = obj;&#xA;    var length = key.length - is_assigning;&#xA;&#xA;    for (var i = 0; i &amp;lt; length; i++) {&#xA;        var child = data[key[i]];&#xA;        var has_child = (child !== undefined);&#xA;&#xA;        if (!has_child &amp;amp;&amp;amp; !is_assigning) {&#xA;            $.log(&quot;Invalid obj path: &quot; + key + &quot;\n&quot; + JSON.stringify(obj));&#xA;            return null;&#xA;        }&#xA;&#xA;        if (!has_child) {&#xA;            child = {};&#xA;        data[key[i]] = child;&#xA;        }&#xA;&#xA;        data = child;&#xA;    }&#xA;&#xA;    if (is_assigning) {&#xA;        data[key[i]] = value;&#xA;    } else {&#xA;        return data;       &#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you're trying to create an optional parameter, you should check if it is undefined using &lt;code&gt;if (param !== undefined)&lt;/code&gt;, rather than just &lt;code&gt;if (param)&lt;/code&gt;, otherwise you'll have trouble setting falsy values such as &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;&quot;&quot;&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;One of the things that allows this code to be much shorter is the observation that in javascript, &lt;code&gt;arr['a']['b'][0]&lt;/code&gt; is the same as &lt;code&gt;arr['a']['b']['0']&lt;/code&gt; - that is to say, array lookup using an integer is no different from array lookup using a string that contains a number. This avoids the need to parse the numbers like you do.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The other major saver is the use of split rather than indexing, which makes it easy to &lt;code&gt;for&lt;/code&gt; loop over the parts of the key.&lt;/p&gt;&#xA;" OwnerUserId="265" LastEditorUserId="265" LastEditDate="2011-01-30T10:17:32.723" LastActivityDate="2011-01-30T10:17:32.723" CommentCount="2" />
  <row Id="413" PostTypeId="1" AcceptedAnswerId="457" CreationDate="2011-01-29T09:56:55.847" Score="2" ViewCount="6995" Body="&lt;p&gt;Consider the following method that I have for checking write permissions on a directory path:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/// &amp;lt;summary&amp;gt;&#xA;/// Check existence and write permissions of supplied directory.&#xA;/// &amp;lt;/summary&amp;gt;&#xA;/// &amp;lt;param name=&quot;directory&quot;&amp;gt;The directory to check.&amp;lt;/param&amp;gt;&#xA;protected static void CheckPermissions(string directory)&#xA;{&#xA;    if (!Directory.Exists(directory))&#xA;    {&#xA;        throw new DirectoryNotFoundException(String.Format(JobItemsStrings.Job_DirectoryNotFound, directory));&#xA;    }&#xA;&#xA;    // Check permissions exist to write to the directory.&#xA;    // Will throw a System.Security.SecurityException if the demand fails.&#xA;    FileIOPermission ioPermission = new FileIOPermission(FileIOPermissionAccess.Write, directory);&#xA;    ioPermission.Demand();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;When running FxCop, this code throws up a &lt;strong&gt;&quot;CA2103 - Review imperative security&quot;&lt;/strong&gt; warning, albeit with a certainty of 25%, with this info:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;&quot;Use of imperative demands can lead to&#xA;  unforeseen security problems. The&#xA;  values used to construct a permission&#xA;  should not change within the scope of&#xA;  the demand call. For some components&#xA;  the scope spans from the demand call&#xA;  to end of the method; for others it&#xA;  spans from the demand call until the&#xA;  component is finalized. If the values&#xA;  used to construct the permission are&#xA;  fields or properties, they can be&#xA;  changed within the scope of the demand&#xA;  call. This can lead to race&#xA;  conditions, mutable read-only arrays,&#xA;  and problems with boxed  value types.&quot;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Bascially, is FxCop being over-cautious, or am I doing it wrong?&lt;/p&gt;&#xA;" OwnerUserId="64" LastEditorUserId="22222" LastEditDate="2016-06-22T22:05:01.997" LastActivityDate="2016-06-22T22:05:01.997" Title="Directory write permissions check" Tags="&lt;c#&gt;&lt;security&gt;" AnswerCount="2" CommentCount="2" FavoriteCount="0" />
  <row Id="414" PostTypeId="2" ParentId="49" CreationDate="2011-01-29T14:48:29.900" Score="4" Body="&lt;p&gt;where you state &lt;strong&gt;Define global constants&lt;/strong&gt; your not defining your directories with the correct slashes for the Operating system&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can use &lt;code&gt;/&lt;/code&gt; slashes fluently on your application as both unix and windows supports them but if you really want to be on the safe side then you should use &lt;code&gt;DIRECTORY_SEPARATOR&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As Doctrine 2.0 is only supporting PHP 5.3.0 you can replace &lt;code&gt;dirname(__FILE__)&lt;/code&gt; with &lt;code&gt;__DIR__&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I would also create a constant called &lt;code&gt;DS&lt;/code&gt; which would normally be created in a constants file, and should be one of the first included.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I would convert the above to:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; define('ROOT_PATH'  ,  __DIR__);&#xA; define('URL_BASE'   ,  'http://localhost/myapp/public/');&#xA; define('LIB_PATH'   ,  realpath(&quot;../../path/to/libs&quot;)); //Unix / Windows&#xA; define('OPENID_PATH',  realpath(&quot;../../path/to/openid&quot;));//Unix / Windows&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And then change the &lt;code&gt;loadModels&lt;/code&gt; accordingly?&lt;/p&gt;&#xA;" OwnerUserId="95" LastActivityDate="2011-01-29T14:48:29.900" CommentCount="2" />
  <row Id="415" PostTypeId="1" AcceptedAnswerId="1017" CreationDate="2011-01-29T15:45:27.830" Score="7" ViewCount="188" Body="&lt;p&gt;I have a stored procedure that looks up an article based on the article's title. But I also need to increment a column in the same table that counts the number of times the article has been viewed.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Trying to be as efficient as possible, I wanted a way to do this without performing multiple lookups. Someone pointed out the newer OUTPUT clause, which I've used below.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'm just wondering if I'm using it in the most efficient way, if I really made it faster, and if there are any other optimizations that could be employed.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;DECLARE @Slug VARCHAR(250) -- Stored procedure argument&#xA;&#xA;-- declare @UpdatedArticle table variable &#xA;DECLARE @UpdatedArticle TABLE&#xA;(&#xA; ArtID INT,&#xA; ArtUserID UNIQUEIDENTIFIER,&#xA; ArtSubcategoryID INT,&#xA; ArtTitle VARCHAR(250),&#xA; ArtHtml VARCHAR(MAX),&#xA; ArtDescription VARCHAR(350),&#xA; ArtKeywords VARCHAR(250),&#xA; ArtLicenseID VARCHAR(10),&#xA; ArtViews BIGINT,&#xA; ArtCreated DATETIME2(7),&#xA; ArtUpdated DATETIME2(7)&#xA;);&#xA;&#xA;UPDATE Article&#xA; SET ArtViews = ArtViews + 1&#xA;OUTPUT&#xA; INSERTED.ArtID,&#xA; INSERTED.ArtUserID,&#xA; inserted.ArtSubcategoryID,&#xA; INSERTED.ArtTitle,&#xA; INSERTED.ArtHtml,&#xA; INSERTED.ArtDescription,&#xA; INSERTED.ArtKeywords,&#xA; INSERTED.ArtLicenseID,&#xA; INSERTED.ArtViews,&#xA; INSERTED.ArtUpdated,&#xA; INSERTED.ArtCreated&#xA;INTO @UpdatedArticle&#xA;WHERE ArtSlugHash = CHECKSUM(@Slug) AND ArtSlug = @Slug AND ArtApproved = 1&#xA;&#xA;SELECT a.ArtID, a.ArtUserID, a.ArtTitle, a.ArtHtml, a.ArtDescription, a.ArtKeywords, a.ArtLicenseID,&#xA; l.licTitle, a.ArtViews, a.ArtCreated, a.ArtUpdated, s.SubID, s.SubTitle, c.CatID, c.CatTitle,&#xA; sec.SecID, sec.SecTitle, u.UsrDisplayName AS UserName&#xA; FROM @UpdatedArticle a&#xA; INNER JOIN Subcategory s ON a.ArtSubcategoryID = s.SubID&#xA; INNER JOIN Category c ON s.SubCatID = c.CatID&#xA; INNER JOIN [Section] sec ON c.CatSectionID = sec.SecID&#xA; INNER JOIN [User] u ON a.ArtUserID = u.UsrID&#xA; INNER JOIN License l ON a.ArtLicenseID = l.LicID&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This is used in an ASP.NET application using SQL Server 2008.&lt;/p&gt;&#xA;" OwnerUserId="1115" LastEditorUserId="14625" LastEditDate="2014-03-06T15:41:38.600" LastActivityDate="2014-03-06T15:41:38.600" Title="Return Data and Update Row without Multiple Lookups?" Tags="&lt;sql&gt;&lt;sql-server&gt;&lt;lookup&gt;" AnswerCount="3" CommentCount="0" FavoriteCount="0" />
  <row Id="416" PostTypeId="2" ParentId="365" CreationDate="2011-01-29T16:09:54.307" Score="1" Body="&lt;p&gt;There's a bigger-picture issue here; this kind of manual string manipulation is a Bad Idea. It's guaranteed to be buggy, often with security consequences.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You ought to use (preferred) or at least implement a string utility class. Here are a couple examples:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&quot;http://git.gnome.org/browse/glib/tree/glib/gstring.h&quot; rel=&quot;nofollow&quot;&gt;http://git.gnome.org/browse/glib/tree/glib/gstring.h&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&quot;http://cgit.freedesktop.org/dbus/dbus/tree/dbus/dbus-string.h&quot; rel=&quot;nofollow&quot;&gt;http://cgit.freedesktop.org/dbus/dbus/tree/dbus/dbus-string.h&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&quot;ftp://vsftpd.beasts.org/users/cevans/untar/vsftpd-2.3.2/str.h&quot; rel=&quot;nofollow&quot;&gt;ftp://vsftpd.beasts.org/users/cevans/untar/vsftpd-2.3.2/str.h&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;This way all your string code will be much more concise, and entire classes of bugs eliminated.&lt;/p&gt;&#xA;" OwnerUserId="493" LastActivityDate="2011-01-29T16:09:54.307" CommentCount="3" />
  <row Id="418" PostTypeId="1" CreationDate="2011-01-29T16:30:59.507" Score="27" ViewCount="15707" Body="&lt;p&gt;This system has to manage students, teachers, staff and grading. This is for production and is not a school assignment. As such, please let me know if I can improve on any aspect. :)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;My main concern is automation. I'd like my software to be able to run regardless if I still exist. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'm using SQLite as the database:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;create table User&#xA;(&#xA;ID integer primary key autoincrement,&#xA;Username string,&#xA;Password string&#xA;);&#xA;&#xA;create table Area&#xA;(&#xA;ID integer primary key autoincrement,&#xA;Name string&#xA;);&#xA;&#xA;create table Subject&#xA;(&#xA;ID integer primary key autoincrement,&#xA;Name string,&#xA;Abbreviation string,&#xA;IDArea integer references Area(ID)&#xA;);&#xA;&#xA;create table Level&#xA;(&#xA;ID integer primary key autoincrement,&#xA;Name string,&#xA;Principle string&#xA;);&#xA;&#xA;create table Grade&#xA;(&#xA;ID integer primary key autoincrement,&#xA;Name string,&#xA;IDLevel integer references Level(ID),&#xA;Observation string&#xA;);&#xA;&#xA;create table StaffType&#xA;(&#xA;ID integer primary key autoincrement,&#xA;Name string&#xA;);&#xA;&#xA;create table Staff&#xA;(&#xA;ID integer primary key autoincrement,&#xA;IDStaffType integer references StaffType(ID),&#xA;Name string,&#xA;LastNameFather string,&#xA;LastNameMother string,&#xA;DateOfBirth string,&#xA;PlaceOfBirth string,&#xA;Sex string,&#xA;Carnet string,&#xA;Telephone string,&#xA;MobilePhone string,&#xA;Address string,&#xA;FatherName string,&#xA;MotherName string,&#xA;FatherContact string,&#xA;MotherContact string,&#xA;FatherPlaceOfWork string,&#xA;MotherPlaceOfWork string,&#xA;DateOfHiring string,&#xA;YearsOfService string,&#xA;Formation string,&#xA;Specialty string,&#xA;Category string,&#xA;Salary string&#xA;);&#xA;&#xA;create table GradeParalelo&#xA;(&#xA;ID integer primary key autoincrement,&#xA;IDGrade integer references Grade(ID),&#xA;IDStaff integer references Staff(ID),&#xA;Name string&#xA;);&#xA;&#xA;create table Student&#xA;(&#xA;ID integer primary key autoincrement,&#xA;IDGradeParalelo integer references GradeParalelo(ID),&#xA;Rude string,&#xA;Name string,&#xA;LastNameFather string,&#xA;LastNameMother string,&#xA;DateOfBirth string,&#xA;PlaceOfBirth string,&#xA;Sex string,&#xA;Carnet string,&#xA;Telephone string,&#xA;MobilePhone string,&#xA;Address string,&#xA;FatherName string,&#xA;MotherName string,&#xA;FatherMobilePhone string,&#xA;MotherMobilePhone string,&#xA;FatherProfession string,&#xA;MotherProfession string,&#xA;FatherPlaceOfWork string,&#xA;MotherPlaceOfWork string,&#xA;Observations string&#xA;);&#xA;&#xA;create table Attendance&#xA;(&#xA;ID integer primary key autoincrement,&#xA;IDStudent integer references Student(ID),&#xA;Attended string,&#xA;Date string&#xA;);&#xA;&#xA;create table SubjectGrade&#xA;(&#xA;ID integer primary key autoincrement,&#xA;IDGrade integer references Grade(ID),&#xA;IDSubject integer references Subject(ID)&#xA;);&#xA;&#xA;create table ScoreRecord&#xA;(&#xA;ID integer primary key autoincrement,&#xA;IDSubject integer references Subject(ID),&#xA;IDStudent integer references Student(ID),&#xA;FirstTrimester integer,&#xA;SecondTrimester integer,&#xA;ThirdTrimester integer,&#xA;FinalGrade integer,&#xA;Year string&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://i.stack.imgur.com/gUAbT.jpg&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://i.stack.imgur.com/gUAbT.jpg&quot; alt=&quot;Entity/Relationship diagram&quot;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Any glaring room for improvement?&lt;/p&gt;&#xA;" OwnerDisplayName="Sergio Tapia" LastEditorUserId="52915" LastEditorDisplayName="Sergio Tapia" LastEditDate="2015-06-04T12:30:00.473" LastActivityDate="2016-03-28T12:03:59.543" Title="Database design for a school system" Tags="&lt;sql&gt;&lt;sqlite&gt;" AnswerCount="7" CommentCount="4" FavoriteCount="5" />
  <row Id="419" PostTypeId="1" CreationDate="2011-01-29T17:04:41.087" Score="27" ViewCount="49563" Body="&lt;p&gt;While researching ways to convert back and forth between &lt;code&gt;std::wstring&lt;/code&gt; and &lt;code&gt;std::string&lt;/code&gt;, I found &lt;a href=&quot;http://social.msdn.microsoft.com/Forums/en/Vsexpressvc/thread/0f749fd8-8a43-4580-b54b-fbf964d68375&quot;&gt;this conversation&lt;/a&gt; on the MSDN forums.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There were two functions that, to me, looked good. Specifically, these:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;std::wstring s2ws(const std::string&amp;amp; s)&#xA;{&#xA;    int len;&#xA;    int slength = (int)s.length() + 1;&#xA;    len = MultiByteToWideChar(CP_ACP, 0, s.c_str(), slength, 0, 0); &#xA;    wchar_t* buf = new wchar_t[len];&#xA;    MultiByteToWideChar(CP_ACP, 0, s.c_str(), slength, buf, len);&#xA;    std::wstring r(buf);&#xA;    delete[] buf;&#xA;    return r;&#xA;}&#xA;&#xA;std::string ws2s(const std::wstring&amp;amp; s)&#xA;{&#xA;    int len;&#xA;    int slength = (int)s.length() + 1;&#xA;    len = WideCharToMultiByte(CP_ACP, 0, s.c_str(), slength, 0, 0, 0, 0); &#xA;    char* buf = new char[len];&#xA;    WideCharToMultiByte(CP_ACP, 0, s.c_str(), slength, buf, len, 0, 0); &#xA;    std::string r(buf);&#xA;    delete[] buf;&#xA;    return r;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;However, the double allocation and the need to delete the buffer concern me (performance and exception safety) so I modified them to be like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;std::wstring s2ws(const std::string&amp;amp; s)&#xA;{&#xA;    int len;&#xA;    int slength = (int)s.length() + 1;&#xA;    len = MultiByteToWideChar(CP_ACP, 0, s.c_str(), slength, 0, 0); &#xA;    std::wstring r(len, L'\0');&#xA;    MultiByteToWideChar(CP_ACP, 0, s.c_str(), slength, &amp;amp;r[0], len);&#xA;    return r;&#xA;}&#xA;&#xA;std::string ws2s(const std::wstring&amp;amp; s)&#xA;{&#xA;    int len;&#xA;    int slength = (int)s.length() + 1;&#xA;    len = WideCharToMultiByte(CP_ACP, 0, s.c_str(), slength, 0, 0, 0, 0); &#xA;    std::string r(len, '\0');&#xA;    WideCharToMultiByte(CP_ACP, 0, s.c_str(), slength, &amp;amp;r[0], len, 0, 0); &#xA;    return r;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Unit testing indicates that this works in a nice, controlled environment but will this be OK in the vicious and unpredictable world that is my client's computer?&lt;/p&gt;&#xA;" OwnerUserId="863" LastEditorUserId="22222" LastEditDate="2013-12-20T01:06:11.717" LastActivityDate="2016-11-13T21:45:43.873" Title="Converting between std::wstring and std::string" Tags="&lt;c++&gt;&lt;strings&gt;&lt;converting&gt;" AnswerCount="10" CommentCount="0" FavoriteCount="9" />
  <row Id="420" PostTypeId="2" ParentId="418" CreationDate="2011-01-29T17:11:14.260" Score="10" Body="&lt;p&gt;Comments&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;p&gt;All your ID (unique ID's) are called ID (this is OK and it works for you)&lt;br&gt;&#xA;But I have found when you start doing joins this may become hard to read. Thus I like to name the unique key after the table. eg &lt;code&gt;User_ID&lt;/code&gt; on the User Table etc.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;To make the Identifiers easier to read either use camel case or separate words with _&lt;br&gt;&#xA;Identifiers like &lt;code&gt;IDArea&lt;/code&gt; run together a bit much. So &lt;code&gt;IdArea&lt;/code&gt; or &lt;code&gt;ID_Area&lt;/code&gt; or &lt;code&gt;Id_Area&lt;/code&gt; (Remember pick a style and be consistent though).&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;The Staff table has a lot of information in it a lot of which could be NULL.&lt;br&gt;&#xA;I would rather have a Person table to hold people information. Then a relationship table to hold relations ships between people. This way when your DB is expanded (and in a Business environment this will happen) you can express other relationships between staff.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Related to Staff. Like Staff I would keep the personal details of Student in the Person table. Note. I would still keep a seprate table (or view) for Staff/Student that has a link into the Person table.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;" OwnerUserId="507" LastActivityDate="2011-01-29T17:11:14.260" CommentCount="4" />
  <row Id="421" PostTypeId="2" ParentId="418" CreationDate="2011-01-29T17:24:56.687" Score="2" Body="&lt;p&gt;I appreciate that all the names you choose for tables and fields are understandable and self-explanatory. Only &quot;GradeParalelo&quot; does not make sense to me.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Nevertheless, I would suggest adding short comments to describe fields and tables. Include the motivation for design decisions that required complex thinking, especially if you expect the system to be maintained by different people.&lt;/p&gt;&#xA;" OwnerUserId="185" LastEditorUserId="185" LastEditDate="2011-01-30T14:10:35.560" LastActivityDate="2011-01-30T14:10:35.560" CommentCount="1" />
  <row Id="422" PostTypeId="2" ParentId="419" CreationDate="2011-01-29T17:49:15.337" Score="2" Body="&lt;p&gt;I don't do any Windows development, so I can't comment on the &lt;code&gt;WideCharToMultiByte&lt;/code&gt; part being safe.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The one thing I would say though is to ensure you are using the proper types for everything.  For example, &lt;code&gt;string.length()&lt;/code&gt; returns a &lt;code&gt;std::string::size_type&lt;/code&gt; (most likely a &lt;code&gt;size_t&lt;/code&gt;, the constructor also takes a &lt;code&gt;std::string::size_type&lt;/code&gt;, but that one isn't as big of a deal).  It probably won't ever bite you, but it is something to be careful of to ensure you don't have any overflows in other code you may be writing.&lt;/p&gt;&#xA;" OwnerUserId="55" LastEditorUserId="55" LastEditDate="2011-01-30T15:42:25.113" LastActivityDate="2011-01-30T15:42:25.113" CommentCount="6" />
  <row Id="423" PostTypeId="1" AcceptedAnswerId="426" CreationDate="2011-01-29T17:57:54.140" Score="21" ViewCount="3092" Body="&lt;p&gt;Having coded in Java and C# for quite some years, I'm currently learning Ruby. I'm working my way through the &lt;a href=&quot;http://rubykoans.com/&quot; rel=&quot;nofollow&quot;&gt;Ruby Koans tutorial&lt;/a&gt;. At some point, you are to implement a method that calculates the game-score of a dice-game called Greed.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I came up with this recursive Java/C#-like method. It passes all the supplied unit tests, so technically it's correct. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Now I'm wondering: Is this good Ruby code? If not, how would a &quot;Rubyist&quot; write this method? And possibly: Why? I'm also not so happy about the amount of duplicate code but can't think &#xA;of a better Rubyish way.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def score(dice)   #dice is an array of numbers, i.e. [3,4,5,3,3]&#xA;  return 0 if(dice == [] || dice == nil)&#xA;&#xA;  dice.sort!&#xA;&#xA;  return 1000 + score(dice[3..-1]) if(dice[0..2] == [1,1,1])&#xA;  return 600 + score(dice[3..-1]) if(dice[0..2] == [6,6,6])&#xA;  return 500 + score(dice[3..-1]) if(dice[0..2] == [5,5,5])&#xA;  return 400 + score(dice[3..-1]) if(dice[0..2] == [4,4,4])&#xA;  return 300 + score(dice[3..-1]) if(dice[0..2] == [3,3,3])&#xA;  return 200 + score(dice[3..-1]) if(dice[0..2] == [2,2,2])&#xA;  return 100 + score(dice[1..-1]) if(dice[0] == 1)&#xA;  return 50 + score(dice[1..-1]) if(dice[0] == 5)&#xA;  return 0 + score(dice[1..-1]);&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Some background (if needed)&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;# Greed is a dice game where you roll up to five dice to accumulate&#xA;# points. A greed roll is scored as follows:&#xA;#&#xA;# * A set of three ones is 1000 points&#xA;#&#xA;# * A set of three numbers (other than ones) is worth 100 times the&#xA;#   number. (e.g. three fours is 400 points).&#xA;#&#xA;# * A one (that is not part of a set of three) is worth 100 points.&#xA;#&#xA;# * A five (that is not part of a set of three) is worth 50 points.&#xA;#&#xA;# * Everything else is worth 0 points.&#xA;#&#xA;#&#xA;# Examples:&#xA;#&#xA;# score([1,1,1,5,1]) =&amp;gt; 1150 points&#xA;# score([2,3,4,6,2]) =&amp;gt; 0 points&#xA;# score([3,4,5,3,3]) =&amp;gt; 350 points&#xA;# score([1,5,1,2,4]) =&amp;gt; 250 points&#xA;#&#xA;# More scoring examples are given in the tests below:&#xA;&#xA;&#xA;class AboutScoringProject &amp;lt; EdgeCase::Koan&#xA;  def test_score_of_an_empty_list_is_zero&#xA;    assert_equal 0, score([])&#xA;  end&#xA;&#xA;  def test_score_of_a_single_roll_of_5_is_50&#xA;    assert_equal 50, score([5])&#xA;  end&#xA;&#xA;  def test_score_of_a_single_roll_of_1_is_100&#xA;    assert_equal 100, score([1])&#xA;  end&#xA;&#xA;  def test_score_of_a_single_roll_of_1_is_100&#xA;    assert_equal 200, score([1,1])&#xA;  end&#xA;&#xA;  def test_score_of_multiple_1s_and_5s_is_the_sum_of_individual_scores&#xA;    assert_equal 300, score([1,5,5,1])&#xA;  end&#xA;&#xA;  def test_score_of_single_2s_3s_4s_and_6s_are_zero&#xA;    assert_equal 0, score([2,3,4,6])&#xA;  end&#xA;&#xA;  def test_score_of_a_triple_1_is_1000&#xA;    assert_equal 1000, score([1,1,1])&#xA;  end&#xA;&#xA;  def test_score_of_other_triples_is_100x&#xA;    assert_equal 200, score([2,2,2])&#xA;    assert_equal 300, score([3,3,3])&#xA;    assert_equal 400, score([4,4,4])&#xA;    assert_equal 500, score([5,5,5])&#xA;    assert_equal 600, score([6,6,6])&#xA;  end&#xA;&#xA;  def test_score_of_mixed_is_sum&#xA;    assert_equal 250, score([2,5,2,2,3])&#xA;    assert_equal 550, score([5,5,5,5])&#xA;  end&#xA;&#xA;  def test_score_of_a_triple_1_is_1000A&#xA;    assert_equal 1150, score([1,1,1,5,1])&#xA;  end&#xA;&#xA;  def test_score_of_a_triple_1_is_1000B&#xA;    assert_equal 350, score([3,4,5,3,3])&#xA;  end&#xA;&#xA;  def test_score_of_a_triple_1_is_1000C&#xA;    assert_equal 250, score([1,5,1,2,4])&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="59" LastEditorUserId="41243" LastEditDate="2015-05-18T22:55:32.000" LastActivityDate="2015-05-18T22:55:32.000" Title="Ruby Koans' Greed Task" Tags="&lt;ruby&gt;&lt;programming-challenge&gt;&lt;dice&gt;" AnswerCount="2" CommentCount="1" FavoriteCount="1" />
  <row Id="424" PostTypeId="2" ParentId="418" CreationDate="2011-01-29T18:07:44.667" Score="11" Body="&lt;p&gt;Some things that jumped out&lt;/p&gt;&#xA;&#xA;&lt;p&gt;take martin york's suggestion and be consistent as much as possible, user identifying primary key names like &lt;code&gt;user_id&lt;/code&gt; as opposed to &lt;code&gt;id&lt;/code&gt; for every table as it will make it less confusing for those writing/maintaining the SQL. For foreign keys, I would suggest table first e.g. &lt;code&gt;area_id&lt;/code&gt; as opposed to &lt;code&gt;IdArea&lt;/code&gt; as it flows better with natural language.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;Looking at your ERD, there are places where it is failing to get to &lt;a href=&quot;http://en.wikipedia.org/wiki/Database_normalization&quot; rel=&quot;nofollow&quot;&gt;3NF&lt;/a&gt; (which is a level of database normalization you should strive for when possible)&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Use proper field types, looks like you are using string a lot, things like date of hire should be actual timestamp/datetime column, gender can be enum, etc.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;All the contact/phone information in the staff and student tables can be places in more appropriate phone/contact tables as those are one to many relationships.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Your attendance table...looks like it either states that a student attended school a particular day or not...seems like this would be something more on the per class level, as a student could attend a half day and such.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Is it possible for a staff member to have more than one staff type, if so you should have an associative table to link staff to staff types&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Instead of years of service in staff, could you not just use the date of hire column to figure that out instead of every year updating the year of service column.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Those are some things I noticed, hope it helps.&lt;/p&gt;&#xA;" OwnerUserId="1090" LastEditorUserId="18427" LastEditDate="2013-12-17T14:31:24.517" LastActivityDate="2013-12-17T14:31:24.517" CommentCount="0" />
  <row Id="425" PostTypeId="2" ParentId="404" CreationDate="2011-01-29T18:21:54.340" Score="5" Body="&lt;p&gt;1) I believe it is not a good practice to give variables one-letter names. &lt;code&gt;Storyboard story = ...&lt;/code&gt;&lt;br&gt;&#xA;2) I believe you can specify &lt;code&gt;Duration&lt;/code&gt; in &lt;code&gt;ColorAnimation&lt;/code&gt; only. And do not set it for &lt;code&gt;Storyboard&lt;/code&gt;.&lt;br&gt;&#xA;3) I would introduce variable for &lt;code&gt;ColorAnimation&lt;/code&gt; because &lt;code&gt;s.Children[0]&lt;/code&gt; looks weird to me when I know that it is &lt;code&gt;ColorAnimation&lt;/code&gt;.&lt;br&gt;&#xA;4) Strangely you are using &lt;code&gt;0.1f&lt;/code&gt; where parameter is double anyway.&lt;br&gt;&#xA;5) I would consider using object and collection initializers for &lt;code&gt;Storyboard.Children&lt;/code&gt;.&lt;br&gt;&#xA;6) Optionally I would think on removing storyboard variable and start it immediatly after constructing.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Result: my code looks differently, but readability changes are subjective:  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Line TargetLine = line;&#xA;&#xA;var duration = new Duration(TimeSpan.FromSeconds(0.1));&#xA;var colorAnimation = new ColorAnimation(Colors.LightGreen, duration);&#xA;Storyboard.SetTarget(colorAnimation, TargetLine);&#xA;Storyboard.SetTargetProperty(colorAnimation, new PropertyPath(&quot;Stroke.Color&quot;));&#xA;&#xA;new Storyboard {Children = {colorAnimation}}.Begin();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="645" LastEditorUserId="645" LastEditDate="2011-01-29T18:43:22.573" LastActivityDate="2011-01-29T18:43:22.573" CommentCount="0" />
  <row Id="426" PostTypeId="2" ParentId="423" CreationDate="2011-01-29T18:46:52.523" Score="13" Body="&lt;p&gt;No, this is not good ruby code.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Let's start with mistakes:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Do not check for &lt;code&gt;== nil&lt;/code&gt;. &lt;code&gt;nil&lt;/code&gt; is not specified as a valid value for the method, therefore checking for it and returning 0 might mask other exceptions&lt;/li&gt;&#xA;&lt;li&gt;Do not use return statement. If you need to do series of &lt;code&gt;if&lt;/code&gt; statements, just use &lt;code&gt;if...elsif&lt;/code&gt;, or &lt;code&gt;case&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Do not modify parameters that come into your function. I am referring to &lt;code&gt;dice.sort!&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Do not use recursion when it would be a lot cleaner to do it the straight-forward way&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Considering all the above, here is a cleaned up version of the code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def score(dice)&#xA;  score = 0&#xA;&#xA;  # Below is equivalent to:&#xA;  #   counts = dice.inject(Hash.new(0)) { |h, x| h[x] += 1; h }&#xA;  counts = Hash.new(0) &#xA;  dice.each do |x|&#xA;    counts[x] += 1&#xA;  end&#xA;&#xA;  (1..6).each do |i|&#xA;    if counts[i] &amp;gt;= 3 &#xA;      if i == 1&#xA;        score += 1000&#xA;      else&#xA;        score += 100 * i&#xA;      end&#xA;&#xA;      counts[i] = [counts[i] - 3, 0].max&#xA;    end&#xA;&#xA;    if i == 1&#xA;      score += 100 * counts[i]&#xA;    elsif i == 5&#xA;      score += 50 * counts[i]&#xA;    end&#xA;  end&#xA;&#xA;  score&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="993" LastActivityDate="2011-01-29T18:46:52.523" CommentCount="12" />
  <row Id="427" PostTypeId="1" AcceptedAnswerId="439" CreationDate="2011-01-29T19:31:05.860" Score="6" ViewCount="446" Body="&lt;p&gt;I have been developing this class, and was wondering if anyone had any thoughts on how I can improve the performance of it.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?php&#xA;class Something {&#xA;    private $APIUsername, $APIPassword;&#xA;    private $APIurl = 'somesite.com';&#xA;&#xA;    function __construct ($APIUsername = '', $APIPassword = '') {&#xA;        try {&#xA;            if (!$APIUsername || !$APIPassword) {&#xA;                throw new Exception('You must specify a valid API username and password.');&#xA;            }&#xA;&#xA;            $this-&amp;gt;APIUsername = $APIUsername;&#xA;            $this-&amp;gt;APIPassword = $APIPassword;&#xA;        } catch (Exception $e) {&#xA;            die($e-&amp;gt;getMessage());&#xA;        }&#xA;    }&#xA;&#xA;    /*&#xA;    * Authenticate Account&#xA;    */&#xA;    public function authenticate ($EmailAddress, $Password) {&#xA;        try {&#xA;            $data['EmailAddress'] = $EmailAddress;&#xA;            $data['Password'] = $Password;&#xA;&#xA;            $data = $this-&amp;gt;setJSON($data);&#xA;&#xA;            $result = $this-&amp;gt;fetch('authenticate', $data);&#xA;        } catch (Exception $e) {&#xA;            $result = $e-&amp;gt;getMessage();&#xA;        }&#xA;&#xA;        return $result;&#xA;    }&#xA;&#xA;    /*&#xA;    * Get Contacts&#xA;    */&#xA;    public function contacts ($EmailAddress, $Password, $PIN) {&#xA;        try {&#xA;            $data['EmailAddress'] = $EmailAddress;&#xA;            $data['Password'] = $Password;&#xA;            $data['PIN'] = $PIN;&#xA;&#xA;            $data = $this-&amp;gt;setJSON($data);&#xA;&#xA;            $result = $this-&amp;gt;fetch('contacts', $data);&#xA;        } catch (Exception $e) {&#xA;            $result = $e-&amp;gt;getMessage();&#xA;        }&#xA;&#xA;        return $result;&#xA;    }&#xA;&#xA;    /*&#xA;    * Get Transactions&#xA;    */&#xA;    public function transactions ($EmailAddress, $Password, $PIN) {&#xA;        try {&#xA;            $data['EmailAddress'] = $EmailAddress;&#xA;            $data['Password'] = $Password;&#xA;            $data['PIN'] = $PIN;&#xA;&#xA;            $data = $this-&amp;gt;setJSON($data);&#xA;&#xA;            $result = $this-&amp;gt;fetch('transactions', $data);&#xA;        } catch (Exception $e) {&#xA;            $result = $e-&amp;gt;getMessage();&#xA;        }&#xA;&#xA;        return $result;&#xA;    }&#xA;&#xA;    /*&#xA;    * Validate PIN&#xA;    */&#xA;    public function validatepin ($EmailAddress, $Password, $PIN) {&#xA;        try {&#xA;            $data['EmailAddress'] = $EmailAddress;&#xA;            $data['Password'] = $Password;&#xA;            $data['PIN'] = $PIN;&#xA;&#xA;            $data = $this-&amp;gt;setJSON($data);&#xA;&#xA;            $result = $this-&amp;gt;fetch('validatepin', $data);&#xA;        } catch (Exception $e) {&#xA;            $result = $e-&amp;gt;getMessage();&#xA;        }&#xA;&#xA;        return $result;&#xA;    }&#xA;&#xA;    /*&#xA;    * Get Account Balance&#xA;    */&#xA;    public function balance ($EmailAddress, $Password) {&#xA;        try {&#xA;            $data['EmailAddress'] = $EmailAddress;&#xA;            $data['Password'] = $Password;&#xA;&#xA;            $data = $this-&amp;gt;setJSON($data);&#xA;&#xA;            $result = $this-&amp;gt;fetch('balance', $data);&#xA;        } catch (Exception $e) {&#xA;            $result = $e-&amp;gt;getMessage();&#xA;        }&#xA;&#xA;        return $result;&#xA;    }&#xA;&#xA;    /*&#xA;    * Get Account Information&#xA;    */&#xA;    public function account_information ($EmailAddress, $Password) {&#xA;        try {&#xA;            $data['EmailAddress'] = $EmailAddress;&#xA;            $data['Password'] = $Password;&#xA;&#xA;            $data = $this-&amp;gt;setJSON($data);&#xA;&#xA;            $result = $this-&amp;gt;fetch('account_information', $data);&#xA;        } catch (Exception $e) {&#xA;            $result = $e-&amp;gt;getMessage();&#xA;        }&#xA;&#xA;        return $result;&#xA;    }&#xA;&#xA;    /*&#xA;    * Send Money&#xA;    */&#xA;    public function send ($EmailAddress, $Password, $PIN, $DestinationID, $Amount, $Notes = '', $FundsSource = '') {&#xA;        try {&#xA;            $data['EmailAddress'] = $EmailAddress;&#xA;            $data['Password'] = $Password;&#xA;            $data['PIN'] = $PIN;&#xA;            $data['DestinationID'] = $DestinationID;&#xA;            $data['Amount'] = $Amount;&#xA;            $data['Notes'] = urlencode($Notes);&#xA;            $data['FundsSource'] = $FundsSource;&#xA;&#xA;            $data = $this-&amp;gt;setJSON($data);&#xA;&#xA;            $result = $this-&amp;gt;fetch('send', $data);&#xA;        } catch (Exception $e) {&#xA;            $result = $e-&amp;gt;getMessage();&#xA;        }&#xA;&#xA;        return $result;&#xA;    }&#xA;&#xA;    /*&#xA;    * Send (Sender Assumes Transaction Costs)&#xA;    */&#xA;    public function send_assume_costs ($EmailAddress, $Password, $PIN, $DestinationID, $Amount, $Description = '') {&#xA;        try {&#xA;            $data['EmailAddress'] = $EmailAddress;&#xA;            $data['Password'] = $Password;&#xA;            $data['PIN'] = $PIN;&#xA;            $data['DestinationID'] = $DestinationID;&#xA;            $data['Amount'] = $Amount;&#xA;            $data['Description'] = urlencode($Description);&#xA;&#xA;            $data = $this-&amp;gt;setJSON($data);&#xA;&#xA;            $result = $this-&amp;gt;fetch('send_assume_costs', $data);&#xA;        } catch (Exception $e) {&#xA;            $result = $e-&amp;gt;getMessage();&#xA;        }&#xA;&#xA;        return $result;&#xA;    }&#xA;&#xA;    /*&#xA;    * Set JSON Data&#xA;    */&#xA;    private function setJSON ($data) {&#xA;        $a = array();&#xA;&#xA;        $a['APIUsername'] = $this-&amp;gt;APIUsername;&#xA;        $a['APIPassword'] = $this-&amp;gt;APIPassword;&#xA;&#xA;        foreach ($data as $key =&amp;gt; $value) {&#xA;            $a[$key] = $value;&#xA;        }&#xA;&#xA;        return json_encode($a);&#xA;    }&#xA;&#xA;    /*&#xA;    * Helper method that talks to teh API&#xA;    */&#xA;    private function fetch($APIMethod, $data) {&#xA;        $c = curl_init($this-&amp;gt;APIurl.$APIMethod);&#xA;        curl_setopt($c, CURLOPT_SSL_VERIFYPEER, false);&#xA;        curl_setopt($c, CURLOPT_RETURNTRANSFER, 1);&#xA;        curl_setopt($c, CURLOPT_HTTPHEADER, array('Accept: application/json', 'Content-Type: application/json'));&#xA;        curl_setopt($c, CURLOPT_POSTFIELDS, $data);&#xA;&#xA;        $returned = curl_exec($c);&#xA;        if ($returned === false) {&#xA;            throw new Exception(curl_error($c)); return;&#xA;        }&#xA;&#xA;        curl_close($c);&#xA;&#xA;        if (json_decode($returned)) {&#xA;            return $returned;&#xA;        } else {&#xA;            throw new Exception('Invalid Service Request.'); return;&#xA;        }&#xA;    }&#xA;}&#xA;?&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1125" LastEditorUserId="9357" LastEditDate="2015-12-23T09:22:26.767" LastActivityDate="2015-12-23T09:22:26.767" Title="JSON API for some bank account" Tags="&lt;php&gt;&lt;oop&gt;&lt;php5&gt;" AnswerCount="2" CommentCount="2" />
  <row Id="428" PostTypeId="1" AcceptedAnswerId="437" CreationDate="2011-01-29T20:54:09.183" Score="12" ViewCount="1074" Body="&lt;p&gt;I wrote the following little shell script and published it on &lt;a href=&quot;https://github.com/Basphil/random-xkcd-wallpaper/&quot; rel=&quot;nofollow&quot; title=&quot;My github repo&quot;&gt;GitHub&lt;/a&gt;. In the repo there's also a README file that explains how to use it in more detail.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is the first time I open-sourced/published something I wrote, so I'm interested whether you think that this code is ready for the public. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Some pointers, but feel free to add your own thoughts:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Does it look professional? If not, what would need to be done?&lt;/li&gt;&#xA;&lt;li&gt;Are the comments too much? Was it ok to publish it, although I know that under some circumstances it doesn't work (I wrote about that in the README)?&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#    random xkcd wallpaper: gets a random xkcd comic from xkcd.com and sets it as the desktop background.&#xA;&#xA;&#xA;#!/bin/bash&#xA;&#xA;&#xA;&#xA;# /random/comic redirects to random comic. Wget gets the index.html of the comic.&#xA;wget http://dynamic.xkcd.com/random/comic/&#xA;&#xA;echo $(pwd)&#xA;&#xA;#Searches the line in the index.html file that points to the url where the actual comic is placed.&#xA;#The image urls are of the form: http://imgs.xkcd.com/comics/.'name of comic'.(png | jpg)&#xA;url=$(cat index.html | grep -o -m 1 http://imgs.xkcd.com/comics/.*\.png)&#xA;&#xA;#Assuming picture format is .png. Gets the name of the image file by only matching what comes after the last forward slash.&#xA;name_pic=$(echo $url | grep -o [^/]*\.png)&#xA;is_png=1&#xA;&#xA;&#xA;#Sets url and name_pic in the case of the picture being in .jpg format.&#xA;if [ -z &quot;$url&quot; ]&#xA;then&#xA;    url=$(cat index.html | grep -o -m 1 http://imgs.xkcd.com/comics/.*\.jpg)&#xA;    name_pic=$(echo $url | grep -o [^/]*\.jpg)&#xA;    is_png=0   &#xA;fi     &#xA;&#xA;&#xA;#Downloads the image and saves it under its appropriate name.&#xA;wget --output-document=&quot;$name_pic&quot;  &quot;$url&quot;&#xA;&#xA;#Sets the desktop background&#xA;gconftool-2 --set --type=string /desktop/gnome/background/picture_filename $(pwd)/&quot;$name_pic&quot;&#xA;&#xA;#Cleans up&#xA;rm index.html&#xA;&#xA;#For some reason, if the image is moved to fast (e.g without a wait) the background does not get set.&#xA;sleep 1&#xA;&#xA;#The current wallpaper can always be found under &quot;current_xkcd_wallpaper.png&quot; or &quot;current_xkcd_wallpaper.jpg&quot;. Also prevents cluttering the directory with images. &#xA;#If you want to keep all the pictures you downloaded, uncomment the following lines.&#xA;&#xA;#Cleans up. Makes sure that there is only one current_xkcd_wallpaper image file.&#xA;#rm current_xkcd_wallpaper.*&#xA;&#xA;rm current_xkcd_wallpaper.*&#xA;&#xA;if [ $is_png = 1 ] ; then&#xA;    mv $(pwd)/&quot;$name_pic&quot; $(pwd)/current_xkcd_wallpaper.png&#xA;else&#xA;    mv $(pwd)/&quot;$name_pic&quot; $(pwd)/current_xkcd_wallpaper.jpg&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="30" LastEditorUserId="22222" LastEditDate="2015-01-21T07:40:35.840" LastActivityDate="2015-01-21T07:40:35.840" Title="Was this shell script ready for open-source? (Random XKCD wallpaper)" Tags="&lt;bash&gt;&lt;http&gt;&lt;shell&gt;" AnswerCount="3" CommentCount="0" />
  <row Id="429" PostTypeId="1" AcceptedAnswerId="432" CreationDate="2011-01-29T21:10:01.687" Score="17" ViewCount="10759" Body="&lt;p&gt;This weekend I've been having one heck of a time getting WPF Ribbon v4 working with MVVM and Prism (using unity). After much trial and error, I believe I have it working. I was hoping someone could take a look at it and give me some feedback.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;RibbonRegionAdapter.cs&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public class RibbonRegionAdapter : RegionAdapterBase&amp;lt;Ribbon&amp;gt;&#xA;{&#xA;    private Ribbon _ribbonTarget;&#xA;&#xA;    public RibbonRegionAdapter(IRegionBehaviorFactory regionBehaviorFactory)&#xA;        : base(regionBehaviorFactory)&#xA;    {&#xA;&#xA;    }&#xA;&#xA;    protected override void Adapt(IRegion region, Ribbon regionTarget)&#xA;    {&#xA;        _ribbonTarget = regionTarget;&#xA;&#xA;        region.Views.CollectionChanged += delegate {  &#xA;            foreach (RibbonTab tab in region.Views.Cast&amp;lt;RibbonTab&amp;gt;())  &#xA;            {  &#xA;                if (!_ribbonTarget.Items.Contains(tab))  &#xA;                {  &#xA;                    _ribbonTarget.Items.Add(tab);  &#xA;                }  &#xA;            }  &#xA;        };  &#xA;    }&#xA;&#xA;    protected override IRegion CreateRegion()&#xA;    {&#xA;        return new SingleActiveRegion();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;BootStrapper.cs - To register our regionAdapter&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    protected override RegionAdapterMappings ConfigureRegionAdapterMappings()&#xA;    {&#xA;        RegionAdapterMappings mappings = base.ConfigureRegionAdapterMappings();&#xA;&#xA;        if (mappings != null)&#xA;        {&#xA;            mappings.RegisterMapping(typeof(Ribbon), this.Container.Resolve&amp;lt;RibbonRegionAdapter&amp;gt;());&#xA;        }&#xA;&#xA;&#xA;        return mappings;&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;CarRibbonTab.xaml&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;ribbon:RibbonTab x:Class=&quot;CarManager.Modules.CarModule.Views.CarRibbonTab&quot;&#xA;               xmlns:ribbon=&quot;clr-namespace:Microsoft.Windows.Controls.Ribbon;assembly=RibbonControlsLibrary&quot;&#xA;             xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;&#xA;             xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;&#xA;             xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot; &#xA;             xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot; &#xA;             mc:Ignorable=&quot;d&quot; &#xA;             Header=&quot;Officers&quot;&amp;gt;&#xA;    &amp;lt;ribbon:RibbonGroup Header=&quot;New&quot;&amp;gt;&#xA;&#xA;    &amp;lt;/ribbon:RibbonGroup&amp;gt;&#xA;    &amp;lt;ribbon:RibbonGroup Header=&quot;Manage&quot;&amp;gt;&#xA;        &amp;lt;ribbon:RibbonButton Label=&quot;Make&quot;&#xA;                                LargeImageSource=&quot;..\Resources\make.png&quot; /&amp;gt;&#xA;        &amp;lt;ribbon:RibbonButton Label=&quot;Inventory&quot;&#xA;                                LargeImageSource=&quot;..\Resources\Inventory.png&quot; /&amp;gt;&#xA;        &amp;lt;ribbon:RibbonButton Label=&quot;Assignments&quot; /&amp;gt;&#xA;    &amp;lt;/ribbon:RibbonGroup&amp;gt;&#xA;&amp;lt;/ribbon:RibbonTab&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;CarRibbonTab.cs - Code behind for the View&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public partial class CarRibbonTab: RibbonTab&#xA;{&#xA;    public CarRibbonTab()&#xA;    {&#xA;        InitializeComponent();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Shell.xaml - Just showing the ribbon control&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;ribbon:Ribbon DockPanel.Dock=&quot;Top&quot; Title=&quot;CarManager&quot; prism:RegionManager.RegionName=&quot;RibbonRegion&quot;&amp;gt;&#xA;    &amp;lt;ribbon:Ribbon.ApplicationMenu&amp;gt;&#xA;        &amp;lt;ribbon:RibbonApplicationMenu SmallImageSource=&quot;Images\Icon.png&quot;&amp;gt;&#xA;            &amp;lt;ribbon:RibbonApplicationMenuItem Header=&quot;Exit&quot;&#xA;                                              ImageSource=&quot;Images\ExitIcon.png&quot;/&amp;gt;&#xA;        &amp;lt;/ribbon:RibbonApplicationMenu&amp;gt;&#xA;    &amp;lt;/ribbon:Ribbon.ApplicationMenu&amp;gt;&#xA;&#xA;&amp;lt;/ribbon:Ribbon&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;CarModule.cs - registering the view with the region &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    public class CarModule: IModule&#xA;    {&#xA;        private readonly IRegionManager  _regionManager;&#xA;        private readonly IUnityContainer _container;&#xA;        public MenuItemViewModel MenuItem;&#xA;&#xA;        public CarModule(IUnityContainer container, IRegionManager regionManager)&#xA;        {&#xA;            _container     = container;&#xA;            _regionManager = regionManager;&#xA;        }&#xA;&#xA;        public void Initialize()&#xA;        {&#xA;            //Ribbon&#xA;            _container.RegisterType&amp;lt;Object, CarRibbonTab&amp;gt;(&quot;CarRibbonTab&quot;);&#xA;&#xA;            _regionManager.AddToRegion(&quot;RibbonRegion&quot;, _container.Resolve&amp;lt;CarRibbonTab&amp;gt;());&#xA;        }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="152" LastEditorUserId="645" LastEditDate="2011-02-08T15:19:12.710" LastActivityDate="2015-08-24T13:52:38.823" Title="MVVM, WPF Ribbon V4, with Prism" Tags="&lt;c#&gt;&lt;wpf&gt;" AnswerCount="5" CommentCount="1" FavoriteCount="2" />
  <row Id="430" PostTypeId="2" ParentId="428" CreationDate="2011-01-29T21:19:40.550" Score="13" Body="&lt;pre&gt;&lt;code&gt;#!/bin/bash&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The shebang line has no effect unless it's on the very first line, so you should put it before the copyright notice.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;echo $(pwd)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;echo $(command)&lt;/code&gt; is almost always the same as just writing &lt;code&gt;command&lt;/code&gt; (the exception being that &lt;code&gt;echo&lt;/code&gt; adds a newline at the end if the command doesn't already produce one, but that's not the case here). So you can just change the above to &lt;code&gt;pwd&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;cat index.html | grep -o -m 1 http://imgs.xkcd.com/comics/.*\.png&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;That's useless use of &lt;code&gt;cat&lt;/code&gt;. If you want to grep through a file, you can just pass the filename as the last argument - no need to &lt;code&gt;cat&lt;/code&gt; and pipe. (The same goes for later places in the code where you do the same with .jpg).&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;gconftool-2 --set --type=string /desktop/gnome/background/picture_filename $(pwd)/&quot;$name_pic&quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I think it'd be a good idea to make the command to change the wallpaper configurable, so non-GNOME users can use your script too.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also I'm not sure why you set the image to be the wallpaper &lt;em&gt;before&lt;/em&gt; renaming it. I think it'd make more sense to do so afterwards (that might also solve your issue of having to &lt;code&gt;sleep&lt;/code&gt;).&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;On a general note you might take care to gracefully handle already existing files. For example if the script is called in a directory where an index.html already exists (which is not that unlikely), your script will a) not work and b) delete that index.html, which its owner might not appreciate.&lt;/p&gt;&#xA;" OwnerUserId="128" LastEditorUserId="128" LastEditDate="2011-01-29T22:23:54.533" LastActivityDate="2011-01-29T22:23:54.533" CommentCount="3" />
  <row Id="432" PostTypeId="2" ParentId="429" CreationDate="2011-01-29T22:08:56.670" Score="7" Body="&lt;p&gt;Not sure whether we have many Prism specialists on Code Review and I haven't worked with it for a while, so maybe my comments are incorrect at points.  &lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;I do not really like the way you're handling &lt;code&gt;region.Views.CollectionChanged&lt;/code&gt; event. This event provides a lot of information in eventArgs but you're ignoring it. Firstly you do not handle removing views at all. Secondly instead of iterating through all views every time I would use those from &lt;code&gt;eventArgs&lt;/code&gt; (&lt;code&gt;NewItems&lt;/code&gt; property).  &lt;/li&gt;&#xA;&lt;li&gt;I believe generally it is better to have views isolated from regions in terms of concrete types. Your view is not isolated since it has to inherit &lt;code&gt;RibbonTab&lt;/code&gt; class. Maybe it is not an issue here and I'm not sure whether it should be changed somehow, it just looks strange to me.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;" OwnerUserId="645" LastEditorUserId="62429" LastEditDate="2015-08-24T13:52:38.823" LastActivityDate="2015-08-24T13:52:38.823" CommentCount="2" />
  <row Id="433" PostTypeId="2" ParentId="419" CreationDate="2011-01-29T22:56:40.853" Score="0" Body="&lt;p&gt;I've only briefly looked over your code. I haven't worked with std::string much but I've worked a lot with the API.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Assuming you got all your lengths and arguments right (sometimes making sure the terminator and wide vs multibyte lengths are all right can be tricky), I think you're on the right track. I think the first routines you posted unnecessarily allocate an additional buffer. It isn't needed.&lt;/p&gt;&#xA;" OwnerUserId="1115" LastActivityDate="2011-01-29T22:56:40.853" CommentCount="0" />
  <row Id="434" PostTypeId="2" ParentId="395" CreationDate="2011-01-29T23:10:47.623" Score="1" Body="&lt;p&gt;Let's not get pattern tastic.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You have an employee, that's good.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Then you have a way to find them from various sources? Let's call that &lt;code&gt;Employees&lt;/code&gt;. Then you are able to perhaps get them and find them. So you have &lt;code&gt;Employees.findByName()&lt;/code&gt; - where you expect that there is one, and returns an Employee or throws. Then you might have a &lt;code&gt;queryByName()&lt;/code&gt; where you don't know if there is one at all, which might return a list or iterable.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Then you have some different implementations. I personally think that Impl is a terrible thing. It adds more letters without actually telling you more about the implementation. Wr decided the interface was Employees, so now we have maybe an &lt;code&gt;HttpEmployees&lt;/code&gt; or a &lt;code&gt;HibernateEmployees&lt;/code&gt;, see we implemented the interface, gave more information about the implementation, but didn't need to use Impl.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You've made a bit of an error by putting the &lt;code&gt;EmployeeService&lt;/code&gt; (what I called &lt;code&gt;Employees&lt;/code&gt;) in the &lt;code&gt;Employee&lt;/code&gt; class. The &lt;code&gt;Employee&lt;/code&gt; should not know about keeping records on the Employee.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In addition, you should be very wary of static methods here, in this case you would be saying that in a particular application, employees can only be found from one source , because you have a static. Why not instantiate those things that need to use the Employees  interface with a particular implementation... &lt;/p&gt;&#xA;&#xA;&lt;p&gt;One more thing... &lt;code&gt;getAllEmployees()&lt;/code&gt; is unlikely to be useful. Many companies have tens or hundreds of thousands of employees.....&lt;/p&gt;&#xA;" OwnerUserId="1127" LastEditorUserId="18427" LastEditDate="2013-11-24T00:43:26.860" LastActivityDate="2013-11-24T00:43:26.860" CommentCount="4" />
  <row Id="435" PostTypeId="2" ParentId="356" CreationDate="2011-01-29T23:18:03.980" Score="1" Body="&lt;p&gt;In general, you should never handle transactions in dao code, as you never know where the transaction boundary is. You should let whoever wants to control the transactions control them.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Code that starts and commits a transaction in every dao method is likely to be problematic.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Btw: not very keen at all on 'dao' but as you use it, so will i.&lt;/p&gt;&#xA;" OwnerUserId="1127" LastActivityDate="2011-01-29T23:18:03.980" CommentCount="0" />
  <row Id="436" PostTypeId="2" ParentId="415" CreationDate="2011-01-30T00:17:35.607" Score="0" Body="&lt;p&gt;I would optimize by not storing meta data along with the data. How does the view count really affect the article itself? Not at all.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It's a different thing... So store it in a different place.&lt;/p&gt;&#xA;" OwnerUserId="1127" LastActivityDate="2011-01-30T00:17:35.607" CommentCount="1" />
  <row Id="437" PostTypeId="2" ParentId="428" CreationDate="2011-01-30T00:33:20.820" Score="9" Body="&lt;p&gt;Sorry, this might sound harsh, but I really think GPLv3 is plain overkill for your code.&#xA;And this even might sound harsher: What you want to archive can be done in a 3-liner, so I think Public Domain would fit far better.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I do not want to show you up as everybody starts as beginner, and basically it's your idea which counts, the implementation itself is mostly an exercise for the reader.  So continue learning shell, it's tremendously powerful!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;An elaborated example which basically does what your script does, it borrows some details from your script:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#!/bin/bash&#xA;&#xA;cd &quot;`dirname &quot;$0&quot;`&quot; || exit&#xA;&#xA;[ 0 = &quot;$#&quot; ] &amp;amp;&amp;amp;&#xA;set -- gconftool-2 --set --type=string /desktop/gnome/background/picture_filename&#xA;&#xA;url=&quot;`curl -sL http://dynamic.xkcd.com/random/comic/ | grep -om1 'http://imgs.xkcd.com/comics/[^.]*\.[a-z]*'`&quot;&#xA;img=&quot;$PWD/xkcd-wallpaper.${url##*.}&quot;&#xA;&#xA;curl -so &quot;$img&quot; --fail &quot;$url&quot; &amp;amp;&amp;amp;&#xA;&quot;$@&quot; &quot;$img&quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I wrapped the lines just for better readability.  Note that every programmer has a set of favorite tools and ways, and one always can learn something from each other.  Like I learned &quot;grep -o&quot; from your script today (I usually use sed, but grep -o is far more elegant in this context).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The nice thing on Unix is that you can chain things so easily and flexibly.  There is no need to squeeze everything into one monolithic script.  The better way would be to create two scripts as building blocks and then join them together.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;One pulls the picture.  Second installs the picture on gnome.  Like this:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;xkcd-pull.sh:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#!/bin/bash&#xA;&#xA;url=&quot;`curl -sL http://dynamic.xkcd.com/random/comic/ | grep -om1 'http://imgs.xkcd.com/comics/[^.]*\.[a-z]*'`&quot;&#xA;&#xA;img=&quot;/tmp/xkcd-wallpaper.${url##*.}&quot;&#xA;img=&quot;${1:-$img}&quot;&#xA;&#xA;curl -so &quot;$img&quot; --fail &quot;$url&quot; &amp;amp;&amp;amp; echo &quot;$img&quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;set-gnome-wp.sh&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#!/bin/bash&#xA;&#xA;exec gconftool-2 --set --type=string /desktop/gnome/background/picture_filename &quot;$@&quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And then join that together, for example on the commandline:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;img=&quot;`./xkcd-pull.sh`&quot; &amp;amp;&amp;amp; ./set-gnome-wp.sh &quot;$img&quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Following this pattern you can easily extend it for KDE or perhaps even adapt it to Cygwin under Windows.  Please note that these snippets even contain some extra bloat, which might come handy later on.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As you can see easily, doing it this way there is nothing left which you cannot look up in a manual.  So all creativity left is your idea &quot;XKCD -&gt; Wallpaper&quot; while the implementation is &quot;trivial&quot;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;(I did not test the code snippets here.  Maybe there still is a typo in it.  My contributed code is Public Domain.)&lt;/p&gt;&#xA;" OwnerUserId="1133" LastActivityDate="2011-01-30T00:33:20.820" CommentCount="3" />
  <row Id="438" PostTypeId="1" CreationDate="2011-01-30T00:40:52.877" Score="12" ViewCount="3267" Body="&lt;p&gt;I am working on a project where I have to calculate the totals of a transaction.  Unfortunately, coupons have proven to be quite an issue.  There are four types of coupons: transaction percentage, transaction dollar amounts, item percentage and item dollar amounts.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I ended-up with this beast of a method, and was wondering if it is clear why I'm doing each part in the way I am.  Are my comments are detailed enough?  Is my code is more-or-less readable?  Is there a way to simplify any of it?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private static Totals CalculateTotals(List&amp;lt;Item&amp;gt; items, List&amp;lt;Coupon&amp;gt; coupons, List&amp;lt;Payment&amp;gt; payments)&#xA;{&#xA;    // Local vars, totals gets returned.&#xA;    Totals totals = new Totals();&#xA;    decimal subtotal = 0;&#xA;    decimal workingSubtotal = 0;&#xA;    decimal discounts = 0;&#xA;    decimal tax = 0;&#xA;    decimal paid = 0;&#xA;    decimal taxRate = (Initialization.Location.TaxRate ?? 0);&#xA;&#xA;&#xA;    // Get the subtotal before any discounts.&#xA;    items.ForEach(i =&amp;gt; subtotal += (i.Price ?? 0));&#xA;&#xA;&#xA;    // An ItemCoupon takes a whole amount or percentage off of a single Item.&#xA;    // It can take it off of the most expensive, or least.  Nothing in the middle.&#xA;    foreach (var coupon in coupons.OfType&amp;lt;ItemCoupon&amp;gt;())&#xA;    {&#xA;        // new Item to hold the item to be discounted.&#xA;        Item item;&#xA;&#xA;        // Find which item to discount.&#xA;        if (coupon.DiscountMostExpensive)&#xA;        {&#xA;            item = items.OrderByDescending(i =&amp;gt; i.Price).FirstOrDefault();&#xA;        }&#xA;        else // Otherwise, Discount LEAST Expensive.&#xA;        {&#xA;            item = items.OrderByDescending(i =&amp;gt; i.Price).LastOrDefault();&#xA;        }&#xA;&#xA;        // Remove it from the list, before editing the price.&#xA;        items.Remove(item);&#xA;&#xA;        // Set new price of item based on the type of coupon. (Percent, or whole dollar.)&#xA;        if (coupon.PercentageCoupon)&#xA;        {&#xA;            item.Price = Utils.CalculatePercentage(item.Price, coupon.DiscountPercentage);&#xA;        }&#xA;        else&#xA;        {&#xA;            item.Price = (item.Price ?? 0) - (coupon.DiscountAmount ?? 0);&#xA;        }&#xA;&#xA;        // Add the item back to the list, with the new price.&#xA;        items.Add(item);&#xA;    }&#xA;&#xA;&#xA;    // Now that the single items have been discounted, let's get a wroking subtotal.&#xA;    items.ForEach(i =&amp;gt; workingSubtotal += (i.Price ?? 0));&#xA;&#xA;&#xA;    // A TransactionCoupon takes a whole amount or percentage off of the entire transaction. &#xA;    // To simplfy tax caculation--and because some items are non-taxable, &#xA;    // oh and, because we don't want any one item going below zero--we &#xA;    // split the discount over all the items, evenly.&#xA;    foreach (var coupon in coupons.OfType&amp;lt;TransactionCoupon&amp;gt;())&#xA;    {&#xA;        if (coupon.PercentageCoupon)&#xA;        {&#xA;            // If it is a Percentage Coupon, simply take said percentage of off each item.&#xA;            items.ForEach(i =&amp;gt; i.Price = Utils.CalculatePercentage(i.Price, coupon.DiscountPercentage));&#xA;        }&#xA;        else&#xA;        {&#xA;            // If it is a whole amount, get each items percent of the of the subtotal, and discount them equally.&#xA;            // This would look way too confusing using lambda.&#xA;            foreach (var item in items)&#xA;            {&#xA;                decimal discount = (item.Price ?? 0) * ((coupon.DiscountAmount ?? 0) / workingSubtotal);&#xA;                item.Price = item.Price - discount;&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;&#xA;    // Let's get the new-new-new subtotal.&#xA;    workingSubtotal = 0;&#xA;    items.ForEach(i =&amp;gt; workingSubtotal += (i.Price ?? 0));&#xA;&#xA;&#xA;    // Calculate the total discounts.&#xA;    discounts += (subtotal - workingSubtotal);&#xA;&#xA;&#xA;    // Set tax for order.  (This must be done after ALL discounts have been applied)&#xA;    foreach (var item in items.Where(i =&amp;gt; i.Taxable))&#xA;    {&#xA;        tax += ((item.Price ?? 0) * taxRate);&#xA;    }&#xA;&#xA;&#xA;    // Get the total amount paid.&#xA;    payments.ForEach(p =&amp;gt; paid += p.Amount);&#xA;&#xA;&#xA;    // Add all the results to the Totals struct.&#xA;    totals.Subtotal = subtotal;  // Never return the workingSubtotal;&#xA;    totals.Discounts = discounts;&#xA;    totals.Tax = tax;&#xA;    totals.Paid = paid;&#xA;    totals.Total = ((workingSubtotal + tax) - paid);&#xA;&#xA;    return totals;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerDisplayName="user1139" LastEditorUserId="22222" LastEditDate="2014-12-15T18:51:12.283" LastActivityDate="2014-12-15T18:51:12.283" Title="Calculating totals of a transaction" Tags="&lt;c#&gt;&lt;linq&gt;&lt;finance&gt;" AnswerCount="4" CommentCount="1" FavoriteCount="2" />
  <row Id="439" PostTypeId="2" ParentId="427" CreationDate="2011-01-30T00:46:52.277" Score="2" Body="&lt;p&gt;Some things I noticed.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It seems like a lot/all of your public functions are simply doing the same thing, setting the functions params into an array, calling &lt;code&gt;setJSON&lt;/code&gt; which simply appends the &lt;code&gt;APIusername&lt;/code&gt; and &lt;code&gt;APIpassword&lt;/code&gt; and then you fetch and catch any errors. You could have one method that does this and only methods that differ from this logic would do something else.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;looks like you can just use PHP's &lt;code&gt;compact()&lt;/code&gt; function for most of what you are doing.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For &lt;code&gt;setJSON()&lt;/code&gt;, instead of looping through &lt;code&gt;$data&lt;/code&gt; and remaking the same array, why not just add &lt;code&gt;$data['APIUsername'] = $this-&amp;gt;APIUsername;&lt;/code&gt; and &lt;code&gt;$data['APIPassword'] = $this-&amp;gt;APIPassword;&lt;/code&gt; and then return the &lt;code&gt;json_encode($data)&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For your &lt;code&gt;fetch()&lt;/code&gt; method, you could get rid of the curl requirement and just use streams in PHP using a combination of &lt;code&gt;stream_context_create()&lt;/code&gt; and &lt;code&gt;file_get_contents()&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I think it also might be useful to glance over this articles about &lt;a href=&quot;http://phpadvent.org/2009/exceptional-php-by-brandon-savage&quot; rel=&quot;nofollow&quot;&gt;Exceptions&lt;/a&gt; .&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you really are just passing along data with the username and password attached, you may just want to just use the magic &lt;code&gt;__call&lt;/code&gt; method, that will check an array of acceptable API methods to call and then take the params, compact, add username and password, and then call your fetch method with this data and return. Example below.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?php&#xA;class API {&#xA;    protected $_api_methods = array(&#xA;        'balance' =&amp;gt; array('EmailAddress', 'Password'),&#xA;    );&#xA;&#xA;    private $_api_username;&#xA;        private $_api_password;&#xA;    private $_api_url = 'someurl.com';&#xA;&#xA;    public function __construct($username, $password)&#xA;    {&#xA;        if (!$username || !$password) {&#xA;            throw new APIException('You must provide API credentials');&#xA;        }&#xA;&#xA;        $this-&amp;gt;_api_username = $username;&#xA;        $this-&amp;gt;_api_password = $password;&#xA;    }&#xA;&#xA;    public function __call($method_name, $arguments)&#xA;    {&#xA;        if (!in_array($method_name, array_keys($this-&amp;gt;_api_methods)) {&#xA;            throw new APIException(&quot;$method_name is not a valid API method&quot;);&#xA;        }&#xA;&#xA;        $data = $this-&amp;gt;setJSON($method_name, $arguments);&#xA;        return $this-&amp;gt;fetch($method_name, $data);&#xA;    }&#xA;&#xA;    protected function setJSON($method_name, $data)&#xA;    {&#xA;        if (empty($data)) {&#xA;            throw new APIException('No data provided');&#xA;        }&#xA;&#xA;        $data = array_combine($this-&amp;gt;_api_methods[$method_name], $data);&#xA;&#xA;        $data['api_username'] = $this-&amp;gt;_api_username;&#xA;        $data['api_password'] = $this-&amp;gt;_api_password;&#xA;&#xA;        return json_encode($data);&#xA;    }&#xA;&#xA;    protected function fetch($method, $data)&#xA;    {&#xA;        $context = stream_context_create(array(&#xA;            'http' =&amp;gt; array(&#xA;              'method'  =&amp;gt; 'GET',&#xA;              'timeout' =&amp;gt; 5,&#xA;            ),&#xA;        ));&#xA;&#xA;        try {&#xA;            $ret = file_get_contents($this-&amp;gt;_api_url . $method, false, $context); &#xA;        } catch (APIException $e) {&#xA;                $ret = $e-&amp;gt;getMessage();&#xA;        }&#xA;&#xA;        return $ret;&#xA;    }&#xA;}&#xA;&#xA;class APIException extends Exception {}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1090" LastEditorUserId="22222" LastEditDate="2014-04-07T18:49:38.643" LastActivityDate="2014-04-07T18:49:38.643" CommentCount="0" />
  <row Id="440" PostTypeId="2" ParentId="438" CreationDate="2011-01-30T00:52:22.213" Score="8" Body="&lt;p&gt;The first thing that I noticed is that you're using &lt;code&gt;?? 0&lt;/code&gt; a lot. If you could restructure your code to ensure that the prices won't be &lt;code&gt;null&lt;/code&gt; that would allow you to remove those, which would clean up your code a bit.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Further you're often using the pattern:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;int foo = 0;&#xA;//...&#xA;items.ForEach(i =&amp;gt; foo += (i.Price ?? 0));&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This can be simplified using LINQ's &lt;code&gt;Sum&lt;/code&gt; method to:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;int foo = items.Sum(i =&amp;gt; i.Price ?? 0);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;(Or just &lt;code&gt;i.Price&lt;/code&gt; instead of &lt;code&gt;i.Price ?? 0&lt;/code&gt; if you heed my earlier suggestion).&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// Remove it from the list, before editing the price.&#xA;items.Remove(item);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Unless &lt;code&gt;item&lt;/code&gt; is a value-type, you don't need to delete and re-add it to change it.&lt;/p&gt;&#xA;" OwnerUserId="128" LastActivityDate="2011-01-30T00:52:22.213" CommentCount="2" />
  <row Id="441" PostTypeId="2" ParentId="438" CreationDate="2011-01-30T01:08:02.680" Score="12" Body="&lt;p&gt;A few comments:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Please avoid comments that tell you &quot;what&quot; the code is doing.  There is no reason to have a comment that says &quot;The next line of code will add two numbers&quot;, when I can just look at the next line and see the two numbers being added.  Comments should be used to explain &quot;why&quot;, not &quot;what&quot;.&lt;/li&gt;&#xA;&lt;li&gt;Generally, clean code shouldn't require too many comments other than method headers.  A common pattern to look for is if you have a comment followed by several lines of code, you should probably take that block of code and refactor it into a separate method with a descriptive name, with the comment becoming the method header.&lt;/li&gt;&#xA;&lt;li&gt;Use helper methods.  The CalculateTotals() method should be just a few lines that calls into other methods like CalculatePreDiscountSubtotal(), CalculateItemDiscounts(), CalculateTransactionDiscounts(), and CalculateStatistics().  That makes it much easier to understand the overall flow of CalculateTotals(), while also making each of the smaller pieces easier to understand and debug.&lt;/li&gt;&#xA;&lt;li&gt;Why are you removing item from the list, modifying it, and then re-adding it?  You should be able to just modify the object while it's in the list.&lt;/li&gt;&#xA;&lt;li&gt;In the item loop, do you really want to sort the items on each iteration?  Not only is there a perf optimization to be made by pulling it out of the loop, the logic here is possibly broken.  Did you intend to re-sort the items every time with discounts applied, or by original price?  In other words, if you have two coupons that apply to the most expensive item, do you want them to potentially apply to the same item?  Do you apply them one at a time with whatever item is most expensive after all coupons processed so far?  Or do you want to apply them to the two most expensive items?  Note that in the second to last option, the order in which you process the coupons might matter.&lt;/li&gt;&#xA;&lt;li&gt;I would recommend not modifying the Price of an Item.  Instead, I would add a Discount member to Item and increment that.&lt;/li&gt;&#xA;&lt;li&gt;When calculating the price for a non-percentage coupon, your code will potentially make the price of an item negative, which is probably not what you want.&lt;/li&gt;&#xA;&lt;li&gt;Why not keep track of the transaction discount separately rather than trying to equally subtract it from each item in the order?  It would more closely match the actual problem domain, and simplify the code a great deal.  Not to mention that the code as is can set the price of an item to a negative number.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="1142" LastActivityDate="2011-01-30T01:08:02.680" CommentCount="4" />
  <row Id="442" PostTypeId="2" ParentId="427" CreationDate="2011-01-30T01:10:40.023" Score="0" Body="&lt;p&gt;I think with &quot;performance&quot; you mean the cost of keeping a PHP session open as long as the CURL request waits for an answer.  If it is about &quot;speed in PHP&quot; or &quot;loading time&quot; etc. then please don't get me wrong, but PHP is a farm horse, it never will make a good racehorse.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Technically there is no way to speed up remote API calls, as you always need to wait for that.  The CURL library should usually performs very well, however I am not an expert when it comes to PHP+CURL.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The only thing I spot is that you disable SSL certificate checking.  Doing that allows for MITM attacks, so perhaps this is not a good idea (SSL without verify is like a condom with a hole).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What comes into my mind is that it always is not a good idea to keep RPC calls with a longer duration around, so I would recommend to change that into more phases.  However that voids your class, as the complete framework has to be rewritten.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I cannot show you code, but here is the idea:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;p&gt;When the user submits the RPC to your app, the app stores the request (into some database table) and returns immediately, so the user can see something like &quot;processing&quot; on the page.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;In the background some task picks up the request which is stored (in the database) and processes it.  The result then is saved (in the database).&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;The client side then polls (or waits, retries, whatever) until the result is available.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;The &quot;funny&quot; thing about this is, that this takes even longer because of the handling of the background job.  However as the user can see some progress the waiting experience is better.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Perhaps you can even do it completely asynchronous, so if the user transfers money you see some &quot;scheduled tasks&quot; list, so the user can continue to do other things (this probably involves Ajax).  And then, when the result is available, the &quot;scheduled task&quot; blinks (or whatever, you get the idea) such that the user can look into the result.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;All is a design issue:  Think about a DoS situation, where 1000 users click onto the &quot;send money&quot; button in the same second (perhaps after some TV add ran).  Your web server then needs to keep open 1000 sessions until all the 1000 CURL requests are done in parallel.  The API side usually will have some DoS prevention and reject 980 CURL requests, because you are only allowed to have 20 requests open simultaneously with the same API key (this is quite common).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So you have to serialize the requests anyway.  Doing this from within PHP (like from within your class) is a pain in the a** (starvation problems, aborting manually. debugging concurrency, etc.), but with the background tasks it is easy:  If you only have, say, 10 concurrent processors of stored requests, there never will be any problem with reaching the API request limit.&lt;/p&gt;&#xA;" OwnerUserId="1133" LastEditorUserId="22222" LastEditDate="2014-04-07T18:55:17.193" LastActivityDate="2014-04-07T18:55:17.193" CommentCount="1" />
  <row Id="444" PostTypeId="1" AcceptedAnswerId="447" CreationDate="2011-01-30T01:55:18.230" Score="12" ViewCount="982" Body="&lt;p&gt;I'm working on a simple star rating system, and before I move on to actually &quot;tallying&quot; the votes, which I figure I'll just do with &lt;code&gt;$.ajax&lt;/code&gt;, I wanted to make sure what I've done so far has been done as well as it can be.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;//max number of stars&#xA;var max_stars = 5;&#xA;&#xA;//add images to the ratings div&#xA;function fill_ratings() {&#xA;    var $rating = $(&quot;#rating&quot;);&#xA;    if($rating.length) {&#xA;        for(i = 1; i &amp;lt;= max_stars; i++) {&#xA;            $rating.append('&amp;lt;img id=&quot;' + i + '&quot;src=&quot;star_default.png&quot; /&amp;gt;');&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;//variables...&#xA;var hovered = 0;&#xA;var has_clicked = false;&#xA;var star_clicked = 0;&#xA;&#xA;function handle_ratings() {&#xA;&#xA;    if(has_clicked == true) {&#xA;        for(i = 1; i &amp;lt;= star_clicked; i++) {&#xA;            $('#rating img#' + i).attr('src', 'star.png');&#xA;        }&#xA;    }&#xA;&#xA;    $('#rating img').hover(function() {&#xA;        hovered = Number($(this).attr('id'));&#xA;        for(i = 1; i &amp;lt;= max_stars; i++) {&#xA;            if(i &amp;lt;= hovered) {&#xA;                $('#rating img#' + i).attr('src', 'star.png');&#xA;                } else {&#xA;                    $('#rating img#' + i).attr('src', 'star_default.png');&#xA;                }&#xA;            }&#xA;        }).click(function() {&#xA;                //if they click a star, only set the stars to grey that are after it.&#xA;                star_clicked = Number($(this).attr('id'));&#xA;                has_clicked = true;&#xA;                    for(i = 1; i &amp;lt;= star_clicked; i++) {&#xA;                        $('#rating img#' + i).attr('src', 'star.png');&#xA;                        //handle the vote here. eventually.&#xA;                    }                               &#xA;                }).mouseout(function() {&#xA;                    //if they haven't clicked a star, set all stars to grey.&#xA;                    if(has_clicked !== true) {&#xA;                            $('#rating img').attr('src', 'star_default.png');&#xA;                        } else {&#xA;                            //show their rating&#xA;                            for(i = 1; i &amp;lt;= max_stars; i++) {&#xA;                                if(i &amp;lt;= star_clicked) {&#xA;                                    $('#rating img#' + i).attr('src', 'star.png');&#xA;                                } else {&#xA;                                    $('#rating img#' + i).attr('src', 'star_default.png');  &#xA;                                }&#xA;                            }       &#xA;                        }&#xA;                    });&#xA;                }&#xA;&#xA;$(function() {&#xA;    fill_ratings();&#xA;    handle_ratings();&#xA;    });&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&quot;ratings&quot;&amp;gt;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The code works, but I was wondering if anyone notices any code that I can improve. Also, is there anything wrong with the way it...looks? Should I be commenting more, indenting differently, or any other &quot;formatting&quot; type things?&lt;/p&gt;&#xA;" OwnerUserId="86" LastEditorUserId="22222" LastEditDate="2015-01-02T20:40:42.927" LastActivityDate="2015-01-02T20:40:42.927" Title="Simple star rating system" Tags="&lt;javascript&gt;&lt;jquery&gt;" AnswerCount="2" CommentCount="1" />
  <row Id="445" PostTypeId="1" AcceptedAnswerId="451" CreationDate="2011-01-30T01:57:55.443" Score="6" ViewCount="12773" Body="&lt;p&gt;Can I make my template syntax simpler? I'm hoping to eliminate the &lt;code&gt;if&lt;/code&gt; and maybe also the &lt;code&gt;for&lt;/code&gt; block. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;This worked in the shell but I can't figure out the template syntax.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;recipes[0].recipephotos_set.get(type=3).url&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;model.py&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class Recipe(models.Model):&#xA;    ....&#xA;&#xA;class RecipePhotos(models.Model):&#xA;    PHOTO_TYPES = (&#xA;    ('3', 'Sub Featured Photo: 278x209'),&#xA;    ('2', 'Featured Photo: 605x317'),&#xA;    ('1', 'Recipe Photo 500x358'),&#xA;    )&#xA;    recipe = models.ForeignKey(Recipe)&#xA;    url = models.URLField(max_length=128,verify_exists=True)&#xA;    type =  models.CharField(&quot;Type&quot;, max_length=1, choices=PHOTO_TYPES)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;view.py&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;recipes = Recipe.objects.filter(recipephotos__type=3)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;template.html&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;{% for recipe in recipes %}&#xA;&#xA;      {% for i in recipe.recipephotos_set.all %} &#xA;          {% if i.type == '3' %}&#xA;              {{ i.url }}&#xA;          {% endif %}&#xA;      {% endfor %}&#xA;&#xA;  &amp;lt;a href=&quot;/recipe/{{ recipe.recipe_slug }}/&quot;&amp;gt;{{ recipe.recipe_name }}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xA;&#xA;{% empty %}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="317" LastEditorUserId="22222" LastEditDate="2014-05-02T15:41:48.873" LastActivityDate="2014-05-02T15:42:24.817" Title="Django query_set filtering in the template" Tags="&lt;python&gt;&lt;django&gt;" AnswerCount="1" CommentCount="0" />
  <row Id="446" PostTypeId="2" ParentId="224" CreationDate="2011-01-30T02:19:54.223" Score="3" Body="&lt;p&gt;While OP's solution looks right for me, Ron's improvement invents a race condition:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Thread 1 (in getObject()):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;} while (!refHead.compareAndSet(head, next));&#xA;&#xA;T value = next.value;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Thread 1 is suspended here, so it did not yet execute&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;next.value = null;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;We know that value!=null and refHead now is next, so refHead.get().value!=null&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Thread 2 (in getObject()):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    head = refHead.get();&#xA;    assert head.value == null;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Here the assert bites even that everything is will be ok again after Thread 1 continues.&lt;/p&gt;&#xA;" OwnerUserId="1133" LastActivityDate="2011-01-30T02:19:54.223" CommentCount="0" />
  <row Id="447" PostTypeId="2" ParentId="444" CreationDate="2011-01-30T03:00:32.030" Score="14" Body="&lt;p&gt;The obvious improvement to the code you have here is that you should package it up as a jQuery plugin, to improve code reusability and reduce the number of global variables created. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;You'll also want to use a &lt;code&gt;class&lt;/code&gt; instead of &lt;code&gt;id&lt;/code&gt;, to improve reusability (if you chose not to change this to a plugin), and to store as much information on the element themselves, instead of using global variables to store information, to create less coupled functions. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Otherwise, going down the code line by line: &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Inside the &lt;code&gt;fill_ratings&lt;/code&gt; function:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$rating.append('&amp;lt;img id=&quot;' + i + '&quot;src=&quot;star_default.png&quot; /&amp;gt;');&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You are creating elements with &lt;code&gt;id&lt;/code&gt; attribute starting with a number. This is illegal before HTML5. Also, you can create elements in a more 'jQuery' manner with this syntax instead: &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$('&amp;lt;img&amp;gt;', {&#xA;    id: 'star-' + i,&#xA;    src: 'star_default.png'&#xA;}).appendTo($rating);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The main benefit of this is that now you have a reference to element you just created. You can then push it to an array, to reuse later, instead of creating new jQuery objects by attempting to select the same elements again later in the code. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Variable declaration&lt;/strong&gt; - mostly a style suggestion, but you can avoid multiple &lt;code&gt;var&lt;/code&gt;s by using the comma operator:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var hovered = 0, &#xA;    has_clicked = false, &#xA;    star_clicked = 0;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Don't use &lt;code&gt;$(this)&lt;/code&gt; to get element attributes&lt;/strong&gt;: &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$(this).attr('id');&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;is about 97% slower than &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;this.id;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;the latter is less verbose and much much more efficient. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Inside each of the event handlers attached to &lt;code&gt;#rating img&lt;/code&gt;&lt;/strong&gt; - instead of looping through all &lt;code&gt;#rating img&lt;/code&gt; element, like you're doing: &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    for (i = 1; i &amp;lt;= max_stars; i++) {&#xA;        if (i &amp;lt;= hovered) {&#xA;            $('#rating img#' + i).attr('src', 'star.png');&#xA;        } else {&#xA;            $('#rating img#' + i).attr('src', 'star_default.png');&#xA;        }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;We can always use the information already given (the current element triggering the event) to do the processing. The above code, for instance, can be written as: &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$(this).prevAll().attr('src', 'star.png');&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;thereby reducing the all those lines into one, and removing a variable. Most of the other event handlers can be similarly rewritten. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Type coercion to &lt;code&gt;Number&lt;/code&gt;&lt;/strong&gt; can be done without using &lt;code&gt;Number&lt;/code&gt; - just append a &lt;code&gt;+&lt;/code&gt; in front of the variable. In your case, it is completely unnecessary, since you're coercing it back to &lt;code&gt;String&lt;/code&gt; again after joining it to another string in the selector passed to the jQuery selector &lt;/p&gt;&#xA;" OwnerUserId="697" LastEditorUserId="697" LastEditDate="2011-01-30T03:30:51.560" LastActivityDate="2011-01-30T03:30:51.560" CommentCount="1" />
  <row Id="448" PostTypeId="2" ParentId="438" CreationDate="2011-01-30T03:51:50.773" Score="2" Body="&lt;p&gt;I would seperate the coupon discount logic into a seperate class.  Have a CouponBase class, that has a function .ApplyCouponToItem(Item item).  Then you can have a PercentageCoupon class and a WholeAmountCoupon class, and each one can override that function to do what it needs to do.  This way, your code won't be cluttered with discount logic and will be better decoupled in the face of future changes to coupons.&lt;/p&gt;&#xA;" OwnerUserId="6" LastActivityDate="2011-01-30T03:51:50.773" CommentCount="0" />
  <row Id="449" PostTypeId="2" ParentId="354" CreationDate="2011-01-30T04:51:47.667" Score="3" Body="&lt;p&gt;I'm currently going through the book and yes, as admitted it's not the most Ruby-esque code I've ever seen, but I think it does achieve the main objectives of what it was set out to accomplish and I don't think the Ruby gets in the way of that.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The thing I've noticed most when trying to following along, run, and even augment some of the methods was the general flow. There's a few things I can't say &quot;YOU SHOULD DO IT THIS WAY THUS SAYETH THE RUBY&quot; but it would just &quot;feel&quot; more comfortable if:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;The configurations were done at the beginning of the file in a Hash. As far as using a Hash, you see Hash configs a lot in Ruby, many times due to the use and reading of .yml config files so I guess I just expect configs to be done in a Hash. (If this were an application, I'd say put the configs in a .yml file, but I understand the desire to have the full solution encapsulated in a single file.)&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;The &quot;search&quot; method definition were at the beginning of the file, right under a Hash outlining the config. (The calling of the search method still happens at the bottom in your if &lt;strong&gt;FILE&lt;/strong&gt; section.)&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Ok so the at the beginning thing is definitely debatable, but I just found myself dropping in to each of these files, scrolling to the bottom, reading the config, scrolling up a little and reading the &quot;search&quot; method to get a high level view of what's going on, then scrolling to the top again to dig into the supporting methods.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Another debatable style I've enjoyed in both reading and writing Ruby is using a space to pad the beginning and end of an inline block.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;children.sort!{|x,y| y[:fitness] &amp;lt;=&amp;gt; x[:fitness]}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;becomes&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;children.sort!{ |x,y| y[:fitness] &amp;lt;=&amp;gt; x[:fitness] }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Yeah it's a small thing and some people will say anything that adds extra keystrokes to typing is bad, but I find it much more readable.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also just now noticing some inconsistent spacing when using operators...and as you can probably guess, I vote for more spacing in most situations. ;)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def crossover(parent1, parent2, rate)&#xA;  return &quot;&quot;+parent1 if rand()&amp;gt;=rate&#xA;  point = 1 + rand(parent1.size-2)&#xA;  return parent1[0...point]+parent2[point...(parent1.size)]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;becomes&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def crossover(parent1, parent2, rate)&#xA;  return &quot;&quot; + parent1 if rand() &amp;gt;= rate&#xA;  point = 1 + rand(parent1.size-2)&#xA;  return parent1[0...point] + parent2[point...(parent1.size)]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And now I'm getting nit picky...so I'm done for now.&lt;/p&gt;&#xA;" OwnerUserId="1146" LastActivityDate="2011-01-30T04:51:47.667" CommentCount="0" />
  <row Id="451" PostTypeId="2" ParentId="445" CreationDate="2011-01-30T08:06:38.763" Score="6" Body="&lt;p&gt;I'll refer you to a &lt;a href=&quot;http://stackoverflow.com/questions/223990/how-do-i-perform-query-filtering-in-django-templates&quot;&gt;Stack Overflow post&lt;/a&gt; that pretty much nails the answer.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I assume that you want to display all recipes that have &quot;Sub Featured Photos&quot;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The call &lt;code&gt;recipes = Recipe.objects.filter(recipephotos__type=3)&lt;/code&gt; will give you a queryset of recipes that have at least one photos with type 3. So far so good. Note, that this code is in the views.py file and not in the template. Like the StackOverflow post mentioned, you should put the filtering code in your view or model.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Personally I'd prefer writing a function for your model class:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class Recipe(models.Model):&#xA;    (...)&#xA;    def get_subfeature_photos(self):&#xA;        return self.recipephotos_set.filter(type=&quot;3&quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And access it in the template like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;{% for recipe in recipes %}&#xA;      {% for photo in recipe.get_subfeature_photos %}&#xA;            {{ photo.url }}&#xA;      {% endfor %}&#xA;      (...)&#xA;{% endfor %}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Please note that the function is using &lt;code&gt;filter()&lt;/code&gt; for multiple items instead of &lt;code&gt;get()&lt;/code&gt;, which only ever returns one item and throws a &lt;code&gt;MultipleObjectsReturned&lt;/code&gt; exception if there are more.&lt;/p&gt;&#xA;" OwnerUserId="1157" LastEditorUserId="22222" LastEditDate="2014-05-02T15:42:24.817" LastActivityDate="2014-05-02T15:42:24.817" CommentCount="0" />
  <row Id="452" PostTypeId="2" ParentId="418" CreationDate="2011-01-30T08:48:25.597" Score="2" Body="&lt;p&gt;There seems to be duplication, I'm just going to put changes for each table in a separate answer.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Staff Table&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;p&gt;The mother and father contact information could be put into a separate table. That way you are not limited if someone has different contacts&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;contact_id, contact_name, relationship, contact_number, contact_address, fk=staff_id&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Can a Staff have more than one StaffType? Like can a teacher be a coach? If so the table must be altered. Will all types have a specialty? &lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Regarding &lt;code&gt;DateOfHiring&lt;/code&gt; and &lt;code&gt;YearsOfService&lt;/code&gt;, the length of service can be deduced using the current date and the &lt;code&gt;DateOfHiring&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;I don't see a way to deactivate a staff member. What happens when they are terminated? Dropping their record is not a good solution. You may want to consider adding a termination date to the table.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;" OwnerDisplayName="user1161" LastEditorUserId="18427" LastEditDate="2013-12-17T14:29:15.740" LastActivityDate="2013-12-17T14:29:15.740" CommentCount="0" />
  <row Id="453" PostTypeId="2" ParentId="428" CreationDate="2011-01-30T08:48:34.717" Score="6" Body="&lt;p&gt;As well as the other problems already outlined, your code gets a file 'index.html', which could clobber any file of the same name in the current directory.  Maybe it would be a good idea to create a new directory so that you don't mess things up?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It would also be a good idea to make sure that the debris is removed even if the script is interrupted.  You do that with 'trap'.  I recommend trapping HUP, INT, QUIT, PIPE and TERM signals:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;trap &quot;rm -f index.html; exit 1&quot; 0 1 2 3 13 15&#xA;&#xA;...other actions...&#xA;&#xA;rm -f index.html&#xA;trap 0&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The &lt;code&gt;trap 0&lt;/code&gt; at the end ensures that your script can exit successfully - very important.  You can make your trap actions as complex as necessary - and should aim to keep them as simple as possible.  One advantage of creating a directory for intermediate files is that you can simply remove that directory to clean up.&lt;/p&gt;&#xA;" OwnerUserId="1160" LastActivityDate="2011-01-30T08:48:34.717" CommentCount="2" />
  <row Id="455" PostTypeId="2" ParentId="418" CreationDate="2011-01-30T09:36:26.533" Score="4" Body="&lt;p&gt;I aggree with all of the other's observations above, but I will touch on a few particular points:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;p&gt;You could definitely do some additional normalization. There are places where this may come down to a concious decision NOT to fully normalize (there can be some reasons not to . . . Depending on your problem space), but overall, when I begin to see the same field names appearing in multiple tables (other than PK/FK relationships), I become suspicious. An example (which Martin York touches on, but I will take a step further) is all of the &quot;People&quot; fields. Note the level of dupplication between the &quot;Staff&quot; table and the &quot;Student&quot; table with regard to Mothers/Fathers/Worplaces/Professions. Mothers and fathers are people. Staff are also people. Students are people. &lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;I notice you have an &quot;Observations&quot; field in your student table. I strongly recommend you define an &quot;Observations&quot; table with a foreign key to the &quot;Students&quot; table with the following fields (The Staff_ID is to record who made the observation). Over time, observations will accumulate, and it will be helpful to know when, and who made them:&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;Observations Table: Observation_ID, Student_ID, Observation_Date, Observation, Staff_ID    &lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;p&gt;I agree with the notion that there should be a separate &quot;Contact_Info&quot; table. Further, I am betting you will want to send the  student (or the student's parents) mail from time-to-time. I would include an &quot;Addresses&quot; table for this purpose. I won't pretend to know how it works in Bolivia, but in the states, schools like to mail out report cards (although, parents ALSO can track their student's progess over the internet anymore . . .). &lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Staff salaries can change. While you may decide it is acceptable to overwrite this value, this is another area where correct normalization indicates a Staff-Salaries table, which includes fields for ID, Salary, and Effective_Date. &lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;How far you take the normalization process can be tricky, but as one or more of the other commenters observed, you should always shoot for 3NF. I promise you, from my own painful experience, that when your boss decides he wants a report showing staff salary increases over a five-year period, you will be glad you did. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;While it often happens that there is a concious, design-based decision to &quot;de-normalize&quot; a table, the decision should documented for those who may need to maintain your databse in the future, when you are no longer there. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Hope that helps!&lt;/p&gt;&#xA;" OwnerUserId="1164" LastActivityDate="2011-01-30T09:36:26.533" CommentCount="0" />
  <row Id="456" PostTypeId="2" ParentId="418" CreationDate="2011-01-30T09:51:48.460" Score="22" Body="&lt;p&gt;One thing which immediately jumped out to me is this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;LastNameFather string,&#xA;LastNameMother string,&#xA;FatherName string,&#xA;MotherName string,&#xA;FatherContact string,&#xA;MotherContact string,&#xA;FatherPlaceOfWork string,&#xA;MotherPlaceOfWork string,&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Your design assumes that every student will have exactly 1 mother and exactly 1 father. I can tell you now that will not be the case. Students with divorced parents may have two mothers and two fathers, all of whom will want to have their contact info listed. Some students may have gay or lesbian parents, and thus two fathers or two mothers. Some students may have &lt;em&gt;neither&lt;/em&gt;, and instead may have a legal guardian who is neither their father nor mother.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;One solution to this would be to have a table for a &quot;person&quot;, and link people to each student. Identify whether that person is a father or mother (or non-parental guardian). This will also simplify having siblings: you can have the same mother, father, etc. for multiple students. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;For the majority of students, this won't be an issue, but for more than you might think, it will. Do those families and your management a favor by making it easy to handle various family scenarios!&lt;/p&gt;&#xA;" OwnerUserId="1167" LastActivityDate="2011-01-30T09:51:48.460" CommentCount="2" />
  <row Id="457" PostTypeId="2" ParentId="413" CreationDate="2011-01-30T10:21:54.583" Score="2" Body="&lt;p&gt;This FxCop warning is basically asking you to make sure (&quot;Review&quot;) that that non-constant you are passing (&lt;code&gt;directory&lt;/code&gt;) to the security permission does not change while the permission is in effect.  Basically, FxCop isn't sure if it is possible for the code (or some rogue module that a hacker has put in place) to do something like the following:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Set &lt;code&gt;directory&lt;/code&gt; to &quot;c:\Temp\&quot;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;.Demand()&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;&amp;lt;untrusted&amp;gt;&lt;/code&gt;&lt;strong&gt;Set &lt;code&gt;directory&lt;/code&gt; to &quot;c:\Windows\System32\&quot;&lt;/strong&gt;&lt;code&gt;&amp;lt;/untrusted&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Write something into a file contained in &lt;code&gt;directory&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;In this particular case, since &lt;code&gt;directory&lt;/code&gt; is a non-ref parameter, it is not possible for another module outside your call-descendants to modify it.  Thus, what you need to check for:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Anything in this method assigning a value to &lt;code&gt;directory&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Anything in this method that passes &lt;code&gt;directory&lt;/code&gt; by reference (&lt;code&gt;ref&lt;/code&gt;/&lt;code&gt;out&lt;/code&gt;/unsafe pointers)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Disclaimer: I am not a code security expert and have no formal training as such.  I may have missed entire classes of things to look for here. If you are dealing with code that has real-world security implications, I highly suggest you hire a consultant who does, rather than take what I wrote above as gospel.&lt;/em&gt;&lt;/p&gt;&#xA;" OwnerUserId="1106" LastActivityDate="2011-01-30T10:21:54.583" CommentCount="1" />
  <row Id="458" PostTypeId="2" ParentId="365" CreationDate="2011-01-30T10:29:11.240" Score="3" Body="&lt;p&gt;Given the specification of &lt;code&gt;strncat()&lt;/code&gt;, you are misusing it; if you must use a concatenation operation, simply use &lt;code&gt;strcat()&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For reference, the C standard says:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;§7.21.3.2 The &lt;code&gt;strncat&lt;/code&gt; function&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;&lt;strong&gt;Synopsis&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;string.h&amp;gt;&#xA;char *strncat(char * restrict s1, const char * restrict s2, size_t n);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;  &#xA;  &lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;The &lt;code&gt;strncat&lt;/code&gt; function appends not more than &lt;code&gt;n&lt;/code&gt; characters (a null character and&#xA;  characters that follow it are not appended) from the array pointed to by &lt;code&gt;s2&lt;/code&gt; to the end of&#xA;  the string pointed to by &lt;code&gt;s1&lt;/code&gt;. The initial character of &lt;code&gt;s2&lt;/code&gt; overwrites the null character at the&#xA;  end of &lt;code&gt;s1&lt;/code&gt;. A terminating null character is always appended to the result.&lt;sup&gt;261)&lt;/sup&gt; &lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;&lt;sup&gt;261)&lt;/sup&gt; Thus, the maximum number of characters that can end up in the array pointed to by &lt;code&gt;s1&lt;/code&gt; is &lt;code&gt;strlen(s1)+n+1&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Now, don't get me wrong - what you are doing is safe, because you've previously checked the length, but making &lt;code&gt;strncat()&lt;/code&gt; do the donkey work of checking the length is really pointless.  You are also not telling the whole truth to &lt;code&gt;strncat()&lt;/code&gt;; there is more space in the target buffer than you are admitting.  That is safe, but it is a bit wasteful.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;I suggest using a simple function such as:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;char *copy_string(char *target, const char *source)&#xA;{&#xA;    strcpy(target, source);&#xA;    return(target + strlen(source));&#xA;}&#xA;&#xA;target = asString;&#xA;target = copy_string(target, &quot;name=&quot;);&#xA;target = copy_string(target, dev-&amp;gt;name);&#xA;target = copy_string(target, &quot;&amp;amp;ip=&quot;);&#xA;target = copy_string(target, ipAsString);&#xA;target = copy_string(target, &quot;&amp;amp;mac=&quot;);&#xA;target = copy_string(target, dev-&amp;gt;mac);&#xA;target = copy_string(target, &quot;&amp;amp;type=&quot;);&#xA;target = copy_string(target, dev-&amp;gt;type);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;One advantage of this is that it avoids quadratic behaviour.  As your output string grows longer, the &lt;code&gt;strncat()&lt;/code&gt; operation gradually has to skip over more and more characters each time it is called.  With long enough strings, this can become a measurable overhead.  It is a nuisance that &lt;code&gt;strcpy()&lt;/code&gt; et al return the start address of the string instead of the address of the null at end of the string; it means you end up scanning it twice - once to copy, once to determine the length.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;That notation is still a bit tedious to use.  I have previously created variable-length argument list functions like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdarg.h&amp;gt;&#xA;&#xA;char *vstrcpy(char *buffer, size_t buflen, ...)&#xA;{&#xA;    const char *arg;&#xA;    char *bufend = buffer + buflen;&#xA;    char *target = buffer;&#xA;    va_list args;&#xA;&#xA;    va_start(args, buflen);&#xA;    while ((arg = va_arg(args, const char *)) != 0)&#xA;    {&#xA;         size_t arglen = strlen(arg);&#xA;         if (target + arglen &amp;gt;= bufend)&#xA;             return(0);&#xA;         strcpy(target, arg);&#xA;         target += arglen;&#xA;    }&#xA;    return(target);&#xA;}&#xA;&#xA;target = vstrcpy(asString, maxLength, &quot;name=&quot;,  dev-&amp;gt;name,&#xA;                                      &quot;&amp;amp;ip=&quot;,   ipAsString,&#xA;                                      &quot;&amp;amp;mac=&quot;,  dev-&amp;gt;mac,&#xA;                                      &quot;&amp;amp;type=&quot;, dev-&amp;gt;type, (const char *)0);&#xA;if (target == 0)&#xA;    ...something went wrong despite your pre-computation...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note that you must provide an explicit cast to that final end marker; you would be invoking undefined behaviour on Windows 64 (as a specific example) if you omitted the cast.  This is as notationally convenient as the equivalent &lt;code&gt;snprintf()&lt;/code&gt; (it requires you to write a null pointer at the end instead of a format string consisting of repeated &lt;code&gt;%s&lt;/code&gt; operations near the beginning), and it is as safe.  You can decide on the best return value - I've chosen NULL to indicate that there wasn't enough space and a pointer to the final null if there is enough room.  You could mimic &lt;code&gt;snprintf()&lt;/code&gt; more closely if you calculated the full length that would be required, just making sure to skip the copying when you've reached the end of the string.  You probably then need to use offsets rather than pointers because although you are guaranteed to be able to evaluate &lt;code&gt;buffer + buflen&lt;/code&gt;, you are not guaranteed to be able to evaluate &lt;code&gt;buffer + buflen + 1&lt;/code&gt;.  That design leads to:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdarg.h&amp;gt;&#xA;&#xA;size_t vstrcpy(char *buffer, size_t buflen, ...)&#xA;{&#xA;    const char *arg;&#xA;    char *target = buffer;&#xA;    size_t offset = 0;&#xA;    va_list args;&#xA;&#xA;    va_start(args, buflen);&#xA;    while ((arg = va_arg(args, const char *)) != 0)&#xA;    {&#xA;         size_t arglen = strlen(arg);&#xA;         if (offset + arglen &amp;lt; buflen)&#xA;             strcpy(target + offset, arg);&#xA;         offset += arglen;&#xA;    }&#xA;    return(offset);&#xA;}&#xA;&#xA;len = vstrcpy(asString, maxLength, &quot;name=&quot;,  dev-&amp;gt;name,&#xA;                                   &quot;&amp;amp;ip=&quot;,   ipAsString,&#xA;                                   &quot;&amp;amp;mac=&quot;,  dev-&amp;gt;mac,&#xA;                                   &quot;&amp;amp;type=&quot;, dev-&amp;gt;type, (const char *)0);&#xA;&#xA;if (len &amp;gt;= maxLength)&#xA;    ...something went wrong despite your pre-computation...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This only copies whole arguments that fit.  If there are 20 characters left in the buffer but the next string is 30 characters long, then the 20 characters are left unused.  You still get told the actual length of the space required, though, and are guaranteed no overflow.  If you have different requirements (such as copying as much as possible, even if it means a partial argument copy), then modify the code to do as you require.  In my book, if the strings don't fit where I'm trying to place them, I've screwed up.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;I'm not sure if modern optimizing compilers pre-compute &lt;code&gt;strlen(&quot;string constant&quot;)&lt;/code&gt;.  If they don't, you can get a small benefit from using &lt;code&gt;sizeof(&quot;string constant&quot;)-1&lt;/code&gt; instead, where the &lt;code&gt;-1&lt;/code&gt; accounts for the terminal null that &lt;code&gt;sizeof()&lt;/code&gt; includes in the size it returns.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;This example is not big enough to benefit from a table-driven approach to assembling the string.  Occasionally, if the structures have enough elements in them, you can use a table-driven approach with the &lt;code&gt;offsetof()&lt;/code&gt; macro identifying the start locations of the string members in the data structure.  You might need to encode the types for mixed types (such as the IP address, or numbers that have to be converted to a string before printing).  It is those complications that mean you need a considerable number of elements in the structures before you use the technique.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In outline, for a structure that only contains null terminated strings, you can do:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;struct description&#xA;{&#xA;    const char *tag;&#xA;    size_t      offset;&#xA;};&#xA;&#xA;static const struct description dev_desc[] =&#xA;{&#xA;    { &quot;name=&quot;,  offsetof(pDevice, name) },&#xA;    { &quot;&amp;amp;ip=&quot;,   offsetof(pDevice, ip)   },  // Taking liberties here!&#xA;    { &quot;&amp;amp;mac=&quot;,  offsetof(pDevice, mac)  },&#xA;    { &quot;&amp;amp;type=&quot;, offsetof(pDevice, type) },&#xA;};&#xA;enum { DEV_DESC_SIZE = sizeof(dev_desc) / sizeof(*dev_desc) };&#xA;&#xA;size_t offset = 0;&#xA;for (size_t i = 0; i &amp;lt; DEV_DESC_SIZE; i++)&#xA;{&#xA;     offset = vstrcpy(&amp;amp;asString[offset], maxLength - offset,&#xA;                      dev_desc[i].tag, ((char *)&amp;amp;dev + dev_desc[i].offset),&#xA;                      (const char *)0);&#xA;     if (offset &amp;gt; maxLength)&#xA;         break;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This iterates through the fields in the structure &lt;code&gt;dev&lt;/code&gt; using the control information from the descriptor array &lt;code&gt;dev_desc&lt;/code&gt;.  The expressions get more complex if you have to deal with other types than just character strings.  If you ever have the misfortune to deal with structures with hundreds of elements, though, this can be a life-saver since you reduce the code to a simple loop and a simple table which encapsulates the complexity of the structure.  (I see &lt;a href=&quot;http://codereview.stackexchange.com/users/489/jerry-coffin&quot;&gt;Jerry Coffin&lt;/a&gt; gave an answer using some of this idea, but I think my version has some merits over his.)&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Your final assignment buys you nothing:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;  asString[actualLength] = '\0';&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The null was inserted by the final &lt;code&gt;strncat()&lt;/code&gt;.&lt;/p&gt;&#xA;" OwnerUserId="1160" LastActivityDate="2011-01-30T10:29:11.240" CommentCount="0" />
  <row Id="461" PostTypeId="2" ParentId="438" CreationDate="2011-01-30T14:04:30.650" Score="2" Body="&lt;p&gt;Most of these were already mentioned but I'd like to add:  &lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Get rid of &lt;code&gt;item.Price ?? 0&lt;/code&gt;&lt;/strong&gt;. Looks like you finally missed this construction in &lt;code&gt;TransactionCoupon&lt;/code&gt; loop for non-percentage coupons.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You have there:  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;item.Price = item.Price - discount;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Use &lt;code&gt;Sum&lt;/code&gt; instead of &lt;code&gt;ForEach&lt;/code&gt;&lt;/strong&gt;. It has two advantages - works on IEnumerable and allows more easily understand that in this particular line you need only sum of items being iterated, but not something that was in accumulator before.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Do not introduce all you variables (unless you write in C) in the beginning of the methods&lt;/strong&gt;. It is usually recommended to introduce variable right before it's first use. It will allow you to join variable declaration and it's assignment, which also improves readability. And in this case you will be able to use object-initializer for &lt;code&gt;total&lt;/code&gt; variable, which (IMO) is better than direct property assignment you're doing in last lines.  &lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Too many parentheses here:  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;totals.Total = ((workingSubtotal + tax) - paid);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Any reason to take parameters as &lt;code&gt;List&lt;/code&gt; instead of &lt;code&gt;IEnumerable&lt;/code&gt;?&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;" OwnerUserId="645" LastEditorUserId="22222" LastEditDate="2014-05-10T23:49:26.993" LastActivityDate="2014-05-10T23:49:26.993" CommentCount="0" />
  <row Id="462" PostTypeId="1" AcceptedAnswerId="464" CreationDate="2011-01-30T15:59:41.270" Score="10" ViewCount="584" Body="&lt;p&gt;I have the following method:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private void removeUnnecessaryLines(List&amp;lt;ScatterViewItem&amp;gt; list)&#xA;{&#xA;    List&amp;lt;Line&amp;gt; remove = new List&amp;lt;Line&amp;gt;();&#xA;    foreach (Line line in lines)&#xA;    {&#xA;        SourceFile destination = (line.Tag as Call).getCallee();&#xA;&#xA;        foreach (ScatterViewItem svi in list)&#xA;        {&#xA;            SourceFile test = svi.Tag as SourceFile;&#xA;            if (test.Equals(destination))&#xA;            {&#xA;                remove.Add(line);&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    foreach (Line l in remove)&#xA;    {&#xA;        lines.Remove(l);&#xA;        Dependencies.Children.Remove(l);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;As you can see, there is a lot of iteration and casting. Is there a simple way to improve that?&lt;/p&gt;&#xA;" OwnerUserId="40" LastEditorUserId="22222" LastEditDate="2014-04-14T22:34:34.703" LastActivityDate="2014-04-14T22:36:46.810" Title="Loops for removing unnecessary lines" Tags="&lt;c#&gt;&lt;casting&gt;" AnswerCount="2" CommentCount="2" />
  <row Id="463" PostTypeId="2" ParentId="419" CreationDate="2011-01-30T16:05:31.277" Score="4" Body="&lt;p&gt;One thing that may be an issue is that it assumes the string is ANSI formatted using the currently active code page (CP_ACP). You might want to consider using a specific code page or CP_UTF8 if it's UTF-8.&lt;/p&gt;&#xA;" OwnerUserId="1183" LastActivityDate="2011-01-30T16:05:31.277" CommentCount="4" />
  <row Id="464" PostTypeId="2" ParentId="462" CreationDate="2011-01-30T16:31:40.450" Score="13" Body="&lt;p&gt;The most obvious improvement would be to use LINQ's &lt;code&gt;Where&lt;/code&gt; method to filter the &lt;code&gt;lines&lt;/code&gt; list instead of building up a list of to-be-deleted items and then deleting them. In addition to being easier to read and understand it will have the benefit of its runtime not being quadratic in the length of &lt;code&gt;lines&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can also use the &lt;code&gt;List&amp;lt;T&amp;gt;.RemoveAll&lt;/code&gt; method which also takes a predicate like &lt;code&gt;Where&lt;/code&gt; (though the predicate specifies the items to be removed, so it's in a way the opposite of &lt;code&gt;Where&lt;/code&gt;), but modifies the list in-place, like your solution did.&lt;/p&gt;&#xA;" OwnerUserId="128" LastEditorUserId="128" LastEditDate="2011-01-31T16:07:59.843" LastActivityDate="2011-01-31T16:07:59.843" CommentCount="3" />
  <row Id="465" PostTypeId="1" CreationDate="2011-01-30T17:12:36.653" Score="4" ViewCount="1191" Body="&lt;p&gt;I have a very simple php mvc library for my auto-didactic pedagogical purposes. I'm having a little trouble figuring out how to add in the observer patterns as show in &lt;a href=&quot;http://en.wikipedia.org/wiki/File%3aModelViewControllerDiagram2.svg&quot; rel=&quot;nofollow&quot;&gt;this UML diagram from wikipedia&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;model&lt;/code&gt; is simply contains an array and acts as a key-value store. &lt;code&gt;contrlr&lt;/code&gt; accepts input, ostensibly from $_POST, to update a model. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;So then the observation relationships between the three are where my understanding breaks down. I have &lt;code&gt;contrlr&lt;/code&gt; implementing &lt;code&gt;SplOberserver&lt;/code&gt; and &lt;code&gt;SplSubject&lt;/code&gt;, but how exactly should I handle communication between them? Concatenate strings to &lt;code&gt;strHtml&lt;/code&gt;?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Please note that I want to have these classes conform to the UML diagram linked from wikipedia above. &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class model {&#xA;&#xA;        private $arrValues = array();&#xA;&#xA;        public function __get($var) {&#xA;                return $this-&amp;gt;arrValues[$var];&#xA;        }&#xA;&#xA;        public function __set($var, $val) {&#xA;                $this-&amp;gt;arrValues[$var] = $val;&#xA;        }&#xA;&#xA;}&#xA;&#xA;class contrlr implements SplOberver, SplSubject {&#xA;&#xA;        private $objModel;&#xA;&#xA;        public function __construct( model $objModel ) {&#xA;                $this-&amp;gt;objModel = $objModel;&#xA;        }&#xA;&#xA;        public function parsePost( array $arrPost ) {&#xA;                foreach ( $arrPost as $key =&amp;gt; $value ) {&#xA;                        $this-&amp;gt;objModel-&amp;gt;$key = $value;&#xA;                }&#xA;        }&#xA;&#xA;        public function update() {&#xA;        }&#xA;&#xA;        public function attach() {&#xA;        }&#xA;&#xA;        public function detach() {&#xA;        }&#xA;&#xA;}&#xA;&#xA;class view implements SplObserver {&#xA;&#xA;    private $strHtml;&#xA;&#xA;    public function getHtml() {&#xA;        return $this-&amp;gt;strHtml;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="3131" LastActivityDate="2011-01-31T06:32:33.280" Title="Simple MVC in PHP: how to do observation?" Tags="&lt;php&gt;&lt;mvc&gt;&lt;spl&gt;" AnswerCount="1" CommentCount="0" />
  <row Id="466" PostTypeId="1" AcceptedAnswerId="468" CreationDate="2011-01-30T18:45:47.833" Score="5" ViewCount="390" Body="&lt;p&gt;I'm new into Javascript, and I'm not sure that is a good approach. The code works, and does what I need it to do but I'm sure I didn't do the things the right way.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Can you give me feedback about the implementation idea and code?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So, let's say that in index.html I have the following code into body section.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&quot;text/javascript&quot; src=&quot;js/main.js&quot; language=&quot;javascript&quot;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The content of the main.js file is the following:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;document.write('&amp;lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot; &amp;gt;');&#xA;&#xA;function loaded() {&#xA;}&#xA;&#xA;loaded(); &#xA;document.write('&amp;lt;/script&amp;gt;');&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I know that using document.write it is not a smart thing at all. I'm sure that other things are faulty, but I'm newbie and I'm looking for your feedback.&lt;/p&gt;&#xA;" OwnerUserId="1190" LastEditorUserId="21720" LastEditDate="2013-03-27T16:39:19.887" LastActivityDate="2013-03-27T16:39:19.887" Title="Need a feedback on my Javascript code and app implementation idea" Tags="&lt;javascript&gt;" AnswerCount="2" CommentCount="2" FavoriteCount="1" />
  <row Id="467" PostTypeId="2" ParentId="466" CreationDate="2011-01-30T19:16:45.577" Score="1" Body="&lt;p&gt;I think you want to take out the document.writes and add&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;body onload=&quot;loaded()&quot;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;(or whatever function you need to run first) to index.html&lt;/p&gt;&#xA;" OwnerUserId="842" LastActivityDate="2011-01-30T19:16:45.577" CommentCount="0" />
  <row Id="468" PostTypeId="2" ParentId="466" CreationDate="2011-01-30T19:29:17.587" Score="3" Body="&lt;p&gt;From a quick glance there are a couple of points where your making simple mistakes.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// Document.write is bad&#xA;document.write('&amp;lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot; &amp;gt;');&#xA;&#xA;// use css definitions instead&#xA;counter_div.setAttribute('style', 'width: 310px; height: 50px; font-family:lucida,tahoma,helvetica,arial,sans-serif; display: block; overflow:hide;');&#xA;&#xA;// dont set inner html. This is bad. use DOM manipulation instead&#xA;title_span.innerHTML = meter_title;&#xA;&#xA;// uses eval here. pass a function rather then a string&#xA;setInterval(&quot;increment()&quot;, interval);&#xA;&#xA;// forgetting to declare addCommas with `var`. This is implecetly global.&#xA;addCommas = function(nStr) {&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I shall have a look at how to redesign this. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Why do you need to append the div after the script tag. It's bad by design to use the script tag in the DOM for positioning.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;it would be better to create a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; to fill with the timer/counter.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Refactored partly &lt;a href=&quot;http://jsfiddle.net/Raynos/ReqkL/1/&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;. This includes fixing the issues above plus making the dom manipulation a bit nicer. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'm not too certain how to do refactoring on your timer code.&lt;/p&gt;&#xA;" OwnerUserId="463" LastEditorUserId="463" LastEditDate="2011-01-30T19:59:19.170" LastActivityDate="2011-01-30T19:59:19.170" CommentCount="0" />
  <row Id="469" PostTypeId="2" ParentId="465" CreationDate="2011-01-30T20:09:19.773" Score="1" Body="&lt;p&gt;Unlike other SPL interfaces, I'm not finding that this pair of built-in interfaces has any intrinsic value other than to provide a template.  It would be nice if Observer can automatically trigger its &lt;code&gt;update()&lt;/code&gt; method any time Subject properties are modified in any way, but this isn't the case.  You have to set it up manually.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So to start, you want to separate &lt;code&gt;contrlr&lt;/code&gt; into separate SplSubject and SplObserver classes.  Otherwise, for all intents and purposes, it's only notifying itself.  &lt;code&gt;model&lt;/code&gt; can actually be the one that implements SplObserver in your case.  But really, which class implements which interface would be up to you.  Here's just an example of a basic usage...&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class Observer implements SplObserver {&#xA;&#xA;    function update(SplSubject $subject) {&#xA;        echo &quot;notified: &quot; . $subject-&amp;gt;status . &quot;\n&quot;;&#xA;        }&#xA;&#xA;    }&#xA;&#xA;class Subject implements SplSubject {&#xA;    private $status;&#xA;    private $observer;&#xA;&#xA;    function __construct(SplObserver $observer) {&#xA;        $this-&amp;gt;attach($observer);&#xA;        }&#xA;&#xA;    function __destruct() {&#xA;        $this-&amp;gt;detach($this-&amp;gt;observer);&#xA;        }&#xA;&#xA;    function __get($prop) {&#xA;        return $this-&amp;gt;$prop;&#xA;        }&#xA;&#xA;    function __set($prop, $val) {&#xA;        $this-&amp;gt;$prop = $val;&#xA;        $this-&amp;gt;notify();&#xA;        }&#xA;&#xA;    function notify() {&#xA;        $this-&amp;gt;observer-&amp;gt;update($this);&#xA;        }&#xA;&#xA;    function attach(SplObserver $observer) {&#xA;        $this-&amp;gt;observer = $observer;&#xA;        $this-&amp;gt;__set(&quot;status&quot;, &quot;attaching&quot;);&#xA;        }&#xA;&#xA;    function detach(SplObserver $observer) {&#xA;        $this-&amp;gt;__set(&quot;status&quot;, &quot;detaching&quot;);&#xA;        $this-&amp;gt;observer = null;&#xA;        }&#xA;&#xA;    }&#xA;&#xA;&#xA;$observer = new Observer();&#xA;$sub1 = new Subject($observer);&#xA;$sub1-&amp;gt;status = &quot;testing&quot;;&#xA;$sub2 = new Subject($observer);&#xA;unset($sub2);&#xA;$sub1-&amp;gt;status = &quot;testing again&quot;;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Edit: You could have separate &quot;model&quot;, &quot;view&quot;, and &quot;controller&quot; classes all extending an abstract base class which implements SplSubject, SplObserver.  This way they can all communicate with each other and complete your chart.  But, the problem with that all centers around the &lt;code&gt;notify()&lt;/code&gt; method, where without the option to select which observer to notify, everyone gets the update message.  The solution to allow communication between only one observer at a time would be to rip out the reference to the SPL interfaces entirely, and having your &lt;code&gt;notify()&lt;/code&gt; method take in a specific observer argument to send to.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Take the following example, which although has basically the same methods as the SPL interfaces blended together require, it doesn't implement those interfaces at all.  Instead, each method takes in a variable number of arguments (expected to be other SubjectObserver objects)...&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;abstract class SubjectObserver {&#xA;    protected $observer_list = array(); // assoc array of classname=&amp;gt;object&#xA;    public $status;&#xA;&#xA;    function update(SubjectObserver $subject) {&#xA;        echo get_class($this) . &quot; notified by &quot; . get_class($subject) . &quot;: &quot; . $subject-&amp;gt;status . &quot;\n&quot;;&#xA;        }&#xA;&#xA;    function __destruct() {&#xA;        foreach ($this-&amp;gt;observer_list as $observer)&#xA;            { $this-&amp;gt;detach($observer); }&#xA;        }&#xA;&#xA;    function notify() {&#xA;        $args = func_get_args();&#xA;        foreach ($args as $arg)&#xA;            { $this-&amp;gt;observer_list[get_class($arg)]-&amp;gt;update($this); }&#xA;        }&#xA;&#xA;    function attach() {&#xA;        $args = func_get_args();&#xA;        foreach ($args as $arg) {&#xA;            $this-&amp;gt;observer_list[get_class($arg)] = $arg;&#xA;            $this-&amp;gt;status = &quot;attaching &quot; . get_class($arg);&#xA;            $this-&amp;gt;notify($arg);&#xA;            }&#xA;        }&#xA;&#xA;    function detach() {&#xA;        $args = func_get_args();&#xA;        foreach ($args as $arg) {&#xA;            $this-&amp;gt;status = &quot;detaching &quot; . get_class($arg);&#xA;            $this-&amp;gt;notify($arg);&#xA;            unset($this-&amp;gt;observer_list[get_class($arg)]);&#xA;            }&#xA;        }&#xA;&#xA;    }&#xA;&#xA;class model extends SubjectObserver {}&#xA;&#xA;class view extends SubjectObserver {}&#xA;&#xA;class controller extends SubjectObserver {}&#xA;&#xA;// initialize&#xA;$model = new model();&#xA;$view = new view();&#xA;$controller = new controller();&#xA;&#xA;$model-&amp;gt;attach($controller, $view);&#xA;$view-&amp;gt;attach($controller, $model);&#xA;$controller-&amp;gt;attach($model, $view);&#xA;&#xA;&#xA;// process some input&#xA;$controller-&amp;gt;status = &quot;input received&quot;;&#xA;$controller-&amp;gt;notify($model);&#xA;$model-&amp;gt;status = &quot;data filtered&quot;;&#xA;$model-&amp;gt;notify($controller, $view);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="807" LastEditorUserId="807" LastEditDate="2011-01-31T06:32:33.280" LastActivityDate="2011-01-31T06:32:33.280" CommentCount="3" />
  <row Id="470" PostTypeId="2" ParentId="403" CreationDate="2011-01-30T22:00:13.963" Score="6" Body="&lt;p&gt;This may just be me nit picking.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But using this approach I can see getting very very messy.&#xA;If you decide to have say 40 theme's. That's a heck of a lot of javascript!&#xA;and especially if you decide that you are going to support things like mobile or tablet.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You are changing the look of your page using javascript.&#xA;You would be better off in my opinion to have:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;..\css\themes\th1.css&quot; id=&quot;themesheet&quot; type=&quot;text/css&quot; /&amp;gt; &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;in your html have&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;select id=&quot;theme&quot;&amp;gt;&#xA;  &amp;lt;option value=&quot;th1&quot; selected=&quot;selected&quot;&amp;gt;Theme One&amp;lt;/option&amp;gt;&#xA;  &amp;lt;option value=&quot;th2&quot;&amp;gt;Theme Two&amp;lt;/option&amp;gt;&#xA;&amp;lt;/select&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;then in your javascript have&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$('#theme').change(function(){&#xA;    var link = '..\css\themes\{name}.css';&#xA;    link = link.replace('{name}', $(this).val());&#xA;    $('#themesheet').attr('href', link);   &#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This way you are only changing the css sheet instead of coding in the style changes for every theme.&lt;/p&gt;&#xA;" OwnerUserId="92" LastActivityDate="2011-01-30T22:00:13.963" CommentCount="2" />
  <row Id="471" PostTypeId="1" AcceptedAnswerId="475" CreationDate="2011-01-30T23:30:36.383" Score="7" ViewCount="429" Body="&lt;p&gt;What is your opinion in arguments in constructors matching members as in the following example&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public Join(final int parent, final TIntHashSet children) {&#xA;  this.parent = parent;&#xA;  this.children = children;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I find this annoying since I have to use &lt;code&gt;this.&lt;/code&gt; and also some code review applications generate warnings.&lt;/p&gt;&#xA;" OwnerUserId="1201" LastActivityDate="2013-01-16T12:46:23.330" Title="Arguments in constructors matching fields" Tags="&lt;java&gt;&lt;constructor&gt;" AnswerCount="6" CommentCount="3" FavoriteCount="1" />
  <row Id="472" PostTypeId="1" AcceptedAnswerId="482" CreationDate="2011-01-30T23:43:07.143" Score="26" ViewCount="5683" Body="&lt;p&gt;I've recently been doing some mods to some old code I've been maintaining for a couple of years now.  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;As part of a wider set of scripts using YAHOO YUI 2.2 (yes, that old) for dialog-style panels, I have a function that listens to click events on 3 buttons in a given panel set:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;addFooListeners = function (panelType) {&#xA;&#xA;    YAHOO.util.Event.addListener(&quot;show&quot; + panelType, &quot;click&quot;, showFoo, eval(ns + &quot;.panel_&quot; + panelType), true);&#xA;    YAHOO.util.Event.addListener(&quot;hide&quot; + panelType, &quot;click&quot;, hideFoo, eval(ns + &quot;.panel_&quot; + panelType), true);&#xA;    YAHOO.util.Event.addListener(&quot;commit&quot; + panelType, &quot;click&quot;, commitFoo, eval(ns + &quot;.panel_&quot; + panelType), true);&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This code is the result of a number of panels/dialogs having near identical behaviour.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For this round of development I've needed to add the ability to do things a little differently from time to time, so I added an object, &lt;code&gt;overrides&lt;/code&gt; which allows me to point the &lt;code&gt;show&lt;/code&gt;, &lt;code&gt;hide&lt;/code&gt; and &lt;code&gt;commit&lt;/code&gt; actions elsewhere.  I came up with the following:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;addFooListeners = function (panelType, overrides) {&#xA;&#xA;    var handlers = {&#xA;        show: ( overrides != null ? ( overrides.show != null ? overrides.show : showFoo ) : showFoo ),&#xA;        hide: ( overrides != null ? ( overrides.hide != null ? overrides.hide : hideFoo ) : hideFoo ),&#xA;        commit: ( overrides != null ? ( overrides.commit != null ? overrides.commit : commitFoo ) : commitFoo )&#xA;    }&#xA;&#xA;    YAHOO.util.Event.addListener(&quot;show&quot; + panelType, &quot;click&quot;, handlers.show, eval(ns + &quot;.panel_&quot; + panelType), true);&#xA;    YAHOO.util.Event.addListener(&quot;hide&quot; + panelType, &quot;click&quot;, handlers.hide, eval(ns + &quot;.panel_&quot; + panelType), true);&#xA;    YAHOO.util.Event.addListener(&quot;commit&quot; + panelType, &quot;click&quot;, handlers.commit, eval(ns + &quot;.panel_&quot; + panelType), true);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;As you can see I'm enforcing default behaviour unless an appropriate attribute in the &lt;code&gt;overrides&lt;/code&gt; object is set with another function (named or anonymous).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Is there a cleaner / more readable way to concisely setup the &lt;code&gt;handlers&lt;/code&gt; object?  The nested ternary seems to my eyes to be cluttering things a bit but other approaches like &lt;code&gt;if ( overrides != null ) { ... }&lt;/code&gt; seem just as messy.&lt;/p&gt;&#xA;" OwnerUserId="28" LastEditorUserId="22222" LastEditDate="2016-08-09T22:20:11.313" LastActivityDate="2016-08-09T22:20:11.313" Title="Usage of the ternary &quot;?:&quot; operator with functions listening to click events" Tags="&lt;javascript&gt;" AnswerCount="3" CommentCount="2" FavoriteCount="6" />
  <row Id="473" PostTypeId="2" ParentId="471" CreationDate="2011-01-30T23:51:52.230" Score="2" Body="&lt;p&gt;If you're worried about typing the extra characters for &lt;code&gt;this&lt;/code&gt; you can consider the coding style used in C++. To avoid ambiguity between class data and parameter's passed into a method I usually use one of the following naming conventions for data members: &lt;code&gt;m_parent&lt;/code&gt; and &lt;code&gt;m_children&lt;/code&gt; (prefix m indicates member), &lt;code&gt;parent_&lt;/code&gt; and &lt;code&gt;children_&lt;/code&gt;, &lt;code&gt;myParent&lt;/code&gt; and &lt;code&gt;myChildren&lt;/code&gt;.&lt;/p&gt;&#xA;" OwnerUserId="71" LastActivityDate="2011-01-30T23:51:52.230" CommentCount="1" />
  <row Id="474" PostTypeId="2" ParentId="472" CreationDate="2011-01-31T00:02:02.203" Score="7" Body="&lt;p&gt;It looks like you can reduce that ternary a bit by using &amp;amp;&amp;amp; like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var handlers = {&#xA;    show:  ( overrides != null &amp;amp;&amp;amp; overrides.show != null ? overrides.show : showFoo ),&#xA;    hide:  ( overrides != null &amp;amp;&amp;amp; overrides.hide != null ? overrides.hide : hideFoo ),&#xA;    commit: ( overrides != null &amp;amp;&amp;amp; overrides.commit != null ? overrides.commit : commitFoo )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I'm not too familiar with javascript but does the function parameter have to be checked against null? Like for example, can you further shorten the check by doing something like this?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;show:  ( overrides &amp;amp;&amp;amp; overrides.show ? overrides.show : showFoo ),&#xA;hide:  ( overrides &amp;amp;&amp;amp; overrides.hide ? overrides.hide : hideFoo ),&#xA;// ...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="71" LastActivityDate="2011-01-31T00:02:02.203" CommentCount="5" />
  <row Id="475" PostTypeId="2" ParentId="471" CreationDate="2011-01-31T00:32:14.213" Score="13" Body="&lt;p&gt;I've personally always found the &lt;code&gt;_parent&lt;/code&gt; or Hungarian-notation letters at the beginning far uglier than just saying &lt;code&gt;this&lt;/code&gt;. &lt;code&gt;this&lt;/code&gt; is very straightforward, especially if somebody else is reading your code. If I inherit somebody else's code and they use _ I change it immediately.&lt;/p&gt;&#xA;" OwnerUserId="820" LastActivityDate="2011-01-31T00:32:14.213" CommentCount="2" />
  <row Id="476" PostTypeId="2" ParentId="471" CreationDate="2011-01-31T02:00:51.667" Score="4" Body="&lt;p&gt;If you have access to a copy of &quot;Clean Code&quot; it has a chapter called &quot;Meaningful Names&quot; that I agree with. Bottom line, your name should denote exactly what it is referring to. Creating an encoding for the name a la C++ only slows down reading and causes devs to mentally skip it anyways.  Also, your ide, be it eclipse, emacs, etc. should provide highlighting that makes the difference between class variables and parameters distinct.&lt;/p&gt;&#xA;" OwnerUserId="1151" LastActivityDate="2011-01-31T02:00:51.667" CommentCount="0" />
  <row Id="477" PostTypeId="2" ParentId="471" CreationDate="2011-01-31T02:20:27.713" Score="5" Body="&lt;p&gt;Personally I use the most natural names for member variables.&lt;br&gt;&#xA;This is because these are the ones you are going to use the most often (thus I dislike the m_ prefix).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For things that are going to happen less often (like parameters in constructors) I shorten them or add p_ depending on context and which is the most appropriate.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I have found most Java coding standards I have encountered seem to prefer (in the constructor) the use of  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;this.member = member;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Personally I dislike this (but always stick to the coding standards) as it it feels more error prone. I like distinct names for all identifiers (overlapping names lead to easier mistakes). I also think that distinct identifiers make it easier to spot (for humans) trivial mistakes.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;this.member = p_member;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Can't get that wrong as each identifier is unique.&lt;/p&gt;&#xA;" OwnerUserId="507" LastActivityDate="2011-01-31T02:20:27.713" CommentCount="1" />
  <row Id="478" PostTypeId="1" AcceptedAnswerId="480" CreationDate="2011-01-31T04:52:54.217" Score="9" ViewCount="397" Body="&lt;p&gt;There's got to be a better way than this that preserves the logic while sparing me the multitude of lines:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;sub has_path {&#xA;  clearerr;&#xA;  my %Graph = gref(shift);&#xA;  my $A = shift;&#xA;  my $B = shift;&#xA;  my $C = shift;&#xA;  my $D = shift;&#xA;  my $E = shift;&#xA;  my $F = shift;&#xA;  my $G = shift;&#xA;  my $H = shift;&#xA;  my $I = shift;&#xA;  my $J = shift;&#xA;  my $K = shift;&#xA;  my $L = shift;&#xA;  my $M = shift;&#xA;  my $N = shift;&#xA;  my $O = shift;&#xA;  my $P = shift;&#xA;  my $Q = shift;&#xA;  my $R = shift;&#xA;  my $S = shift;&#xA;  my $T = shift;&#xA;  my $U = shift;&#xA;  my $V = shift;&#xA;  my $W = shift;&#xA;  my $X = shift;&#xA;  my $Y = shift;&#xA;  my $Z = shift;&#xA;  # returns VT_BOOL&#xA;  my $bool = 0;&#xA;  my $switcher = dectab( [ $A,  $B, $C, $D, $E, $F, $G, $H, $I, $J, $K, $L, $M, $N, $O, $P, $Q, $R, $S, $T, $U, $V, $W, $X, $Y, $Z ] );&#xA;  given ($switcher) {&#xA;   when ( &quot;--------------------------&quot; ) {&#xA;    seterr( &quot;No path.&quot; );&#xA;    } # no path&#xA;   when ( &quot;X-------------------------&quot; ) {&#xA;    seterr( &quot;Path of one element.&quot; );&#xA;    } # path of 1 element&#xA;   when ( &quot;XX------------------------&quot; ) {&#xA;    $bool = $Graph-&amp;gt;has_path( $A,  $B );&#xA;   }&#xA;   when ( &quot;XXX-----------------------&quot; ) {&#xA;    $bool = $Graph-&amp;gt;has_path( $A,  $B, $C );&#xA;   }&#xA;   when ( &quot;XXXX----------------------&quot; ) {&#xA;    $bool = $Graph-&amp;gt;has_path( $A,  $B, $C, $D );&#xA;   }&#xA;   when ( &quot;XXXXX---------------------&quot; ) {&#xA;    $bool = $Graph-&amp;gt;has_path( $A,  $B, $C, $D, $E );&#xA;   }&#xA;   when ( &quot;XXXXXX--------------------&quot; ) {&#xA;    $bool = $Graph-&amp;gt;has_path( $A,  $B, $C, $D, $E, $F );&#xA;   }&#xA;   when ( &quot;XXXXXXX-------------------&quot; ) {&#xA;    $bool = $Graph-&amp;gt;has_path( $A,  $B, $C, $D, $E, $F, $G );&#xA;   }&#xA;   when ( &quot;XXXXXXXX------------------&quot; ) {&#xA;    $bool = $Graph-&amp;gt;has_path( $A,  $B, $C, $D, $E, $F, $G, $H );&#xA;   }&#xA;   when ( &quot;XXXXXXXXX-----------------&quot; ) {&#xA;    $bool = $Graph-&amp;gt;has_path( $A,  $B, $C, $D, $E, $F, $G, $H, $I );&#xA;   }&#xA;   when ( &quot;XXXXXXXXXX----------------&quot; ) {&#xA;    $bool = $Graph-&amp;gt;has_path( $A,  $B, $C, $D, $E, $F, $G, $H, $I, $J );&#xA;   }&#xA;   when ( &quot;XXXXXXXXXXX---------------&quot; ) {&#xA;    $bool = $Graph-&amp;gt;has_path( $A,  $B, $C, $D, $E, $F, $G, $H, $I, $J, $K );&#xA;   }&#xA;   when ( &quot;XXXXXXXXXXXX--------------&quot; ) {&#xA;    $bool = $Graph-&amp;gt;has_path( $A,  $B, $C, $D, $E, $F, $G, $H, $I, $J, $K, $L );&#xA;   }&#xA;   when ( &quot;XXXXXXXXXXXXX-------------&quot; ) {&#xA;    $bool = $Graph-&amp;gt;has_path( $A,  $B, $C, $D, $E, $F, $G, $H, $I, $J, $K, $L, $M );&#xA;   }&#xA;   when ( &quot;XXXXXXXXXXXXXX------------&quot; ) {&#xA;    $bool = $Graph-&amp;gt;has_path( $A,  $B, $C, $D, $E, $F, $G, $H, $I, $J, $K, $L, $M, $N );&#xA;   }&#xA;   when ( &quot;XXXXXXXXXXXXXXX-----------&quot; ) {&#xA;    $bool = $Graph-&amp;gt;has_path( $A,  $B, $C, $D, $E, $F, $G, $H, $I, $J, $K, $L, $M, $N, $O );&#xA;   }&#xA;   when ( &quot;XXXXXXXXXXXXXXXX----------&quot; ) {&#xA;    $bool = $Graph-&amp;gt;has_path( $A,  $B, $C, $D, $E, $F, $G, $H, $I, $J, $K, $L, $M, $N, $O, $P );&#xA;   }&#xA;   when ( &quot;XXXXXXXXXXXXXXXXX---------&quot; ) {&#xA;    $bool = $Graph-&amp;gt;has_path( $A,  $B, $C, $D, $E, $F, $G, $H, $I, $J, $K, $L, $M, $N, $O, $P, $Q );&#xA;   }&#xA;   when ( &quot;XXXXXXXXXXXXXXXXXX--------&quot; ) {&#xA;    $bool = $Graph-&amp;gt;has_path( $A,  $B, $C, $D, $E, $F, $G, $H, $I, $J, $K, $L, $M, $N, $O, $P, $Q, $R );&#xA;   }&#xA;   when ( &quot;XXXXXXXXXXXXXXXXXXX-------&quot; ) {&#xA;    $bool = $Graph-&amp;gt;has_path( $A,  $B, $C, $D, $E, $F, $G, $H, $I, $J, $K, $L, $M, $N, $O, $P, $Q, $R, $S );&#xA;   }&#xA;   when ( &quot;XXXXXXXXXXXXXXXXXXXX------&quot; ) {&#xA;    $bool = $Graph-&amp;gt;has_path( $A,  $B, $C, $D, $E, $F, $G, $H, $I, $J, $K, $L, $M, $N, $O, $P, $Q, $R, $S, $T);&#xA;   }&#xA;   when ( &quot;XXXXXXXXXXXXXXXXXXXXX-----&quot; ) {&#xA;    $bool = $Graph-&amp;gt;has_path( $A,  $B, $C, $D, $E, $F, $G, $H, $I, $J, $K, $L, $M, $N, $O, $P, $Q, $R, $S, $T, $U );&#xA;   }&#xA;   when ( &quot;XXXXXXXXXXXXXXXXXXXXXX----&quot; ) {&#xA;    $bool = $Graph-&amp;gt;has_path( $A,  $B, $C, $D, $E, $F, $G, $H, $I, $J, $K, $L, $M, $N, $O, $P, $Q, $R, $S, $T, $U, $V );&#xA;   }&#xA;   when ( &quot;XXXXXXXXXXXXXXXXXXXXXXX---&quot; ) {&#xA;    $bool = $Graph-&amp;gt;has_path( $A,  $B, $C, $D, $E, $F, $G, $H, $I, $J, $K, $L, $M, $N, $O, $P, $Q, $R, $S, $T, $U, $V, $W );&#xA;   }&#xA;   when ( &quot;XXXXXXXXXXXXXXXXXXXXXXXX--&quot; ) {&#xA;    $bool = $Graph-&amp;gt;has_path( $A,  $B, $C, $D, $E, $F, $G, $H, $I, $J, $K, $L, $M, $N, $O, $P, $Q, $R, $S, $T, $U, $V, $W, $X );&#xA;   }&#xA;   when ( &quot;XXXXXXXXXXXXXXXXXXXXXXXXX-&quot; ) {&#xA;    $bool = $Graph-&amp;gt;has_path( $A,  $B, $C, $D, $E, $F, $G, $H, $I, $J, $K, $L, $M, $N, $O, $P, $Q, $R, $S, $T, $U, $V, $W, $X, $Y,);&#xA;   } &#xA;   when ( &quot;XXXXXXXXXXXXXXXXXXXXXXXXXX&quot; ) {&#xA;    $bool = $Graph-&amp;gt;has_path( $A,  $B, $C, $D, $E, $F, $G, $H, $I, $J, $K, $L, $M, $N, $O, $P, $Q, $R, $S, $T, $U, $V, $W, $X, $Y, $Z );&#xA;   }&#xA;  }  &#xA;  return $bool;&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This is the dectab (decision table) sub it refers to:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; sub dectab {&#xA;  my($ref)=shift;&#xA;  my ($res);&#xA;  foreach my $key( @$ref){ &#xA;   if ( ! defined $key ) { &#xA;    $res .= '-';&#xA;   } else {&#xA;    $res .= &quot;X&quot;;&#xA;   }&#xA;  }&#xA;  return $res;&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;clearerr&lt;/code&gt;, &lt;code&gt;seterr&lt;/code&gt;, and &lt;code&gt;gref&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;sub clearerr {&#xA;    $ERRORFLAGGED = 0;&#xA;    $ERRORTEXT = &quot;&quot;;&#xA;}&#xA;&#xA;sub seterr {&#xA;    $ERRORTEXT = shift;&#xA;    $ERRORFLAGGED = 1;&#xA;}&#xA;&#xA;sub gref {&#xA;    my $gref = shift;&#xA;    if ( defined $grefs-&amp;gt;{$gref} ) {&#xA;        return $grefs-&amp;gt;{$gref};&#xA;    } else {&#xA;        return undef;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This is all part of a much much larger wrapping of the Graph module. It's being turned into a COM DLL using ActiveState's PerlCtrl.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Calling the sub would be done, in VBScript (for example), by&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;set o = CreateObject(&quot;Wrapper.Graph.2&quot;)&#xA;...&#xA;if o.has_path( &quot;tom&quot;, &quot;dick&quot;, &quot;harry&quot; ) then &#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Graph.pm, by the way, defines &lt;code&gt;has_path&lt;/code&gt; as&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;has_path&#xA;&#xA;   $g-&amp;gt;has_path($a, $b, $c, ..., $x, $y, $z)&#xA;&#xA;Return true if the graph has all the edges $a-$b, $b-$c, ..., $x-$y, $y-$z, false otherwise.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="520" LastEditorUserId="22222" LastEditDate="2014-12-27T21:34:15.727" LastActivityDate="2014-12-27T21:34:15.727" Title="Function, taking up to 27 parameters, that checks for the existence of a path in a graph" Tags="&lt;perl&gt;&lt;graph&gt;" AnswerCount="3" CommentCount="2" />
  <row Id="479" PostTypeId="1" AcceptedAnswerId="481" CreationDate="2011-01-31T06:33:47.660" Score="23" ViewCount="14795" Body="&lt;p&gt;My homework question states:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Develop a class to measure distance as feet (should be &lt;code&gt;int&lt;/code&gt;), inches (should&#xA;  be &lt;code&gt;float&lt;/code&gt;).  Include member functions to set and get attributes.  Include&#xA;  constructors.  Develop functions to add two distances.&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;The prototype of the sum function is:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Distance Sum(Distance d);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Please check out my coding style and other aspects that can make this program better.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;&#xA;using namespace std;&#xA;class Distance&#xA;{&#xA;        private:&#xA;                int feet;&#xA;                float inch;&#xA;        public:&#xA;        Distance();&#xA;        Distance(int a,float b);&#xA;        void setDistance();&#xA;        int getFeet();&#xA;        float getInch();&#xA;        void distanceSum(Distance d);&#xA;};&#xA;int main()&#xA;{&#xA;        Distance D1,D2;&#xA;        D1.setDistance();&#xA;        D2.setDistance();&#xA;        D1.distanceSum(D2);&#xA;        return 0;&#xA;}&#xA;/*Function Definitions*/&#xA;Distance::Distance()&#xA;{&#xA;        inch=feet=0;&#xA;}&#xA;Distance::Distance(int a,float b)&#xA;{&#xA;        feet=a;&#xA;        inch=b; &#xA;}&#xA;void Distance::setDistance()&#xA;{&#xA;        cout&amp;lt;&amp;lt;&quot;Enter distance in feet&quot;;&#xA;        cin&amp;gt;&amp;gt;feet;&#xA;        cout&amp;lt;&amp;lt;endl&amp;lt;&amp;lt;&quot;Enter inches:&quot;;&#xA;        cin&amp;gt;&amp;gt;inch;&#xA;}&#xA;int Distance::getFeet()&#xA;{&#xA;        return feet;&#xA;}&#xA;float Distance::getInch()&#xA;{&#xA;        return inch;&#xA;}&#xA;void Distance::distanceSum(Distance d)&#xA;{&#xA;        cout&amp;lt;&amp;lt;&quot;feet=&quot;&amp;lt;&amp;lt;d.feet+feet&amp;lt;&amp;lt;endl;&#xA;        cout&amp;lt;&amp;lt;&quot;inches=&quot;&amp;lt;&amp;lt;d.inch+inch&amp;lt;&amp;lt;endl;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1211" LastEditorUserId="22222" LastEditDate="2014-03-27T23:46:09.013" LastActivityDate="2014-10-19T05:37:25.733" Title="Class for measuring distance as feet and inches" Tags="&lt;c++&gt;&lt;homework&gt;" AnswerCount="6" CommentCount="1" FavoriteCount="3" />
  <row Id="480" PostTypeId="2" ParentId="478" CreationDate="2011-01-31T07:21:20.367" Score="10" Body="&lt;p&gt;As I noted in a comment, I think the solution lies in using arrays and &lt;a href=&quot;http://perldoc.perl.org/perldata.html#Slices&quot;&gt;slices&lt;/a&gt;.  Maybe like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;sub has_path {&#xA;  clearerr;&#xA;  my %Graph = gref(shift);&#xA;  my(@States) = @_;&#xA;  my $bool = 0;&#xA;  my $switcher = dectab( [ @States ] );&#xA;  $switcher =~ m/^(X*)(?:-*)$/;&#xA;  my $number = length($1);&#xA;  if ($number == 0)  {&#xA;    seterr( &quot;No path.&quot; );&#xA;  }&#xA;  else&#xA;  {&#xA;    $bool = $Graph-&amp;gt;has_path( $States[0 .. ($length - 1)] );&#xA;  }&#xA;&#xA;  return $bool;&#xA;} &#xA;&#xA;sub dectab {&#xA;  my($ref)=shift;&#xA;  my ($res);  foreach my $key( @$ref){ &#xA;   if ( ! defined $key ) { &#xA;    $res .= '-';&#xA;   } else {&#xA;    $res .= &quot;X&quot;;&#xA;   }&#xA;  }&#xA;  return $res;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The key observations are:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;The list of letter variables is better treated as an array - I used &lt;code&gt;@States&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;The output from &lt;code&gt;dectab()&lt;/code&gt; (which is unaltered) consists of some number of X's followed by some number of dashes.  The regex match identifies how many X's by isolating them into a string, &lt;code&gt;$1&lt;/code&gt;, and then calculating the length of the string.  Note that the code does not check that the output from &lt;code&gt;dectab&lt;/code&gt; matches that pattern - it probably should.&lt;/li&gt;&#xA;&lt;li&gt;The huge switch statement amounts to supplying the elements 0..(N-1) to the &lt;code&gt;$Graph-&amp;gt;has_path()&lt;/code&gt; function, so the code passes the relevant slice of &lt;code&gt;@States&lt;/code&gt; to the function.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;There are still some bits I'm not clear about in your code.  Specifically, I'm not sure about the roles (or sources) of the functions:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;clearerr&lt;/li&gt;&#xA;&lt;li&gt;gref&lt;/li&gt;&#xA;&lt;li&gt;seterr&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Because of that, I can't test my hypothesis.  However, I do think that this solution scales to 200 items more easily than the original - and without needing:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;use feature &quot;switch&quot;;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;With more time spent, the code could still be tidied up, I'm sure.  And, since this is Perl, TMTOWTDI - there's more than one way to do it.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Suggestion:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Provide code that can be compiled and run whenever possible - you will get better code reviews that way.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="1160" LastActivityDate="2011-01-31T07:21:20.367" CommentCount="5" />
  <row Id="481" PostTypeId="2" ParentId="479" CreationDate="2011-01-31T07:40:13.813" Score="26" Body="&lt;p&gt;When designing a class for your program, whether it's for homework or a real production application, you want to always consider how that class is going to be use and what its responsibilities should be. Each function and method should do &lt;em&gt;one&lt;/em&gt; thing/task and it should be reflected by the method's name. Additionally, you want to keep to a consistent easy-to-read coding style when you actually start writing the code. With those two points in mind here's some things to consider in your code:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;Distance::distanceSum&lt;/code&gt; is doing two tasks here.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;It's not only summing feet and inches but it's printing them out as well.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Unnecessary type conversion. &lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;In your default Distance() ctor, there's an implicit conversion because you're assigning &lt;code&gt;0&lt;/code&gt; to a float type. You should have gotten a warning from your compiler. Consider using an initializer list like so:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Distance::Distance() : feet(0), inch(0.0)&#xA;{&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Code doesn't take advantage of const correctness. &lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Which parameters aren't suppose to change? Which methods will be modifying your Distance class? For example, your &lt;code&gt;Distance::Distance(int a,float b)&lt;/code&gt; isn't changing &lt;code&gt;a&lt;/code&gt; or &lt;code&gt;b&lt;/code&gt;. Have the compiler enforce that promise by using const:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Distance::Distance(const int a, const float b)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Similiarly:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;void Distance::distanceSum(const Distance &amp;amp;d);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Inconsistent indentation and spacing.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Consider indenting the methods under public: the same way you did with private:. Add spaces to your assignments to help readability. eg. &lt;code&gt;feet = a;&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;No module separation by file.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;class &lt;code&gt;Distance&lt;/code&gt; should probably be in a separate header/implementation file rather than putting everything in one main file.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Ninja comments. &lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Comments? What comments? Exactly. Consider adding a block comment at the top of your Distance class that explains the purpose for its existence. The block comment should answer questions like how is this class suppose to be used and what details is it abstracting away? Adding a comment to clarify how the feet and inch data members are going to be used. For example, it's not clear if your distance class is maintaining the same distance measurement but with different units or it's really meant to be used as one whole unit. eg. 6 feet 2 inches or 6 feet 72 inches?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;With the above considerations, here's one way I would refactor your code:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In distance.h header file:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#ifndef DISTANCE_H&#xA;#define DISTANCE_H&#xA;class Distance&#xA;{&#xA;    private:&#xA;       // feet and inch is one unit. &#xA;       // invariant: inch_ &amp;lt; 12.&#xA;       int   feet_;&#xA;       float inch_;&#xA;    public:&#xA;       Distance(const int feet = 0, const float inches = 0.0);&#xA;       void      setDistance(const int feet, const float inches = 0.0);&#xA;       int       getFeet() const;&#xA;       float     getInch() const;&#xA;&#xA;       // returns this instance. Permits method chaining for Distance class.&#xA;       Distance&amp;amp; Add(const Distance &amp;amp;d);&#xA;};&#xA;#endif&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In distance.cpp implementation:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#include &quot;distance.h&quot;&#xA;Distance::Distance(const int feet, const float inches) &#xA;         : feet_(feet + inches / 12), inch_(inches % 12)&#xA;{&#xA;}&#xA;&#xA;void Distance::setDistance(const int feet, const float inches)&#xA;{&#xA;    feet_ = feet + inches / 12;&#xA;    inch_ = inches % 12;&#xA;}&#xA;&#xA;int Distance::getFeet() const&#xA;{&#xA;    return feet_;&#xA;}&#xA;&#xA;float Distance::getInch() const&#xA;{&#xA;    return inch_;&#xA;}&#xA;&#xA;Distance&amp;amp; Distance::Add(const Distance &amp;amp;d)&#xA;{&#xA;    setDistance(getFeet() + d.getFeet(), getInch() + d.getInch());&#xA;&#xA;    return *this;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Here are the major changes above:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Distance no longer uses cin/cout for explicit IO. You can push that code into main.&lt;/li&gt;&#xA;&lt;li&gt;class definition and implementation are now in their respectively named files.&lt;/li&gt;&#xA;&lt;li&gt;Removed an extra constructor definition by taking advantage of default parameters.&lt;/li&gt;&#xA;&lt;li&gt;feet and inch data members are used together to represent the measurement in distance. inch cannot be &gt; 12 because that would mean there's enough for a foot. We enforce this by dividing feet and inches by 12 when setting distance's data.&lt;/li&gt;&#xA;&lt;li&gt;const is used to clearly indicate what can and can't change the distance object.&lt;/li&gt;&#xA;&lt;li&gt;Changed distanceSum to Add to better reflect what it's doing. Notice that Add is implemented only through Distance's public methods -- it does not manipulate &lt;code&gt;feet_&lt;/code&gt; and &lt;code&gt;inch_&lt;/code&gt; directly.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="71" LastEditorUserId="71" LastEditDate="2011-01-31T09:04:06.080" LastActivityDate="2011-01-31T09:04:06.080" CommentCount="12" />
  <row Id="482" PostTypeId="2" ParentId="472" CreationDate="2011-01-31T07:58:48.267" Score="28" Body="&lt;p&gt;Let's do some fixing. First, this is how you pass optional (non-boolean) parameters in JS (the Good Way&lt;sup&gt;tm&lt;/sup&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;addFooListeners = function (panelType, handlers) {&#xA;    handlers        = handlers        || {};&#xA;    handlers.show   = handlers.show   || showFoo;&#xA;    handlers.hide   = handlers.hide   || hideFoo;&#xA;    handlers.commit = handlers.commit || commitFoo;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The above can be rewritten in a neater way using jQuery (not sure what the name of YUI equivalent to &lt;code&gt;extend&lt;/code&gt; is):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;handlers = $.extend({&#xA;    show  : showFoo, &#xA;    hide  : hideFoo, &#xA;    commit: commitFoo&#xA;}, handlers || {})&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now, using eval for this code is criminal. Say the object &lt;code&gt;ns&lt;/code&gt; refers to is &lt;code&gt;module&lt;/code&gt;, then you can do this instead of &lt;code&gt;eval&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;YAHOO.util.Event.addListener(&quot;show&quot; + panelType, &quot;click&quot;, handlers.show, module[&quot;panel_&quot; + panelType], true);&#xA;YAHOO.util.Event.addListener(&quot;hide&quot; + panelType, &quot;click&quot;, handlers.hide, module[&quot;panel_&quot; + panelType], true);&#xA;YAHOO.util.Event.addListener(&quot;commit&quot; + panelType, &quot;click&quot;, handlers.commit, module[&quot;panel_&quot; + panelType], true);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now, as you can see, you are assigning a lot of events in a similar fashion. Did you think of defining an addPanelListener function within your function?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function addPanelListener (event, panelType, handler) {&#xA;    YAHOO.util.Event.addListener(event + panelType, &quot;click&quot;, handler, module[&quot;panel_&quot; + panelType], true);&#xA;} &#xA;&#xA;addPanelListener(&quot;show&quot;  , panelType, handlers.show);&#xA;addPanelListener(&quot;hide&quot;  , panelType, handlers.hide);&#xA;addPanelListener(&quot;commit&quot;, panelType, handlers.commit):&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Hope it helps.&lt;/p&gt;&#xA;" OwnerUserId="993" LastEditorUserId="993" LastEditDate="2014-03-16T19:46:32.197" LastActivityDate="2014-03-16T19:46:32.197" CommentCount="7" />
  <row Id="483" PostTypeId="2" ParentId="478" CreationDate="2011-01-31T09:54:47.560" Score="8" Body="&lt;p&gt;Well:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The first line can be written like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;sub has_path&#xA;{&#xA;  clearerr;&#xA;  my %Graph = gref(shift);&#xA;&#xA;  my ($A, $B, $C, $D, $E, $F&#xA;     ,$G, $H, $I, $J, $K, $L&#xA;     ,$M, $N, $O, $P, $Q, $R&#xA;     ,$S, $T, $U, $V, $W, $X&#xA;     ,$Y, $Z)                    = @_;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;But if all you are doing is using the parameters to call another function then just leave them in the array &lt;code&gt;@_&lt;/code&gt; and pass that to the function you are calling:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;sub has_path&#xA;{&#xA;    clearerr;&#xA;    my %Graph = gref(shift);&#xA;&#xA;    my $switcher = dectab( @_ );            # just use the input array (- graph)&#xA;                                            # as a parameter into dectab.&#xA;                                            # If you actually want to limit it then&#xA;                                            # splice() off then end.&#xA;&#xA;    if ($switcher =~ /^(X+)(-*)$/)  # make sure the result is XXX----&#xA;    {&#xA;            my $size        = length($1);   # Count the X.&#xA;                                            # Note this block is not entered if&#xA;                                            # zero X's in switcher variable&#xA;&#xA;            # Cut the $size elements from the input array&#xA;            # and pass them as parameters to has_path()&#xA;            return $Graph-&amp;gt;has_path(splice(@_, 0 , $size));&#xA;    }&#xA;    # If we reach here the call failed.&#xA;    # Just return the 0&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="507" LastEditorUserId="507" LastEditDate="2011-01-31T18:14:47.737" LastActivityDate="2011-01-31T18:14:47.737" CommentCount="1" />
  <row Id="484" PostTypeId="2" ParentId="479" CreationDate="2011-01-31T10:06:52.023" Score="8" Body="&lt;p&gt;A bunch of these functions should be operators. You also seem to be confused about the purpose of addition. Also, &lt;code&gt;using namespace std&lt;/code&gt; is bad. You also didn't provide any other operators- even though any class user will logically expect that if you can add a distance, you can add a distance to the current object, and that you can subtract distances too. You also didn't provide any kind of input verification or const correctness.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class Distance&#xA;{&#xA;    int feet;&#xA;    float inch;&#xA;public:&#xA;    // Constructors&#xA;    Distance();&#xA;    Distance(int a, float b);&#xA;&#xA;    // Getters&#xA;    int getFeet() const;&#xA;    float getInch() const;&#xA;&#xA;    // Operator overloads - arithmetic&#xA;    Distance operator-(const Distance&amp;amp;) const;&#xA;    Distance&amp;amp; operator-=(const Distance&amp;amp;);&#xA;    Distance operator+(const Distance&amp;amp;) const;&#xA;    Distance&amp;amp; operator+=(const Distance&amp;amp;);&#xA;&#xA;    // Create from console&#xA;    static Distance getDistanceFromConsole();&#xA;};&#xA;// Operator overloads - I/O&#xA;std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp;, const Distance&amp;amp;);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And the implementations are...&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Distance::Distance() : feet(0), inch(0.0f) {}&#xA;Distance::Distance(int argfeet, float arginch) : feet(argfeet), inch(arginch) {&#xA;    // Verify that we are actually in feet and inches.&#xA;    // Not gonna write this code- dependent on the class invariants&#xA;    // which were not explicitly specified (e.g., can have negative Distance?)&#xA;}&#xA;int Distance::getFeet() const {&#xA;    return feet;&#xA;}&#xA;float Distance::getInch() const {&#xA;    return inch;&#xA;}&#xA;Distance Distance::operator-(const Distance&amp;amp; dist) const {&#xA;    Distance retval(*this);&#xA;    retval -= dist;&#xA;    return retval;&#xA;}&#xA;Distance&amp;amp; Distance::operator-=(const Distance&amp;amp; dist) {&#xA;    feet -= dist.feet;&#xA;    inches -= dist.inches;&#xA;    // Verify values- e.g. that inches is less than 12&#xA;    return *this;&#xA;}&#xA;Distance operator+(const Distance&amp;amp; dist) const {&#xA;    Distance retval(*this);&#xA;    retval += dist;&#xA;    return retval;&#xA;}&#xA;Distance&amp;amp; operator+=(const Distance&amp;amp; dist) {&#xA;    feet += dist.feet;&#xA;    inches += dist.inches;&#xA;    // More verification here.&#xA;}&#xA;&#xA;std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; output, const Distance&amp;amp; dist) {&#xA;    output &amp;lt;&amp;lt; &quot;Feet: &quot; &amp;lt;&amp;lt; dist.feet &amp;lt;&amp;lt; &quot;\n&quot;;&#xA;    output &amp;lt;&amp;lt; &quot;Inches: &quot; &amp;lt;&amp;lt; dist.inches &amp;lt;&amp;lt; std::endl; // flush when done.&#xA;    return output;&#xA;}&#xA;&#xA;Distance getDistanceFromConsole() {&#xA;    int feet; float inch;&#xA;    std::cout&amp;lt;&amp;lt;&quot;Enter distance in feet&quot;;&#xA;    std::cin&amp;gt;&amp;gt;feet;&#xA;    std::cout&amp;lt;&amp;lt;endl&amp;lt;&amp;lt;&quot;Enter inches:&quot;;&#xA;    std::cin&amp;gt;&amp;gt;inch;&#xA;    return Distance(feet, inch);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="62" LastActivityDate="2011-01-31T10:06:52.023" CommentCount="0" />
  <row Id="485" PostTypeId="2" ParentId="217" CreationDate="2011-01-31T15:01:59.697" Score="1" Body="&lt;p&gt;Making a generator version of random.sample() seems to be a much better idea.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;from __future__ import division&#xA;from random import random&#xA;from math import ceil as _ceil, log as _log&#xA;&#xA;def xsample(population, k):&#xA;    &quot;&quot;&quot;A generator version of random.sample&quot;&quot;&quot;&#xA;    n = len(population)&#xA;    if not 0 &amp;lt;= k &amp;lt;= n:&#xA;        raise ValueError, &quot;sample larger than population&quot;&#xA;    _int = int&#xA;    setsize = 21        # size of a small set minus size of an empty list&#xA;    if k &amp;gt; 5:&#xA;        setsize += 4 ** _ceil(_log(k * 3, 4)) # table size for big sets&#xA;    if n &amp;lt;= setsize or hasattr(population, &quot;keys&quot;):&#xA;        # An n-length list is smaller than a k-length set, or this is a&#xA;        # mapping type so the other algorithm wouldn't work.&#xA;        pool = list(population)&#xA;        for i in xrange(k):         # invariant:  non-selected at [0,n-i)&#xA;            j = _int(random() * (n-i))&#xA;            yield pool[j]&#xA;            pool[j] = pool[n-i-1]   # move non-selected item into vacancy&#xA;    else:&#xA;        try:&#xA;            selected = set()&#xA;            selected_add = selected.add&#xA;            for i in xrange(k):&#xA;                j = _int(random() * n)&#xA;                while j in selected:&#xA;                    j = _int(random() * n)&#xA;                selected_add(j)&#xA;                yield population[j]&#xA;        except (TypeError, KeyError):   # handle (at least) sets&#xA;            if isinstance(population, list):&#xA;                raise&#xA;            for x in sample(tuple(population), k):&#xA;                yield x&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Taking a sampling mean then becomes trivial:        &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def sampling_mean(population, k, times):&#xA;    for t in xrange(times):&#xA;        yield sum(xsample(population, k))/k&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;That said, as a code review, not much can be said about your code as it is more or less taking directly from the Python source, which can be said to be authoritative. ;) It does have a lot of silly speedups that make the code harder to read...&lt;/p&gt;&#xA;" OwnerUserId="1235" LastEditorUserId="1235" LastEditDate="2011-01-31T16:58:31.450" LastActivityDate="2011-01-31T16:58:31.450" CommentCount="0" />
  <row Id="486" PostTypeId="2" ParentId="356" CreationDate="2011-01-31T16:53:23.513" Score="1" Body="&lt;p&gt;I would personally introduce spring and their hibernate support into your application then you can use there hibernate transaction manager and define transactions in the xml file and then forget about them in the actual code&lt;/p&gt;&#xA;" OwnerUserId="1230" LastActivityDate="2011-01-31T16:53:23.513" CommentCount="1" />
  <row Id="487" PostTypeId="2" ParentId="479" CreationDate="2011-01-31T18:11:42.030" Score="7" Body="&lt;p&gt;There's no reason to have both inches and feet since the one can be calculated from the other.  Superfluous redundancy just adds complexity.&lt;/p&gt;&#xA;" OwnerDisplayName="anon" LastActivityDate="2011-01-31T18:11:42.030" CommentCount="4" />
  <row Id="488" PostTypeId="2" ParentId="419" CreationDate="2011-01-31T18:17:21.010" Score="8" Body="&lt;p&gt;I would, and have, redesign your set of functions to resemble casts:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;std::wstring x;&#xA;std::string y = string_cast&amp;lt;std::string&amp;gt;(x);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This can have a lot of benefits later when you start having to deal with some 3rd party library's idea of what strings should look like.&lt;/p&gt;&#xA;" OwnerDisplayName="anon" LastActivityDate="2011-01-31T18:17:21.010" CommentCount="3" />
  <row Id="489" PostTypeId="2" ParentId="479" CreationDate="2011-01-31T18:57:10.630" Score="4" Body="&lt;h3&gt;C++ comments:&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Prefer initializer lists:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Distance::Distance()&#xA;    :feet(0), inch(0)&#xA;{&#xA;        // NOT THIS -&amp;gt; inch=feet=0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3&gt;General coding comments:&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Don't combine functionality:&lt;br&gt;&#xA;You should define a function to add Distance objects and one to print them. (DeadMG has that covered above).&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;void Distance::distanceSum(Distance d)&#xA;{&#xA;        cout&amp;lt;&amp;lt;&quot;feet=&quot;&amp;lt;&amp;lt;d.feet+feet&amp;lt;&amp;lt;endl;&#xA;        cout&amp;lt;&amp;lt;&quot;inches=&quot;&amp;lt;&amp;lt;d.inch+inch&amp;lt;&amp;lt;endl;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Also I see you don't normalize your results. You could have 1 foot 300.05 inches. When ever the state of an object changes where one parameter flows into another you should normalize the data. Have an explicit function to do so and call it each time state changes:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private: void Normalize() { int eFeet = inches / 12; feet += eFeet; inches -= (eFeet * 12);}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3&gt;Implementation Comments:&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;But then again why do you store what is actually a single value in two different variables (feet and inches). Why not just store the total distance in inches (and then do conversion on the way in/out). Look at the unix time. It just counts the seconds since the epoch. All other values are calculated from this.&lt;/p&gt;&#xA;" OwnerUserId="507" LastEditorUserId="507" LastEditDate="2011-01-31T19:04:57.923" LastActivityDate="2011-01-31T19:04:57.923" CommentCount="0" />
  <row Id="490" PostTypeId="1" AcceptedAnswerId="1018" CreationDate="2011-01-31T20:17:49.470" Score="6" ViewCount="475" Body="&lt;p&gt;Okay... here's the beast:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;SELECT&#xA;     SUBSTRING(DischDate, 7, 4) + SUBSTRING(DischDate, 1, 2) as YYYYMM&#xA;    ,Type&#xA;    ,SubType&#xA;    ,Diags&#xA;    ,Count(*)        as Count&#xA;    ,SUM(Charges)    as Charges&#xA;    ,SUM(Payments)    as Payments&#xA;FROM&#xA;    (&#xA;        SELECT DISTINCT&#xA;             ID&#xA;            ,Diags&#xA;        FROM &#xA;           (SELECT VisitID as ID&#xA;                    ,DX01 ,DX11 ,DX21, DX31&#xA;                    ,DX02 ,DX12 ,DX22, DX32&#xA;                    ,DX03 ,DX13 ,DX23, DX33&#xA;                    ,DX04 ,DX14 ,DX24, DX34&#xA;                    ,DX05 ,DX15 ,DX25, DX35&#xA;                    ,DX06 ,DX16 ,DX26, DX36&#xA;                    ,DX07 ,DX17 ,DX27, DX37&#xA;                    ,DX08 ,DX18 ,DX28, DX38&#xA;                    ,DX09 ,DX19 ,DX29, DX39&#xA;                    ,DX10 ,DX20 ,DX30, DX40&#xA;               FROM [AGH00]...[20110128 - AGH00#TXT]) p&#xA;            UNPIVOT&#xA;               (Diags FOR DX IN&#xA;                    (DX01 ,DX11  ,DX21, DX31&#xA;                    ,DX02 ,DX12  ,DX22, DX32&#xA;                    ,DX03 ,DX13  ,DX23, DX33&#xA;                    ,DX04 ,DX14  ,DX24, DX34&#xA;                    ,DX05 ,DX15  ,DX25, DX35&#xA;                    ,DX06 ,DX16  ,DX26, DX36&#xA;                    ,DX07 ,DX17  ,DX27, DX37&#xA;                    ,DX08 ,DX18  ,DX28, DX38&#xA;                    ,DX09 ,DX19  ,DX29, DX39&#xA;                    ,DX10 ,DX20  ,DX30, DX40)&#xA;            )AS unpvt&#xA;        ) as DIAGS&#xA;    LEFT JOIN [AGH00]...[20110128 - AGH00#TXT] as A0 on DIAGS.ID = A0.VisitID&#xA;    LEFT JOIN ( SELECT VisitID, Sum(ChargsAmt) as Charges&#xA;                FROM [AGH00]...[20110128 - AGH00Chg#TXT]&#xA;                Group By VisitID ) as AC on A0.VisitID = AC.VisitID&#xA;    LEFT JOIN ( SELECT VisitID, Sum(Pmt) as Payments&#xA;                FROM [AGH00]...[20110128 - AGH00Pmt#TXT]&#xA;                Group By VisitID ) as AP on A0.VisitID = AP.VisitID                &#xA;Group By&#xA;     SUBSTRING(DischDate, 7, 4) + SUBSTRING(DischDate, 1, 2)&#xA;    ,Type&#xA;    ,SubType&#xA;    ,Diags&#xA;Order By&#xA;     SUBSTRING(DischDate, 7, 4) + SUBSTRING(DischDate, 1, 2)&#xA;    ,Type&#xA;    ,SubType&#xA;    ,Diags&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Sample output:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;pre&gt;&lt;code&gt;YYYYMM Type SubType Diags # Charges    Payments&#xA;201004 I    SPEC    5185  3 224086.60  222986.60&#xA;200910 I    MONT    73390 2 7573.42    6984.13&#xA;200910 O    AHCW    463   4 578.00     578.00&#xA;200910 I    MEDI    2766  2 67444.39   67444.39&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Notes:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;SQL2005 LinkedServer to a TextFile with a backing ini for field descriptions.&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;DischDate is &quot;mm/dd/yyyy&quot; text field. I want YYYYMM for grouping (as well as other fields)&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;First &quot;table&quot; is a list generated via Unpivot that basically generates a list of VisitID's and unique Diags  &lt;/li&gt;&#xA;&lt;li&gt;Left Join main customer data by &quot;VisitID&quot;&lt;/li&gt;&#xA;&lt;li&gt;Left Join Charges Data (Grouped to get individual charges grouped by &quot;customer&quot; aka VisitID)  &lt;/li&gt;&#xA;&lt;li&gt;Left Join Payment Data (same as last)  &lt;/li&gt;&#xA;&lt;li&gt;Group by/Order By/Select Date YYYYMMDD, Type, Subtype, Diags... and grouped Count/Sums  &lt;/li&gt;&#xA;&lt;/ol&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;More information is in &lt;a href=&quot;http://stackoverflow.com/questions/4854322/tsql-question-group-by-on-multiple-columns&quot;&gt;this SO question&lt;/a&gt; where someone pointed me to the unpivot option. Including a semi-confused explanation of what I want to accomplish (basically grouping information for a couple similar reports).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Just wondering if there is a more graceful way, and if anyone see potential errors.&lt;/p&gt;&#xA;" OwnerUserId="409" LastEditorUserId="42632" LastEditDate="2015-07-23T01:22:46.383" LastActivityDate="2015-07-23T01:22:46.383" Title="Tame this Beast: TSQL Unpivot" Tags="&lt;sql&gt;&lt;sql-server&gt;" AnswerCount="1" CommentCount="0" />
  <row Id="491" PostTypeId="1" CreationDate="2011-01-31T20:29:24.857" Score="10" ViewCount="12293" Body="&lt;p&gt;I have written a simple spinner wrapper, but was wondering if any of you could think of any ways to make it more robust. It only handles strings at the moment.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;MySpinner&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package a.b.c;&#xA;&#xA;import android.content.Context;&#xA;import android.util.AttributeSet;&#xA;import android.widget.ArrayAdapter;&#xA;import android.widget.Spinner;&#xA;&#xA;public class MySpinner extends Spinner {&#xA;&#xA;    // constructors (each calls initialise)&#xA;    public MySpinner(Context context) {&#xA;        super(context);&#xA;        this.initialise();&#xA;    }&#xA;    public MySpinner(Context context, AttributeSet attrs) {&#xA;        super(context, attrs);&#xA;        this.initialise();&#xA;    }&#xA;    public MySpinner(Context context, AttributeSet attrs, int defStyle) {&#xA;        super(context, attrs, defStyle);&#xA;        this.initialise();&#xA;    }&#xA;&#xA;    // declare object to hold data values&#xA;    private ArrayAdapter&amp;lt;String&amp;gt; arrayAdapter;&#xA;&#xA;    // add the selected item to the end of the list&#xA;    public void addItem(String item) {&#xA;        this.addItem(item, true);&#xA;    }&#xA;    public void addItem(String item, boolean select) {&#xA;        arrayAdapter.add(item);&#xA;        this.setEnabled(true);&#xA;        if (select) this.selectItem(item);&#xA;        arrayAdapter.sort(new Comparator&amp;lt;String&amp;gt;() {&#xA;            public int compare(String object1, String object2) {&#xA;                return object1.compareTo(object2);&#xA;            };&#xA;        });&#xA;    }&#xA;&#xA;    // remove all items from the list and disable it&#xA;    public void clearItems() {&#xA;        arrayAdapter.clear();&#xA;        this.setEnabled(false);&#xA;    }&#xA;&#xA;    // make the specified item selected (returns false if item not in the list)&#xA;    public boolean selectItem(String item) {&#xA;        boolean found = false;&#xA;        for (int i = 0; i &amp;lt; this.getCount(); i++) {&#xA;            if (arrayAdapter.getItem(i) == item) {&#xA;                this.setSelection(i);&#xA;                found = true;&#xA;                break;&#xA;            }&#xA;        }&#xA;        return found;&#xA;    }&#xA;&#xA;    // return the current selected item&#xA;    public String getSelected() {&#xA;        if (this.getCount() &amp;gt; 0) {&#xA;            return arrayAdapter.getItem(super.getSelectedItemPosition());&#xA;        } else {&#xA;            return &quot;&quot;;&#xA;        }&#xA;    }&#xA;&#xA;    // allow the caller to use a different DropDownView, defaults to android.R.layout.simple_dropdown_item_1line&#xA;    public void setDropDownViewResource(int resource) {&#xA;        arrayAdapter.setDropDownViewResource(resource);&#xA;    }&#xA;    // internal routine to set up the array adapter, bind it to the spinner and disable it as it is empty&#xA;    private void initialise() {&#xA;        arrayAdapter = new ArrayAdapter&amp;lt;String&amp;gt;(super.getContext(), android.R.layout.simple_spinner_item);&#xA;        arrayAdapter.setDropDownViewResource(android.R.layout.simple_dropdown_item_1line);&#xA;        this.setAdapter(arrayAdapter);&#xA;        this.setEnabled(false);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;To use:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Use &lt;code&gt;a.b.c.MySpinner&lt;/code&gt; instead of &lt;code&gt;Spinner&lt;/code&gt; in your XML layout file&lt;/li&gt;&#xA;&lt;li&gt;Set up a variable, &lt;code&gt;mMySpinner = (MySpinner)findViewById(R.id.spinner);&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;You can then use all the functions which should be self-explanatory&lt;/li&gt;&#xA;&lt;li&gt;If there are no items in the list, the spinner is disabled to prevent untoward events&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;mMySpinner.clearItems()&lt;/code&gt; - to remove all the items&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;mMySpinner.addItem(&quot;Blue&quot;)&lt;/code&gt; - to add Blue as an item in list (items are sorted by abc)&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;mMySpinner.selectItem(&quot;Red&quot;)&lt;/code&gt; - to make the indicate item the current selection&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;mMySpinner.getSelected()&lt;/code&gt; - to return the current selected item string&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="1234" LastEditorUserId="22222" LastEditDate="2016-09-15T17:29:52.490" LastActivityDate="2016-09-15T17:53:41.323" Title="Simplified Android Spinner" Tags="&lt;java&gt;&lt;android&gt;" AnswerCount="3" CommentCount="1" FavoriteCount="4" />
  <row Id="492" PostTypeId="1" AcceptedAnswerId="726" CreationDate="2011-01-31T20:48:27.087" Score="19" ViewCount="1183" Body="&lt;p&gt;This is a simple list of items in a list, which allows the user to dynamically generate that list of events. Then a controller action does the work of serializing that into the database.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The issue is that there's the PHP-generated HTML segment, and there's a separate JavaScript segment to do the additions (for when someone presses the &quot;add new page&quot; button). This is not only duplicated; when it's done inline in the JavaScript it's extremely ugly to look at (look at the length of that line!).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Is there a better way of doing this?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?php&#xA;/** @var $this Zend_View */&#xA;&#xA;$this-&amp;gt;headLink()-&amp;gt;appendStylesheet($this-&amp;gt;baseUrl('css/redmond/jquery-ui-1.8.5.custom.css'));&#xA;&#xA;$this-&amp;gt;headScript()-&amp;gt;appendFile($this-&amp;gt;baseUrl('js/jquery.js'));&#xA;$this-&amp;gt;headScript()-&amp;gt;appendFile($this-&amp;gt;baseUrl('js/jquery-ui-1.8.5.custom.min.js'));&#xA;&#xA;$this-&amp;gt;headScript()-&amp;gt;captureStart(); ?&amp;gt;&#xA;//&amp;lt;script language=&quot;text/javascript&quot;&amp;gt;&#xA;    function CreateDateboxes(jqObject) {&#xA;        jqObject.datepicker({&#xA;            dateFormat: 'yy-mm-dd',&#xA;            showOn: 'button',&#xA;            changeYear: true,&#xA;            changeMonth: true&#xA;        });&#xA;    }&#xA;&#xA;    function RemoveParent() {&#xA;        $(this).parent().parent().remove();&#xA;    }&#xA;&#xA;    function AddNewEvent() {&#xA;        var today, html, temp, datestring;&#xA;        today = new Date();&#xA;        datestring = (today.getYear()+1900) + '-' + (today.getMonth()+1) + '-' + today.getDate();&#xA;        html = '&amp;lt;li class=&quot;ui-content&quot;&amp;gt;\n    &amp;lt;div style=&quot;float: left; width: 200px;&quot;&amp;gt;\n        &amp;lt;span class=&quot;ui-icon ui-icon-trash ui-button ui-state-active&quot; style=&quot;float: left; margin:3px;&quot;&amp;gt;&amp;lt;/span&amp;gt;\n        &amp;lt;input name=&quot;dates[]&quot; class=&quot;datebox&quot; style=&quot;width: 120px;&quot; type=&quot;text&quot; value=&quot;' + datestring + '&quot; /&amp;gt;\n    &amp;lt;/div&amp;gt;\n    &amp;lt;div style=&quot;padding-left: 200px;&quot;&amp;gt;\n        &amp;lt;input name=&quot;contents[]&quot; type=&quot;text&quot; style=&quot;width: 100%;&quot; /&amp;gt;\n    &amp;lt;/div&amp;gt;\n&amp;lt;/li&amp;gt;';&#xA;        $(this).after(html);&#xA;        temp = $(this).next();&#xA;        CreateDateboxes($('.datebox', temp));&#xA;        $('.ui-icon-trash', temp).click(RemoveParent);&#xA;    }&#xA;&#xA;    $(function() {&#xA;        CreateDateboxes($('.datebox'));&#xA;        $('.ui-icon-trash').click(RemoveParent);&#xA;        $('.ui-icon-plus').parent().click(AddNewEvent);&#xA;    });&#xA;//&amp;lt;/script&amp;gt;&#xA;&amp;lt;?php $this-&amp;gt;headScript()-&amp;gt;captureEnd(); ?&amp;gt;&#xA;&amp;lt;div class=&quot;story&quot;&amp;gt;&#xA;    &amp;lt;form action=&quot;&amp;lt;?= $this-&amp;gt;url(array('controller' =&amp;gt; 'admin', 'action' =&amp;gt; 'applyEvents')) ?&amp;gt;&quot; method=&quot;post&quot;&amp;gt;&#xA;        &amp;lt;ul style=&quot;list-style: none; margin-bottom: 1em; padding: 0; width: 100%;&quot;&amp;gt;&#xA;            &amp;lt;li class=&quot;ui-button ui-state-default&quot; style=&quot;width: 100%; margin-bottom: 5px;&quot;&amp;gt;&amp;lt;span class=&quot;ui-icon ui-icon-plus&quot; style=&quot;float: left;&quot;&amp;gt;&amp;lt;/span&amp;gt;&#xA;                Add a new Event&amp;lt;/li&amp;gt;&#xA;            &amp;lt;? foreach ($this-&amp;gt;events as $event) { ?&amp;gt;&#xA;                &amp;lt;li class=&quot;ui-content&quot;&amp;gt;&#xA;                    &amp;lt;div style=&quot;float: left; width: 200px;&quot;&amp;gt;&#xA;                    &amp;lt;span class=&quot;ui-icon ui-icon-trash ui-button ui-state-active&quot; style=&quot;float: left; margin:3px;&quot;&amp;gt;&amp;lt;/span&amp;gt;&#xA;                    &amp;lt;input name=&quot;dates[]&quot; class=&quot;datebox&quot; style=&quot;width: 120px;&quot; type=&quot;text&quot; value=&quot;&amp;lt;?= $event-&amp;gt;GetDate()-&amp;gt;format('Y-m-d') ?&amp;gt;&quot; /&amp;gt;&#xA;                    &amp;lt;/div&amp;gt;&#xA;                    &amp;lt;div style=&quot;padding-left: 200px;&quot;&amp;gt;&#xA;                        &amp;lt;input name=&quot;contents[]&quot; type=&quot;text&quot; value=&quot;&amp;lt;?= $event-&amp;gt;GetMessage() ?&amp;gt;&quot; style=&quot;width: 100%;&quot; /&amp;gt;&#xA;                    &amp;lt;/div&amp;gt;&#xA;                &amp;lt;/li&amp;gt;&#xA;            &amp;lt;? } ?&amp;gt;&#xA;        &amp;lt;/ul&amp;gt;&#xA;        &amp;lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Apply&quot; /&amp;gt;&#xA;        &amp;lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Cancel&quot; /&amp;gt;&#xA;    &amp;lt;/form&amp;gt;&#xA;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="22" LastEditorUserId="22222" LastEditDate="2015-08-04T19:23:35.230" LastActivityDate="2015-08-04T19:23:35.230" Title="Dynamically generating a list of events" Tags="&lt;php&gt;&lt;javascript&gt;" AnswerCount="1" CommentCount="3" FavoriteCount="3" />
  <row Id="493" PostTypeId="1" CreationDate="2011-01-31T20:55:47.097" Score="1" ViewCount="206" Body="&lt;p&gt;I've been writing a function:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;float turnToRequestedHeading(float initialHeading, float requiredHeading, float turnRate)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I keep thinking there must be a clever way to do it, but it escapes me.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;All values are in Radians, Headings between -PI and +PI, and turnRate between -0.5 and +0.5.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If the requiredHeading is less than the turnRate away from the initialHeading then it should return requiredHeading&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Otherwise it should return initialHeading + or - turnRate, whichever gets closer to the requiredHeading.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The following code is what I have so far, which I'm quite happy with, but is there anything I've missed, or is there an easier way to do this?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// return the new heading based on the required heading and turn rate&#xA;private float turnToRequestedHeading(float initialHeading, float requiredHeading, float turnRate) {&#xA;    //DEBUG*/Log.d(this.getClass().getName(), &quot;turnToRequestedHeading(initialHeading=&quot;+initialHeading+&quot;, requiredHeading=&quot;+requiredHeading+&quot;, turnRate=&quot;+turnRate+&quot;): Started&quot;);&#xA;    float resultantHeading;&#xA;    int   direction = 1;            // clockwise, set anti-clockwise (-1) later if required&#xA;    if ((Math.signum(initialHeading) == Math.signum(requiredHeading)) || (Math.signum(initialHeading) == 0) || (Math.signum(requiredHeading) == 0)) {&#xA;        // both headings are on the same side of 0 so turn will not pass through the  +/- Pi discontinuity&#xA;        if (Math.max(Math.abs(requiredHeading) - Math.abs(initialHeading), Math.abs(initialHeading) - Math.abs(requiredHeading)) &amp;lt; turnRate) {&#xA;            // angle to be updated is less than turn rate&#xA;            resultantHeading= requiredHeading;&#xA;            /*DEBUG*/Log.d(this.getClass().getName(), &quot;turnToRequestedHeading(initialHeading=&quot;+initialHeading+&quot;, requiredHeading=&quot;+requiredHeading+&quot;, turnRate=&quot;+turnRate+&quot;): Path1&quot;);&#xA;        } else {&#xA;            // angle to be updated is greater than turn rate&#xA;            if (initialHeading &amp;lt; requiredHeading) {&#xA;                // turn clockwise&#xA;                resultantHeading = initialHeading + turnRate;&#xA;                /*DEBUG*/Log.d(this.getClass().getName(), &quot;turnToRequestedHeading(initialHeading=&quot;+initialHeading+&quot;, requiredHeading=&quot;+requiredHeading+&quot;, turnRate=&quot;+turnRate+&quot;): Path2&quot;);&#xA;            } else {&#xA;                // turn anti-clockwise&#xA;                resultantHeading = initialHeading - turnRate;&#xA;                /*DEBUG*/Log.d(this.getClass().getName(), &quot;turnToRequestedHeading(initialHeading=&quot;+initialHeading+&quot;, requiredHeading=&quot;+requiredHeading+&quot;, turnRate=&quot;+turnRate+&quot;): Path3&quot;);&#xA;            }&#xA;        }&#xA;    } else {&#xA;        // headings are on different sides of 0 so turn may pass through the +/- Pi discontinuity&#xA;        if (Math.abs(initialHeading) + Math.abs(requiredHeading) &amp;lt; turnRate) {&#xA;            // angle to be updated is less than turn rate (around 0)&#xA;            resultantHeading= requiredHeading;&#xA;            /*DEBUG*/Log.d(this.getClass().getName(), &quot;turnToRequestedHeading(initialHeading=&quot;+initialHeading+&quot;, requiredHeading=&quot;+requiredHeading+&quot;, turnRate=&quot;+turnRate+&quot;): Path4&quot;);&#xA;        } else if ((180 - Math.abs(initialHeading)) + (180 - Math.abs(requiredHeading)) &amp;lt; turnRate) {&#xA;            // angle to be updated is less than turn rate (around +/- Pi)&#xA;            resultantHeading= requiredHeading;&#xA;            /*DEBUG*/Log.d(this.getClass().getName(), &quot;turnToRequestedHeading(initialHeading=&quot;+initialHeading+&quot;, requiredHeading=&quot;+requiredHeading+&quot;, turnRate=&quot;+turnRate+&quot;): Path5&quot;);&#xA;        } else {&#xA;            // angle to be updated is greater than turn rate so calculate direction (previously assumed to be 1)&#xA;            if (initialHeading &amp;lt; 0) {&#xA;                if (requiredHeading &amp;gt; PIf + initialHeading) direction = -1;&#xA;            } else {&#xA;                if (requiredHeading &amp;gt; -PIf + initialHeading) direction = -1;&#xA;            }&#xA;            if ((direction == 1) &amp;amp;&amp;amp; (initialHeading &amp;gt; PIf - turnRate)) {&#xA;                // angle includes the +/- Pi discontinuity, clockwise&#xA;                resultantHeading = -TWO_PIf + turnRate + initialHeading;&#xA;                /*DEBUG*/Log.d(this.getClass().getName(), &quot;turnToRequestedHeading(initialHeading=&quot;+initialHeading+&quot;, requiredHeading=&quot;+requiredHeading+&quot;, turnRate=&quot;+turnRate+&quot;): Path6 snap=&quot;+(resultantHeading &amp;gt; requiredHeading));&#xA;                if (resultantHeading &amp;gt; requiredHeading) resultantHeading = requiredHeading;&#xA;            } else if ((direction == -1) &amp;amp;&amp;amp; (initialHeading &amp;lt; -PIf + turnRate)) {&#xA;                // angle includes the +/- Pi discontinuity, anti-clockwise&#xA;                resultantHeading = TWO_PIf - turnRate + initialHeading;&#xA;                /*DEBUG*/Log.d(this.getClass().getName(), &quot;turnToRequestedHeading(initialHeading=&quot;+initialHeading+&quot;, requiredHeading=&quot;+requiredHeading+&quot;, turnRate=&quot;+turnRate+&quot;): Path7 snap=&quot;+(resultantHeading &amp;lt; requiredHeading));&#xA;                if (resultantHeading &amp;lt; requiredHeading) resultantHeading = requiredHeading;&#xA;            } else {&#xA;                // angle does not includes the +/- Pi discontinuity&#xA;                resultantHeading = initialHeading + direction * turnRate;&#xA;                /*DEBUG*/Log.d(this.getClass().getName(), &quot;turnToRequestedHeading(initialHeading=&quot;+initialHeading+&quot;, requiredHeading=&quot;+requiredHeading+&quot;, turnRate=&quot;+turnRate+&quot;): Path8 direction=&quot;+direction);&#xA;            }&#xA;        }&#xA;    }&#xA;    // ensure -PI &amp;lt;= result &amp;lt;= PI&#xA;    if (resultantHeading &amp;lt; -PIf) resultantHeading = resultantHeading + TWO_PIf; &#xA;    if (resultantHeading &amp;gt;= PIf)  resultantHeading = resultantHeading - TWO_PIf; &#xA;    //DEBUG*/Log.d(this.getClass().getName(), &quot;turnToRequestedHeading: Returning &quot;+resultantHeading);&#xA;    return resultantHeading;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I have written some testing code to check it out as there were quite a few different 'special cases'&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private void turnToRequestedHeadingTest(float initialHeading, float requiredHeading, float turnRate, float expectedResult) {&#xA;    if (Math.round(turnToRequestedHeading(initialHeading*PIf/180, requiredHeading*PIf/180, turnRate*PIf/180)*180/PIf) != expectedResult) {&#xA;        /*DEBUG*/Log.i(this.getClass().getName(), &quot;test(initial=&quot;+initialHeading+&quot;, required=&quot;+requiredHeading+&quot;, rate=&quot;+turnRate+&quot;) Expected &quot;+expectedResult+&quot;, Returns &quot;+(Math.round(turnToRequestedHeading(initialHeading*PIf/180, requiredHeading*PIf/180, turnRate*PIf/180)*180/PIf)));&#xA;    }&#xA;}&#xA;&#xA;/*DEBUG*/Log.i(this.getClass().getName(), &quot;turnToRequestedHeading tests:&quot;);&#xA;turnToRequestedHeadingTest(   0,   0,  0,   0);&#xA;turnToRequestedHeadingTest(   0,   0, 25,   0);&#xA;turnToRequestedHeadingTest(  10,  15, 25,  15);&#xA;turnToRequestedHeadingTest(  20,  55, 25,  45);&#xA;turnToRequestedHeadingTest(  85,  95, 25,  95);&#xA;turnToRequestedHeadingTest( 150,-170, 25, 175);&#xA;turnToRequestedHeadingTest( 170, 177, 25, 177);&#xA;turnToRequestedHeadingTest( 170,-175, 25,-175);&#xA;turnToRequestedHeadingTest( 175,-100, 25,-160);&#xA;turnToRequestedHeadingTest( 175,   0, 25, 150);&#xA;turnToRequestedHeadingTest( 180,   0, 25, 155);&#xA;turnToRequestedHeadingTest(-170,-100, 25,-145);&#xA;turnToRequestedHeadingTest(-100, -80, 25, -80);&#xA;turnToRequestedHeadingTest( -30, -15, 25, -15);&#xA;turnToRequestedHeadingTest( -30,  15, 25,  -5);&#xA;turnToRequestedHeadingTest( -20,  -5, 25,  -5);&#xA;turnToRequestedHeadingTest( -20,   5, 25,   5);&#xA;turnToRequestedHeadingTest( -20,  15, 25,   5);&#xA;turnToRequestedHeadingTest(  10, 180, 25,  35);&#xA;turnToRequestedHeadingTest(  10,-160, 25, -15);&#xA;turnToRequestedHeadingTest( 170,   0, 25, 145);&#xA;turnToRequestedHeadingTest( 170, -15, 25,-165);&#xA;turnToRequestedHeadingTest(-170,   5, 25,-145);&#xA;turnToRequestedHeadingTest( -10, 160, 25,  15);&#xA;turnToRequestedHeadingTest( -10,-150, 25, -35);&#xA;turnToRequestedHeadingTest(  10,-170, 25, -15);&#xA;turnToRequestedHeadingTest(   0, 180, 25,  25);&#xA;turnToRequestedHeadingTest( -10, -15, 25, -15);&#xA;turnToRequestedHeadingTest( -20, -55, 25, -45);&#xA;turnToRequestedHeadingTest( -85, -95, 25, -95);&#xA;turnToRequestedHeadingTest(-150, 170, 25,-175);&#xA;turnToRequestedHeadingTest(-170,-177, 25,-177);&#xA;turnToRequestedHeadingTest(-170, 175, 25, 175);&#xA;turnToRequestedHeadingTest(-175, 100, 25, 160);&#xA;turnToRequestedHeadingTest(-175,   0, 25,-150);&#xA;turnToRequestedHeadingTest( 170, 100, 25, 145);&#xA;turnToRequestedHeadingTest( 100,  80, 25,  80);&#xA;turnToRequestedHeadingTest(  30,  15, 25,  15);&#xA;turnToRequestedHeadingTest(  30, -15, 25,   5);&#xA;turnToRequestedHeadingTest(  20,   5, 25,   5);&#xA;turnToRequestedHeadingTest(  20,  -5, 25,  -5);&#xA;turnToRequestedHeadingTest(  20, -15, 25,  -5);&#xA;turnToRequestedHeadingTest( -10,-180, 25, -35);&#xA;turnToRequestedHeadingTest( -10, 160, 25,  15);&#xA;turnToRequestedHeadingTest(-170,   0, 25,-145);&#xA;turnToRequestedHeadingTest(-170,  15, 25, 165);&#xA;turnToRequestedHeadingTest( 170,  -5, 25, 145);&#xA;turnToRequestedHeadingTest(  10,-160, 25, -15);&#xA;turnToRequestedHeadingTest(  10, 150, 25,  35);&#xA;turnToRequestedHeadingTest( -10, 170, 25,  15);&#xA;// More tests&#xA;turnToRequestedHeadingTest(   0,  15, 25,  15);&#xA;turnToRequestedHeadingTest(   0,  60, 25,  25);&#xA;turnToRequestedHeadingTest(   0, -15, 25, -15);&#xA;turnToRequestedHeadingTest(   0, -60, 25, -25);&#xA;turnToRequestedHeadingTest( 180, 165, 25, 165);&#xA;turnToRequestedHeadingTest( 180, 100, 25, 155);&#xA;turnToRequestedHeadingTest( 180,-165, 25,-165);&#xA;turnToRequestedHeadingTest( 180,-100, 25,-155);&#xA;turnToRequestedHeadingTest(-180, 165, 25, 165);&#xA;turnToRequestedHeadingTest(-180, 100, 25, 155);&#xA;turnToRequestedHeadingTest(-180,-165, 25,-165);&#xA;turnToRequestedHeadingTest(-180,-100, 25,-155);&#xA;turnToRequestedHeadingTest(  25,   0, 25,   0);&#xA;turnToRequestedHeadingTest(  25, -25, 25,   0);&#xA;turnToRequestedHeadingTest( -25,   0, 25,   0);&#xA;turnToRequestedHeadingTest( -25,  25, 25,   0);&#xA;turnToRequestedHeadingTest( 155, 180, 25, 180);&#xA;turnToRequestedHeadingTest( 155,-155, 25, 180);&#xA;turnToRequestedHeadingTest(-155, 180, 25,-180);&#xA;turnToRequestedHeadingTest(-155, 155, 25,-180);&#xA;turnToRequestedHeadingTest( 155,-180, 25,-180);&#xA;turnToRequestedHeadingTest(-155,-180, 25,-180);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1234" LastActivityDate="2011-02-03T08:12:14.950" Title="Function to turn to requested bearing" Tags="&lt;java&gt;&lt;android&gt;" AnswerCount="2" CommentCount="1" FavoriteCount="1" />
  <row Id="495" PostTypeId="2" ParentId="493" CreationDate="2011-01-31T21:47:18.733" Score="1" Body="&lt;p&gt;Just winging it off the top of my head, pseudocode follows:&#xA;EDIT - correcting some math&#xA;EDIT2 - have some javascript :)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function turnToRequestedHeadingTest(initial, requested, turnRate, newAngle)&#xA;{&#xA;    var ang1 = (Math.PI/180.0) * initial;&#xA;    var ang2 = (Math.PI/180.0) * requested;&#xA;    var na = turnToRequestedHeading(ang1,ang2,turnRate);&#xA;    na = na * (180.0/Math.PI);&#xA;    if(Math.abs(na- newAngle) &amp;gt; Math.epsilon)&#xA;        throw &quot;Failed on:&quot; + initial + &quot;-&quot; + requested + &quot; &quot; + na;&#xA;}&#xA;function turnToRequestedHeading(ang1,ang2,turnRate)&#xA;{&#xA;    if(ang1 == ang2) return ang1;&#xA;&#xA;    // pretend there's a vector v1 pointed out from &#xA;    // the origin along initialHeading of length 1&#xA;    // v1 = &amp;lt;cos initial, sin initial&amp;gt;&#xA;    var v1= [Math.cos(ang1), Math.sin(ang1)];&#xA;&#xA;    // pretend there's a vector v2 pointed out from &#xA;    // the origin along requiredHeading of length 1&#xA;    // v2 = &amp;lt;cos required, sin required&amp;gt;&#xA;    var v2= [Math.cos(ang2), Math.sin(ang2)];&#xA;&#xA;    // angle between v1,v2 = acos(v1 dot v2)&#xA;    var dang = Math.acos(v1[0]*v2[0], v1[1]*v2[1]);&#xA;    dang = dang &amp;gt; Math.PI ? Math.PI * 2 - dang : dang;&#xA;    if(dang &amp;lt; turnRate) return ang2;&#xA;&#xA;    // delta angle = acos(cos initial * cos required, sin initial * sin required);&#xA;    // resulting turn = Math.Min(turnRate, delta angle) * Math.sign(delta angle);&#xA;    var deltaTurn = (Math.min(turnRate, dang) * Math.sign(ang2-ang1)) + ang1;&#xA;&#xA;    // return initial + resulting turn;    &#xA;    return deltaTurn;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1265" LastEditorUserId="1265" LastEditDate="2011-01-31T22:00:39.060" LastActivityDate="2011-01-31T22:00:39.060" CommentCount="2" />
  <row Id="496" PostTypeId="1" AcceptedAnswerId="508" CreationDate="2011-01-31T23:44:49.807" Score="11" ViewCount="14818" Body="&lt;p&gt;I'm looking for the most commonly used style for writing the delete() function from a singy linked list. Is what I have the 'typical' or 'normal' solution? Are there more elegant ones?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What seems unelegant about my solution below, although I don't know a better way to express it, is that you need to check the first record individually, then as you iterate you're really looking at iter-&gt;next, ahead of your location, because in a singly linked list you can't go backwards.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So, is there a cleaner way to write the delete_item() function?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;&#xA;#include &amp;lt;stdlib.h&amp;gt;&#xA;&#xA;struct node {&#xA;    int x;&#xA;    struct node *next;&#xA;};&#xA;&#xA;struct node *head;&#xA;&#xA;struct node *create_item(int x);&#xA;void print_list();&#xA;void delete_item(int x);&#xA;&#xA;int main(int argc, int argv) {&#xA;&#xA;    struct node *n;&#xA;    int i;&#xA;&#xA;    // initialise a linked list with a few items&#xA;    head = create_item(1);&#xA;    n = head;&#xA;&#xA;    for (i = 2; i &amp;lt; 10; i++) {&#xA;        n-&amp;gt;next = create_item(i);&#xA;        n = n-&amp;gt;next;&#xA;    }&#xA;&#xA;    // before&#xA;    print_list();&#xA;&#xA;    // delete 7.&#xA;    delete_item(7);&#xA;&#xA;    // after&#xA;    print_list();&#xA;&#xA;    // lets delete all odd numbers for effect.&#xA;    delete_item(1);&#xA;    delete_item(3);&#xA;    delete_item(5);&#xA;    delete_item(9);&#xA;&#xA;    print_list();&#xA;}&#xA;&#xA;struct node *create_item(int x) {&#xA;    struct node *new;&#xA;&#xA;    new = (struct node *) malloc (sizeof(struct node));&#xA;    new-&amp;gt;x = x;&#xA;    return new;&#xA;}&#xA;&#xA;void print_list() {&#xA;    struct node *iter;&#xA;&#xA;    iter = head;&#xA;&#xA;    while (iter != NULL) {&#xA;        printf(&quot;num: %i\n&quot;, iter-&amp;gt;x);&#xA;        iter = iter-&amp;gt;next;&#xA;    }&#xA;}&#xA;&#xA;//We're looking for the best way to right this.&#xA;//This is _my_ standard solution to the problem.&#xA;// (that is, to test the first element explicitly&#xA;// the use current-&amp;gt;next != NULL to be one behind&#xA;// the search).&#xA;//I wondered what other people's is or if there&#xA;//is a convention?&#xA;void delete_item(int x) {&#xA;&#xA;    struct node *iter;&#xA;    iter = head;&#xA;&#xA;    if (iter == NULL) {&#xA;        printf(&quot;not found\n&quot;);&#xA;        return;&#xA;    }&#xA;&#xA;    if (iter-&amp;gt;x == x) {&#xA;        printf(&quot;found in first element: %i\n&quot;, x);&#xA;            head = head-&amp;gt;next;&#xA;        return;&#xA;    }&#xA;&#xA;    while (iter-&amp;gt;next != NULL) {&#xA;        if (iter-&amp;gt;next-&amp;gt;x == x) {&#xA;            printf(&quot;deleting element: %i\n&quot;, x);&#xA;            iter-&amp;gt;next = iter-&amp;gt;next-&amp;gt;next;&#xA;            return;&#xA;        }&#xA;&#xA;        iter = iter-&amp;gt;next;&#xA;    }&#xA;&#xA;    printf(&quot;not found\n&quot;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This is incidently a complete example that can be compiled and tested. The output:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;23:28: ~$ gcc -o ll linked_list.c&#xA;23:28: ~$ ./ll&#xA;num: 1&#xA;num: 2&#xA;num: 3&#xA;num: 4&#xA;num: 5&#xA;num: 6&#xA;num: 7&#xA;num: 8&#xA;num: 9&#xA;deleting element: 7&#xA;num: 1&#xA;num: 2&#xA;num: 3&#xA;num: 4&#xA;num: 5&#xA;num: 6&#xA;num: 8&#xA;num: 9&#xA;found in first element: 1&#xA;deleting element: 3&#xA;deleting element: 5&#xA;deleting element: 9&#xA;num: 2&#xA;num: 4&#xA;num: 6&#xA;num: 8&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1270" LastEditorUserId="9357" LastEditDate="2014-03-02T11:37:45.890" LastActivityDate="2014-03-02T11:37:45.890" Title="What's the cleanest way to implement a delete from a singly linked list in C?" Tags="&lt;c&gt;&lt;linked-list&gt;" AnswerCount="6" CommentCount="1" />
  <row Id="497" PostTypeId="2" ParentId="496" CreationDate="2011-02-01T00:11:00.907" Score="4" Body="&lt;p&gt;It's been ages since I've done C++, but here are my observations:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;First off, you're using global variables, which is ill-advised.  I'm not sure if C supports member functions, but if not, you should be using parameter passing, e.g. &lt;code&gt;delete_item(node* head, int x)&lt;/code&gt; and so on.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if (iter == NULL) {&#xA;    printf(&quot;not found\n&quot;);&#xA;    return;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;iter is set to the head of the linked list, and if the linked list doesn't yet exist, you reply that the item is &quot;not found\n&quot;.  I would change this to &quot;Linked list is empty.\n&quot;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if (iter-&amp;gt;x == x) {&#xA;    printf(&quot;found in first element: %i\n&quot;, x);&#xA;    return;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This doesn't seem to work in the sense that it does not actually delete the element.  If you want this item deleted -- which I'm assuming you do, given the name of the function -- then you should add this line: &lt;code&gt;head = head-&amp;gt;next;&lt;/code&gt;  (You'll need to pass the head parameter &quot;by reference&quot; to make sure that this change will propagate outside the code of the &lt;code&gt;delete_item&lt;/code&gt; function.  Normally, if the parameter being passed wasn't a pointer, this would be done by passing the pointer.  head is a node*, however, and I have forgotten how to pass a pointer by reference... I think it would either be &lt;code&gt;node*&amp;amp; head&lt;/code&gt; or &lt;code&gt;node** head&lt;/code&gt; ... sorry, but you'll have to figure that one out! :) )  Alternatively, you could have delete_item return a &lt;code&gt;node *&lt;/code&gt;, and at the end of the function, you could return the first non-matching entry, and this would be called by head=delete_item(head, x).  It's probably slightly frowned upon to do it that way, but it would be an easy way out.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;At any rate, once you get that accomplished, it will delete the current head, and the new head will be the second element, if one exists... else it will be set to NULL.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;while (iter-&amp;gt;next != NULL) {&#xA;    if (iter-&amp;gt;next-&amp;gt;x == x) {&#xA;        printf(&quot;deleting element: %i\n&quot;, x);&#xA;        iter-&amp;gt;next = iter-&amp;gt;next-&amp;gt;next;&#xA;        return;&#xA;    }&#xA;&#xA;    iter = iter-&amp;gt;next;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;One problem I see is that you have to decide if you want to delete duplicate entries.  For example, if 7 appears twice in the linked list, do you want to delete both 7s, or just one?  If you want to delete both, you need to traverse the entire linked list by removing the &lt;code&gt;return&lt;/code&gt; statements in the &lt;em&gt;while&lt;/em&gt; loop and the initial check of the head node.  This will create a problem as the program proceeds on to the final, &quot;not found&quot; statement, but that can be solved with an &lt;em&gt;if&lt;/em&gt; statement:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if (!entryfound) printf(&quot;not found\n&quot;);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;entryfound would have to be declared to be 0, and set to 1 if a match was found in the &lt;em&gt;while&lt;/em&gt; loop.  Alternatively, you could do entryfound++ in the event of a match and change this last line:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if (entryfound) { printf(&quot;%i matches found and deleted.\n&quot;, entryfound); }&#xA;  else { printf(&quot;No matches found.\n&quot;); }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;After the changes, this is what your code should look like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;&#xA;#include &amp;lt;stdlib.h&amp;gt;&#xA;&#xA;struct node {&#xA;    int x;&#xA;    struct node *next;&#xA;};&#xA;&#xA;struct node *create_item(int x);&#xA;void print_list(node *head);&#xA;void delete_item(node *&amp;amp;head, int x);&#xA;&#xA;int main(int argc, int argv) {&#xA;    struct node *head, *tail;&#xA;&#xA;    // initialise a linked list with a few items&#xA;    head = create_item(1);&#xA;    tail = head;&#xA;&#xA;    for (int i = 2; i &amp;lt; 10; i++) {&#xA;        tail-&amp;gt;next = create_item(i);&#xA;        tail = tail-&amp;gt;next;&#xA;    }&#xA;&#xA;    // before&#xA;    print_list(head);&#xA;&#xA;    // delete 7.&#xA;    delete_item(head, 7);&#xA;&#xA;    // after&#xA;    print_list(head);&#xA;&#xA;    // lets delete all odd numbers for effect.&#xA;    delete_item(head, 1);&#xA;    delete_item(head, 3);&#xA;    delete_item(head, 5);&#xA;    delete_item(head, 9);&#xA;&#xA;    print_list(head);&#xA;}&#xA;&#xA;struct node *create_item(int x) {&#xA;    struct node *new;&#xA;&#xA;    new = (struct node *) malloc (sizeof(struct node));&#xA;    new-&amp;gt;x = x;&#xA;    return new;&#xA;}&#xA;&#xA;void print_list(node *iter) {&#xA;    int i=0;&#xA;&#xA;    if (iter==NULL} { printf(&quot;Linked list is empty.&quot;)); }&#xA;      else {&#xA;        while (iter != NULL) {&#xA;          printf(&quot;Index: %i, Value=%i\n&quot;, i, iter-&amp;gt;x);&#xA;          iter = iter-&amp;gt;next;&#xA;        }&#xA;      }&#xA;}&#xA;&#xA;//We're looking for the best way to right this.&#xA;//This is _my_ standard solution to the problem.&#xA;// (that is, to test the first element explicitly&#xA;// the use current-&amp;gt;next != NULL to be one behind&#xA;// the search).&#xA;//I wondered what other people's is or if there&#xA;//is a convention?&#xA;&#xA;void delete_item(node *&amp;amp;head, int x) {&#xA;    int i=0;&#xA;    node* iter=head;  // Head might have to be dereferenced here... I forget!&#xA;&#xA;    if (iter==NULL) {&#xA;        printf(&quot;Linked list is empty.\n&quot;);&#xA;        return;&#xA;    }&#xA;&#xA;    if (iter-&amp;gt;x == x) {&#xA;            printf(&quot;Deleting Item. Index: %i, Value=%i\n&quot;, i, x);&#xA;            head = head-&amp;gt;next;&#xA;            entryfound++;&#xA;    }&#xA;&#xA;    while (iter-&amp;gt;next != NULL) {&#xA;        i++;&#xA;        if (iter-&amp;gt;next-&amp;gt;x == x) {&#xA;            printf(Deleting Item. Index: %i, Value=%i\n&quot;, i, x);&#xA;            iter-&amp;gt;next = iter-&amp;gt;next-&amp;gt;next;&#xA;            entryfound++;&#xA;        }&#xA;&#xA;        iter = iter-&amp;gt;next;&#xA;    }&#xA;&#xA;&#xA;&#xA;    if (entryfound) { printf(&quot;%i matches found and deleted.\n&quot;, entryfound); }&#xA;      else { printf(&quot;No matches found.\n&quot;); }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;As others have stated, you need to be deallocating the memory.  Your program has what is known as a memory leak.  The old &quot;deleted&quot; nodes are not actually deleted, they are simply removed from the chain of pointers.  I'll leave it up to you to deallocate them in the event of a match.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Again, it's been a long time since I've done C++, but that's my take.  Sorry for any debugging that you might have to do in that code.&lt;/p&gt;&#xA;" OwnerUserId="1099" LastEditorUserId="1099" LastEditDate="2011-02-01T11:23:40.237" LastActivityDate="2011-02-01T11:23:40.237" CommentCount="3" />
  <row Id="498" PostTypeId="2" ParentId="496" CreationDate="2011-02-01T00:32:57.170" Score="6" Body="&lt;h3&gt;General Comments:&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Why do your list handling functions not take a list as a parameter?&lt;br&gt;&#xA;As a result your application can only have one list.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Comments on Delete:&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;You are leaking the list item when you delete it.  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Since the create_item() is calling malloc I would expect the delete_item() to call free.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I would split the delete_item() into two parts. The first part that deals with the head as a special case and the second part that deals with removing elemnts from the list (and free()ing them).&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;void delete_item(struct node** list, int x)&#xA;{&#xA;    if ((list == NULL) || ((*list) == NULL))&#xA;    {&#xA;        printf(&quot;not found\n&quot;);&#xA;        return;&#xA;    }&#xA;&#xA;    (*list) = delete_item_from_list(*list);&#xA;}&#xA;&#xA;struct node* delete_item_from_list(struct node* head)&#xA;{&#xA;    struct node* iter = head;&#xA;    struct node* last = NULL;&#xA;&#xA;    while (iter != NULL)&#xA;    {&#xA;        if (iter-&amp;gt;x == x)&#xA;        {&#xA;            break;&#xA;        }&#xA;&#xA;        last = iter;&#xA;        iter = iter-&amp;gt;next;&#xA;    }&#xA;&#xA;    if (iter == NULL)&#xA;    {&#xA;        printf(&quot;not found\n&quot;);&#xA;    }&#xA;    else if (last == NULL)&#xA;    {&#xA;        printf(&quot;found in first element: %i\n&quot;, x);&#xA;        head = iter-&amp;gt;next;&#xA;    }&#xA;    else&#xA;    {&#xA;        printf(&quot;deleting element: %i\n&quot;, x);&#xA;        last-&amp;gt;next = iter-&amp;gt;next;&#xA;    }&#xA;&#xA;    free(iter);&#xA;    return head;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="507" LastEditorUserId="507" LastEditDate="2011-02-01T01:56:33.090" LastActivityDate="2011-02-01T01:56:33.090" CommentCount="1" />
  <row Id="499" PostTypeId="2" ParentId="496" CreationDate="2011-02-01T00:41:26.403" Score="-1" Body="&lt;p&gt;Deleting an item from a singly-linked list requires finding the previous item.  There are two approaches one can use to deal with this:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;When deleting an item, search through the list to find the previous item, then do the unlink.&#xA;&lt;li&gt;Have a &quot;deleted&quot; flag for each item.  When traversing the list for some other reason, check the &quot;deleted&quot; flag on each node.  If a &quot;deleted&quot; node is encountered, unlink it from the previously-visited node.&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;Note that in a garbage-collected system, it's possible to add items to the start of the list, or perform the #2 style of deletion, in a lock-free thread-safe manner.  Nodes which are deleted may get unlinked in one thread and accidentally relinked in another, but the delete flag will cause the node to be unlinked again on the next pass.  In a multi-threaded system requiring explicit deallocation, such an unlink and relink sequence could be disastrous, since a node could be unlinked, deallocated, and relinked; locks would thus be necessary to avoid problems.&lt;/p&gt;&#xA;" OwnerUserId="1078" LastActivityDate="2011-02-01T00:41:26.403" CommentCount="8" />
  <row Id="500" PostTypeId="1" AcceptedAnswerId="501" CreationDate="2011-02-01T00:46:02.727" Score="6" ViewCount="14953" Body="&lt;p&gt;this function in my &lt;code&gt;Profile&lt;/code&gt; model receive a hash from a search form and should filter the table depending on those values. I guess there is something like a pattern for such a standard behavior, right now I ended up with this (unfortunately I had to reproduce the code here, so it might not work for some reasons, but you get the idea).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Just a note: we're storing in the model some strings containing multiple data, each of these fields should be a one-to-many relationship (db normality violation). I give an example: &lt;code&gt;country_preferences&lt;/code&gt; is a string filled up by an html &lt;code&gt;select :multiple =&amp;gt; true&lt;/code&gt;. In the string I then find values like: &lt;code&gt;[&quot;Australia&quot;, &quot;China&quot;, &quot;United Kingdom&quot;]&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;  def search opts # This default doesn't work the way I would like = {:user_type =&amp;gt; :family}&#xA;&#xA;    #TODO: default opts value in method sign if possible&#xA;    opts[:user_type] ||= :family&#xA;&#xA;    # initial criteria&#xA;    fields= &quot;user_type= ?&quot;&#xA;    values= [opts[:user_type]]&#xA;&#xA;    # each field filters the list in one of these three ways&#xA;    staight_fields = [ :country, :first_name, :last_name, :nationality ]&#xA;    like_fields = [:country_preferences, :keyword, :languages ]&#xA;    bool_fields = [:driver, :housework, :children ]&#xA;&#xA;    # cicle the options and build the query    &#xA;    opts.each do |k, v|&#xA;      if straight_fields.include? k&#xA;        fields += &quot; AND #{k} = ?&quot;&#xA;        values += v&#xA;      elsif like_fields.include? k&#xA;        fields += &quot; AND #{k} like %?%&quot;&#xA;        values += v&#xA;      elsif bool_fields.include? k&#xA;        fields += &quot; AND #{k} = ?&quot;&#xA;        values += v == 'true'&#xA;      else&#xA;        logger.warn &quot;opts #{k} with value #{v} ignored from search&quot;&#xA;      end&#xA;    end&#xA;&#xA;    # execute the query and return the result&#xA;    self.registered.actives.where([fields] + values)   &#xA;  end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I think I can use more &lt;code&gt;scope&lt;/code&gt; but how can I combine them together? In general, how can I make this code much better?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;PS: The boss when introducing the project said one-to-many relationships for that kind of fields would be a pain in the back, what do you think about this pragmatic solution?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt;:  &lt;em&gt;I had a good look and I found that scopes really helps me out!!&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;so now the code is this one, I just miss to insert some scopes for those multiselect-string, but it's already much better.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;EDIT2&lt;/strong&gt;:@sepp2k correctly pointed out an error that is now corrected (thank you)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;  def self.search(params)&#xA;    profiles = scoped_by_active(true).scoped_by_registered(true)&#xA;    profiles = profiles.scoped_by_user_type(params[:user_type]) unless params[:user_type].blank?&#xA;    [...]&#xA;    profiles = profiles.scoped_by_driver(params[:driver] == 'true') unless params[:driver].blank?    &#xA;    profiles.scoped_including_language(params[:language]) unless params[:language].blank?&#xA;  end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: &lt;code&gt;scoped_by_field_name&lt;/code&gt; comes from rails and &lt;code&gt;scoped_including_languages&lt;/code&gt; is devloped as suggested by @Beerlington.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'm still wondering if this way to put multi-data in a string really makes things easier.&lt;/p&gt;&#xA;" OwnerUserId="96" LastEditorUserId="96" LastEditDate="2011-02-02T12:22:48.460" LastActivityDate="2011-02-02T12:22:48.460" Title="how to filter (search) a model with multiple params in hash" Tags="&lt;ruby-on-rails&gt;&lt;ruby&gt;" AnswerCount="1" CommentCount="2" FavoriteCount="2" />
  <row Id="501" PostTypeId="2" ParentId="500" CreationDate="2011-02-01T01:15:52.663" Score="3" Body="&lt;p&gt;Have you looked into using a pre existing gem for this? I found one called &lt;a href=&quot;https://github.com/plataformatec/has_scope&quot; rel=&quot;nofollow&quot;&gt;has_scope&lt;/a&gt; that seems like it might do exactly what you're trying to refactor. You would need to add a scope for each of your filters and then add some &lt;code&gt;has_scope&lt;/code&gt; calls in your controller.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here's a few examples. I'm not as familiar with Rails 3 scopes as I am with 2, so the code likely won't work as is.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Model:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class Profile &amp;lt; ActiveRecord::Base&#xA;  scope :country, lambda {|country| where(:country =&amp;gt; country) }&#xA;  scope :keyword, lambda {|keyword| where([&quot;keyword LIKE :term&quot;, {:term =&amp;gt; &quot;%#{keyword}%&quot;}]) }&#xA;  scope :driver, where{:driver =&amp;gt; true)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Controller:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class ProfileController &amp;lt; ApplicationController&#xA;  has_scope :country&#xA;  has_scope :keyword&#xA;  has_scope :driver, :type =&amp;gt; :boolean&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="732" LastActivityDate="2011-02-01T01:15:52.663" CommentCount="3" />
  <row Id="503" PostTypeId="1" AcceptedAnswerId="625" CreationDate="2011-02-01T02:20:22.557" Score="8" ViewCount="221" Body="&lt;p&gt;A little background first.  I've been working on a fairly large Rails application which quickly grew into a breeding ground for &quot;smelly&quot; code. One antipattern we were using a lot was storing objects in an STI lookup table and having lots of scattered logic based on the name of the object.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here's a dumbed down example of what we had:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class Lookup &amp;lt; ActiveRecord::Base&#xA;end&#xA;&#xA;class AlarmStatus &amp;lt; Lookup&#xA;  has_many :alarm_logs&#xA;end&#xA;&#xA;class AlarmLog &amp;lt; ActiveRecord::Base&#xA;  belongs_to :alarm_status&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then all over our application we would do things like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;case @alarm_log.alarm_status.name&#xA;when &quot;active&quot;&#xA;  # Do something&#xA;when &quot;verified&quot;&#xA;  # Do something&#xA;when &quot;inactive&quot;&#xA;  # Do something&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This is obviously bad for a lot of reasons, but let's just say it was everywhere. After a few months of this, a consultant came along and pointed out our &quot;code smell&quot; and made some suggestions on how to refactor, which included a Ruby implementation of &lt;a href=&quot;http://download.oracle.com/javase/6/docs/api/java/lang/Enum.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Java's Enum class&lt;/a&gt;. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;We ended up using this frequently in our app, and have extracted into a ruby gem called &lt;a href=&quot;https://github.com/beerlington/classy_enum&quot; rel=&quot;nofollow noreferrer&quot;&gt;classy_enum&lt;/a&gt;. The premise of classy_enum is that you get the power of OOP mixed with the strictness of an enumerated type, which is pretty much what we were trying to mimic with our STI Lookup model.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Example of defining an enum:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class Priority &amp;lt; ClassyEnum::Base&#xA;  enum_classes :low, :medium, :high&#xA;&#xA;  def send_email?&#xA;    false&#xA;  end&#xA;end&#xA;&#xA;class PriorityHigh &amp;lt; Priority&#xA;  def send_email?&#xA;    true&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The gem's &lt;a href=&quot;https://github.com/beerlington/classy_enum/blob/master/README.md&quot; rel=&quot;nofollow noreferrer&quot;&gt;README&lt;/a&gt; has some other usage examples, including how to integrate it with a Rails project.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I may be asking for a lot here, but I would love some feedback from anyone willing to give it. It seems like a really cool solution to our problem and I can't imagine we're the only ones who have attempted to solve this before. Here's a list of questions that would be really useful for us:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Is this a common problem?&lt;/li&gt;&#xA;&lt;li&gt;Does our solution make sense? Is there a better way to do it?&lt;/li&gt;&#xA;&lt;li&gt;Is the documentation clear?&lt;/li&gt;&#xA;&lt;li&gt;Would you use this in your application? Why or why not?&lt;/li&gt;&#xA;&lt;li&gt;How could we improve it?&lt;/li&gt;&#xA;&lt;li&gt;How is the code quality?&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="732" LastEditorUserId="119117" LastEditDate="2016-11-09T16:25:42.810" LastActivityDate="2016-11-09T16:25:42.810" Title="RubyGem for Enums" Tags="&lt;ruby&gt;&lt;ruby-on-rails&gt;&lt;enum&gt;&lt;lookup&gt;" AnswerCount="1" CommentCount="0" FavoriteCount="1" />
  <row Id="504" PostTypeId="1" AcceptedAnswerId="509" CreationDate="2011-02-01T02:57:13.353" Score="7" ViewCount="3062" Body="&lt;p&gt;I have a class whose purpose is to display a comment.  I'd like to be able to instantiate it by passing a &lt;code&gt;Comment&lt;/code&gt; object if I happen to have it available, or just the values if that's what I have available at the time.  Unfortunately PHP doesn't allow overloaded constructors, so here's the workaround I came up with.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class CommentPanel extends Panel {&#xA;    //Private Constructor, called only from MakeFrom methods&#xA;    private function CommentPanel($text, $userName, $timestamp) {&#xA;        parent::Panel(0, $top, System::Auto, System::Auto);&#xA;&#xA;        // Render comment&#xA;    }&#xA;&#xA;    public static function MakeFromObject(Comment $comment) {&#xA;        return new CommentPanel($comment-&amp;gt;text, $comment-&amp;gt;User-&amp;gt;nickname, $comment-&amp;gt;last_updated_ts);&#xA;    }&#xA;&#xA;    public static function MakeFromValues($text, $userName, $timestamp) {&#xA;        return new CommentPanel($text, $userName, $timestamp);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;So here's the two methods for instantiating a &lt;code&gt;CommentPanel&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$cp = CommentPanel::MakeFromObject($comment);&#xA;// or...&#xA;$cp = CommentPanel::MakeFromValues($text, $user, $last_updated_ts);&#xA;// but not&#xA;$cp = new CommentPanel(); //Runtime error&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I'm moderately satisfied, although it's not near as intuitive as an overloaded constructor.  Any thoughts on improving this?&lt;/p&gt;&#xA;" OwnerUserId="26" LastActivityDate="2011-05-01T22:35:35.777" Title="Workaround for overloaded constructor in PHP" Tags="&lt;php&gt;&lt;constructor&gt;" AnswerCount="1" CommentCount="2" />
  <row Id="505" PostTypeId="1" CreationDate="2011-02-01T03:01:24.973" Score="23" ViewCount="12408" Body="&lt;p&gt;I intend this to be a general question on writing an effective set of test cases for a controller action.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I include the following ingredients:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Ruby on Rails&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;RSpec:&lt;/strong&gt; A testing framework. I considered doing a vanilla Rails question, but I personally use RSpec, and I feel many other folks do too. The principles that come out of this discussion should be portable to other testing frameworks, though.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Will Paginate:&lt;/strong&gt; I include this to provide an example of code whose implementation is blackboxed to the controller. This is an extreme example of just using the model methods like &lt;code&gt;@programs = Program.all&lt;/code&gt;. I chose to go this route to incorporate an additional factor for discussion, and to demonstrate that the same principles apply whether using external application code (e.g., model code) or an external plugin.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;There seems to be a lack, given my humble Google Fu, of style guides for RSpec testing at this level, so it is my hope that, on top of me improving my code, this can become a useful guide for my fellow travelers.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example purposes, let's say I currently have in my controller the following:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class ProgramssController &amp;lt; ApplicationController&#xA;  def index&#xA;    @programs = Program.paginate :page =&amp;gt; params[:page], :per_page =&amp;gt; params[:per_page] || 30&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;&lt;strong&gt;Sidebar:&lt;/strong&gt; For those unfamiliar with &lt;code&gt;will_paginate&lt;/code&gt;, it tacks onto a ActiveRecord Relation (&lt;code&gt;all&lt;/code&gt;, &lt;code&gt;first&lt;/code&gt;, &lt;code&gt;count&lt;/code&gt;, &lt;code&gt;to_a&lt;/code&gt; are other examples of such methods) and delivers a paginated result set of class &lt;code&gt;WillPaginate::Collection&lt;/code&gt;, which &lt;em&gt;basically&lt;/em&gt; behaves like an array with a few helpful member methods.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;What are the effective tests I should run in this situation? Using RSpec, this is what I've conceived at the moment:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;describe ProgramsController do&#xA;  def mock_program(stubs={})&#xA;    @mock_program ||= mock_unique_program(stubs)&#xA;  end&#xA;&#xA;  def mock_unique_program(stubs={})&#xA;    mock_model(Program).as_null_object.tap do |program|&#xA;      program.stub(stubs) unless stubs.empty?&#xA;    end&#xA;  end&#xA;&#xA;  describe &quot;GET index&quot; do&#xA;    it &quot;assigns @programs&quot; do&#xA;      Program.stub(:paginate) { [mock_program] }&#xA;      get :index&#xA;      response.should be_success&#xA;      assigns(:programs).should == [mock_program]&#xA;    end&#xA;&#xA;    it &quot;defaults to showing 30 results per page&quot; do&#xA;      Program.should_receive(:paginate).with(:page =&amp;gt; nil, :per_page =&amp;gt; 30) do&#xA;        [mock_program]&#xA;      end&#xA;      get :index&#xA;      response.should be_success&#xA;      assigns(:programs).should == [mock_program]&#xA;    end&#xA;&#xA;    it &quot;passes on the page number to will_paginate&quot; do&#xA;      Program.should_receive(:paginate).with(:page =&amp;gt; '3', :per_page =&amp;gt; 30) do&#xA;        [mock_program]&#xA;      end&#xA;      get :index, 'page' =&amp;gt; '3'&#xA;      response.should be_success&#xA;      assigns(:programs).should == [mock_program]&#xA;    end&#xA;&#xA;    it &quot;passes on the per_page to will_paginate&quot; do&#xA;      Program.should_receive(:paginate).with(:page =&amp;gt; nil, :per_page =&amp;gt; '15') do&#xA;        [mock_program]&#xA;      end&#xA;      get :index, 'per_page' =&amp;gt; '15'&#xA;      response.should be_success&#xA;      assigns(:programs).should == [mock_program]&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I wrote this with the following principles in mind:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Don't test non-controller code:&lt;/strong&gt; I don't delve into the actual workings of &lt;code&gt;will_paginate&lt;/code&gt; at all and abstract away from its results.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Test all controller code:&lt;/strong&gt; The controller does four things: assigns &lt;code&gt;@programs&lt;/code&gt;, passes on the &lt;code&gt;page&lt;/code&gt; parameter to the model, passes on the &lt;code&gt;per_page&lt;/code&gt; parameter to the model, and defaults the &lt;code&gt;per_page&lt;/code&gt; parameter to 30, and nothing else. Each of these things are tested.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;No false positives:&lt;/strong&gt; If you take away the method body of &lt;code&gt;index&lt;/code&gt;, all of the test will fail. &lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Mock when possible:&lt;/strong&gt; There are no database accesses (other ApplicationController logic notwithstanding)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;My concerns, and hence the reason I post it here:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Am I being too pedantic?&lt;/strong&gt; I understand that TDD is rooted in rigorous testing. Indeed, if this controller acts as a part of a wider application, and say, it stopped passing on &lt;code&gt;page&lt;/code&gt;, the resulting behaviour would be undesirable. Nevertheless, is it appropriate to test such elementary code with such rigor?&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Am I testing things I shouldn't be? Am I not testing things I should?&lt;/strong&gt; It think I've done an okay job at this, if anything veering on the side of testing too much.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Are the &lt;code&gt;will_paginate&lt;/code&gt; mocks appropriate?&lt;/strong&gt; You see, for instance, with the final three tests, I return an array containing only one program, whereas &lt;code&gt;will_paginate&lt;/code&gt; is quite liable to return more. While actually delving this behaviour by adding, say 31 records, may (?) violate modular code and testing, I am a bit uneasy returning an unrealistic or restrictive mock result.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Can the test code be simplified?&lt;/strong&gt; This seems quite long to test one line of controller code. While I fully appreciate the awesomeness of TDD, this seems like it would bog me down. While writing these test cases were not too intensive on the brain and basically amounted to a fun vim drill, I feel that, all things considered, writing this set of tests may cost more time than it saves, even in the long run.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Is this a good set of tests?&lt;/strong&gt; A general question.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="1273" LastEditorUserId="22222" LastEditDate="2015-03-06T07:07:48.860" LastActivityDate="2015-03-06T07:10:54.963" Title="Unit-testing a controller in Ruby on Rails" Tags="&lt;ruby&gt;&lt;unit-testing&gt;&lt;ruby-on-rails&gt;&lt;controller&gt;" AnswerCount="4" CommentCount="0" FavoriteCount="17" />
  <row Id="507" PostTypeId="1" AcceptedAnswerId="510" CreationDate="2011-02-01T04:39:28.163" Score="4" ViewCount="200" Body="&lt;p&gt;Please review this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;from os import path, remove&#xA;&#xA;try:&#xA;    video = Video.objects.get(id=original_video_id)&#xA;except ObjectDoesNotExist:&#xA;    return False&#xA;&#xA;convert_command = ['ffmpeg', '-i', input_file, '-acodec', &#xA;       'libmp3lame', '-y', '-ac', '2', '-ar', &#xA;       '44100', '-aq', '5', '-qscale', '10', &#xA;       '%s.flv' % output_file]                     &#xA;&#xA;convert_system_call = subprocess.Popen(&#xA;    convert_command,&#xA;    stderr=subprocess.STDOUT,&#xA;    stdout=subprocess.PIPE&#xA;)&#xA;&#xA;logger.debug(convert_system_call.stdout.read())&#xA;&#xA;try:&#xA;&#xA;    f = open('%s.flv' % output_file, 'r')&#xA;    filecontent = ContentFile(f.read())&#xA;    video.converted_video.save('%s.flv' % output_file, &#xA;                     filecontent, &#xA;                     save=True)&#xA;    f.close()&#xA;&#xA;    remove('%s.flv' % output_file)&#xA;&#xA;    video.save()&#xA;&#xA;    return True&#xA;except:&#xA;    return False&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1278" LastEditorUserId="22222" LastEditDate="2014-05-04T18:57:38.593" LastActivityDate="2014-05-04T18:57:38.593" Title="Converting an already-uploaded file and saving it to a model's FileField" Tags="&lt;python&gt;&lt;converting&gt;&lt;django&gt;" AnswerCount="2" CommentCount="0" />
  <row Id="508" PostTypeId="2" ParentId="496" CreationDate="2011-02-01T04:40:19.223" Score="5" Body="&lt;p&gt;If you don't mind recursion (although C programmers generally DO mind), then you can do:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;node* delete_item(node* curr, int x) {&#xA;    node* next;&#xA;    if (curr == NULL) { // Found the tail&#xA;        printf(&quot;not found\n&quot;);&#xA;        return NULL;&#xA;    } else if (curr-&amp;gt;x == x) { // Found one to delete&#xA;        next = curr-&amp;gt;next;&#xA;        free(curr);&#xA;        return next;&#xA;    } else { // Just keep going&#xA;        curr-&amp;gt;next = delete_item(curr-&amp;gt;next, x);&#xA;        return curr;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;then, in main, you should do&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;head = delete_item(head, 7);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This uses the C stack to hold the &quot;backwards look&quot; in the list.&lt;/p&gt;&#xA;" OwnerUserId="1277" LastActivityDate="2011-02-01T04:40:19.223" CommentCount="4" />
  <row Id="509" PostTypeId="2" ParentId="504" CreationDate="2011-02-01T06:24:10.867" Score="8" Body="&lt;p&gt;Given that php allows optional parameters and doesn't require type checking of parameters that are passed in, you can sort of &quot;fake&quot; an overloaded constructor.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;something like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class CommentPanel extends Panel {&#xA;    public function __construct($text_or_comment, $username=null, $timestamp=null) {&#xA;        if (is_string($text_or_comment) {&#xA;            $this-&amp;gt;textConstructor($text_or_comment, $username, $timestamp);&#xA;        }&#xA;        else { // assume that it's a comment since it's not a string ... there are better ways to handle this though&#xA;            $this-&amp;gt;commentConstructor($text_or_comment);&#xA;        }&#xA;    }&#xA;&#xA;    private function textConstructor($text, username, $timestampe) { /* . . . */ }&#xA;    private function commentConstructor(Comment $comment) { /* . . . */ }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This method will allow for a more consistent API and one that is perhaps more familiar to Java and C++ developers.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also, I'm not positive which version of PHP you're targeting, but I believe in the current version, uses __construct instead of the class name as the constructor. I'm not sure if this is preferred but the documentation does say that it checks for __construct first and then the class name style constructor, so I would guess that using __construct() instead of CommentPanel() would reduce runtime ever so slightly. I'm not 100% sure on that though, that's just my understanding. Please correct me if I'm wrong :)&lt;/p&gt;&#xA;" OwnerUserId="561" LastEditorUserId="561" LastEditDate="2011-02-07T02:40:06.047" LastActivityDate="2011-02-07T02:40:06.047" CommentCount="1" />
  <row Id="510" PostTypeId="2" ParentId="507" CreationDate="2011-02-01T06:29:50.330" Score="4" Body="&lt;p&gt;Clean, easy to understand code. However:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Never hide errors with a bare except. Change &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;try:&#xA;    ...&#xA;except:&#xA;    return False&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;into &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;try:&#xA;    ...&#xA;except (IOError, AnyOther, ExceptionThat, YouExpect):&#xA;    logging.exception(&quot;File conversion failed&quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Also, unless you need to support Python 2.4 or earlier, you want to use the files context manager support:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;with open('%s.flv' % output_file, 'r') as f:&#xA;    filecontent = ContentFile(f.read())&#xA;    video.converted_video.save('%s.flv' % output_file, &#xA;                               filecontent, &#xA;                               save=True)&#xA;remove('%s.flv' % output_file)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;That way the file will be closed immediately after exiting the &lt;code&gt;with&lt;/code&gt;-block, even if there is an error. For Python 2.5 you would have to &lt;code&gt;from __future__ import with_statement&lt;/code&gt; as well.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You might also want to look at using a temporary file from &lt;code&gt;tempfile&lt;/code&gt; for the output file. &lt;/p&gt;&#xA;" OwnerUserId="1235" LastEditorUserId="1235" LastEditDate="2011-02-01T09:00:22.810" LastActivityDate="2011-02-01T09:00:22.810" CommentCount="3" />
  <row Id="513" PostTypeId="1" AcceptedAnswerId="515" CreationDate="2011-02-01T07:58:30.563" Score="15" ViewCount="1298" Body="&lt;p&gt;I have 2 functions used for parsing a house number and I think these can both be improved.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Any suggestions?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;input:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;pre&gt;&lt;code&gt;45a - 47b&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;  &#xA;  &lt;p&gt;or&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;45a bis 47b&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;output:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;pre&gt;&lt;code&gt;45,a,47,b&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public static string[] HausnummerAufteilen(string hausNummer)&#xA;    {&#xA;        string[] result = new string[4];&#xA;        string[] resultVon = new string[2];&#xA;        string[] resultBis = new string[2];&#xA;&#xA;        resultVon[0]  = string.Empty;&#xA;        resultVon[1]  = string.Empty;&#xA;        resultBis[0]  = string.Empty;&#xA;        resultBis[1]  = string.Empty;           &#xA;&#xA;        int pos1, pos2;&#xA;        pos2 = 0;&#xA;        pos1 = hausNummer.IndexOf(&quot;bis&quot;);&#xA;        if (pos1 != -1)&#xA;        { &#xA;            pos2 = pos1 + 3;&#xA;        }&#xA;        else&#xA;        {&#xA;            pos1 = hausNummer.IndexOf(&quot;-&quot;);&#xA;            if (pos1 != -1)&#xA;                pos2 = pos1 + 1;&#xA;        }&#xA;&#xA;        if (pos1 &amp;gt; 0)&#xA;        {&#xA;            resultVon = HausnummerBuchst(hausNummer.Substring(0, pos1).Trim());&#xA;            resultBis = HausnummerBuchst(hausNummer.Substring(pos2, hausNummer.Length - pos2).Trim());&#xA;        }&#xA;        else&#xA;            resultVon = HausnummerBuchst(hausNummer);&#xA;&#xA;&#xA;        List&amp;lt;string&amp;gt; list = new List&amp;lt;string&amp;gt;();&#xA;        list.AddRange(resultVon);&#xA;        list.AddRange(resultBis);&#xA;        result = list.ToArray();&#xA;&#xA;&#xA;        return result;&#xA;    }&#xA;&#xA;    public static string[] HausnummerBuchst(string hauseNummer)&#xA;    {&#xA;        string[] result = new string[2];&#xA;&#xA;        result[0] = string.Empty;&#xA;        result[1] = string.Empty;&#xA;&#xA;        int iPos;&#xA;        int testInt;&#xA;        bool bFound = false;&#xA;&#xA;        for (iPos = 0; iPos &amp;lt; hauseNummer.Length; iPos++)&#xA;        {&#xA;&#xA;            if (!int.TryParse(hauseNummer[iPos].ToString() ,out testInt))&#xA;            {&#xA;                bFound = true;&#xA;                break;&#xA;            }&#xA;        }&#xA;&#xA;        if (bFound)&#xA;        {&#xA;            result[0] = hauseNummer.Substring(0, iPos).Trim();&#xA;            result[1] = hauseNummer.Substring(iPos, hauseNummer.Length - iPos).Trim();&#xA;        }&#xA;        else&#xA;            result[0] = hauseNummer;            &#xA;&#xA;        return result;&#xA;&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1283" LastEditorUserId="31503" LastEditDate="2014-12-15T22:37:49.853" LastActivityDate="2014-12-15T22:37:49.853" Title="House number parsing" Tags="&lt;c#&gt;&lt;parsing&gt;" AnswerCount="1" CommentCount="0" FavoriteCount="2" />
  <row Id="514" PostTypeId="1" AcceptedAnswerId="524" CreationDate="2011-02-01T09:36:07.163" Score="0" ViewCount="770" Body="&lt;pre&gt;&lt;code&gt;&amp;lt;% @descriptions.each_with_index do |description, i| %&amp;gt;&#xA;  &amp;lt;% description.tale2.each do |tax_ref| %&amp;gt;            &#xA;    &amp;lt;% if condition %&amp;gt;              &#xA;      &amp;lt;% if condition %&amp;gt;&#xA;        &amp;lt;% if condition %&amp;gt;                  &#xA;          &amp;lt;%= $text_first_describe%&amp;gt; &amp;lt;%= $paren_author_yr %&amp;gt;&#xA;             &amp;lt;% ref_sp_uniq.each_with_index do |ref, i| %&amp;gt;&#xA;               &amp;lt;% if ref == tax_ref.ref_wo_brace%&amp;gt;&#xA;                  &amp;lt;% execution %&amp;gt;                      &#xA;               &amp;lt;% elsif i == (ref_sp_uniq.size - 1)%&amp;gt;&#xA;                  &amp;lt;%# @ref_desc = &quot;#{@ref_desc_numb}. #{tax_ref.ref_wo_brace}&quot; %&amp;gt;&#xA;               &amp;lt;% end %&amp;gt;&#xA;             &amp;lt;% end %&amp;gt;&#xA;          &amp;lt;% if condition %&amp;gt;&#xA;                  &amp;lt;% execution %&amp;gt;                      &#xA;          &amp;lt;% elsif condition %&amp;gt;&#xA;            &amp;lt;% execution %&amp;gt;&#xA;          &amp;lt;% elsif taxon_name.emend_author_year %&amp;gt;                    &#xA;             &amp;lt;%= print %&amp;gt;&#xA;          &amp;lt;% else %&amp;gt;                    &#xA;             &amp;lt;%= print %&amp;gt;                    &#xA;          &amp;lt;% end %&amp;gt;&#xA;        &amp;lt;% end %&amp;gt;&#xA;      &amp;lt;% else %&amp;gt;&#xA;        &amp;lt;% if condition %&amp;gt;&#xA;          &amp;lt;%= print %&amp;gt;&#xA;          &amp;lt;% ref_sp_uniq.each_with_index do |ref, i| %&amp;gt;&#xA;             &amp;lt;% if condition %&amp;gt;&#xA;                &amp;lt;% execution %&amp;gt;                      &#xA;             &amp;lt;% elsif condition %&amp;gt;&#xA;                  &amp;lt;% execution %&amp;gt;                      &#xA;             &amp;lt;% end %&amp;gt;&#xA;          &amp;lt;% end %&amp;gt;&#xA;          &amp;lt;% if condition %&amp;gt;&#xA;            &amp;lt;% execution %&amp;gt;                      &#xA;          &amp;lt;% elsif condition %&amp;gt;&#xA;            &amp;lt;% execution %&amp;gt;                      &#xA;          &amp;lt;% elsif condition %&amp;gt;&#xA;            &amp;lt;% execution %&amp;gt;                      &#xA;          &amp;lt;% else %&amp;gt;&#xA;            &amp;lt;% execution %&amp;gt;                      &#xA;          &amp;lt;% end %&amp;gt;&#xA;        &amp;lt;% end %&amp;gt;&#xA;      &amp;lt;% end %&amp;gt;&#xA;    &amp;lt;% end %&amp;gt;&#xA;  &amp;lt;% end %&amp;gt;        &#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1287" LastEditorUserId="18427" LastEditDate="2013-11-24T04:42:08.700" LastActivityDate="2013-11-24T04:42:08.700" Title="How to reduce number of hierarchical 'if statements'" Tags="&lt;ruby&gt;&lt;ruby-on-rails&gt;" AnswerCount="4" CommentCount="7" ClosedDate="2013-11-24T11:01:10.913" />
  <row Id="515" PostTypeId="2" ParentId="513" CreationDate="2011-02-01T09:56:09.503" Score="22" Body="&lt;p&gt;Anytime I encounter a method that's only doing read-only parsing of strings and I see it's using &lt;code&gt;String.IndexOf()&lt;/code&gt; and &lt;em&gt;positions&lt;/em&gt;, it leaps out at me like a gigantic code smell.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Sometimes upon examination it turns out to be a legitimate and wise usage. However very often the programmer is manually splitting strings and looping through parts of the string. In other words they are doing exactly what &lt;code&gt;String.Split()&lt;/code&gt; and &lt;code&gt;foreach&lt;/code&gt; loops would offer them, but doing it the longer and less readable way.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is one of those cases.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This may be just my personal taste in code. In any case, I can show you how I would tackle this problem using &lt;code&gt;foreach&lt;/code&gt; and &lt;code&gt;Split()&lt;/code&gt;, which I believe would be a great improvement to your methods. Except for this difference I think we might have taken comparable approaches.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Variable names&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;A lot of your variables are named with very little descriptiveness. You may understand that variables are named so that someone maintaining or reading the code (like me) can understand what's going on, but you could do much better in this department.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;result&lt;/code&gt;: You use this word many times in your variable names. The problem is this name is completely useless to me. I can see it is the result of &lt;em&gt;something&lt;/em&gt; (variously a function, a loop or some other process) but beyond that you might as well just call the variable &lt;code&gt;foo&lt;/code&gt; or &lt;code&gt;bar&lt;/code&gt;. &lt;code&gt;hauseNummerVon&lt;/code&gt; and &lt;code&gt;hauseNummerBin&lt;/code&gt; are far more understandable than &lt;code&gt;resultVon&lt;/code&gt; and &lt;code&gt;resultBin&lt;/code&gt; - I now know exactly what it is; it's the &lt;em&gt;from&lt;/em&gt; house number and the &lt;em&gt;to&lt;/em&gt; house number.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;For either &lt;code&gt;result[]&lt;/code&gt; array, I am left with nothing and I would have to read all of the code before I understood what they contained. This is a little backwards - I should know what the variable contains, &lt;em&gt;then&lt;/em&gt; be able to read the code - with descriptive variable names giving me a greater understanding of what's going on.&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;bFound&lt;/code&gt;: Don't shorten your variable names like this. I'm left wondering: What is a &lt;code&gt;b&lt;/code&gt;? What does it mean if it's found? Maybe this would be more recognisable to a German reader, but even so, expanding &lt;code&gt;b&lt;/code&gt; to a word to say exactly what's found would do wonders for readability.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;pos1&lt;/code&gt;, &lt;code&gt;pos2&lt;/code&gt;: &lt;code&gt;SeparatorPosition&lt;/code&gt; and &lt;code&gt;SeparatorEnd&lt;/code&gt; would have been more descriptive. Better yet these variables are entirely unnecessary if you just use &lt;code&gt;String.Split()&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;h2&gt;My approach&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;As I mentioned above, as oppose to editing your methods, I've written from scratch how I'd tackle this problem.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;ParseHouseNumberRange&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;This is the entry method. You feed this method a string such as &quot;20a bis 21c&quot;. It splits it up on the &quot;bis&quot; or the &quot;-&quot; (defined in the &lt;code&gt;separators&lt;/code&gt; array) in order to produce smaller chunks of the original string.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Each of these chunks is passed to  then passes each of the results (in this case, &quot;20a &quot; and &quot; 21c&quot;, spaces included) over to the non-public method &lt;code&gt;ParseHouseNumber&lt;/code&gt; below. &lt;code&gt;ParseHouseNumber&lt;/code&gt; will split these chunks up further and this method combines all the results into a single array which is returned.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Given &quot;20a bis 21c&quot; or similar, it returns an array: &lt;code&gt;20, a, 21, c&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public string[] ParseHouseNumberRange(string houseNumberRange)&#xA;{&#xA;    string[] separators = new string[] {&quot;bis&quot;, &quot;-&quot;};&#xA;    string[] houseNumbers = houseNumberRange.Split(separators,&#xA;        StringSplitOptions.RemoveEmptyEntries);&#xA;&#xA;    List&amp;lt;string&amp;gt; parsedList = new List&amp;lt;string&amp;gt;();&#xA;&#xA;    foreach (string houseNumber in houseNumbers)&#xA;    {&#xA;        parsedList.AddRange(ParseHouseNumber(houseNumber));&#xA;    }&#xA;&#xA;    return parsedList.ToArray();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3&gt;ParseHouseNumber&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;This method takes a segment of an address from the method above, such as &quot;20a &quot;. After trimming out any spaces, it walks through the string character by character, plucking out digits and letters and sorting them into their own individual sections e.g. &quot;1c4ad3&quot; would be split into the sections &lt;code&gt;1, c, 4, ad, 3&lt;/code&gt;. Any non-digit non-letter characters are ignored.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Once all sections have been sorted out from the string provided to it, it returns those sections in the form of an array.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public string[] ParseHouseNumber(string houseNumber)&#xA;{&#xA;    bool firstRun = true;&#xA;    bool alphabeticMode = false; // set on first run&#xA;&#xA;    houseNumber = houseNumber.Trim();&#xA;&#xA;    List&amp;lt;string&amp;gt; sections = new List&amp;lt;string&amp;gt;();&#xA;    string currentSection = &quot;&quot;;&#xA;&#xA;    foreach (char c in houseNumber)&#xA;    {&#xA;        bool isLetter = Char.IsLetter(c);&#xA;        bool isDigit = Char.IsDigit(c);&#xA;&#xA;        if (!(isDigit || isLetter)) continue;&#xA;&#xA;        // If we've switched character type, then a section's finished.&#xA;        if (firstRun)&#xA;        {&#xA;            alphabeticMode = isLetter;&#xA;            firstRun = false;&#xA;        }&#xA;        else if ((isLetter &amp;amp;&amp;amp; !alphabeticMode)&#xA;            || (isDigit &amp;amp;&amp;amp; alphabeticMode))&#xA;        {&#xA;            sections.Add(currentSection);&#xA;            currentSection = &quot;&quot;;&#xA;            alphabeticMode = !alphabeticMode;&#xA;        }&#xA;&#xA;        currentSection += c;&#xA;    }&#xA;&#xA;    if (currentSection != &quot;&quot;) sections.Add(currentSection);&#xA;&#xA;    return sections.ToArray();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="109" LastEditorUserId="109" LastEditDate="2011-02-01T10:05:04.003" LastActivityDate="2011-02-01T10:05:04.003" CommentCount="0" />
  <row Id="519" PostTypeId="1" AcceptedAnswerId="521" CreationDate="2011-02-01T13:25:51.633" Score="14" ViewCount="276" Body="&lt;p&gt;I need a code review for &lt;em&gt;best practices&lt;/em&gt; and &lt;em&gt;code correctness&lt;/em&gt; of the following piece of code. &lt;code&gt;run&lt;/code&gt; executes a program and validates in output. If the output is valid status can be found in &lt;code&gt;VALID_SOLUTIONS&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;elapsed = None&#xA;tmpdir = tempfile.mkdtemp(prefix='structure-%s-' % os.path.basename(instance))&#xA;try:&#xA;  for r in range(options.repeat):&#xA;    run_returncode, run_status, run_elapsed = run(&#xA;        r, path, program, tmpdir, options.timeout, options.satisfiable)&#xA;    if run_status not in VALID_SOLUTIONS:&#xA;      returncode, status, elapsed = run_returncode, run_status, None&#xA;      break&#xA;&#xA;    if r == 0:&#xA;      # Set the expected results&#xA;      returncode, status = run_returncode, run_status&#xA;      elapsed = [run_elapsed]&#xA;    else:&#xA;      if returncode != run_returncode or status != run_status:&#xA;        # Results don't match&#xA;        returncode, status, elapsed = None, 'inconsistent_results', None&#xA;        break&#xA;      else:&#xA;        # Extra set&#xA;        elapsed.append(run_elapsed)&#xA;except Exception as e:&#xA;  # Unexpected error in script itself&#xA;  print(e, file=sys.stderr)&#xA;  #traceback.print_exc()&#xA;  status = 'error'&#xA;except KeyboardInterrupt as e:&#xA;  print('interrupted', file=sys.stderr)&#xA;  returncode, status, elapsed = None, 'interrupted', None&#xA;finally:&#xA;  if status in VALID_SOLUTIONS:&#xA;    avg = sum(elapsed) / len(elapsed)&#xA;    std = (sum((e - avg)**2 for e in elapsed) / len(elapsed)) ** 0.5&#xA;    ci = 1.96 * std / (len(elapsed) ** 0.5)&#xA;    print(instance, returncode, status, avg, ci)&#xA;  else:&#xA;    print(instance, returncode, status, None, None)&#xA;&#xA;  sys.stdout.flush()&#xA;  exit(int(status not in ['interrupted'] + VALID_SOLUTIONS))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1201" LastEditorUserId="9357" LastEditDate="2014-12-27T21:35:09.340" LastActivityDate="2014-12-27T21:35:09.340" Title="Executing a program with a temporary directory and measuring the running time" Tags="&lt;python&gt;&lt;file&gt;&lt;error-handling&gt;&lt;timer&gt;" AnswerCount="2" CommentCount="0" FavoriteCount="1" />
  <row Id="520" PostTypeId="2" ParentId="505" CreationDate="2011-02-01T13:44:06.863" Score="3" Body="&lt;p&gt;You've coded by your principles pretty reasonably. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;My only real suggestion is to have just one assertion per test, including any &lt;code&gt;#should_receive&lt;/code&gt; or &lt;code&gt;#should=&lt;/code&gt; statements. The intention of most of your tests seems to be to test one single unit of functionality, so there is no need to repeat assertions, particularly when they are dependent. It will help focus more clearly on the aim of the individual tests, reducing their volume and heightening the readability. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;As far as RSpec style, there are a few idioms I have seen more commonly used:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;using &lt;code&gt;#and_return&lt;/code&gt; in place of returning values from blocks&lt;/li&gt;&#xA;&lt;li&gt;using &lt;code&gt;mock_model&lt;/code&gt; &lt;/li&gt;&#xA;&lt;li&gt;doing setup in &lt;code&gt;before&lt;/code&gt; blocks&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Overall, I would likely have written it like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;describe ProgramsController do&#xA;  before(:each) do&#xA;    @mock_programs = [mock_model(Program)]&#xA;    Program.stub(:paginate).and_return(@mock_programs)&#xA;  end&#xA;&#xA;  describe &quot;GET index&quot; do&#xA;    it &quot;succeeds&quot; do&#xA;      get :index&#xA;&#xA;      response.should be_success&#xA;    end&#xA;&#xA;    it &quot;renders the index template&quot; do&#xA;      get :index&#xA;&#xA;      response.should render_template(&quot;programs/index&quot;)&#xA;    end&#xA;&#xA;    it &quot;assigns @programs&quot; do&#xA;      get :index&#xA;&#xA;      assigns(:programs).should == [mock_program]&#xA;    end&#xA;&#xA;    it &quot;defaults to showing 30 results per page&quot; do&#xA;      Program.should_receive(:paginate).with(:page =&amp;gt; nil, :per_page =&amp;gt; 30).and_return(@mock_programs)&#xA;&#xA;      get :index&#xA;    end&#xA;&#xA;    it &quot;passes on the page number to will_paginate&quot; do&#xA;      Program.should_receive(:paginate).with(:page =&amp;gt; '3', :per_page =&amp;gt; 30).and_return(@mock_programs)&#xA;&#xA;      get :index, 'page' =&amp;gt; '3'&#xA;    end&#xA;&#xA;    it &quot;passes on the per_page to will_paginate&quot; do&#xA;      Program.should_receive(:paginate).with(:page =&amp;gt; nil, :per_page =&amp;gt; '15').and_return(@mock_programs)&#xA;&#xA;      get :index, 'per_page' =&amp;gt; '15'&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I think, for the limited scope which you've provided, this is a good set of tests. You may be able to skip the test for basic success since all your other tests are dependent on a successful action. I personally can't speak too deeply about testing will_paginate, since I do much the same when testing the use of it from the controller. If it's tested well in the model that uses it, you've covered the basic behavior.&lt;/p&gt;&#xA;" OwnerUserId="1301" LastEditorUserId="1301" LastEditDate="2011-02-10T19:42:14.040" LastActivityDate="2011-02-10T19:42:14.040" CommentCount="3" />
  <row Id="521" PostTypeId="2" ParentId="519" CreationDate="2011-02-01T13:44:42.763" Score="12" Body="&lt;p&gt;Well, firstly, don't be afraid of empty lines. This code is quite hard to read.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Secondly, functions is good invention. ;) That code as it is now is a bare piece of code, with no indication of where most of the parameters come from, and it seems that the acceptable solutions is a global, as you have capitalized it? That doesn't make much sense to me.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Just as you have a function called run() to run the program, it would make sense to have a function to run it multiple times, with the tests for that you have.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'm also not sure why you trap KeyboardInterrupt, without seeming to actually do anything with it, except setting the status, and then testing the status. You could just do exit directly from that exception handler, that would be clearer.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Otherwise it seems fine. Feedback on correctness is impossible when your code isn't a running example. But then again, tests generally work better than code reviews there, although they are not exclusive.&lt;/p&gt;&#xA;" OwnerUserId="1235" LastActivityDate="2011-02-01T13:44:42.763" CommentCount="2" />
  <row Id="522" PostTypeId="1" CreationDate="2011-02-01T14:22:20.707" Score="4" ViewCount="1431" Body="&lt;p&gt;I'm building an ASP.NET MVC app and would like some feedback for my way to query/execute statements to the ORM.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'm using Fluent NHibernate, and have mixed the UoW provided by NHibernate with a Command pattern.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;ICommand.cs&lt;/strong&gt; (Core layer)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;using NHibernate;&#xA;&#xA;namespace MyDemon.Core.Commands&#xA;{&#xA;    public interface ICommand&amp;lt;out TResult&amp;gt;&#xA;    {&#xA;        TResult Execute(ISession session);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;ISessionExtensions.cs&lt;/strong&gt; (Core layer)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;using NHibernate;&#xA;&#xA;namespace MyDemon.Core.Commands&#xA;{&#xA;    public static class ISessionExtensions&#xA;    {&#xA;        public static TResult Execute&amp;lt;TResult&amp;gt;(this ISession session, ICommand&amp;lt;TResult&amp;gt; unitOfWork)&#xA;        {&#xA;            return unitOfWork.Execute(session);&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;GetUserById.cs&lt;/strong&gt; (Core layer)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;using NHibernate;&#xA;&#xA;namespace MyDemon.Core.Commands.User&#xA;{&#xA;    using Entities;&#xA;&#xA;    public class GetUserById : ICommand&amp;lt;User&amp;gt;&#xA;    {&#xA;        public int UserId { get; set; }&#xA;&#xA;        public GetUserById(int userId)&#xA;        {&#xA;            UserId = userId;&#xA;        }&#xA;&#xA;        #region Implementation of IUnitOfWork&amp;lt;out User&amp;gt;&#xA;&#xA;        public User Execute(ISession session)&#xA;        {&#xA;            return session.Get&amp;lt;User&amp;gt;(UserId);&#xA;        }&#xA;&#xA;        #endregion&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;AccountController.cs&lt;/strong&gt; (Web layer)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;[AjaxOnly]&#xA;[Authorize]&#xA;public ActionResult Details(int id)&#xA;{&#xA;    User userToGet = _session.Execute(new GetUserById(id));&#xA;&#xA;    if (userToGet == null)&#xA;    {&#xA;        return PartialView(&quot;Partials/UserNotFound&quot;);&#xA;    }&#xA;&#xA;    DetailsUserViewModel userToViewModel = Mapper.Map&amp;lt;User, DetailsUserViewModel&amp;gt;(userToGet);&#xA;&#xA;    return PartialView(&quot;Partials/Details&quot;, userToViewModel);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;What do you think? A clever design, or just another &quot;too-much code&quot; approach?&lt;/p&gt;&#xA;" OwnerUserId="1303" LastEditorUserId="22222" LastEditDate="2016-07-01T21:49:38.837" LastActivityDate="2016-07-01T21:49:38.837" Title="NHibernate (UoW) + cCommand pattern" Tags="&lt;c#&gt;&lt;asp.net&gt;" AnswerCount="1" CommentCount="0" FavoriteCount="2" />
  <row Id="523" PostTypeId="2" ParentId="519" CreationDate="2011-02-01T14:24:31.153" Score="5" Body="&lt;p&gt;Comments. Well written code tells you how a problem is being solved. Well written comments tell you &lt;em&gt;what&lt;/em&gt; problem is being solved. Great comments tell you what assumptions the programmer is making about the data going in and coming out.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In the finally clause: You have a magic constant. Best practice is that you declare constants with descriptive variables names.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The variables 'r' and 'e': no single letter variable names please, save for those that are so basic no one will get them wrong, which is basically x,y,z and t, in the context for cartesian coordinates or parameterized plots. And 'e' was an exception a few lines ago, now it's a list element?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Lastly, x**.5 is accurate, but sqrt(x) is more readable.&lt;/p&gt;&#xA;" OwnerUserId="845" LastActivityDate="2011-02-01T14:24:31.153" CommentCount="0" />
  <row Id="524" PostTypeId="2" ParentId="514" CreationDate="2011-02-01T15:14:46.230" Score="6" Body="&lt;p&gt;In general, you can try inverting the condition on your outermost if block, and work your way in.  This will often result in less nesting, eg:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if condition1&#xA;  if condition2&#xA;    #ifblock&#xA;  else&#xA;    #elseblock2&#xA;  end&#xA;else&#xA;  #elseblock&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Inside a loop, as you have your code, it would become this strcture, which is less nested:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if !condition&#xA;  #elseblock&#xA;  next&#xA;end&#xA;if !condition2&#xA;  #elseblock2&#xA;  next&#xA;end&#xA;#ifblock&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1304" LastActivityDate="2011-02-01T15:14:46.230" CommentCount="0" />
  <row Id="525" PostTypeId="2" ParentId="507" CreationDate="2011-02-01T15:38:25.913" Score="2" Body="&lt;p&gt;In addition to the points that Lennart made, there's just one minor thing I'd like to add:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You repeat the expression &lt;code&gt;'%s.flv' % output_file&lt;/code&gt; four times in your code. You might want to store this in a variable like &lt;code&gt;filename = '%s.flv' % output_file&lt;/code&gt;. This way there's less repetition and if you ever want to change the target file format, all you'll have to change are the &lt;code&gt;filename&lt;/code&gt; and &lt;code&gt;convert_command&lt;/code&gt; variables.&lt;/p&gt;&#xA;" OwnerUserId="128" LastActivityDate="2011-02-01T15:38:25.913" CommentCount="2" />
  <row Id="528" PostTypeId="2" ParentId="82" CreationDate="2011-02-01T21:08:00.120" Score="2" Body="&lt;p&gt;Alternate solution without the overhead of the array_chunk call. (Don't get me wrong, I love array_chunk and use it for a lot of things, but this isn't one where it's needed.)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$array = getData(...);&#xA;$n = 5; //or whatever you want to chunk into&#xA;echo &quot;&amp;lt;div&amp;gt;&quot;; //always open one&#xA;$lcv = 1; // loop count variable&#xA;foreach ($array as $key =&amp;gt; $val) {&#xA;    //format $key/$val as needed here...&#xA;    if ($lcv++ % $n == 0) { //every Nth item&#xA;        echo &quot;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&quot;; //close old one and open new one&#xA;    }&#xA;}&#xA;echo &quot;&amp;lt;/div&amp;gt;&quot;; //always close the last one.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Worst case here is you might have an empty &lt;code&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; block at the end if you had an exact multiple of n.... but that's not really that big a deal 99.999% of the time. :) If it is... then you can catch it like so:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$array = getData(...);&#xA;$num = count($array);&#xA;$n = 5; //or whatever you want to chunk into&#xA;echo &quot;&amp;lt;div&amp;gt;&quot;; //always open one&#xA;$lcv = 1; // loop count variable&#xA;foreach ($array as $key =&amp;gt; $val) {&#xA;    //format $key/$val as needed here...&#xA;    if ($lcv++ % $n == 0 &amp;amp;&amp;amp; $lcv &amp;lt; $num) { // every Nth item, unless we're done&#xA;        echo &quot;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&quot;; //close old one and open new one&#xA;    }&#xA;}&#xA;echo &quot;&amp;lt;/div&amp;gt;&quot;; //always close the last one.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;(Of course you can use &lt;code&gt;print&lt;/code&gt;, &lt;code&gt;echo&lt;/code&gt;, or &lt;code&gt;?&amp;gt;...&amp;lt;?&lt;/code&gt; tags... whatever you want to actually do all the output, doesn't matter.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And to be honest, I'd probably add one more case to it:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$array = getData(...);&#xA;$num = count($array);&#xA;if ($num == 0) {&#xA;    echo &quot;&amp;lt;div&amp;gt;No results?&amp;lt;/div&amp;gt;&quot;;&#xA;} else {&#xA;    $n = 5; //or whatever you want to chunk into&#xA;    echo &quot;&amp;lt;div&amp;gt;&quot;; //always open one&#xA;    $lcv = 1; // loop count variable&#xA;    foreach ($array as $key =&amp;gt; $val) {&#xA;        //format $key/$val as needed here...&#xA;        if ($lcv++ % $n == 0 &amp;amp;&amp;amp; $lcv &amp;lt; $num) { // every Nth item, unless we're done&#xA;            echo &quot;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&quot;; //close old one and open new one&#xA;        }&#xA;    }&#xA;    echo &quot;&amp;lt;/div&amp;gt;&quot;; //always close the last one.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Just to cover the case that whatever search it is didn't actually return anything.&lt;/p&gt;&#xA;" OwnerUserId="1315" LastEditorUserId="1315" LastEditDate="2011-02-01T21:13:12.017" LastActivityDate="2011-02-01T21:13:12.017" CommentCount="0" />
  <row Id="529" PostTypeId="2" ParentId="491" CreationDate="2011-02-01T21:49:11.817" Score="3" Body="&lt;p&gt;A few ways you could make it more robust.&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;In &lt;code&gt;getSelected()&lt;/code&gt;, why not call &lt;code&gt;getSelectedItem()&lt;/code&gt; instead?&lt;/li&gt;&#xA;&lt;li&gt;You tend to use &lt;code&gt;super.foo()&lt;/code&gt; instead of &lt;code&gt;foo()&lt;/code&gt;; that's usually a bad idea. Just call &lt;code&gt;foo()&lt;/code&gt;, unless you really want to avoid any override in your class.  If you always use &lt;code&gt;super.foo()&lt;/code&gt;, then if you decide you want to override &lt;code&gt;foo()&lt;/code&gt;, perhaps for some debug code, you have to go change your code everywhere from &lt;code&gt;super.foo()&lt;/code&gt; to just &lt;code&gt;foo()&lt;/code&gt; or perhaps &lt;code&gt;this.foo()&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;This code doesn't seem to enforce a consistent policy around duplicates in the spinner. If duplicates are not allowed, perhaps good to check for that at add time.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;" OwnerUserId="361" LastEditorUserId="22222" LastEditDate="2016-09-15T17:44:29.273" LastActivityDate="2016-09-15T17:44:29.273" CommentCount="0" />
  <row Id="531" PostTypeId="1" CreationDate="2011-02-01T21:56:09.690" Score="7" ViewCount="5712" Body="&lt;p&gt;I have a small solution to the following hypothetical problem:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Basic sales tax is applicable at a rate of 10% on all goods, except&#xA;  books, food, and medical products that are exempt. Import duty is an&#xA;  additional sales tax applicable on all imported goods at a rate of 5%,&#xA;  with no exemptions.&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;When I purchase items I receive a receipt which lists the name of all&#xA;  the items and their price (including tax), finishing with the total&#xA;  cost of the items, and the total amounts of sales taxes paid. The&#xA;  rounding rules for sales tax are that for a tax rate of n%, a shelf&#xA;  price of p contains (np/100 rounded up to the nearest 0.05) amount of&#xA;  sales tax. Write an application that prints out the receipt details&#xA;  for these shopping baskets.&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;&lt;strong&gt;INPUT&lt;/strong&gt;:&lt;/p&gt;&#xA;  &#xA;  &lt;ul&gt;&#xA;  &lt;li&gt;Input 1: 1 book at 12.49 1 music CD at 14.99 1 chocolate bar at 0.85&lt;/li&gt;&#xA;  &lt;li&gt;Input 2: 1 imported box of chocolates at 10.00 1 imported bottle of perfume at 47.50&lt;/li&gt;&#xA;  &lt;li&gt;Input 3: 1 imported bottle of perfume at 27.99 1 bottle of perfume at 18.99 1 packet of headache pills at 9.75 1 box of imported&#xA;  chocolates at 11.25&lt;/li&gt;&#xA;  &lt;/ul&gt;&#xA;  &#xA;  &lt;p&gt;&lt;strong&gt;OUTPUT&lt;/strong&gt;&lt;/p&gt;&#xA;  &#xA;  &lt;ul&gt;&#xA;  &lt;li&gt;Output 1: 1 book : 12.49 1 music CD: 16.49 1 chocolate bar: 0.85 Sales Taxes: 1.50 Total: 29.83&lt;/li&gt;&#xA;  &lt;li&gt;Output 2: 1 imported box of chocolates: 10.50 1 imported bottle of perfume: 54.65 Sales Taxes: 7.65 Total: 65.15&lt;/li&gt;&#xA;  &lt;li&gt;Output 3: 1 imported bottle of perfume: 32.19 1 bottle of perfume: 20.89 1 packet of headache pills: 9.75 1 imported box of chocolates: 11.85 Sales Taxes: 6.70 Total: 74.68&lt;/li&gt;&#xA;  &lt;/ul&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;I'm interested in feedback on my use of design patterns, whether there are any extensibility issues, how SOLID the code is and the style/structure of the unit tests. I'd really appreciate hearing constructive criticisms.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Full solution is available &lt;a href=&quot;https://github.com/manwood/SalesTax&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is part of the main solution:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public class SalesItem : ISalesItem&#xA;{&#xA;    private string _name;&#xA;    private decimal _price;&#xA;&#xA;    public SalesItem(string name, decimal price)&#xA;    {&#xA;        #region Parameter Checking&#xA;        if (String.IsNullOrWhiteSpace(name))&#xA;            throw new ArgumentException(&quot;name&quot;);&#xA;        if(price &amp;lt; 0)&#xA;            throw new ArgumentException(&quot;price&quot;);&#xA;        #endregion&#xA;&#xA;        this._name = name;&#xA;        this._price = price;&#xA;    }&#xA;&#xA;    #region ISalesItem Members&#xA;&#xA;    public string Name&#xA;    {&#xA;        get { return this._name; }&#xA;    }&#xA;&#xA;    public decimal GetPrice()&#xA;    {&#xA;        return this._price;&#xA;    }&#xA;&#xA;    public decimal GetSalesTax()&#xA;    {&#xA;        return 0.0M;&#xA;    }&#xA;&#xA;    public decimal GetTotal()&#xA;    {&#xA;        return this.GetPrice() + this.GetSalesTax();&#xA;    }&#xA;&#xA;    #endregion&#xA;}&#xA;&#xA;public class SalesItemTaxDecorator: ISalesItem&#xA;{&#xA;    protected ISalesItem _decoratedSalesItem;&#xA;    protected ITax _salesTax;&#xA;&#xA;    public SalesItemTaxDecorator(ISalesItem salesItem, ITax salesTax)&#xA;    {&#xA;        this._decoratedSalesItem = salesItem;&#xA;        this._salesTax = salesTax;&#xA;    }&#xA;&#xA;    #region ISalesItem Members&#xA;&#xA;    public string Name&#xA;    {&#xA;        get { return _decoratedSalesItem.Name; }&#xA;    }&#xA;&#xA;    public virtual decimal GetSalesTax()&#xA;    {&#xA;        return this._decoratedSalesItem.GetSalesTax() + _salesTax.CalculateTax(this._decoratedSalesItem.GetPrice());&#xA;    }&#xA;&#xA;    public virtual decimal GetPrice()&#xA;    {&#xA;        return this._decoratedSalesItem.GetPrice();&#xA;    }&#xA;&#xA;    public virtual decimal GetTotal()&#xA;    {&#xA;        return this.GetPrice() + this.GetSalesTax();&#xA;    }&#xA;&#xA;    #endregion&#xA;}&#xA;&#xA;public class Tax : ITax&#xA;{&#xA;    private decimal _rate;&#xA;    private IRounding _rounding;&#xA;&#xA;    public Tax(decimal rate, IRounding rounding)&#xA;    {&#xA;        this._rate = rate;&#xA;        this._rounding = rounding;&#xA;    }&#xA;&#xA;    #region ISalesTax Members&#xA;&#xA;    public decimal Rate&#xA;    {&#xA;        get { return this._rate; }&#xA;    }&#xA;&#xA;    public IRounding Rounding&#xA;    {&#xA;        get { return this._rounding; }&#xA;    }&#xA;&#xA;    public virtual decimal CalculateTax(decimal itemPrice)&#xA;    {&#xA;        decimal tempTax = itemPrice * this.Rate;&#xA;        decimal roundedTax = Rounding.Round(tempTax);&#xA;        return roundedTax;&#xA;    }&#xA;&#xA;    #endregion&#xA;}&#xA;&#xA;public static class SalesItemFactory&#xA;{&#xA;    private static readonly Rounding ROUNDING = new Rounding(0.05M);&#xA;    private static readonly ITax BASICTAX = new Tax(0.1M, ROUNDING);&#xA;    private static readonly ITax IMPORTTAX = new Tax(0.05M, ROUNDING);&#xA;&#xA;    private static readonly Dictionary&amp;lt;ItemType, ITax&amp;gt; itemTaxLookup = new Dictionary&amp;lt;ItemType, ITax&amp;gt;()&#xA;    {&#xA;        { ItemType.Basic, BASICTAX },&#xA;        { ItemType.Import, IMPORTTAX }&#xA;    };&#xA;&#xA;    public static ISalesItem GetSalesItem(string name, decimal price, ItemType itemType)&#xA;    {&#xA;        ISalesItem item = new SalesItem(name, price);&#xA;&#xA;        foreach (int flag in Enum.GetValues(typeof(ItemType)))&#xA;        {&#xA;            if ((flag &amp;amp; (int)itemType) == flag)&#xA;            {&#xA;                item = (ISalesItem)Activator.CreateInstance(typeof(SalesItemTaxDecorator), new object[] { item, itemTaxLookup[(ItemType)flag] });&#xA;            }&#xA;        }&#xA;&#xA;        return item;&#xA;    }&#xA;&#xA;    public static ISalesItem GetSalesItem(string name, decimal price)&#xA;    {&#xA;        return new SalesItem(name, price);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1318" LastEditorUserId="22222" LastEditDate="2016-06-04T21:37:51.507" LastActivityDate="2016-06-04T21:37:51.507" Title="Hypothetical SalesTax challenge" Tags="&lt;c#&gt;&lt;programming-challenge&gt;&lt;design-patterns&gt;&lt;unit-testing&gt;&lt;finance&gt;" AnswerCount="1" CommentCount="1" FavoriteCount="2" />
  <row Id="532" PostTypeId="2" ParentId="462" CreationDate="2011-02-01T22:06:06.840" Score="1" Body="&lt;ol&gt;&#xA;&lt;li&gt;I would not insist on replacing &lt;code&gt;lines.Remove&lt;/code&gt; with &lt;code&gt;lines = lines.Where(...)&lt;/code&gt;. I believe this replacement is subjective since you will still need to remove the same lines from &lt;code&gt;Dependencies.Children&lt;/code&gt; collection. Instead I would modify &lt;code&gt;foreach&lt;/code&gt; statement.  &lt;/li&gt;&#xA;&lt;li&gt;If you do not checking &lt;code&gt;test == null&lt;/code&gt; then instead of &lt;code&gt;test = svi.Tag as SourceFile&lt;/code&gt;, I would use &lt;code&gt;test = (SourceFile)svi.Tag&lt;/code&gt;. Resharper says the same.  &lt;/li&gt;&#xA;&lt;li&gt;Second nested &lt;code&gt;foreach&lt;/code&gt; is definitely a &lt;code&gt;Contains&lt;/code&gt; statement  &lt;/li&gt;&#xA;&lt;li&gt;Rename &lt;code&gt;remove&lt;/code&gt; -&gt; &lt;code&gt;linesToRemove&lt;/code&gt; since &lt;code&gt;remove&lt;/code&gt; is not a noun&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;IEnumerable&amp;lt;&amp;gt;&lt;/code&gt; for method parameter, not &lt;code&gt;List&amp;lt;&amp;gt;&lt;/code&gt;  &lt;/li&gt;&#xA;&lt;li&gt;Better name for &lt;code&gt;list&lt;/code&gt; parameter? It doesn't clear what is that parameter used for from method signature  &lt;/li&gt;&#xA;&lt;li&gt;Why not &lt;code&gt;UpperCamelCase&lt;/code&gt;?  &lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;Result:  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private static void RemoveUnnecessaryLines(IEnumerable&amp;lt;ScatterViewItem&amp;gt; list)&#xA;{&#xA;    var linesToRemove = lines&#xA;        .Select(line =&amp;gt; ((Call)line.Tag).getCallee())&#xA;        .Where(destination =&amp;gt; list.Any(svi =&amp;gt; Equals(svi.Tag, destination)))&#xA;        .ToList();&#xA;&#xA;    foreach (Line l in linesToRemove)&#xA;    {&#xA;        lines.Remove(l);&#xA;        Dependencies.Children.Remove(l);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="645" LastEditorUserId="22222" LastEditDate="2014-04-14T22:36:46.810" LastActivityDate="2014-04-14T22:36:46.810" CommentCount="0" />
  <row Id="533" PostTypeId="1" AcceptedAnswerId="547" CreationDate="2011-02-01T22:44:01.423" Score="1" ViewCount="6692" Body="&lt;p&gt;Is there a better (more pythonic?) way to filter a list on attributes or methods of objects than relying on lamda functions?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;contexts_to_display = ...&#xA;tasks = Task.objects.all()&#xA;tasks = filter(lambda t: t.matches_contexts(contexts_to_display), tasks)&#xA;tasks = filter(lambda t: not t.is_future(), tasks)&#xA;tasks = sorted(tasks, Task.compare_by_due_date)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Here, &lt;code&gt;matches_contexts&lt;/code&gt; and &lt;code&gt;is_future&lt;/code&gt; are methods of &lt;code&gt;Task&lt;/code&gt;.  Should I make those free-functions to be able to use &lt;code&gt;filter(is_future, tasks)&lt;/code&gt;?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Any other comment?&lt;/p&gt;&#xA;" OwnerUserId="917" LastActivityDate="2011-02-11T10:40:35.640" Title="Is there a better way than lambda to filter on attributes/methods of objects?" Tags="&lt;python&gt;" AnswerCount="4" CommentCount="3" />
  <row Id="534" PostTypeId="2" ParentId="531" CreationDate="2011-02-01T23:09:32.683" Score="10" Body="&lt;p&gt;Wow, a lot of code to review. Unfortunately I'm too lazy to look through entire solution, let's I'll post my first 10 points.  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;1) &lt;a href=&quot;http://en.wikipedia.org/wiki/Overengineering&quot;&gt;http://en.wikipedia.org/wiki/Overengineering&lt;/a&gt;. Looked through the solution and have found absolutely no point in having such an amount of interfaces. I would definitely get rid of ITax and IRounding because there is only one implementation for each of them and there is no point to isolate them during unit-testing because there is too small functionality to isolate. &lt;strong&gt;Do not make it in such a complicated way until you really need such a complicated model.&lt;/strong&gt; You will have time to make things worse later :)  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;2) I personally hate 4-line regions - they do not help at all as for me.  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;3) If you have a factory for &lt;code&gt;salesItems&lt;/code&gt; then why don't you want to make class &lt;code&gt;SalesItem&lt;/code&gt; hidden inside &lt;code&gt;Factory&lt;/code&gt; class.  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public static class SalesItemFactory&#xA;{&#xA;    class SalesItem : ISalesItem { ... }&#xA;    class SalesItemTaxDecorator : ISalesItem { ... }&#xA;&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you really want to unit-test them then at least make them internal and use &lt;code&gt;InternalsVisibleTo&lt;/code&gt;. Or better even not to test them, test factory!  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;4) &lt;code&gt;item = (ISalesItem)Activator.CreateInstance(typeof(SalesItemTaxDecorator), new object[] { item, itemTaxLookup[(ItemType)flag] });&lt;/code&gt;  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Why activator at all?  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;s&gt;5) The same line as in previous point. Why do you assign this value to &lt;code&gt;item&lt;/code&gt; and continue iterations? Simply return it! And in order to keep your logic you should revert collection returned by &lt;code&gt;Enum.GetValues&lt;/code&gt;.&lt;/s&gt;  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;6) I would remove 'protected' and 'virtual' stuff from your decorator and replace them with 'private' and 'sealed' instead. Otherwise you're giving an ability to decorate decorator but that is strange. &lt;strong&gt;Too much of extensibility&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;7) Let's go to unit-tests :). &lt;a href=&quot;https://github.com/manwood/SalesTax/tree/master/Manwood.SalesTax.Tests/Stubs&quot;&gt;https://github.com/manwood/SalesTax/tree/master/Manwood.SalesTax.Tests/Stubs&lt;/a&gt;. Do not write your stubs, use for example RhinoMock instead. They make life easier due to many reasons: you do not have to write your stubs, you will not see your stubs while looking for inheritors of &lt;code&gt;ITax&lt;/code&gt;, they allow you to write more precise unit-tests (your unit-tests are not that good, see next point).  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;8) &lt;a href=&quot;https://github.com/manwood/SalesTax/blob/master/Manwood.SalesTax.Tests/SalesItemTest.cs&quot;&gt;https://github.com/manwood/SalesTax/blob/master/Manwood.SalesTax.Tests/SalesItemTest.cs&lt;/a&gt;.  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;[TestClass]&#xA;public class SalesItemTest&#xA;{&#xA;    [TestMethod] public void SalesItemGetPriceTest() { }&#xA;    [TestMethod] public void SalesItemGetSalesTaxTest() { }&#xA;    [TestMethod] public void SalesItemGetTotalTest() { }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Doubling your names too much in testMethods. &lt;code&gt;PriceTest()&lt;/code&gt;, &lt;code&gt;SalesTaxTest()&lt;/code&gt;, &lt;code&gt;GetTotalTest()&lt;/code&gt; would be better names.  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;9) &lt;a href=&quot;https://github.com/manwood/SalesTax/blob/master/Manwood.SalesTax.Tests/SalesItemTaxDecoratorTest.cs&quot;&gt;https://github.com/manwood/SalesTax/blob/master/Manwood.SalesTax.Tests/SalesItemTaxDecoratorTest.cs&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    [TestMethod]&#xA;    public void SalesItemTaxDecoratorTotalTest()&#xA;    {&#xA;        SalesItemTaxDecorator taxDecorator = new SalesItemTaxDecorator(new SalesItemStub(10M, 0M), new TaxStub(0.1M));&#xA;        decimal total = taxDecorator.GetTotal();&#xA;        Assert.AreEqual(11M, total);&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This is invalid test. What you're testing is whether it will return &lt;code&gt;11&lt;/code&gt; if price is &lt;code&gt;10&lt;/code&gt; and tax is &lt;code&gt;0.1&lt;/code&gt;. What you should test is &lt;strong&gt;a)&lt;/strong&gt; Tax was calculated for price value (it means that &lt;code&gt;ITax.CalculateTax&lt;/code&gt; was invoked with parameter 10) &lt;strong&gt;b)&lt;/strong&gt; result taken from tax was added to 10 and returned. RhinoMocks will help use assert &lt;strong&gt;a)&lt;/strong&gt; statement and you should assert &lt;strong&gt;b)&lt;/strong&gt; on your own in the same manner you do it right now. This test should  not have &lt;code&gt;0.1&lt;/code&gt; constants, otherwise you're testing tax class also (even though it is a stub).  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;10) 10th point, I want to go sleep.  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Asking about patterns in such a simple example will never be easy, because there is no point in them in such examples and you will never need them until you will extend it.&lt;/p&gt;&#xA;" OwnerUserId="645" LastEditorUserId="645" LastEditDate="2011-02-01T23:39:57.133" LastActivityDate="2011-02-01T23:39:57.133" CommentCount="10" />
  <row Id="536" PostTypeId="1" CreationDate="2011-02-01T23:26:29.873" Score="8" ViewCount="1820" Body="&lt;p&gt;I'm currently working on several projects for my company to help reduce the amount of calls we have to deal with so we can focus on higher priority task, such as server resource reduction, etc.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The first project on my list was to reduce the number of proxy issues a user has when migrating from an internal network to an external network such as home Internet.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I have come up with a Windows service idea where the service would be deployed from our servers and installed via a command.  Once installed and started the service would monitor the connection states of all the network interface on the computer.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Upon a network interface change such as:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Ethernet plugged out&lt;/li&gt;&#xA;&lt;li&gt;IP changes&lt;/li&gt;&#xA;&lt;li&gt;Interfaces enabled / disabled&lt;/li&gt;&#xA;&lt;li&gt;etc&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;the service would attempt to ping our &lt;code&gt;DomainController&lt;/code&gt;.  If the ping is a success, we will then check to see if the proxy settings for the machine are set.  If not, we will automatically set them and enable them.  If the ping is unsuccessful, we will disable the proxy.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The project is not fully complete but there is still a nice bit of code there to review.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;ProxyMonitor.cs&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;using System;&#xA;using System.Diagnostics;&#xA;using System.ServiceProcess;&#xA;using System.Configuration.Install;&#xA;using System.Reflection;&#xA;using System.Threading;&#xA;using System.Net.NetworkInformation;&#xA;&#xA;namespace Serco.Services.ProxyMonitor&#xA;{&#xA;    class ProxyMonitor : ServiceBase&#xA;    {&#xA;        static void Main(string[] args) &#xA;        {&#xA;            AppDomain.CurrentDomain.UnhandledException += CurrentDomainUnhandledException;&#xA;            if (System.Environment.UserInteractive)&#xA;            {&#xA;                string parameter = string.Concat(args);&#xA;                switch (parameter)&#xA;                {&#xA;                    case &quot;/install&quot;:&#xA;                            ManagedInstallerClass.InstallHelper(new string[] { Assembly.GetExecutingAssembly().Location });&#xA;                        break;&#xA;                    case &quot;/uninstall&quot;:&#xA;                        ManagedInstallerClass.InstallHelper(new string[] { &quot;/u&quot;, Assembly.GetExecutingAssembly().Location });&#xA;                        break;&#xA;                }&#xA;            }&#xA;            else&#xA;            {&#xA;                ServiceBase.Run(new ProxyMonitor());&#xA;            }&#xA;        }&#xA;&#xA;        private static void CurrentDomainUnhandledException(object sender, UnhandledExceptionEventArgs e)&#xA;        {&#xA;        }&#xA;&#xA;        /*&#xA;         * Start the main service application&#xA;         */&#xA;        private ManualResetEvent MainShutdownEvent = new ManualResetEvent(false);&#xA;        private Thread MainThread;&#xA;        private static EventLog EventManager = new EventLog();&#xA;        public static string ProxyIp;&#xA;&#xA;        public ProxyMonitor()&#xA;        {&#xA;            EventManager.Source = ServiceConfiguration.ServiceName;&#xA;        }&#xA;&#xA;        protected override void OnStart(string[] args)&#xA;        {&#xA;            ProxyIp = string.Concat(args);&#xA;            MainThread = new Thread(MainWorkerThread);&#xA;            MainThread.Name = &quot;MainWorkerThread&quot;;&#xA;            MainThread.IsBackground = true;&#xA;            MainThread.Start();&#xA;        }&#xA;&#xA;        private void MainWorkerThread()&#xA;        {&#xA;            EventManager.WriteEntry(&quot;Watching for ip: &quot; + ProxyIp);&#xA;            NetworkChange.NetworkAddressChanged += new NetworkAddressChangedEventHandler(AddressChangedCallback);&#xA;        }&#xA;&#xA;        public static void AddressChangedCallback(object Sender,EventArgs Args)&#xA;        {&#xA;            //try and ping the Proxy Server&#xA;            Ping Ping = new Ping();&#xA;            PingReply Reply = Ping.Send(&quot;secret.domain&quot;);&#xA;&#xA;            if (Reply.Status == IPStatus.Success) &#xA;            {&#xA;                /*&#xA;                 * Update Proxy Settings&#xA;                 */&#xA;            }&#xA;        }&#xA;&#xA;        protected override void OnStop()&#xA;        {&#xA;            MainShutdownEvent.Set();&#xA;            if(!MainThread.Join(3000))&#xA;            {&#xA;                // give the thread 3 seconds to stop&#xA;                MainThread.Abort();&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;ManagedInstallation.cs&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;using System;&#xA;using System.ServiceProcess;&#xA;using System.Configuration;&#xA;using System.ComponentModel;&#xA;using System.Configuration.Install;&#xA;&#xA;namespace Serco.Services.ProxyMonitor&#xA;{&#xA;    [RunInstaller(true)]&#xA;    public class ManagedInstallation : Installer&#xA;    {&#xA;        public ManagedInstallation()&#xA;        {&#xA;            var ProcessInstaller = new ServiceProcessInstaller();&#xA;            var ServiceInstaller = new ServiceInstaller();&#xA;&#xA;            //set the information and privileges&#xA;            ProcessInstaller.Account        = ServiceConfiguration.AccountType;&#xA;            ProcessInstaller.Username       = null;&#xA;            ProcessInstaller.Password       = null;&#xA;            ServiceInstaller.DisplayName    = ServiceConfiguration.DisplayName;&#xA;            ServiceInstaller.StartType      = ServiceConfiguration.StartType;&#xA;            ServiceInstaller.Description    = ServiceConfiguration.Description;&#xA;            ServiceInstaller.ServiceName    = ServiceConfiguration.ServiceName;&#xA;&#xA;            Installers.Add(ProcessInstaller);&#xA;            Installers.Add(ServiceInstaller);&#xA;        }&#xA;&#xA;        private ServiceController ServiceController = new ServiceController(ServiceConfiguration.ServiceName);&#xA;&#xA;        protected override void OnAfterInstall(System.Collections.IDictionary savedState)&#xA;        {&#xA;            base.OnAfterInstall(savedState);&#xA;            ServiceController.Start();&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;ServiceConfiguration.cs&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;using System;&#xA;using System.Collections.Generic;&#xA;using System.Text;&#xA;using System.ServiceProcess;&#xA;&#xA;namespace Serco.Services.ProxyMonitor&#xA;{&#xA;    class ServiceConfiguration&#xA;    {&#xA;        public static string DisplayName&#xA;        {&#xA;            get { return &quot;Proxy Monitor&quot;; }&#xA;        }&#xA;&#xA;        public static string ServiceName&#xA;        {&#xA;            get { return &quot;ProxyMonitor&quot;; }&#xA;        }&#xA;&#xA;        public static string Description&#xA;        {&#xA;            get&#xA;            {&#xA;                return &quot;ProxyMonitor is a helper developed to manage the state of the proxy for the employess whilst of the internal network.&quot;;&#xA;            }&#xA;        }&#xA;&#xA;        public static ServiceStartMode StartType&#xA;        {&#xA;            get{return ServiceStartMode.Automatic;}&#xA;        }&#xA;&#xA;        public static ServiceAccount AccountType &#xA;        {&#xA;            get{return ServiceAccount.LocalSystem;}&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The &lt;code&gt;ServiceConfiguration&lt;/code&gt; class may be modified to populate from a local file depending on the deployment discussion I will have with my colleges.&lt;/p&gt;&#xA;" OwnerUserId="95" LastEditorUserId="22222" LastEditDate="2014-08-27T07:39:31.623" LastActivityDate="2014-08-27T07:39:31.623" Title="Windows service for monitoring network interface changes" Tags="&lt;c#&gt;&lt;proxy&gt;" AnswerCount="3" CommentCount="0" FavoriteCount="1" />
  <row Id="537" PostTypeId="2" ParentId="533" CreationDate="2011-02-02T00:10:29.493" Score="2" Body="&lt;p&gt;I think lambdas are fine in this case. (Yeah, not much of a code review, but what can I say... You basically ask a yes/no question. Answer: &quot;No&quot;. :) )&lt;/p&gt;&#xA;" OwnerUserId="1235" LastActivityDate="2011-02-02T00:10:29.493" CommentCount="0" />
  <row Id="538" PostTypeId="1" AcceptedAnswerId="550" CreationDate="2011-02-02T00:39:38.673" Score="12" ViewCount="2333" Body="&lt;p&gt;I've written an abstract class in C# for the purpose of random number generation from an array of bytes. The .NET class &lt;code&gt;RNGCryptoServiceProvider&lt;/code&gt; can be used to generate this array of random bytes, for example.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;using System;&#xA;using System.Collections.Generic;&#xA;using System.Linq;&#xA;using System.Text;&#xA;&#xA;namespace MyLibrary&#xA;{&#xA;    /// &amp;lt;summary&amp;gt;&#xA;    /// Represents the abstract base class for a random number generator.&#xA;    /// &amp;lt;/summary&amp;gt;&#xA;    public abstract class Rng&#xA;    {&#xA;        /// &amp;lt;summary&amp;gt;&#xA;        /// Initializes a new instance of the &amp;lt;see cref=&quot;Rng&quot;/&amp;gt; class.&#xA;        /// &amp;lt;/summary&amp;gt;&#xA;        public Rng()&#xA;        {&#xA;            //&#xA;        }&#xA;&#xA;        public Int16 GetInt16(Int16 min, Int16 max)&#xA;        {&#xA;            return (Int16)(min + (Int16)(GetDouble() * (max - min)));&#xA;        }&#xA;&#xA;        public Int32 GetInt32(Int32 min, Int32 max)&#xA;        {&#xA;            return (Int32)(min + (Int32)(GetDouble() * (max - min)));&#xA;        }&#xA;&#xA;        public Int64 GetInt64(Int64 min, Int64 max)&#xA;        {&#xA;            return (Int64)(min + (Int64)(GetDouble() * (max - min)));&#xA;        }&#xA;&#xA;        public UInt16 GetUInt16(UInt16 min, UInt16 max)&#xA;        {&#xA;            return (UInt16)(min + (UInt16)(GetDouble() * (max - min)));&#xA;        }&#xA;&#xA;        public UInt32 GetUInt32(UInt32 min, UInt32 max)&#xA;        {&#xA;            return (UInt32)(min + (UInt32)(GetDouble() * (max - min)));&#xA;        }&#xA;&#xA;        public UInt64 GetUInt64(UInt64 min, UInt64 max)&#xA;        {&#xA;            return (UInt64)(min + (UInt64)(GetDouble() * (max - min)));&#xA;        }&#xA;&#xA;        public Single GetSingle()&#xA;        {&#xA;            return (Single)GetUInt64() / UInt64.MaxValue;&#xA;        }&#xA;&#xA;        public Double GetDouble()&#xA;        {&#xA;            return (Double)GetUInt64() / UInt64.MaxValue;&#xA;        }&#xA;&#xA;        public Int16 GetInt16()&#xA;        {&#xA;            return BitConverter.ToInt16(GetBytes(2), 0);&#xA;        }&#xA;&#xA;        public Int32 GetInt32()&#xA;        {&#xA;            return BitConverter.ToInt32(GetBytes(4), 0);&#xA;        }&#xA;&#xA;        public Int64 GetInt64()&#xA;        {&#xA;            return BitConverter.ToInt64(GetBytes(8), 0);&#xA;        }&#xA;&#xA;        public UInt16 GetUInt16()&#xA;        {&#xA;            return BitConverter.ToUInt16(GetBytes(2), 0);&#xA;        }&#xA;&#xA;        public UInt32 GetUInt32()&#xA;        {&#xA;            return BitConverter.ToUInt32(GetBytes(4), 0);&#xA;        }&#xA;&#xA;        public UInt64 GetUInt64()&#xA;        {&#xA;            return BitConverter.ToUInt64(GetBytes(8), 0);&#xA;        }&#xA;&#xA;        /// &amp;lt;summary&amp;gt;&#xA;        /// Generates random bytes of the specified length.&#xA;        /// &amp;lt;/summary&amp;gt;&#xA;        /// &amp;lt;param name=&quot;count&quot;&amp;gt;The number of bytes to generate.&amp;lt;/param&amp;gt;&#xA;        /// &amp;lt;returns&amp;gt;The randomly generated bytes.&amp;lt;/returns&amp;gt;&#xA;        public abstract byte[] GetBytes(int count);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Any suggestions for improvements would be welcome.&lt;/p&gt;&#xA;" OwnerUserId="475" LastEditorUserId="475" LastEditDate="2011-02-02T00:47:50.583" LastActivityDate="2014-07-27T11:34:19.243" Title="Random Number Generator Class" Tags="&lt;c#&gt;&lt;random&gt;" AnswerCount="3" CommentCount="10" FavoriteCount="3" />
  <row Id="539" PostTypeId="2" ParentId="496" CreationDate="2011-02-02T01:11:38.240" Score="16" Body="&lt;p&gt;The neatest way to deal with this is to use what I was taught as the &quot;2 pointer trick&quot; (thank you Charles Lindsay all those years ago):&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Instead of holding a pointer to the record you hold a pointer to the pointer that points to it - that is you use a double indirection. This enables you to both modify the pointer to the record and to modify the record without keeping track of the previous node.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;One of the nice things about this approach is that you don't need to special case dealing with the first node.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;An untested sketch using this idea for delete_item (in C++) looks like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;void delete_item(node** head, int i) {&#xA;  for (node** current = head; *current; current = &amp;amp;(*current)-&amp;gt;next) {&#xA;    if ((*current)-&amp;gt;x == i) {&#xA;      node* next = (*current)-&amp;gt;next;&#xA;      delete *current;&#xA;      *current = next;&#xA;      break;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This loop will break after the first entry it finds.  If you want to remove all items that match, you have to use &lt;code&gt;continue&lt;/code&gt; instead of &lt;code&gt;break&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; move the &lt;code&gt;current = &amp;amp;(*current)-&amp;gt;next&lt;/code&gt; out of the &lt;code&gt;for&lt;/code&gt; clause and to the end of the loop since it must not be executed when just having deleted an element.&lt;/p&gt;&#xA;" OwnerUserId="1323" LastEditorUserId="-1" LastEditDate="2014-03-02T11:16:21.937" LastActivityDate="2014-03-02T11:16:21.937" CommentCount="1" />
  <row Id="540" PostTypeId="1" AcceptedAnswerId="544" CreationDate="2011-02-02T04:00:41.190" Score="46" ViewCount="4699" Body="&lt;p&gt;I have a small 10-liner function that writes some data to a file using an &lt;code&gt;std::ofstream&lt;/code&gt;. I did not explicitly call &lt;code&gt;.close()&lt;/code&gt; at the end of my function, but it failed code review with the reason that it is better to explicitly call it for style and verbosity reasons. I understand there is no harm in calling &lt;code&gt;.close()&lt;/code&gt; explicitly, but does calling it explicitly just before a &lt;code&gt;return&lt;/code&gt; statement indicate a lack of understanding or faith in RAII?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The C++ standard says:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;§27.8.1.2&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;&lt;code&gt;virtual ~ basic_filebuf ();&lt;/code&gt;&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;[3] Effects: Destroys an object of &lt;code&gt;class basic_filebuf&amp;lt;charT,traits&amp;gt;&lt;/code&gt;. Calls &lt;code&gt;close()&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Am I justified in my argument that calling &lt;code&gt;.close()&lt;/code&gt; at the end of a function is redundant and/or unnecessary?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;bool SomeClass::saveData()&#xA;{&#xA;    std::ofstream saveFile(m_filename);&#xA;&#xA;    if (!saveFile.is_open())&#xA;        return false;&#xA;&#xA;    saveFile &amp;lt;&amp;lt; m_member1 &amp;lt;&amp;lt; std::endl;&#xA;    saveFile &amp;lt;&amp;lt; m_member2 &amp;lt;&amp;lt; std::endl;&#xA;&#xA;    saveFile.close(); // passed review only with this line&#xA;    return true;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The function is only supposed to return &lt;code&gt;false&lt;/code&gt; if the file could not be opened for writing.&lt;/p&gt;&#xA;" OwnerUserId="1328" LastEditorUserId="22222" LastEditDate="2015-06-28T01:00:13.577" LastActivityDate="2015-06-28T01:00:13.577" Title="Implementation using fstream failed evaluation" Tags="&lt;c++&gt;&lt;design-patterns&gt;&lt;stream&gt;" AnswerCount="6" CommentCount="9" FavoriteCount="8" />
  <row Id="541" PostTypeId="2" ParentId="540" CreationDate="2011-02-02T04:22:11.317" Score="6" Body="&lt;p&gt;I'm torn on this one. You are absolutely correct. However if a coding standard requires calling close() explicitly or it's a group people's consensus of doing that, there's not much you can do. If I were you, I would just go with the flow. Arguing such things is unproductive.&lt;/p&gt;&#xA;" OwnerUserId="998" LastActivityDate="2011-02-02T04:22:11.317" CommentCount="3" />
  <row Id="542" PostTypeId="2" ParentId="540" CreationDate="2011-02-02T04:52:45.043" Score="30" Body="&lt;p&gt;Assuming that the fstream object is local to the function, I &lt;em&gt;would&lt;/em&gt; tend to argue against this. People need to become accustomed to letting RAII do its job, and closing an fstream object falls under that heading. Extra code that doesn't accomplish something useful is &lt;em&gt;almost&lt;/em&gt; always a poor idea.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; Lest I be misunderstood, I would argue against this, not only for this specific case, but in general. It's not merely useless, but tends to obscure what's needed, and (worst of all) is essentially impossible to enforce in any case -- people who think only in terms of the &quot;normal&quot; exit from the function really need to stop and realize that the minute they added exception handling to C++, the rules changed in a fundamental way. You &lt;em&gt;need&lt;/em&gt; to think in terms of RAII (or something similar) that &lt;em&gt;ensures&lt;/em&gt; cleanup on exit from scope -- and explicitly closing files, releasing memory, etc., does &lt;em&gt;not&lt;/em&gt; qualify.&lt;/p&gt;&#xA;" OwnerUserId="489" LastEditorUserId="18427" LastEditDate="2014-02-24T15:36:26.320" LastActivityDate="2014-02-24T15:36:26.320" CommentCount="6" />
  <row Id="543" PostTypeId="2" ParentId="471" CreationDate="2011-02-02T05:20:01.963" Score="4" Body="&lt;p&gt;My take is that what you have should be the preferred way of doing things. First of all, the names of the input parameters are what will show up in javadocs, and therefore should not have any prefix or silly names that will make the javadocs cryptic. Second, if the input parameter names clearly define what the things are, then why name the global variables something else that will make the rest of the code less meaningful or more difficult to maintain? Third, the scope of the input parameters is so limited, that it seems to me that you would rarely find this to be error-prone, especially when simply initializing class data.&lt;/p&gt;&#xA;" OwnerUserId="1330" LastActivityDate="2011-02-02T05:20:01.963" CommentCount="1" />
  <row Id="544" PostTypeId="2" ParentId="540" CreationDate="2011-02-02T07:51:25.353" Score="54" Body="&lt;h2&gt;I would argue the exact opposite.&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Explicitly closing a stream is probably not what you want to do. This is because when you &lt;code&gt;close()&lt;/code&gt; the stream there is the potential for exceptions to be thrown. Thus when you explicitly close a file stream it is an indication you both want to close the stream and explicitly handle any errors that can result (exceptions or bad-bits) from the closing of the stream (or potentially you are saying if this fails I want to fail fast (exception being allowed to kill the application)).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you don't care about the errors (ie you are not going to handle them anyway). You should just let the destructor do the closing. This is because the destructor will catch and discard any exceptions thus allowing code to flow normally. When dealing with the closing of a file this is what you normally want to do (if the closing fails does it matter?).&lt;/p&gt;&#xA;" OwnerUserId="507" LastEditorUserId="18427" LastEditDate="2014-02-24T15:35:29.367" LastActivityDate="2014-02-24T15:35:29.367" CommentCount="10" />
  <row Id="545" PostTypeId="2" ParentId="533" CreationDate="2011-02-02T08:53:18.163" Score="0" Body="&lt;p&gt;The first lambda (calling &lt;code&gt;matches_contexts&lt;/code&gt;) can't be avoided because it has to capture the &lt;code&gt;contexts_to_display&lt;/code&gt;, but the &lt;code&gt;not is_future()&lt;/code&gt; can be moved into a new &lt;code&gt;Task&lt;/code&gt; method &lt;code&gt;can_start_now&lt;/code&gt;: it's clearer (hiding the negative conditions), reusable, and this condition will most probably be more complicated in the future. Yes, &lt;a href=&quot;http://en.wikipedia.org/wiki/You_ain%27t_gonna_need_it&quot; rel=&quot;nofollow&quot;&gt;YAGNI&lt;/a&gt;, I know... ;)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And because I did not need the sorting phase to return a copy of &lt;code&gt;tasks&lt;/code&gt;, I used in-place sort.  By the way, the arguments are reversed between &lt;code&gt;filter(f,iterable)&lt;/code&gt; and &lt;code&gt;sorted(iterable,f)&lt;/code&gt;, using one just after the other seemed akward...&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So the code is now:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class Task:&#xA;    ...&#xA;    def can_start_now(self):&#xA;        return not self.is_future()&#xA;&#xA;&#xA;contexts_to_display = ...&#xA;tasks = Task.objects.all()&#xA;tasks = filter(lambda t: t.matches_contexts(contexts_to_display), tasks)&#xA;tasks = filter(Task.can_start_now, tasks)&#xA;tasks.sort(Task.compare_by_due_date)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="917" LastActivityDate="2011-02-02T08:53:18.163" CommentCount="0" />
  <row Id="546" PostTypeId="2" ParentId="540" CreationDate="2011-02-02T11:29:32.820" Score="13" Body="&lt;p&gt;There is a middle ground here.  The reason the reviewers want that explicit &lt;code&gt;close()&lt;/code&gt; &quot;as a matter of style and verbosity&quot; is that without it they can't tell just from reading the code if you meant to do it that way, or if you completely forgot about it and just got lucky.  It's also possible their egos were bruised from failing to notice or remember, at least at first, that &lt;code&gt;close()&lt;/code&gt; would be called by the destructor.  Adding a comment that the destructor calls &lt;code&gt;close()&lt;/code&gt; isn't a bad idea.  It's a little gratuitous, but if your coworkers need clarification and/or reassurance now, there's a good chance a random maintainer a few years down the road will too, especially if your team doesn't do a lot of file I/O.&lt;/p&gt;&#xA;" OwnerUserId="1338" LastActivityDate="2011-02-02T11:29:32.820" CommentCount="2" />
  <row Id="547" PostTypeId="2" ParentId="533" CreationDate="2011-02-02T11:44:09.317" Score="7" Body="&lt;p&gt;I would use a list comprehension:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;contexts_to_display = ...&#xA;tasks = [t for t in Task.objects.all()&#xA;         if t.matches_contexts(contexts_to_display)&#xA;         if not t.is_future()]&#xA;tasks.sort(cmp=Task.compare_by_due_date)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Since you already have a list, I see no reason not to sort it directly, and that simplifies the code a bit.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The cmp keyword parameter is more of a reminder that this is 2.x code and will need to be changed to use a key in 3.x (but you can start using a key now, too):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import operator&#xA;tasks.sort(key=operator.attrgetter(&quot;due_date&quot;))&#xA;# or&#xA;tasks.sort(key=lambda t: t.due_date)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You can combine the comprehension and sort, but this is probably less readable:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;tasks = sorted((t for t in Task.objects.all()&#xA;                if t.matches_contexts(contexts_to_display)&#xA;                if not t.is_future()),&#xA;               cmp=Task.compare_by_due_date)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="590" LastActivityDate="2011-02-02T11:44:09.317" CommentCount="3" />
  <row Id="548" PostTypeId="2" ParentId="538" CreationDate="2011-02-02T14:11:14.490" Score="3" Body="&lt;p&gt;If you're planning on placing this in a reusable library you should validate inputs (min &gt; max throws an IndexOutOfRangeException, etc.) Also, you do not need to cast to double in the GetDouble method as the division implicitly returns a double and casting the first operand of the division in GetSingle still causes the division to return a double though you may be sacrificing some precision in the randomness as a result of sacrificing 32bits before you divide. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Otherwise the code does seems as though it would be sufficient. Depending on the scope of your solution perhaps you want to consider min/max overloads for GetSingle and GetDouble and if you're really looking to be special maybe support for System.Numerics.BigInteger and System.Decimal?&lt;/p&gt;&#xA;" OwnerUserId="1349" LastEditorUserId="1349" LastEditDate="2011-02-02T14:29:53.920" LastActivityDate="2011-02-02T14:29:53.920" CommentCount="2" />
  <row Id="549" PostTypeId="1" AcceptedAnswerId="552" CreationDate="2011-02-02T14:13:43.487" Score="12" ViewCount="6911" Body="&lt;p&gt;How does this class to resize an image look?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;using System;&#xA;using System.Collections.Generic;&#xA;using System.Web;&#xA;using System.Drawing;&#xA;using System.IO;&#xA;&#xA;/*&#xA; * Resizes an image&#xA; **/&#xA;public static class ImageResizer&#xA;{&#xA;    // Saves the image to specific location, save location includes filename&#xA;    private static void saveImageToLocation(Image theImage, string saveLocation)&#xA;    {&#xA;        // Strip the file from the end of the dir&#xA;        string saveFolder = Path.GetDirectoryName(saveLocation);&#xA;        if (!Directory.Exists(saveFolder))&#xA;        {&#xA;            Directory.CreateDirectory(saveFolder);&#xA;        }&#xA;        // Save to disk&#xA;        theImage.Save(saveLocation);&#xA;    }&#xA;&#xA;    // Resizes the image and saves it to disk.  Save as property is full path including file extension&#xA;    public static void resizeImageAndSave(Image ImageToResize, int newWidth, int maxHeight, bool onlyResizeIfWider, string thumbnailSaveAs)&#xA;    {&#xA;        Image thumbnail = resizeImage(ImageToResize, newWidth, maxHeight, onlyResizeIfWider);&#xA;        thumbnail.Save(thumbnailSaveAs);&#xA;    }&#xA;    // Overload if filepath is passed in&#xA;    public static void resizeImageAndSave(string imageLocation, int newWidth, int maxHeight, bool onlyResizeIfWider, string thumbnailSaveAs)&#xA;    {&#xA;        Image loadedImage = Image.FromFile(imageLocation);&#xA;        Image thumbnail = resizeImage(loadedImage, newWidth, maxHeight, onlyResizeIfWider);&#xA;&#xA;        saveImageToLocation(thumbnail, thumbnailSaveAs);&#xA;    }&#xA;&#xA;    // Returns the thumbnail image when an image object is passed in&#xA;    public static Image resizeImage(Image ImageToResize, int newWidth, int maxHeight, bool onlyResizeIfWider)&#xA;    {&#xA;        // Prevent using images internal thumbnail&#xA;        ImageToResize.RotateFlip(System.Drawing.RotateFlipType.Rotate180FlipNone);&#xA;        ImageToResize.RotateFlip(System.Drawing.RotateFlipType.Rotate180FlipNone);&#xA;&#xA;        // Set new width if in bounds&#xA;        if (onlyResizeIfWider)&#xA;        {&#xA;            if (ImageToResize.Width &amp;lt;= newWidth)&#xA;            {&#xA;                newWidth = ImageToResize.Width;&#xA;            }&#xA;        }&#xA;&#xA;        // Calculate new height&#xA;        int newHeight = ImageToResize.Height * newWidth / ImageToResize.Width;&#xA;        if (newHeight &amp;gt; maxHeight)&#xA;        {&#xA;            // Resize with height instead&#xA;            newWidth = ImageToResize.Width * maxHeight / ImageToResize.Height;&#xA;            newHeight = maxHeight;&#xA;        }&#xA;&#xA;        // Create the new image&#xA;        Image resizedImage = ImageToResize.GetThumbnailImage(newWidth, newHeight, null, IntPtr.Zero);&#xA;&#xA;        // Clear handle to original file so that we can overwrite it if necessary&#xA;        ImageToResize.Dispose();&#xA;&#xA;&#xA;        return resizedImage;&#xA;    }&#xA;    // Overload if file path is passed in instead&#xA;    public static Image resizeImage(string imageLocation, int newWidth, int maxHeight, bool onlyResizeIfWider)&#xA;    {&#xA;        Image loadedImage = Image.FromFile(imageLocation);&#xA;        return resizeImage(loadedImage, newWidth, maxHeight, onlyResizeIfWider);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="154" LastEditorUserId="22222" LastEditDate="2014-08-23T15:07:50.307" LastActivityDate="2014-08-23T15:07:50.307" Title="Image resizing class" Tags="&lt;c#&gt;&lt;asp.net&gt;&lt;image&gt;" AnswerCount="6" CommentCount="2" FavoriteCount="4" />
  <row Id="550" PostTypeId="2" ParentId="538" CreationDate="2011-02-02T14:16:44.113" Score="8" Body="&lt;p&gt;I think the design is pretty good. A few comments:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;I'd rename the class to something a bit more descriptive, say &lt;code&gt;RandomGenerator&lt;/code&gt;. Then when you implement the class you can declare it with &lt;code&gt;CspGenerator: RandomGenerator&lt;/code&gt; or &lt;code&gt;MersenneGenerator: RandomGenerator&lt;/code&gt; and it's obvious what the class does.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Comment the &lt;code&gt;get()&lt;/code&gt; methods. IMO all public elements should be documented. Get/set could be left out, but that is a matter of preference. In particular I'd like to know what kind of range &lt;code&gt;min&lt;/code&gt; anf &lt;code&gt;max&lt;/code&gt; is and is used for.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Is &lt;code&gt;getBytes()&lt;/code&gt; needed externally? If not, I would consider making it class-level rather than public.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;The formatting is good - even in Visual Studio I've seen it get messed up as code is refactored and changed.&lt;/p&gt;&#xA;" OwnerUserId="110" LastActivityDate="2011-02-02T14:16:44.113" CommentCount="4" />
  <row Id="551" PostTypeId="1" CreationDate="2011-02-02T14:39:53.470" Score="2" ViewCount="600" Body="&lt;p&gt;Here you go:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#define abort(msg) (fprintf(stderr, msg) &amp;amp;&amp;amp; *((char*)0))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="914" LastEditorUserId="27623" LastEditDate="2016-06-07T20:43:51.833" LastActivityDate="2016-06-07T20:43:51.833" Title="abort() implementation" Tags="&lt;c&gt;&lt;error-handling&gt;" AnswerCount="2" CommentCount="5" />
  <row Id="552" PostTypeId="2" ParentId="549" CreationDate="2011-02-02T15:09:08.827" Score="12" Body="&lt;p&gt;&lt;a href=&quot;http://c2.com/cgi/wiki?PascalCase&quot;&gt;PascalCase&lt;/a&gt; the method names and method params if you are feeling overly ambitious.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    // Set new width if in bounds&#xA;    if (onlyResizeIfWider)&#xA;    {&#xA;        if (ImageToResize.Width &amp;lt;= newWidth)&#xA;        {&#xA;            newWidth = ImageToResize.Width;&#xA;        }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;FindBugs barks in Java for the above behavior... refactor into a single if since you are not doing anything within the first if anyways...&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    // Set new width if in bounds&#xA;    if (onlyResizeIfWider &amp;amp;&amp;amp; ImageToResize.Width &amp;lt;= newWidth)&#xA;    {&#xA;        newWidth = ImageToResize.Width;&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Comments here could be a bit more descriptive; while you state what the end result is I am still lost as to why that would resolve the issue.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    // Prevent using images internal thumbnail&#xA;    ImageToResize.RotateFlip(System.Drawing.RotateFlipType.Rotate180FlipNone);&#xA;    ImageToResize.RotateFlip(System.Drawing.RotateFlipType.Rotate180FlipNone); &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Maybe something similar to what is stated on &lt;a href=&quot;http://smartdev.wordpress.com/2009/04/09/generate-image-thumbnails-using-aspnetc/&quot;&gt;this blog&lt;/a&gt;...&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    // Prevent using images internal thumbnail since we scale above 200px; flipping&#xA;    // the image twice we get a new image identical to the original one but without the    &#xA;    // embedded thumbnail&#xA;    ImageToResize.RotateFlip(System.Drawing.RotateFlipType.Rotate180FlipNone);&#xA;    ImageToResize.RotateFlip(System.Drawing.RotateFlipType.Rotate180FlipNone);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="898" LastActivityDate="2011-02-02T15:09:08.827" CommentCount="1" />
  <row Id="553" PostTypeId="2" ParentId="549" CreationDate="2011-02-02T15:11:32.120" Score="5" Body="&lt;p&gt;In C# it's generally common practice to use Pascal Case in method names (so SaveImageToLocation instead of saveImageToLocation) and Camel Case in parameter names (so &quot;public static Image ResizeImage(Image imageToResize, ...&quot;)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;RotateFlip can be a rather expensive operation just to clear an internal thumbnail. As far as the images are concerned, do you need to support vector images or will this generally be used for Bitmap (rasterized) images (this includes compressed variations like png, jpg, gif, etc.)? If you only plan to output Bitmaps then I suggest using the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/334ey5b7&quot;&gt;Bitmap(Image original, int width, int height)&lt;/a&gt; constructor which will take a source image and scale it, removing the need to do costly rotations. There are a number of methods to draw scaled images, some of which are much more efficient than others and each have varying pros and cons to using them, but the biggest advantage to GetThumbnailImage is use of embedded thumbnails.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It is generally not good practice to dispose of a parameter so it may warrant a different pattern (returning an image and letting the calling code call image.Save(filename) at its own discretion isn't that terrible), but if you intend to leave it this way you should definitely comment it. Refer to &lt;a href=&quot;http://stackoverflow.com/questions/788335/why-does-image-fromfile-keep-a-file-handle-open-sometimes&quot;&gt;this post&lt;/a&gt; for information about loading images without locking files. The overloads that receive a file path instead of an Image object should wrap their loaded Image files in a using block (or try/finally+dispose) like so:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public static void ResizeImageAndSave(string imageLocation, int newWidth, int maxHeight, bool onlyResizeIfWider, string thumbnailSaveAs)&#xA;{&#xA;    Image thumbnail = null;&#xA;&#xA;    try&#xA;    {&#xA;        using (Image loadedImage = Image.FromFile(imageLocation)) &#xA;        {&#xA;            thumbnail = resizeImage(loadedImage, newWidth, maxHeight, onlyResizeIfWider);&#xA;        }&#xA;        saveImageToLocation(thumbnail, thumbnailSaveAs);&#xA;    }&#xA;    finally&#xA;    {&#xA;        if (thumbnail != null) thumbnail.Dispose();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Hope this helps :)&lt;/p&gt;&#xA;" OwnerUserId="1349" LastActivityDate="2011-02-02T15:11:32.120" CommentCount="0" />
  <row Id="554" PostTypeId="2" ParentId="514" CreationDate="2011-02-02T16:03:05.800" Score="2" Body="&lt;p&gt;A thing to try: case statement&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;case tax_ref&#xA;when a then execution1&#xA;when b then execution2&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://www.tutorialspoint.com/ruby/ruby_if_else.htm&quot; rel=&quot;nofollow&quot;&gt;http://www.tutorialspoint.com/ruby/ruby_if_else.htm&lt;/a&gt;&lt;/p&gt;&#xA;" OwnerUserId="1362" LastActivityDate="2011-02-02T16:03:05.800" CommentCount="0" />
  <row Id="555" PostTypeId="2" ParentId="551" CreationDate="2011-02-02T16:06:02.677" Score="16" Body="&lt;h3&gt;Non-standard interface to standard function&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;The obvious criticism of that implementation is that it has a different interface from what the C standard requires:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;§7.20.4.1 The abort function&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;Synopsis&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;&#xA;void abort(void);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;  &#xA;  &lt;p&gt;Description&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;The &lt;code&gt;abort&lt;/code&gt; function causes abnormal program termination to occur, unless the signal&#xA;  &lt;code&gt;SIGABRT&lt;/code&gt; is being caught and the signal handler does not return. Whether open streams&#xA;  with unwritten buffered data are flushed, open streams are closed, or temporary files are&#xA;  removed is implementation-defined. An implementation-defined form of the status&#xA;  unsuccessful termination is returned to the host environment by means of the function&#xA;  call &lt;code&gt;raise(SIGABRT)&lt;/code&gt;.&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;Returns&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;The abort function does not return to its caller.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;h3&gt;Unreliable implementation of 'crash'&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;There were systems, notoriously the DEC VAX, where accessing the memory at address 0 did not cause problems (until the programs that were written on the VAX were ported to other platforms that did abort).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Dereferencing a null pointer is undefined behaviour - that means anything could happen, including 'no crash'.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Nitpicks in implementation&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;If, for some reason, &lt;code&gt;fprintf()&lt;/code&gt; returns 0, your program will not abort.  For example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;abort(&quot;&quot;);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;does not abort.  It is also dangerous to use the string as the format string; you should use:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#define abort(msg) (fprintf(stderr, &quot;%s\n&quot;, msg) &amp;amp;&amp;amp; *((char*)0))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It would be better to use a comma operator in place of the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#define abort(msg) (fprintf(stderr, &quot;%s\n&quot;, msg), raise(SIGABRT))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Since the standard library could have defined a macro &lt;code&gt;abort()&lt;/code&gt;, you should &lt;code&gt;#undef&lt;/code&gt; it before defining it yourself.&lt;/p&gt;&#xA;" OwnerUserId="1160" LastEditorUserId="1160" LastEditDate="2011-02-02T17:50:20.280" LastActivityDate="2011-02-02T17:50:20.280" CommentCount="3" />
  <row Id="556" PostTypeId="2" ParentId="419" CreationDate="2011-02-02T16:24:04.177" Score="4" Body="&lt;p&gt;I'd recommend changing this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;int len;&#xA;int slength = (int)s.length() + 1;&#xA;len = WideCharToMultiByte(CP_ACP, 0, s.c_str(), slength, 0, 0, 0, 0);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;...to this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;int slength = (int)s.length() + 1;&#xA;int len = WideCharToMultiByte(CP_ACP, 0, s.c_str(), slength, 0, 0, 0, 0);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Slightly more concise, &lt;code&gt;len&lt;/code&gt;'s scope is reduced, and you don't have an uninitialised variable floating round (ok, just for one line) as a trap for the unwary.&lt;/p&gt;&#xA;" OwnerUserId="1342" LastActivityDate="2011-02-02T16:24:04.177" CommentCount="0" />
  <row Id="557" PostTypeId="2" ParentId="538" CreationDate="2011-02-02T16:46:57.683" Score="6" Body="&lt;p&gt;I think using &lt;code&gt;GetDouble&lt;/code&gt; to generate the other random numbers can create performance problems when the user needs efficient random numbers.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Since &lt;code&gt;GetBytes&lt;/code&gt; should return a uniform distribution anyway, can’t you bypass using floating-point numbers? See e.g. Java’s &lt;a href=&quot;http://download.oracle.com/javase/1.4.2/docs/api/java/util/Random.html#nextInt%28int%29&quot;&gt;&lt;code&gt;Random.nextInt&lt;/code&gt; implementation&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Something else, but this may be unnecessary and YAGNI for you: have you considered decoupling the RNG from the probability density function? At the moment your RNG directly supports generating uniformly distributed numbers from within a given range – but it supports no other distributions. This could be off-loaded into a separate &lt;code&gt;Distribution&lt;/code&gt; class. For reference, &lt;a href=&quot;http://www.boost.org/doc/libs/1_45_0/doc/html/boost_random/reference.html#boost_random.reference.distributions&quot;&gt;Boost.Random&lt;/a&gt; does just that.&lt;/p&gt;&#xA;" OwnerUserId="308" LastActivityDate="2011-02-02T16:46:57.683" CommentCount="4" />
  <row Id="558" PostTypeId="1" AcceptedAnswerId="560" CreationDate="2011-02-02T17:26:42.450" Score="14" ViewCount="517" Body="&lt;p&gt;Please have a look at these iterators which I use for my Sudoku solver. They behave slightly different from STL iterators and don't implement all functionality that would be needed to use them in a stl context. But the basic idea behind them was to clean up the code in the Sudoku program that makes heavy use of the three access patterns (row, col, block) that I implemented.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The most &quot;important&quot; iterator is the BlockIterator, since without that iterating over all nine fields in a block looked quite ugly. Iterating rows and columns wasn't that bad, but since I started writing the stuff I decided to create a complete set.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Some technical details:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The grid class holds an (evil) array of pointers to Field objects, that's one dimensional (I could have used a two dimensional array as well, but I often do it this way and feel quite comfortable with modulo operations). Maybe I will replace this with a vector later.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The grid class adds a few static functions to calculate offsets in the array based on row, col or block positions.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class Grid {&#xA;public:&#xA;    Grid();&#xA;    Grid(std::string s);&#xA;&#xA;    class Iterator {&#xA;    public:&#xA;        Iterator(Grid* g) : grid(g), it(0){}&#xA;        Field* operator*(){return field;}&#xA;        void operator++(){&#xA;            ++it;&#xA;            if(it &amp;lt; 9) field = calc_field();&#xA;            else field = NULL;&#xA;        }&#xA;    protected:&#xA;        virtual Field* calc_field() = 0;&#xA;        Field* field;&#xA;        Grid* grid;&#xA;        int it;&#xA;    };&#xA;&#xA;    class RowIterator : public Iterator {&#xA;    public:&#xA;        RowIterator(Grid* g, int row) : Iterator(g){&#xA;            row_offset = row * size; //Grid::block_offset(block);&#xA;            field = calc_field();&#xA;        }&#xA;        Field* calc_field(){&#xA;            int field_index = row_offset + it;&#xA;            return grid-&amp;gt;field[field_index];&#xA;        }&#xA;    protected:&#xA;        int row_offset;&#xA;    };&#xA;&#xA;    class ColIterator : public Iterator {&#xA;    public:&#xA;        ColIterator(Grid* g, int col) : Iterator(g){&#xA;            col_offset = col;&#xA;            field = calc_field();&#xA;        }&#xA;        Field* calc_field(){&#xA;            int field_index = it * size + col_offset;&#xA;            return grid-&amp;gt;field[field_index];&#xA;        }&#xA;    protected:&#xA;        int col_offset;&#xA;    };&#xA;&#xA;    class BlockIterator : public Iterator {&#xA;    public:&#xA;        BlockIterator(Grid* g, int block) : Iterator(g){&#xA;            block_offset = Grid::block_offset(block);&#xA;            field = calc_field();&#xA;        }&#xA;        Field* calc_field(){&#xA;            int field_index = block_offset + ((it / 3) * size) + (it % 3);&#xA;            return grid-&amp;gt;field[field_index];&#xA;        }&#xA;    protected:&#xA;        int block_offset;&#xA;    };&#xA;&#xA;    RowIterator&amp;amp; row_iter(int row){return *(new RowIterator(this, row));}&#xA;    ColIterator&amp;amp; col_iter(int col){return *(new ColIterator(this, col));}&#xA;    BlockIterator&amp;amp; block_iter(int block){return *(new BlockIterator(this, block));}&#xA;&#xA;(...)&#xA;&#xA;    static int block_offset(int block){return ((block / 3) * size * 3) + ((block % 3) * 3);}&#xA;&#xA;protected:&#xA;        Field* field[grid_size];&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Sample usage:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This function is called, when I set a value in a field. It goes through all fields, that would possibly be influenced by this field (same row, col or block)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;void Field::do_exclusions(){&#xA;    // row&#xA;    for(Grid::RowIterator it = grid-&amp;gt;row_iter(row); *it; ++it)&#xA;        (*it)-&amp;gt;set_excluded(value);&#xA;    // col&#xA;    for(Grid::ColIterator it = grid-&amp;gt;col_iter(col); *it; ++it)&#xA;        (*it)-&amp;gt;set_excluded(value);&#xA;    // block&#xA;    for(Grid::BlockIterator it = grid-&amp;gt;block_iter(block); *it; ++it)&#xA;        (*it)-&amp;gt;set_excluded(value);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;So please tell me, if something like this would be &quot;acceptable&quot; (not to mention &quot;best practices&quot;), even if it somehow takes a very free view on the iterator concept.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And of course every idea how this could be improved is welcome.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;PS: I tried to add a tag &quot;iterator&quot; but I'm not allowed for too few reputation.&lt;/p&gt;&#xA;" OwnerUserId="741" LastEditorUserId="89257" LastEditDate="2016-08-05T12:51:21.080" LastActivityDate="2016-08-05T12:51:21.080" Title="Sudoku Grid special purpose Iterators" Tags="&lt;c++&gt;&lt;iterator&gt;&lt;sudoku&gt;" AnswerCount="2" CommentCount="0" FavoriteCount="4" />
  <row Id="559" PostTypeId="2" ParentId="551" CreationDate="2011-02-02T17:35:28.120" Score="5" Body="&lt;p&gt;My criticism is you are trying to abort via a crash:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;*((char*)0))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This invokes undefined behavior. It does not necessarily invoke a crash (or termination).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you want to raise the abort signal do so explicitly:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;raise(SIGABRT)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Also you are re-defing a system method using #define (I am relatively sure this is not allowed and causes undefined behavior though I can not quote chapter and verse).&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#define abort(msg) &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Also by doing this you need to search through all the source to find any current usage of abort. As this may clash with the new usage (or will the pre-processor be intelligent about it. The fact that I ask the question should make you worry let alone the answer).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Why not define your own function with a slightly different name (this will also allow you to call the system abort).&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#define abortWithMsg(msg) do { fprintf(stderr, msg); abort(); } while (false)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="507" LastActivityDate="2011-02-02T17:35:28.120" CommentCount="0" />
  <row Id="560" PostTypeId="2" ParentId="558" CreationDate="2011-02-02T17:46:54.173" Score="7" Body="&lt;p&gt;In my first quick scan through, here are some things I want to bring up:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;If you are going to overload operators, do it the way the users of the language expect, or don't do it at all.  I expect &lt;code&gt;operator++&lt;/code&gt; to return something, not be a &lt;code&gt;void&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Does &lt;code&gt;block_offset&lt;/code&gt; really need to be public?&lt;/li&gt;&#xA;&lt;li&gt;On that same note, do your actual concrete implementations of the iterators need to be public, since you have methods to create them that are public?  Would it make sense for anyone to ever want to create them a different way?&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="55" LastActivityDate="2011-02-02T17:46:54.173" CommentCount="9" />
  <row Id="561" PostTypeId="2" ParentId="549" CreationDate="2011-02-02T19:05:26.697" Score="8" Body="&lt;p&gt;If you're using C# 3.0, you can use extension methods&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// declare as&#xA;public static Image ResizeImage(this Image source, ...&#xA;&#xA;// use as &#xA;Image myThumb = myImage.Resize(...);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Treating width differently than height seems inconsistent. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Never dispose passed-in arguments in a public function (&lt;code&gt;ImageToResize&lt;/code&gt;). The caller almost never expects this to happen. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Do dispose the temporary local variables (&lt;code&gt;loadedImage&lt;/code&gt;). No other code can do it, and it could cause a memory leak.&lt;/p&gt;&#xA;" OwnerUserId="1370" LastActivityDate="2011-02-02T19:05:26.697" CommentCount="0" />
  <row Id="562" PostTypeId="1" AcceptedAnswerId="565" CreationDate="2011-02-02T19:14:50.720" Score="7" ViewCount="502" Body="&lt;p&gt;I have a class that spawns threads to process data. I am working on instrumentation code. When the process is started, &lt;code&gt;time = System.currentTimeMillis();&lt;/code&gt; When it completes, &lt;code&gt;time = System.currentTimeMillis() - time;&lt;/code&gt; I have a method to retrive this time:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/**&#xA; * Get the time taken for process to complete&#xA; * &#xA; * @return Time this process has run if running; time it took to complete if not&#xA; */&#xA;public long getRunTime() {&#xA;   return processRunning? System.currentTimeMillis() - time : time;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Is this a clear use of the ternary operator? Is my javadoc comment clear?&lt;/p&gt;&#xA;" OwnerUserId="110" LastEditorUserId="22222" LastEditDate="2016-08-09T22:20:00.030" LastActivityDate="2016-08-09T22:20:00.030" Title="Spawning threads to process data" Tags="&lt;java&gt;&lt;datetime&gt;" AnswerCount="4" CommentCount="1" />
  <row Id="563" PostTypeId="2" ParentId="562" CreationDate="2011-02-02T19:23:55.380" Score="4" Body="&lt;p&gt;It appears that the method sometimes returns a timestamp (&lt;code&gt;time&lt;/code&gt;) and sometimes it returns a duration (difference between timestamps) (assuming that &lt;code&gt;time&lt;/code&gt; is always a timestamp - if not, then this issue simply moves to &lt;code&gt;time&lt;/code&gt; having a dual definition).&lt;/p&gt;&#xA;" OwnerUserId="334" LastActivityDate="2011-02-02T19:23:55.380" CommentCount="2" />
  <row Id="564" PostTypeId="2" ParentId="413" CreationDate="2011-02-02T19:29:55.777" Score="0" Body="&lt;p&gt;When working with files, checking before an operation can be  useful, but you still always need to handle relevant exceptions (e.g. &lt;code&gt;FileNotFoundException&lt;/code&gt;, &lt;code&gt;IOException&lt;/code&gt;). &lt;/p&gt;&#xA;&#xA;&lt;p&gt;The permissions (or existence) of a file/directory may change between the time you check and time the operation is invoked (&lt;code&gt;new FileIOPermission(...)&lt;/code&gt; in this case). This situation is more common than it seems. &lt;/p&gt;&#xA;" OwnerUserId="1370" LastActivityDate="2011-02-02T19:29:55.777" CommentCount="0" />
  <row Id="565" PostTypeId="2" ParentId="562" CreationDate="2011-02-02T19:55:09.177" Score="6" Body="&lt;p&gt;Since the method has a return value even if the code is not finished processing the first line of your javadoc ought not read &quot;Get the time taken for process to complete&quot; but perhaps rather &quot;Get the current or total processing time&quot; or something of that nature? I also agree with Bert F's comment, but if there were clear comments explaining the behavior and you don't intend on exposing start and end times individually then there's no reason to waste an extra variable; you can either keep the code as it is and add comments or optionally get rid of the boolean &quot;processRunning&quot; and instead use your completedTime/runTime variable to establish the fact that it's still running. All minor gripes, all in all.&lt;/p&gt;&#xA;" OwnerUserId="1349" LastActivityDate="2011-02-02T19:55:09.177" CommentCount="0" />
  <row Id="566" PostTypeId="2" ParentId="562" CreationDate="2011-02-02T20:33:53.490" Score="6" Body="&lt;p&gt;I have no problem the ternary operator.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But it is hard to tell that the result is what the comments is saying. Without having a context on what time is (which is a bad variable name) it is hard to understand the result of the function.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;time: Bad variable name. Time of what?&lt;/p&gt;&#xA;" OwnerUserId="507" LastActivityDate="2011-02-02T20:33:53.490" CommentCount="0" />
  <row Id="567" PostTypeId="2" ParentId="514" CreationDate="2011-02-02T20:56:51.783" Score="2" Body="&lt;p&gt;Why can't you use the operators &lt;code&gt;||&lt;/code&gt; and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; ?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;im not at all literate with the syntax but you should be able to convert:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;% if condition %&amp;gt;            &#xA;  &amp;lt;% if condition %&amp;gt;&#xA;     &amp;lt;% if condition %&amp;gt;&#xA;     &amp;lt;% end %&amp;gt;&#xA;  &amp;lt;% end %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;into:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;% if condition &amp;amp;&amp;amp; condition &amp;amp;&amp;amp; condition %&amp;gt;&#xA;    &amp;lt;% expression %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Looking at the docs this logical expressions are available!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;also removing the language identifiers you should be able to do:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;%&#xA;    if condition &amp;amp;&amp;amp; condition &amp;amp;&amp;amp; condition&#xA;        expression&#xA;    end&#xA;%&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;When it comes down to the &lt;code&gt;else if&lt;/code&gt;'s then you can increase readability by doing a switch statement:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The main point is to remove the not so required &lt;code&gt;&amp;lt;%&lt;/code&gt; and &lt;code&gt;%&amp;gt;&lt;/code&gt; in places.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://www.ruby-doc.org/docs/ruby-doc-bundle/Manual/man-1.4/syntax.html#and&quot; rel=&quot;nofollow&quot;&gt;http://www.ruby-doc.org/docs/ruby-doc-bundle/Manual/man-1.4/syntax.html#and&lt;/a&gt;&lt;/p&gt;&#xA;" OwnerUserId="95" LastEditorUserId="95" LastEditDate="2011-02-02T22:26:03.820" LastActivityDate="2011-02-02T22:26:03.820" CommentCount="0" />
  <row Id="568" PostTypeId="1" AcceptedAnswerId="577" CreationDate="2011-02-02T21:25:51.983" Score="12" ViewCount="485" Body="&lt;p&gt;I am learning clojure and decided to start out by trying to write a solution to a fairly simple algorithm, reservoir sampling.  As I stated, I am learning clojure specifically and problem solving in a functional language in general.  Can someone please take a look at my code and critique it on it's &quot;clojureness&quot;.  Am I using the right idiomatic conventions, is there a way that performs better (and why), formatting, anything really.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(defn sample-seq [size data]&#xA;  (loop [sample (transient (vec (take size data)))&#xA;         idx size&#xA;         data (drop size data)]&#xA;    (if (empty? data)&#xA;      (persistent! sample)&#xA;      (let [rand-num (rand-int idx)&#xA;            new-sample (if (&amp;lt; rand-num size) &#xA;                         (assoc! sample rand-num (first data)) &#xA;                         sample)]&#xA;        (recur new-sample (inc idx) (rest data))))))&#xA;(println (sample-seq 4 [2.0, 4.0, 7.0, 6.0, 3.0, 8.0, 12.0, 9.0, 4.0, 1.0]))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1377" LastEditorUserId="1377" LastEditDate="2011-02-03T16:33:54.037" LastActivityDate="2011-07-12T18:02:06.403" Title="Reservoir Sampling in Clojure" Tags="&lt;functional-programming&gt;&lt;clojure&gt;" AnswerCount="3" CommentCount="0" />
  <row Id="569" PostTypeId="1" AcceptedAnswerId="573" CreationDate="2011-02-02T21:26:15.803" Score="12" ViewCount="1743" Body="&lt;p&gt;I implemented a solution to &lt;a href=&quot;http://codegolf.stackexchange.com/questions/339/binary-tree-encoding&quot;&gt;this coding challenge&lt;/a&gt; on the Code Golf. I have decent experience with C/C++, but it's been a while since I've used them extensively.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;math.h&amp;gt;&#xA;#include &amp;lt;stdio.h&amp;gt;&#xA;#include &amp;lt;stdlib.h&amp;gt;&#xA;&#xA;// Prototypes&#xA;struct BTnode;&#xA;struct BTnode * bt_add_left(struct BTnode * node, int data);&#xA;struct BTnode * bt_add_right(struct BTnode * node, int data);&#xA;int             bt_depth(struct BTnode * tree);&#xA;int             bt_encode_preorder(int * list, struct BTnode * tree, int index);&#xA;struct BTnode * bt_node_create(int data);&#xA;int             bt_node_delete(struct BTnode * node);&#xA;void            bt_print_preorder(struct BTnode * tree);&#xA;int *           encode(struct BTnode * tree);&#xA;struct BTnode * decode(int * list);&#xA;&#xA;// Binary tree node&#xA;struct BTnode&#xA;{&#xA;  int data;&#xA;  struct BTnode *left, *right;&#xA;};&#xA;&#xA;// Add node to this node's left&#xA;struct BTnode * bt_add_left(struct BTnode * node, int data)&#xA;{&#xA;  struct BTnode * newnode = bt_node_create(data);&#xA;  node-&amp;gt;left = newnode;&#xA;  return newnode;&#xA;}&#xA;&#xA;// Add node to this node's right&#xA;struct BTnode * bt_add_right(struct BTnode * node, int data)&#xA;{&#xA;  struct BTnode * newnode = bt_node_create(data);&#xA;  node-&amp;gt;right = newnode;&#xA;  return newnode;&#xA;}&#xA;&#xA;// Determine depth of the tree&#xA;int bt_depth(struct BTnode * tree)&#xA;{&#xA;  int depth;&#xA;  int leftdepth = 0;&#xA;  int  rightdepth = 0;&#xA;  if( tree == NULL ) return 0;&#xA;&#xA;  if( tree-&amp;gt;left != NULL )&#xA;    leftdepth = bt_depth(tree-&amp;gt;left);&#xA;  if( tree-&amp;gt;right != NULL )&#xA;    rightdepth = bt_depth(tree-&amp;gt;right);&#xA;&#xA;  depth = leftdepth;&#xA;  if(rightdepth &amp;gt; leftdepth)&#xA;    depth = rightdepth;&#xA;&#xA;  return depth + 1;&#xA;}&#xA;&#xA;// Recursively add node values to integer list, using 0 as an unfolding sentinel&#xA;int bt_encode_preorder(int * list, struct BTnode * tree, int index)&#xA;{&#xA;  list[ index++ ] = tree-&amp;gt;data;&#xA;&#xA;  // This assumes the tree is complete (i.e., if the current node does not have&#xA;  // a left child, then it does not have a right child either)&#xA;  if( tree-&amp;gt;left != NULL )&#xA;  {&#xA;    index = bt_encode_preorder(list, tree-&amp;gt;left, index);&#xA;    index = bt_encode_preorder(list, tree-&amp;gt;right, index);&#xA;  }&#xA;&#xA;  // Add sentinel&#xA;  list[ index++ ] = 0;&#xA;  return index;&#xA;}&#xA;&#xA;// Allocate memory for a node&#xA;struct BTnode * bt_node_create(int data)&#xA;{&#xA;  struct BTnode * newnode = (struct BTnode *) malloc(sizeof(struct BTnode));&#xA;  newnode-&amp;gt;left = NULL;&#xA;  newnode-&amp;gt;right = NULL;&#xA;  newnode-&amp;gt;data = data;&#xA;  return newnode;&#xA;}&#xA;&#xA;// Free node memory&#xA;int bt_node_delete(struct BTnode * node)&#xA;{&#xA;  int data;&#xA;  if(node == NULL)&#xA;    return 0;&#xA;  data = node-&amp;gt;data;&#xA;&#xA;  if(node-&amp;gt;left != NULL)&#xA;    bt_node_delete(node-&amp;gt;left);&#xA;  if(node-&amp;gt;right != NULL)&#xA;    bt_node_delete(node-&amp;gt;right);&#xA;&#xA;  free(node);&#xA;  return data;&#xA;}&#xA;&#xA;// Print all values from the tree in pre-order&#xA;void bt_print_preorder(struct BTnode * tree)&#xA;{&#xA;  printf(&quot;%d &quot;, tree-&amp;gt;data);&#xA;  if(tree-&amp;gt;left != NULL)&#xA;    bt_print_preorder(tree-&amp;gt;left);&#xA;  if(tree-&amp;gt;right != NULL)&#xA;    bt_print_preorder(tree-&amp;gt;right);&#xA;}&#xA;&#xA;// Decode binary tree structure from a list of integers&#xA;struct BTnode * decode(int * list)&#xA;{&#xA;  struct BTnode * tree;&#xA;  struct BTnode * nodestack[ list[0] ];&#xA;  int i,j;&#xA;&#xA;  // Handle trivial case&#xA;  if( list == NULL ) return NULL;&#xA;&#xA;  tree = bt_node_create( list[1] );&#xA;  nodestack[ 1 ] = tree;&#xA;&#xA;  j = 1;&#xA;  for(i = 2; i &amp;lt; list[0]; i++)&#xA;  {&#xA;    if( list[i] == 0 )&#xA;    {&#xA;      //printf(&quot;popping\n&quot;);&#xA;      j--;&#xA;    }&#xA;    else&#xA;    {&#xA;      if( nodestack[j]-&amp;gt;left == NULL )&#xA;      {&#xA;        //printf(&quot;Adding %d to left of %d\n&quot;, list[i], nodestack[j]-&amp;gt;data);&#xA;        nodestack[ j+1 ] = bt_add_left(nodestack[j], list[i]);&#xA;        j++;&#xA;      }&#xA;      else&#xA;      {&#xA;        //printf(&quot;Adding %d to right of %d\n&quot;, list[i], nodestack[j]-&amp;gt;data);&#xA;        nodestack[ j+1 ] = bt_add_right(nodestack[j], list[i]);&#xA;        j++;&#xA;      }&#xA;    }&#xA;  }&#xA;&#xA;  return tree;&#xA;}&#xA;&#xA;// Encode binary tree structure as a list of integers&#xA;int * encode(struct BTnode * tree)&#xA;{&#xA;  int maxnodes, depth, length;&#xA;  int * list;&#xA;  int j;&#xA;&#xA;  // Handle trivial case&#xA;  if(tree == NULL) return NULL;&#xA;&#xA;  // Calculate maximum number of nodes in the tree from the tree depth&#xA;  maxnodes = 1;&#xA;  depth = bt_depth(tree);&#xA;  for(j = 0; j &amp;lt; depth; j++)&#xA;  {&#xA;    maxnodes += pow(2, j);&#xA;  }&#xA;&#xA;  // Allocate memory for the list; we need two ints for each value plus the&#xA;  // first value in the list to indicate length&#xA;  list = (int *) malloc( ((maxnodes * 2)+1) * sizeof(int));&#xA;  length = bt_encode_preorder(list, tree, 1);&#xA;  list[ 0 ] = length;&#xA;  return list;&#xA;}&#xA;&#xA;int main()&#xA;{&#xA;  struct BTnode * tree;&#xA;  struct BTnode * newtree;&#xA;  int * list;&#xA;  int i;&#xA;&#xA;  /* Provided example&#xA;&#xA;        5&#xA;       / \&#xA;      3   2&#xA;         / \&#xA;        2   1&#xA;       / \&#xA;      9   9&#xA;  */&#xA;  tree = bt_node_create(5);&#xA;  bt_add_left(tree, 3);&#xA;  struct BTnode * temp = bt_add_right(tree, 2);&#xA;  bt_add_right(temp, 1);&#xA;  temp = bt_add_left(temp, 2);&#xA;  bt_add_left(temp, 9);&#xA;  bt_add_right(temp, 9);&#xA;  printf(&quot;T (traversed in pre-order):  &quot;);&#xA;  bt_print_preorder(tree);&#xA;  printf(&quot;\n&quot;);&#xA;&#xA;  list = encode(tree);&#xA;  printf(&quot;T (encoded as integer list): &quot;);&#xA;  for(i = 1; i &amp;lt; list[0]; i++)&#xA;    printf(&quot;%d &quot;, list[i]);&#xA;  printf(&quot;\n&quot;);&#xA;&#xA;  newtree = decode(list);&#xA;  printf(&quot;T' (decoded from int list):  &quot;);&#xA;  bt_print_preorder(newtree);&#xA;  printf(&quot;\n\n&quot;);&#xA;&#xA;&#xA;  // Free memory&#xA;  bt_node_delete(tree);&#xA;  bt_node_delete(newtree);&#xA;  free(list);&#xA;  return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;How could my program be improved? I'm thinking mostly in terms of clarity/readability, maintainability, and reusability, but I also welcome any comments about my implementation of the data structures and any possible improvements in terms of performance or correctness.&lt;/p&gt;&#xA;" OwnerUserId="45" LastEditorUserId="22222" LastEditDate="2014-11-01T20:10:26.283" LastActivityDate="2014-11-01T20:10:26.283" Title="Binary tree encoding" Tags="&lt;c&gt;&lt;tree&gt;" AnswerCount="5" CommentCount="0" FavoriteCount="1" />
  <row Id="571" PostTypeId="2" ParentId="569" CreationDate="2011-02-02T21:33:01.317" Score="6" Body="&lt;p&gt;I only have a minute before running out the door, so here's the first thing I saw:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Its good practice to set your pointers to &lt;code&gt;NULL&lt;/code&gt; after you free them.  Just as you are testing to ensure its not set to &lt;code&gt;NULL&lt;/code&gt; since you do that upon creation, you should do that when deleting.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="55" LastActivityDate="2011-02-02T21:33:01.317" CommentCount="1" />
  <row Id="572" PostTypeId="1" AcceptedAnswerId="574" CreationDate="2011-02-02T21:36:26.723" Score="9" ViewCount="502" Body="&lt;p&gt;I'm trying to learn a little bit about functional programming and as my tool I chose F# since I'm a .NET developer and the environment is more natural to me.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In one of my pet projects I'm dealing with dates, so I created a function to get the last date where a given week day occurred. For example, last Tuesday was yesterday (&lt;code&gt;DateTime.Now.AddDays(-1.0)&lt;/code&gt;).&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#light&#xA;&#xA;module DateTimeExtensions&#xA;    open System    &#xA;&#xA;    let rec whenWasLastBasedOnDate (weekDay:DayOfWeek, currentDate:DateTime) = &#xA;        match currentDate with&#xA;        | _ when currentDate.DayOfWeek = weekDay -&amp;gt; currentDate&#xA;        | _ -&amp;gt; whenWasLastBasedOnDate(weekDay, currentDate.AddDays(-1.0))&#xA;&#xA;    let whenWasLast (weekDay:DayOfWeek) = &#xA;        let currentDate = DateTime.Now&#xA;        match currentDate with&#xA;        | _ when currentDate.DayOfWeek = weekDay -&amp;gt; currentDate&#xA;        | _ -&amp;gt; whenWasLastBasedOnDate(weekDay, currentDate.AddDays(-1.0))    &#xA;&#xA;&#xA;    let now = DateTime.Now&#xA;    let lastSunday = whenWasLast DayOfWeek.Sunday&#xA;    let lastMonday = whenWasLast DayOfWeek.Monday&#xA;    let lastTuesday = whenWasLast DayOfWeek.Tuesday&#xA;    let lastWednesday = whenWasLast DayOfWeek.Wednesday&#xA;    let lastThursday = whenWasLast DayOfWeek.Thursday&#xA;    let lastFriday = whenWasLast DayOfWeek.Friday&#xA;    let lastSaturday = whenWasLast DayOfWeek.Saturday&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="865" LastEditorUserId="22222" LastEditDate="2014-07-19T03:13:50.953" LastActivityDate="2014-07-19T03:13:50.953" Title="Getting the last date where a given week day occurred" Tags="&lt;.net&gt;&lt;functional-programming&gt;&lt;f#&gt;&lt;datetime&gt;" AnswerCount="1" CommentCount="0" />
  <row Id="573" PostTypeId="2" ParentId="569" CreationDate="2011-02-02T21:37:54.797" Score="17" Body="&lt;h3&gt;In int bt_depth(struct BTnode * tree)&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Too many different checks for NULL.&lt;br&gt;&#xA;You only need to check once. The call to bt_depth() on the left and right nodes will perform there own explicit checks don't try and pre optimize.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;int bt_depth(struct BTnode * tree)&#xA;{&#xA;  if( tree == NULL ) return 0;&#xA;  int leftdepth  = bt_depth(tree-&amp;gt;left);&#xA;  int rightdepth = bt_depth(tree-&amp;gt;right);&#xA;&#xA;  return max(leftdepth, rightdepth) + 1;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3&gt;In int bt_encode_preorder(int * list, struct BTnode * tree, int index)&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;You are using tree without check for NULL tree&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;list[ index++ ] = tree-&amp;gt;data;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You are also doing a recursive call without checking.&lt;br&gt;&#xA;At some point you may end up hitting a NULL and trying to de-reference it.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if( tree-&amp;gt;left != NULL )&#xA;{&#xA;  index = bt_encode_preorder(list, tree-&amp;gt;left, index);&#xA;  index = bt_encode_preorder(list, tree-&amp;gt;right, index); // tree-&amp;gt;right may be NULL!!!!&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3&gt;In int bt_node_delete(struct BTnode * node)&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;This is note a node delete this is a full tree delete.&lt;br&gt;&#xA;It should be named appropriately.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;In void bt_print_preorder(struct BTnode * tree)&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;It is easier just to check if the current node is NULL.&lt;br&gt;&#xA;The always print left and right nodes.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;void bt_print_preorder(struct BTnode * tree)&#xA;{&#xA;  if (tree == NULL) return;&#xA;&#xA;  printf(&quot;%d &quot;, tree-&amp;gt;data);&#xA;  bt_print_preorder(tree-&amp;gt;left);&#xA;  bt_print_preorder(tree-&amp;gt;right);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3&gt;In encode(struct BTnode * tree)&lt;/h3&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;  // Calculate maximum number of nodes in the tree from the tree depth&#xA;  maxnodes = 1;&#xA;  depth = bt_depth(tree);&#xA;  for(j = 0; j &amp;lt; depth; j++)&#xA;  {&#xA;    maxnodes += pow(2, j);&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This is the only use of bt_depth(). Rather than do this why not just have a function called bt_count_nodes(BTnode* tree) that actual counts the nodes (bt_depth actually traverses all the nodes anyway (why not count them instead of the depth).&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;In struct BTnode * decode(int * list)&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;I can quite work out if this is correct without running it. This is a bad sign that the code could do with simplification.&lt;/p&gt;&#xA;" OwnerUserId="507" LastEditorUserId="507" LastEditDate="2011-02-03T01:39:37.613" LastActivityDate="2011-02-03T01:39:37.613" CommentCount="1" />
  <row Id="574" PostTypeId="2" ParentId="572" CreationDate="2011-02-02T22:35:29.257" Score="11" Body="&lt;p&gt;The most obvious point to make is that &lt;code&gt;whenWasLast&lt;/code&gt; repeats the entire code of &lt;code&gt;whenWasLastBasedOnDate&lt;/code&gt;. You can (and should) simply write the whole method by just calling &lt;code&gt;whenWasLastBasedOnDate&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;let whenWasLast (weekDay:DayOfWeek) =&#xA;    whenWasLastBasedOnDate(weekDay, DateTime.Now)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Another point is that you should write &lt;code&gt;AddDays(-1.0)&lt;/code&gt; as &lt;code&gt;AddDays -1.0&lt;/code&gt;. In languages with ML-like syntax it is generally discouraged to add redundant parentheses around function arguments because it encourages the misconception that the parentheses are part of the method call syntax.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;On a somewhat more subjective note, I think that using &lt;code&gt;if&lt;/code&gt; would read nicer than a &lt;code&gt;match&lt;/code&gt; without any patterns.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;On a more general design note it is generally considered good style in functional programming to use higher order functions to express the code more abstractly. For example instead of saying &quot;Check if the given day was a &lt;code&gt;weekDay&lt;/code&gt;. If so, return it, if not repeat with the day before&quot; you could say &quot;Look at the last seven days and return the one who is a &lt;code&gt;weekDay&lt;/code&gt;&quot;. This is not only more idiomatic functional programming, but also makes it impossible to get into infinite recursion by getting the exit condition wrong. In code it would look like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;[-6.0..0.0] |&amp;gt; Seq.map currentDate.AddDays |&amp;gt;&#xA;    Seq.find (fun d -&amp;gt; d.DayOfWeek = weekDay)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="128" LastEditorUserId="128" LastEditDate="2011-02-10T20:55:05.797" LastActivityDate="2011-02-10T20:55:05.797" CommentCount="2" />
  <row Id="575" PostTypeId="2" ParentId="185" CreationDate="2011-02-02T23:32:08.783" Score="5" Body="&lt;p&gt;I agree with Alex that &lt;code&gt;ManualResetEvent&lt;/code&gt; may be a little cleaner simply because you don't need to perform manual signal tracking to ensure you don't wait due to the &lt;code&gt;Monitor&lt;/code&gt; already pulsing but, as I understand it, &lt;code&gt;WaitHandle&lt;/code&gt; (used by &lt;code&gt;ManualResetEvent&lt;/code&gt;) has more overhead. It's also quite possible to use memory barriers and &lt;code&gt;Application.DoEvents&lt;/code&gt;/&lt;code&gt;Thread.Sleep&lt;/code&gt; in a time-limited loop to achieve a lockless solution, but none of this matters unless you have very strict resource/performance concerns. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Regardless, there's always more than one way to skin a cat and your usage is indeed safe and correct.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If the &lt;code&gt;Connect&lt;/code&gt; method is running on your UI thread be sure your timeout isn't really long or windows may think your application is not responding because blocking in &lt;code&gt;Monitor.Wait&lt;/code&gt; does not resume the window's message pumping; if you need a long timeout or it is not running on the UI thread you will need to ensure the &lt;code&gt;Connect&lt;/code&gt; method cannot be called again before the last has finished (if &lt;code&gt;this._channel.Open()&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt; if it is already open that should suffice). In the case of it being on the UI thread, besides preventing double execution, you would want to switch to a small timeout in a time-limited loop that calls &lt;code&gt;Application.DoEvents()&lt;/code&gt;. You may already be aware of these concerns but I'm having to make a lot of assumptions to review the code. While I'm at it, it's probably trivial, but you can also move you &lt;code&gt;Command&lt;/code&gt; instantiation to just before the lock to save yourself unnecessary instance creation in some cases.&lt;/p&gt;&#xA;" OwnerUserId="1349" LastEditorUserId="8891" LastEditDate="2012-01-31T21:34:18.040" LastActivityDate="2012-01-31T21:34:18.040" CommentCount="1" />
  <row Id="576" PostTypeId="2" ParentId="569" CreationDate="2011-02-03T00:01:48.530" Score="4" Body="&lt;p&gt;I recommend three improvements, one major and two minor.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The minor one first: Don't pad out with spaces to horizontally align tokens. There's nothing wrong with doing it, it'll just end up taking time to keep everything aligned, or you'll end up not bothering (because your in a hurry perhaps) and have inconsistent alignment.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Secondly, typedef your structure:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;typedef struct BTnode_def&#xA;{&#xA;  int data;&#xA;  struct BTnode_def *left, *right;&#xA;} BTnode;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;so you can just use &lt;code&gt;BTnode&lt;/code&gt; instead of &lt;code&gt;struct BTnode&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The major one: Don't use prototypes when you can use the function/structure itself as the prototype. You can get rid of the whole prototype section in your code. You'll need to move &lt;code&gt;bt_node_create&lt;/code&gt; up a bit though. This will decrease maintenance time - when you change a function's parameters / return value, you only need to do it once.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Oh, and I've just noticed that there appears to be a few C++ features in your code, so it's not pure C code.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;UPDATE&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I've removed the prefixed underscore (I actually don't do that normally). I'm not sure about the comment mentioning the namespace thing as C doesn't have namespaces.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As for C++ features (I'm not up to date with the C specification so some of these may be in the latest spec):&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Single line comments are C++&lt;/li&gt;&#xA;&lt;li&gt;Declarations at any point in the code are C++, C requires declarations to be at the start of the block, i.e. after a &lt;code&gt;{&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;ANOTHER UPDATE&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is a personal preference, but I like to put the point &lt;code&gt;*&lt;/code&gt; next to the symbol without a white space:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// Instead of this&#xA;BTNode * bt_node_create (...);&#xA;// I like&#xA;BTNode *bt_node_create (...);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;which, for me, makes it quicker to differentiate between multiplication and pointer dereferences:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;a * func ();  // an expression: a times return value of func&#xA;a *func ();   // a declaration: func returns a pointer to type a&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I know that the context of the above would disambiguate between the two, but that requires extra parsing by my brain of the adjacent code, and the less my brain has to do the better (it is an old brain after all and not as good as the ones these young people on here have ;-) ).&lt;/p&gt;&#xA;" OwnerUserId="1386" LastEditorUserId="1386" LastEditDate="2011-02-03T09:26:23.590" LastActivityDate="2011-02-03T09:26:23.590" CommentCount="5" />
  <row Id="577" PostTypeId="2" ParentId="568" CreationDate="2011-02-03T00:10:56.150" Score="10" Body="&lt;p&gt;I think your code is pretty readable and looks like idiomatic enough Clojure code¹. So from a readability standpoint your code seems fine. However performing &lt;code&gt;assoc&lt;/code&gt; on a vector of length &lt;code&gt;n&lt;/code&gt; takes &lt;code&gt;O(log n)&lt;/code&gt; time, so your runtime will be in &lt;code&gt;O(n log n)&lt;/code&gt; as opposed to &lt;code&gt;O(n)&lt;/code&gt;, which an imperative implementation would be in.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;However there's not much you can do about this other than perhaps using java arrays imperatively, but that would be very unidiomatic Clojure code. And &lt;code&gt;O(n log n)&lt;/code&gt; isn't that bad (definitely not as bad as the &lt;code&gt;O(n^2)&lt;/code&gt; I incorrectly claimed before).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;(Note that my previous note about transients was wrong as &lt;code&gt;assoc!&lt;/code&gt; on a transient vector has the same runtime complexity as on a persistent vector).&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;¹ Usually you'd avoid index-based loops wherever possible, but the nature of the algorithm makes that pretty much impossible here.&lt;/p&gt;&#xA;" OwnerUserId="128" LastEditorUserId="128" LastEditDate="2011-02-19T11:06:59.397" LastActivityDate="2011-02-19T11:06:59.397" CommentCount="2" />
  <row Id="578" PostTypeId="2" ParentId="569" CreationDate="2011-02-03T00:40:40.173" Score="2" Body="&lt;p&gt;A couple things in addition to the suggestions made already:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;As @Martin said, &lt;code&gt;bt_node_delete&lt;/code&gt; deletes a branch of the tree. I think a good term for that may be &quot;prune&quot;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;list = (int *) malloc( ((maxnodes * 2)+1) * sizeof(int));&lt;/code&gt; &lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;list = (int *) malloc( ((maxnodes * 2) + 1) * sizeof(int) );&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;list = (int *) malloc(((maxnodes * 2) + 1) * sizeof(int));&lt;/code&gt;&lt;br&gt;&#xA;I prefer #3, but #2 is more consistent with spacing in the style you gave.&lt;/li&gt;&#xA;&lt;/ol&gt;&lt;/li&gt;&#xA;&lt;li&gt;Place your pointer operators with the symbol it modifies:&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;struct BTnode * decode(int * list)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;BTnode *decode(int *list)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Personally I don't like the convention of putting spaces inside parenthesis and square brackets ( statement ). I think it is unnecessary whitespace that is harder to maintain if you need to change the statement.&lt;/p&gt;&#xA;" OwnerUserId="110" LastActivityDate="2011-02-03T00:40:40.173" CommentCount="0" />
  <row Id="579" PostTypeId="2" ParentId="569" CreationDate="2011-02-03T05:15:51.177" Score="4" Body="&lt;p&gt;Although it won't fail often, especially not in toy programs, it is still a good idea to check that &lt;code&gt;malloc()&lt;/code&gt; (and &lt;code&gt;realloc()&lt;/code&gt;  and &lt;code&gt;calloc()&lt;/code&gt; when you use them) haven't returned a null pointer.  And, when you use &lt;code&gt;realloc()&lt;/code&gt;, you do not assign the result to the variable passed as the first argument.  That is, do &lt;em&gt;not&lt;/em&gt; use:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;s&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;ptr = realloc(ptr, newsize);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;/s&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Use:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;newptr = realloc(oldptr, newsize);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;An alternative that is often sufficient is to use a cover function (&lt;code&gt;emalloc()&lt;/code&gt; and &lt;code&gt;xmalloc()&lt;/code&gt; are both used for the purpose) that guarantees not to return a null pointer.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;void *emalloc(size_t nbytes)&#xA;{&#xA;    void *ptr = malloc(nbytes);&#xA;    if (ptr == 0)&#xA;        abort();&#xA;    return(ptr);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You can use more elegant mechanisms than &lt;code&gt;abort()&lt;/code&gt; to report the error.&#xA;Use symmetric cover functions for &lt;code&gt;realloc()&lt;/code&gt;, &lt;code&gt;calloc()&lt;/code&gt; and &lt;code&gt;free()&lt;/code&gt;.&lt;/p&gt;&#xA;" OwnerUserId="1160" LastActivityDate="2011-02-03T05:15:51.177" CommentCount="0" />
  <row Id="580" PostTypeId="1" CreationDate="2011-02-03T07:40:05.443" Score="8" ViewCount="426" Body="&lt;p&gt;My own CMS is currently using jQuery, but as one of the goals is to have the whole project to be very small, I've decided to write my own basic library.  I only really need to select elements and modify them using results from my server (via Ajax).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;The JavaScript-library v0.01: (Attempt 1)&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(function(){&#xA;    a=this.Function;&#xA;    a.prototype.extend=(function(a,b){this[a]=b;return this});&#xA;    a.prototype.implement=(function(a,b){this.prototype[a]=b;return this});&#xA;    $=(function(a,b,c){return (b?$(b)[c?c:0]:document).querySelectorAll(a)})&#xA;    .extend(&quot;post&quot;,(function(a,b){&#xA;        c=[];&#xA;        for(x in a)&#xA;            c[c.length]=[x,a[x]].join(&quot;=&quot;);&#xA;        d=XMLHttpRequest?new XMLHttpRequest():new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);&#xA;        d.open(&quot;POST&quot;,&quot;./&quot;,true);&#xA;        d.setRequestHeader(&quot;Content-type&quot;,&quot;application/x-www-form-urlencoded&quot;);&#xA;        d.onreadystatechange=b;&#xA;        d.send(c.join(&quot;&amp;amp;&quot;));&#xA;        return this;&#xA;    }))&#xA;    .extend(&quot;each&quot;,(function(a,b,c){&#xA;        for(x in a)&#xA;            if(a.hasOwnProperty(x))&#xA;                b.call(c, a[x], x, a);&#xA;        return this;&#xA;    }));&#xA;})();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I know that &lt;code&gt;querySelectorAll&lt;/code&gt; can't be relied on, but it is just good for the start of this.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;The JavaScript-library v0.02: (Attempt 2)&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I believe this is much improved.  It has reasonable variable names, works better, and most of all is quite buggy.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var _    = new function Sample(){};  ////////////////////////////////////////&#xA;    _.temp  = {};                    // This Object is intended just for&#xA;    _.pages = {};                    // testing, I do the rest in the console&#xA;    _.pid   = {};                    // &amp;lt;- Stores the current pageID&#xA;    _.el    = {};                    // /PAGE-ID/PAGE-TITLE or #!page=PAGE-ID&#xA;    _.fn    = {};                    ////////////////////////////////////////&#xA;    _.$    = {};                     // &amp;lt;- Lets leave JQuery alown. :)&#xA;(function(){&#xA;    this.$ = function(a,b,c){&#xA;        if(b&amp;amp;&amp;amp;b.isType(&quot;string&quot;))   b = $(b);&#xA;        d=b?b[c|0]:document;&#xA;        return document.getElementsByClassName.call(d,a);&#xA;    };&#xA;    var $FP = Function.prototype, $OP = Object.prototype;&#xA;    $OP.isType = function (type){&#xA;        return typeof this === type;&#xA;    }&#xA;    $OP.each   = function(fun){ // `fun()` runs 3 times HOW??&#xA;        if(this.isType(&quot;array&quot;)&amp;amp;&amp;amp;this.forEach) return this.forEach(a); // if this is an array and we have a browser with Array().forEach then lets use native code instead.&#xA;        if(this.isType(&quot;object&quot;)||this.isType(&quot;array&quot;))&#xA;            for(var x in this)&#xA;                if(this.hasOwnProperty(x))&#xA;                    fun.call(this[x],x,this);&#xA;        return this;&#xA;    };&#xA;    $OP.toString    = function(){&#xA;        if(!this.isType(&quot;object&quot;)&amp;amp;&amp;amp;!this.isType(&quot;array&quot;)) return this;&#xA;        var arr=[];&#xA;        this.each(function(a){&#xA;            arr[arr.length] = a+&quot;=&quot;+this;&#xA;        });&#xA;        return arr.join(&quot;&amp;amp;&quot;);&#xA;    }&#xA;    $FP.multiInput = $FP.MI   = function(){&#xA;        var self = this;&#xA;        return function(obj){&#xA;            if(obj.isType(&quot;object&quot;)||obj.isType(&quot;array&quot;))&#xA;                obj.each(function(a,b){&#xA;                    self.call(b,a,this);&#xA;                });&#xA;            else&#xA;                self.apply(this,arguments);&#xA;            return this;&#xA;        };&#xA;    };&#xA;    $OP.extend = function(key,val){ // I want to add all my functions dynamicly and in bulk.&#xA;        (this.prototype||this)[key]=val; // Either myObject.extend(&quot;key&quot;,&quot;val&quot;) or my Object.extend({&quot;key&quot;:&quot;val&quot;}) work.&#xA;        return this;&#xA;    }.MI(); // MI/multiInput simply allows objects to be passed instead of making it more sence to use obj.prototype.test=myvalue;&#xA;    this.$.extend({&#xA;        &quot;post&quot;: function(a,b,c,d){&#xA;            var e=XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);&#xA;        e.open(&quot;post&quot;, a, true);&#xA;            e.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');&#xA;            e.onreadstatechange = function(){&#xA;                if(xmlhttp.readyState==4) // Page has fully loaded, now did we get a status code of &quot;200 ok&quot; or an error? Please tell me if &quot;304 Not modified&quot; should be added as run `c` and not `d`&#xA;                    (xmlhttp.status==200?c:d).call(xmlhttp.responseText,xmlhttp);&#xA;            };&#xA;            e.send(b.toString());&#xA;            return this;&#xA;        },&#xA;        &quot;post_json&quot;: function(a,b,c){&#xA;            return this.post(a,b,function(){&#xA;                c.call(&quot;return &quot;+$.Function(this)()); // This should run c with this being the object. What works better `()` or `.call()` ?? &#xA;            });&#xA;        }&#xA;    });&#xA;}).call(_); // Lets Leave JQuery alown.&#xA;&#xA;_.$.prototype.each(function(){console.log(this)});&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1390" LastEditorUserId="22222" LastEditDate="2014-03-14T03:25:19.297" LastActivityDate="2014-03-14T03:25:19.297" Title="Basic JavaScript library" Tags="&lt;javascript&gt;&lt;ajax&gt;&lt;library&gt;" AnswerCount="3" CommentCount="0" FavoriteCount="2" />
  <row Id="581" PostTypeId="2" ParentId="493" CreationDate="2011-02-03T08:12:14.950" Score="1" Body="&lt;p&gt;Just rough idea. Not tested.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// TODO: throw exception if turnRate is negative&#xA;// TODO: throw exception if abs(turnRate) exceeds some maximum value.&#xA;const float FUL_CIRCLE = 360; // or (2 * Math.PI) for radian&#xA;float difference = Math.IEEEremainder(requiredHeading - initialHaeding, FUL_CIRCLE);&#xA;float absTurnRate = Math.abs(turnRate);&#xA;float headingChange = Math.max(-absTurnRate, Math.min(+absTurnRete, difference));&#xA;float resultantHeeding = Math.IEEEremainder(initialHeading + headingChange, FUL_CIRCLE);&#xA;return resultantHeeding;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;if your platform does not provide Math.IEEEremainder, use the following:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;double GetRemainder(double dividend, double divisor) {&#xA;    return dividend - divisor * Math.round(dividend / divisor);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;or &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;double GetRemainder(double dividend, double divisor) {&#xA;    return dividend - divisor * Math.floor(dividend / divisor + 0.5);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1034" LastActivityDate="2011-02-03T08:12:14.950" CommentCount="0" />
  <row Id="582" PostTypeId="1" AcceptedAnswerId="583" CreationDate="2011-02-03T14:32:50.913" Score="6" ViewCount="7738" Body="&lt;p&gt;This code writes to Excel using the COM interface. The general issue is that any exception handling has to handle the &quot;Excel is busy&quot; exception. This occurs if information is sent to Excel quicker than it can handle it - eg. latency when a workbook is loaded/created, or the user is playing with the scrollbars (there are good reasons for letting this happen).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is probably the only example I know of which is simpler and cleaner in VB6 than in C#! In VB6 an ON ERROR would be used. The error handler would then create an error for most cases. But if the error code is a &quot;busy&quot; then it will sleep a short period of time (typically half a second) and then try again with a &quot;RESUME&quot;. Don't get me wrong, ON ERROR is generally messier than C#'s try...catch and it is easier to produce awful code; however, this is one example where the VB6 ON ERROR works better. A long sequence of Excel calls can be trapped with one handler. The &quot;RESUME&quot; will then send control back to the line where the 'busy' occurred - this avoids duplicate calls or skipped calls.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The solution I have in C# is to create a while loop with a flag. The flag indicates a repeat of the loop is required due to a 'busy' return from Excel. See the code below.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Is there a simpler, more elegant way of doing this?  The main problem is that this requires a method for each type of Excel call. To avoid too many duplicate Excel calls in the busy scenario, the contents of each method is atomic or close to atomic - eg. &quot;write this formatted value&quot;; &quot;apply this formatting to this row&quot;. This results in lots of methods. And/or methods with lots of parameters (the example below is a short one with just one format option, but there could be more - colors, decimal points, etc).&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private void WriteDoubleValue(Excel.Worksheet sh, int x, int y, double lfval, bool bBold)&#xA;{&#xA;    bool bNotSuccess = true;&#xA;    while (bNotSuccess)&#xA;    {&#xA;        try&#xA;        {&#xA;            ((Excel.Range)sh.Cells[y,x]).set_Value(Missing.Value, lfval);&#xA;            ((Excel.Range)sh.Cells[y, x]).Font.Bold = bBold;&#xA;            bNotSuccess = false;&#xA;        }&#xA;&#xA;        catch (System.Runtime.InteropServices.COMException e)&#xA;        {&#xA;            if ((e.ErrorCode &amp;amp; 0xFFFF) == 0xC472)&#xA;            {   // Excel is busy&#xA;                Thread.Sleep(500); // Wait, and...&#xA;                bNotSuccess = true;  // ...try again&#xA;            }&#xA;            else&#xA;            {   // Re-throw!&#xA;                throw e;&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="73" LastActivityDate="2011-02-03T17:41:50.593" Title="Handling COM exceptions / busy codes" Tags="&lt;c#&gt;&lt;exception&gt;" AnswerCount="2" CommentCount="1" FavoriteCount="1" />
  <row Id="583" PostTypeId="2" ParentId="582" CreationDate="2011-02-03T15:16:48.223" Score="7" Body="&lt;p&gt;If I understood you correctly, you have a lot of methods which are identical to the one you've shown except for the parameters they take and the contents of the &lt;code&gt;try&lt;/code&gt;-block. The rest is repeated code, which is bad.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To fix this I'd recommend to abstract the &quot;repeat this action as long as Excel is busy&quot; logic into its own method, which takes the action to be repeated as a parameter.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;On a style note, I would argue against using Hungarian Notation. It's not really commonly used in .net and basically every style guide written in this century argues against it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'd also recommend making the &lt;code&gt;bool&lt;/code&gt; variable positive (i.e. &lt;code&gt;success&lt;/code&gt; instead of &lt;code&gt;notSuccess&lt;/code&gt;). This way people don't have to perform double negation in their head when reading things like &lt;code&gt;notSuccess = false&lt;/code&gt; (which would be changed to &lt;code&gt;success = true&lt;/code&gt;).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;With these suggestions the code could look like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private void TryUntilSuccess(Action action)&#xA;{&#xA;    bool success = false;&#xA;    while (!success)&#xA;    {&#xA;        try&#xA;        {&#xA;            action();&#xA;            success = true;&#xA;        }&#xA;&#xA;        catch (System.Runtime.InteropServices.COMException e)&#xA;        {&#xA;            if ((e.ErrorCode &amp;amp; 0xFFFF) == 0xC472)&#xA;            {   // Excel is busy&#xA;                Thread.Sleep(500); // Wait, and...&#xA;                success = false;  // ...try again&#xA;            }&#xA;            else&#xA;            {   // Re-throw!&#xA;                throw e;&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You could then implement &lt;code&gt;WriteDoubleValue&lt;/code&gt; and all the methods like it with a call to &lt;code&gt;TryUntilSuccess&lt;/code&gt; like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;TryUntilSuccess( () =&amp;gt;&#xA;{&#xA;    ((Excel.Range)sh.Cells[y,x]).set_Value(Missing.Value, lfval);&#xA;    ((Excel.Range)sh.Cells[y, x]).Font.Bold = bBold;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="128" LastActivityDate="2011-02-03T15:16:48.223" CommentCount="2" />
  <row Id="584" PostTypeId="2" ParentId="580" CreationDate="2011-02-03T17:15:58.177" Score="4" Body="&lt;p&gt;I would suggest writing your code with full variable names and generating your production version with a minimizer to improve readability. As it stands this is reviewable because it's small, but I have no desire to be thorough because your variables are annoying to trace. This will also make maintenance less of a hassle.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Overall it looks to accomplish the objective. Each ajax request will require manual error checking if you plan on having any fault-tolerance. If this will be used several times you may want to refactor the error checking into the base to save overall code length later.&lt;/p&gt;&#xA;" OwnerUserId="1349" LastActivityDate="2011-02-03T17:15:58.177" CommentCount="5" />
  <row Id="585" PostTypeId="2" ParentId="582" CreationDate="2011-02-03T17:41:50.593" Score="2" Body="&lt;p&gt;When re-throwing an exception don't specify the exception or throw a new exception with the old one as an inner exception otherwise you replace the exception stack trace with the line of the throw in the catch block which will prevent you from seeing which of the lines in the try block caused the exception. I assume you're using this in many places? I've refactored out the error check, but sepp2k's code promotes greater reusability of the pattern as a whole. Still, here's a slightly more efficient and shorter implementation of the control loop itself in case you're more comfortable with it. A hybrid of the two is probably your best bet.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private void WriteDoubleValue(Excel.Worksheet sh, int x, int y, double lfval, bool bBold)&#xA;{&#xA;    bool retry = false;&#xA;    do&#xA;    {&#xA;        try&#xA;        {&#xA;            ((Excel.Range)sh.Cells[y,x]).set_Value(Missing.Value, lfval);&#xA;            ((Excel.Range)sh.Cells[y, x]).Font.Bold = bBold;&#xA;        }&#xA;        catch (System.Runtime.InteropServices.COMException e)&#xA;        {&#xA;            if (retry = e.ShouldRetry())&#xA;            {   // Excel is busy&#xA;                Thread.Sleep(500); // Wait, and...&#xA;            }&#xA;            else throw; &#xA;            //calling throw without a param *rethrows* &#xA;            //which is important to preserve the stack trace&#xA;        }&#xA;    } while (retry);&#xA;}&#xA;&#xA;private void ShouldRetry(this COMException e) {&#xA;    return ((e.ErrorCode &amp;amp; 0xFFFF) == 0xC472);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1349" LastActivityDate="2011-02-03T17:41:50.593" CommentCount="3" />
  <row Id="586" PostTypeId="2" ParentId="300" CreationDate="2011-02-03T18:19:24.853" Score="5" Body="&lt;p&gt;I'm not sure if this belongs as a comment here but I built my solution in clojure as well.  The Fibonacci numbers are generated as an infinite sequence as per Halloway's &quot;Programming in Clojure&quot; p. 136.  I then sum using using a list comprehension&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;;;Programming in Clojure p. 136&#xA;&#xA;(defn fibo [] (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1])))&#xA;&#xA;(defn proj-euler2 [] &#xA;  (reduce + (for [x (fibo) :when (even? x) :while (&amp;lt; x 4000000)] x)))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1377" LastEditorUserId="1377" LastEditDate="2011-02-03T18:32:15.147" LastActivityDate="2011-02-03T18:32:15.147" CommentCount="0" />
  <row Id="587" PostTypeId="1" AcceptedAnswerId="614" CreationDate="2011-02-03T20:26:24.293" Score="7" ViewCount="655" Body="&lt;p&gt;I'm writng a logger extension that allows multiple threads to log a process and then dump that log to the main log in one atomic operation. The point of it is to make the logs easier to read when many threads are executing. Is this test valid and clear?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/**&#xA; * Test that thread logs do not interlace&#xA; * @throws InterruptedException &#xA; */&#xA;@Test&#xA;public void testDumpMultithreaded() throws InterruptedException {&#xA;    Thread t1 = new Thread() {&#xA;        @Override&#xA;        public void run() {&#xA;            logger.bufferedMessages.get().add(&quot;t1: One&quot;);&#xA;            logger.bufferedMessages.get().add(&quot;t1: Two&quot;);&#xA;            logger.bufferedMessages.get().add(&quot;t1: Three&quot;);&#xA;            logger.dump();&#xA;        }&#xA;    };&#xA;&#xA;    Thread t2 = new Thread() {&#xA;        @Override&#xA;        public void run() {&#xA;            logger.bufferedMessages.get().add(&quot;t2: One&quot;);&#xA;            logger.bufferedMessages.get().add(&quot;t2: Two&quot;);&#xA;            logger.bufferedMessages.get().add(&quot;t2: Three&quot;);&#xA;            logger.dump();&#xA;        }&#xA;    };&#xA;&#xA;    t1.start();&#xA;    t2.start();&#xA;&#xA;    t1.join();&#xA;    t2.join();&#xA;&#xA;    Iterator&amp;lt;String&amp;gt; i = logger.messages.iterator();&#xA;    boolean t1Correct = false;&#xA;    boolean t2Correct = false;&#xA;&#xA;    while (i.hasNext()) {&#xA;        if (i.next().equals(&quot;t1: One&quot;)) {&#xA;            t1Correct = true;&#xA;            t2Correct &amp;amp;= i.next().equals(&quot;t1: Two&quot;);&#xA;            t2Correct &amp;amp;= i.next().equals(&quot;t1: Three&quot;);&#xA;        }&#xA;    }&#xA;&#xA;    i = logger.messages.iterator();&#xA;    while (i.hasNext()) {&#xA;        if (i.next().equals(&quot;t2: One&quot;)) {&#xA;            t2Correct = true;&#xA;            t2Correct &amp;amp;= i.next().equals(&quot;t2: Two&quot;);&#xA;            t2Correct &amp;amp;= i.next().equals(&quot;t2: Three&quot;);&#xA;        }&#xA;    }&#xA;&#xA;    assertEquals(&quot;Thread one's log not consecutive: &quot;, true, t1Correct);&#xA;    assertEquals(&quot;Thread two's log not consecutive: &quot;, true, t2Correct);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="110" LastActivityDate="2011-02-06T19:13:55.997" Title="Multithreaded log test" Tags="&lt;java&gt;&lt;unit-testing&gt;&lt;multithreading&gt;" AnswerCount="2" CommentCount="2" />
  <row Id="588" PostTypeId="2" ParentId="580" CreationDate="2011-02-03T20:28:40.830" Score="13" Body="&lt;p&gt;Rewrite it from scratch, if I were to encounter such code in any commit, I would immediately remove that code and talk with the one who committed it about JS in general...&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// anonymous wrapper if fine...&#xA;(function(){&#xA;&#xA;    // but not using var still creates global variables&#xA;    a=this.Function; // why are you extending the builtin function constructor?&#xA;&#xA;                           // no need for extra parenthesis here&#xA;                           // also, this is hardly needed.. for the code below&#xA;    a.prototype.extend=    (function(a,b){this[a]=b;return this});&#xA;&#xA;&#xA;    // what is this being used for?&#xA;    a.prototype.implement=(function(a,b){this.prototype[a]=b;return this});&#xA;&#xA;&#xA;    // overrides an existing mapping of jQuery&#xA;    $=(function(a,b,c){return (b?$(b)[c?c:0]:document).querySelectorAll(a)})&#xA;&#xA;    // hard to read&#xA;    .extend(&quot;post&quot;,(function(a,b){&#xA;&#xA;        // more leakage&#xA;        c=[];&#xA;&#xA;        // if you don't use {} you might as well put it on the same line&#xA;        // Oh and I shouldn't forget my usual rant about the missing&#xA;        // hasOwnProperty call&#xA;        for(x in a) // leakage of x&#xA;            c[c.length]=[x,a[x]].join(&quot;=&quot;); // what about c.push() ?&#xA;&#xA;        // leakage leakage leakage&#xA;        d=XMLHttpRequest?new XMLHttpRequest():new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);&#xA;&#xA;        d.open(&quot;POST&quot;,&quot;./&quot;,true);&#xA;        d.setRequestHeader(&quot;Content-type&quot;,&quot;application/x-www-form-urlencoded&quot;);&#xA;        d.onreadystatechange=b;&#xA;        d.send(c.join(&quot;&amp;amp;&quot;));&#xA;        return this;&#xA;    }))&#xA;&#xA;    .extend(&quot;each&quot;,(function(a,b,c){&#xA;        for(x in a) // leakage of x&#xA;            if(a.hasOwnProperty(x)) // why all of a sudden hasOwnProperty here?&#xA;                b.call(c, a[x], x, a);&#xA;        return this;&#xA;    }));&#xA;})();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3&gt;EDIT&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;An untested cleaned up version from me.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(function() {&#xA;    function $(selector, parentSelector, index) {&#xA;        var element = parentSelector ? $(parentSelector)[index || 0] : document;&#xA;        return element.querySelectorAll(a);&#xA;    };&#xA;&#xA;    $.extend = function(obj, props) {&#xA;        for(var i in props) {&#xA;            if (props.hasOwnProperty(i)) {&#xA;                obj[i] = props[i];&#xA;            }&#xA;        }&#xA;        return this;&#xA;    };&#xA;&#xA;    $.extend($, {&#xA;        post: function(data, callback) {&#xA;            var params = [];&#xA;&#xA;            for(var i in data) {&#xA;                if (data.hasOwnProperty(i)) {&#xA;&#xA;                    // might need url encoding...&#xA;                    params.push([i, data[i]].join('='));&#xA;                }&#xA;            }&#xA;&#xA;            // this might need for fallbacks, check the jQuery source for that&#xA;            var req;&#xA;            if (XMLHttpRequest) {&#xA;                req = new XMLHttpRequest();&#xA;&#xA;            } else {&#xA;                req = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);&#xA;            }&#xA;&#xA;            req.open('post', '/', true);&#xA;&#xA;            // is that really cross browser these days?&#xA;            req.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');&#xA;            req.onreadstatechange = callback;&#xA;            req.send(params.join('&amp;amp;'));&#xA;            return this;&#xA;        },&#xA;&#xA;        each: function(obj, func, that) {&#xA;            for(var i in obj) {&#xA;                if (obj.hasOwnProperty(i)) {&#xA;                    func.call(that, obj[i], obj, i);&#xA;                }&#xA;            }&#xA;            return this;&#xA;        }&#xA;    });&#xA;    window.$ = $;&#xA;})();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="89" LastEditorUserId="89" LastEditDate="2011-02-03T20:52:58.843" LastActivityDate="2011-02-03T20:52:58.843" CommentCount="0" />
  <row Id="589" PostTypeId="2" ParentId="580" CreationDate="2011-02-03T20:48:53.930" Score="10" Body="&lt;p&gt;This code uses some poor mistakes and has a few mistakes in it. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;See annotated code.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Recommended reading : &lt;a href=&quot;http://dailyjs.com/2010/02/25/djscript-part-1-structure/&quot;&gt;Let's make a framework&lt;/a&gt; , learn from the jQuery source &lt;a href=&quot;http://paulirish.com/2010/10-things-i-learned-from-the-jquery-source/&quot;&gt;1&lt;/a&gt; and &lt;a href=&quot;http://paulirish.com/2011/11-more-things-i-learned-from-the-jquery-source/&quot;&gt;2&lt;/a&gt; and the jquery &lt;a href=&quot;https://github.com/jquery/jquery&quot;&gt;source&lt;/a&gt; (warning. Daunting!)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(function () {&#xA;    // Ok so were going to extend the global Function object?&#xA;    // Don't extend native objects it really messes with other people's code&#xA;    // If you must you can either clone them or wrap around them&#xA;&#xA;    // Let's not forget that a is implecitly global. We do not do this.&#xA;    // If we want a global we MAKE it global. so declare it with &#xA;    // var a = ...&#xA;    // and use global.a or window.a = ... to set things in global scope&#xA;    // a doesn't even need to be global and if it's does its a horrible name.&#xA;    a = this.Function;&#xA;    // Were calling extend twice. Why don't we define $.post and $.each&#xA;    // seperately instead. This is a classic case of hardcore over-engineering&#xA;&#xA;    // We do not extend native prototypes. This is bad, other people make &#xA;    // assumptions of what the native prototypes are like&#xA;&#xA;    // No need to wrap functions in ( ). This is only neccesary for when you&#xA;    // want to do &#xA;    // (function() { }()) and  there are no other &quot;symbols&quot; on the line.&#xA;    // We only use ( ) because function () { }() is an invalid expression &#xA;    // and throws an error without ( )&#xA;    a.prototype.extend = (function (a, b) {&#xA;        // why do we need a f.extend(&quot;foo&quot;, o) &#xA;        // It's neater to just call f.foo = o&#xA;        // This function is redundant. &#xA;        this[a] = b;&#xA;        // Ok it implements chaining. It's really not worth it for chaining&#xA;        // all you can chain is f.extend. &#xA;        return this&#xA;    });&#xA;    // Dead code&#xA;    a.prototype.implement = (function (a, b) {&#xA;        // Even if its not dead again your just calling f.implement(&quot;foo&quot;, o)&#xA;        // instead of f.prototype.foo = o&#xA;        // this really hurts readability and feels unneccesary.&#xA;        this.prototype[a] = b;&#xA;        return this&#xA;    });&#xA;    // Woh another implecit global this is bad. Oh and let's overwrite anyone&#xA;    // who defines $ shall we. Bye jQuery, bye prototype, bye mootools. &#xA;    // if your writing a framework then don't overwrite common names like $.&#xA;    // Dont use excuses like I will only use it. If your going to do it, &#xA;    // then do it properly.&#xA;    $ = (function (a, b, c) {&#xA;        // I might get round to &quot;understanding&quot; this block. It's messy though&#xA;        return (b ? $(b)[c ? c : 0] : document).querySelectorAll(a)&#xA;    }).extend(&quot;post&quot;, (function (a, b) {&#xA;        c = [];&#xA;        for (x in a)&#xA;        c[c.length] = [x, a[x]].join(&quot;=&quot;);&#xA;        d = XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);&#xA;        d.open(&quot;POST&quot;, &quot;./&quot;, true);&#xA;        d.setRequestHeader(&quot;Content-type&quot;, &quot;application/x-www-form-urlencoded&quot;);&#xA;        d.onreadystatechange = b;&#xA;        d.send(c.join(&quot;&amp;amp;&quot;));&#xA;        return this;&#xA;    })).extend(&quot;each&quot;, (function (a, b, c) {&#xA;        for (x in a)&#xA;        if (a.hasOwnProperty(x)) b.call(c, a[x], x, a);&#xA;        return this;&#xA;    }));&#xA;})();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="463" LastActivityDate="2011-02-03T20:48:53.930" CommentCount="3" />
  <row Id="590" PostTypeId="1" AcceptedAnswerId="593" CreationDate="2011-02-03T20:59:00.940" Score="11" ViewCount="7219" Body="&lt;p&gt;I have a block of code below. The &lt;code&gt;allDone()&lt;/code&gt; method at the bottom should only be run if the &lt;code&gt;allCompleted == true&lt;/code&gt;. It should run through each of the statements to test.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;code&gt;allCompleted&lt;/code&gt;: This starts as true so the below logic works right.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;code&gt;run*.Checked&lt;/code&gt;: This is based on a check box in a form. This block should only run if this box is checked.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;code&gt;cmd&lt;/code&gt;: This is a generic string variable stating whether another part of the code (not shown here) was run successfully. If it has run successfully this string will read &quot;done&quot;.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;After those options, if all enabled (&lt;code&gt;run*.Checked == true&lt;/code&gt;) methods have returned the &lt;code&gt;cmd*&lt;/code&gt; string as &lt;code&gt;&quot;done&quot;&lt;/code&gt; (everything that's checked has run successfully) then &lt;code&gt;allCompleted&lt;/code&gt; should be &lt;code&gt;true&lt;/code&gt; at the end so &lt;code&gt;allDone()&lt;/code&gt; gets run.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If one single enabled method returns &lt;code&gt;false&lt;/code&gt; (there was an error somewhere or otherwise it did not return &lt;code&gt;&quot;done&quot;&lt;/code&gt;), then the &lt;code&gt;allDone()&lt;/code&gt; method should not be run and the code will continue, skipping the last &lt;code&gt;if (allCompleted)&lt;/code&gt; statement.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;bool allCompleted = true;&#xA;&#xA;if (runPart1.Checked)&#xA;    if (cmdPart1 == &quot;done&quot;)&#xA;        allCompleted = ((allCompleted)? true : false);&#xA;    else&#xA;        allCompleted = false;&#xA;&#xA;if (runPart2.Checked)&#xA;    if (cmdPart2 == &quot;done&quot;)&#xA;        allCompleted = ((allCompleted) ? true : false);&#xA;    else&#xA;        allCompleted = false;&#xA;&#xA;if (runPart3.Checked)&#xA;    if (cmdPart3 == &quot;done&quot;)&#xA;        allCompleted = ((allCompleted) ? true : false);&#xA;    else&#xA;        allCompleted = false;&#xA;&#xA;if (runPart4.Checked)&#xA;    if (cmdPart4 == &quot;done&quot;)&#xA;        allCompleted = ((allCompleted) ? true : false);&#xA;    else&#xA;        allCompleted = false;&#xA;&#xA;&#xA;if (allCompleted)&#xA;    allDone();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;So if at anytime one of the enabled parts fail the code will basically just move on.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As it stands this code works, I just feel like it could be written better. Is this the best way or have I got it? Something about it makes me feel awkward still. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt; Also, each time one of the parts completes, it runs this method, so it will run a few times being false in the end until the last one runs and all the others are &quot;done&quot; in which case it should completes and run &lt;code&gt;allDone()&lt;/code&gt;.&lt;/p&gt;&#xA;" OwnerUserId="1406" LastEditorUserId="59481" LastEditDate="2015-12-14T01:52:30.880" LastActivityDate="2015-12-14T01:52:30.880" Title="Nested if statements with 3 different parameters" Tags="&lt;c#&gt;&lt;.net&gt;" AnswerCount="5" CommentCount="2" FavoriteCount="1" />
  <row Id="592" PostTypeId="2" ParentId="590" CreationDate="2011-02-03T21:10:24.117" Score="3" Body="&lt;pre&gt;&lt;code&gt;allCompleted = true;&#xA;allCompleted &amp;amp;= (!runPart1.Checked || cmdPart1 == &quot;done&quot;));&#xA;allCompleted &amp;amp;= (!runPart2.Checked || cmdPart2 == &quot;done&quot;));&#xA;allCompleted &amp;amp;= (!runPart3.Checked || cmdPart3 == &quot;done&quot;));&#xA;allCompleted &amp;amp;= (!runPart4.Checked || cmdPart4 == &quot;done&quot;));&#xA;&#xA;if (allCompleted) {&#xA;   allDone();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Here's a start - without more context I'm not sure what else can be done. Will edit other ideas later.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;EDIT: Possible idea for you to try:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;interface RunPart {&#xA;   public boolean doAction();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And for the action code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;ArrayList CheckActions = new ArrayList();&#xA;&#xA;if (RunPart1.Checked)&#xA;   CheckActions.add(new RunPart1());&#xA;&#xA;if (RunPart2.Checked)&#xA;   CheckActions.add(new RunPart2());&#xA;&#xA;if (RunPart3.Checked)&#xA;   CheckActions.add(new RunPart3());&#xA;&#xA;if (RunPart4.Checked)&#xA;   CheckActions.add(new RunPart4());&#xA;&#xA;foreach (RunPart runPart in CheckActions) {&#xA;   allCompleted &amp;amp;= part.doAction();&#xA;}&#xA;&#xA;if (allCompleted) {&#xA;   allDone();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;All the RunParts need to implement the &lt;code&gt;RunPart&lt;/code&gt; interface. This will make it a bit easier to add more actions in the future. Not sure if this is practical for you or not but here it is.&lt;/p&gt;&#xA;" OwnerUserId="110" LastEditorUserId="110" LastEditDate="2011-02-05T00:50:55.027" LastActivityDate="2011-02-05T00:50:55.027" CommentCount="11" />
  <row Id="593" PostTypeId="2" ParentId="590" CreationDate="2011-02-03T21:28:46.867" Score="11" Body="&lt;p&gt;Okay, here is how I would reduce the code duplication (if I am understanding the conditions correctly):&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Edit: &lt;strong&gt;Original:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;bool runCompleted(bool checked, string done)&#xA;{&#xA;    if( ( checked &amp;amp;&amp;amp; done == &quot;done&quot; ) || !checked )&#xA;        return true;&#xA;    else&#xA;        return false;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;New version based on Jerry's feedback:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;bool runCompleted(bool checked, string done)&#xA;{&#xA;    return !checked || done == &quot;done&quot;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then in your code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if(    runCompleted(runPart1.Checked, cmdPart1 )&#xA;    &amp;amp;&amp;amp; runCompleted(runpart2.Checked, cmdPart2 )&#xA;    &amp;amp;&amp;amp; runCompleted(runpart3.Checked, cmdPart3 )&#xA;    &amp;amp;&amp;amp; runCompleted(runpart4.Checked, cmdPart4 )&#xA;  )&#xA;    allDone();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="55" LastEditorUserId="805" LastEditDate="2011-02-09T10:12:08.453" LastActivityDate="2011-02-09T10:12:08.453" CommentCount="5" />
  <row Id="594" PostTypeId="2" ParentId="590" CreationDate="2011-02-03T21:45:55.443" Score="0" Body="&lt;p&gt;I'm a very big noob at C# so please forgive me if this is a horrible solution, but how about using arrays?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;bool allCompleted = true;&#xA;String[] commands = { cmdPart1, cmdPart2, cmdPart3, cmdPart4 };&#xA;CheckBox[] checkBoxes = { runPart1, runPart2, runPart3, runPart4 };&#xA;&#xA;// ensure commands.Length == checkBoxes.Length&#xA;for (int i = 0; i &amp;lt; checkBoxes.Length; i++)&#xA;    if (checkBoxes[i].Checked &amp;amp;&amp;amp; commands[i] != &quot;done&quot;)&#xA;        allCompleted = false;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1328" LastActivityDate="2011-02-03T21:45:55.443" CommentCount="4" />
  <row Id="595" PostTypeId="2" ParentId="590" CreationDate="2011-02-03T22:21:17.970" Score="15" Body="&lt;p&gt;Others are giving you refactoring ideas, so I will just focus on one statement in your original code that is repeated 4 times. &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;allCompleted = ((allCompleted) ? true : false); &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Look at this. You are inspecting &lt;code&gt;allCompleted&lt;/code&gt;. If the value is true,  you're setting it to true. If it is not true, you're setting it to false. You are setting it to what it already is in a sort of non-intuitive way. You could very well rewrite it as the below and have the exact same meaning.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;allCompleted = allCompleted ? allCompleted : allCompleted;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Simplify that to &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;allCompleted = allCompleted;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And then simplify &lt;em&gt;that&lt;/em&gt; to leaving it out altogether.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if(runPart1.Checked)&#xA;   if (cmdPart1 != &quot;done&quot;)&#xA;      allCompleted = false;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Code can be complicated enough as it is. Try not to add further complexity by including code that can be non-obvious in the fact that it does nothing at all!&lt;/p&gt;&#xA;" OwnerUserId="153" LastActivityDate="2011-02-03T22:21:17.970" CommentCount="3" />
  <row Id="596" PostTypeId="2" ParentId="522" CreationDate="2011-02-03T22:43:24.520" Score="3" Body="&lt;p&gt;This seems to be a lot of code to say the same as this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;[AjaxOnly]&#xA;[Authorize]&#xA;public ActionResult Details(int id)&#xA;{&#xA;    User userToGet = _session.Get&amp;lt;User&amp;gt;(id);&#xA;&#xA;    if (userToGet == null)&#xA;    {&#xA;        return PartialView(&quot;Partials/UserNotFound&quot;);&#xA;    }&#xA;&#xA;    DetailsUserViewModel userToViewModel = Mapper.Map&amp;lt;User, DetailsUserViewModel&amp;gt;(userToGet);&#xA;&#xA;    return PartialView(&quot;Partials/Details&quot;, userToViewModel);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;What problem are you trying to solve here?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;(or am I missing something?)&lt;/p&gt;&#xA;" OwnerUserId="1416" LastActivityDate="2011-02-03T22:43:24.520" CommentCount="5" />
  <row Id="597" PostTypeId="1" AcceptedAnswerId="598" CreationDate="2011-02-04T03:24:48.727" Score="4" ViewCount="413" Body="&lt;p&gt;I got sick of manually xrandering things on my computers (especially since I always just sequence monitors from left to right and set each at the highest resolution) so I wrote this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#!/usr/bin/ruby&#xA;&#xA;def xrandrPairs (xList)&#xA;## Takes a split list of xrandr output and returns [[&amp;lt;display name&amp;gt;, &amp;lt;max-resolution&amp;gt;], ...]&#xA;  pairs = [[matchDisplay(xList[0]), matchOption(xList[1])]]&#xA;  (2..xList.length-1).to_a.each do |i| # kind of hacky, but I need to reference car and cadr here, so a call to .map won't do it&#xA;    if xList[i] =~ /^\S/ &#xA;      pairs.push([matchDisplay(xList[i]), matchOption(xList[i+1])]) &#xA;    end&#xA;  end&#xA;  pairs&#xA;end&#xA;&#xA;def matchDisplay (dispString)&#xA;## Matches a display name&#xA;  dispString.match(/^([^\s]*)/)[1]&#xA;end&#xA;&#xA;def matchOption (optString)&#xA;## Matches a resolution string (since they have whitespace preceding them)&#xA;  optString.match(/^\s*([^\s]*)/)[1]&#xA;end&#xA;&#xA;def xrandrString (xPairs)&#xA;## Takes [[&amp;lt;display name&amp;gt;, &amp;lt;max-resolution&amp;gt;] ...] and returns an xrandr command string&#xA;  s = &quot;xrandr --output #{xPairs[0][0]} --mode #{xPairs[0][1]}&quot;&#xA;  if xPairs.length &amp;gt;= 2&#xA;    (1..xPairs.length-1).to_a.each do |i| # same as above&#xA;      s += &quot; --output #{xPairs[i][0]} --mode #{xPairs[i][1]} --right-of #{xPairs[i-1][0]}&quot;&#xA;    end&#xA;  end&#xA;  s&#xA;end&#xA;&#xA;exec xrandrString(xrandrPairs(`xrandr`.split(&quot;\n&quot;)[1..-1]))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The key is that each computer I use has different displays (they're named differently and they have different maximum resolutions), so as far as I know, I have to either parse &lt;code&gt;xrandr&lt;/code&gt; output or write a different script for each machine.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I don't care that it's inefficient (traversing the xrandr output multiple times and doing some looped string formatting) because it only runs once at startup time, and deals with a list of 30 elements at the outside. I'm using Ruby 1.8.7 straight out of the Squeeze repos for ease of installation (this is also why I wouldn't mind being shown how this works in Python/Perl; those come with the system).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Can I get some comments on it?&lt;/p&gt;&#xA;" OwnerUserId="104" LastEditorUserId="22222" LastEditDate="2016-11-08T00:01:44.700" LastActivityDate="2016-11-08T00:01:44.700" Title="Autodetecting monitors in XFCE" Tags="&lt;ruby&gt;" AnswerCount="1" CommentCount="2" />
  <row Id="598" PostTypeId="2" ParentId="597" CreationDate="2011-02-04T04:15:18.193" Score="3" Body="&lt;p&gt;First of all, the convention in ruby is to use &lt;code&gt;snake_case&lt;/code&gt;, not &lt;code&gt;camelCase&lt;/code&gt; for variable and method names. It's generally a good idea to adhere to a language's naming conventions - if only so that the code looks consistent when you're calling standard library methods as well as your own.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;In your &lt;code&gt;xrandrPairs&lt;/code&gt; method, you mention that you're using an index to iterate because you have to go through the array in pairs. You can avoid this by using &lt;code&gt;each_cons(2)&lt;/code&gt; which will yield each item together with the item after it (e.g. &lt;code&gt;[1,2,3].each_cons(2)&lt;/code&gt; will yield &lt;code&gt;1,2&lt;/code&gt; in the first iteration and &lt;code&gt;2,3&lt;/code&gt; in the second).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;However there's a better way to do this then to iterate through the lines. You can use &lt;code&gt;scan&lt;/code&gt; to find all the lines that start without spaces and extract the information you want in one go:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def xrandr_pairs (xrandr_output)&#xA;## Returns [[&amp;lt;display name&amp;gt;, &amp;lt;max-resolution&amp;gt;] ...]&#xA;  display_re = /^(\S+)/&#xA;  option_re = /^\s+(\S+)/&#xA;  xrandr_output.scan(/#{display_re}.*\n#{option_re}/)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Since scan returns an array containing one subarray per match where each item in the subarray corresponds to one capturing group in the regex, this will produce the output you want. Note that &lt;code&gt;xrandr_pairs&lt;/code&gt; now takes &lt;code&gt;xrandr&lt;/code&gt;'s output as a string, not an array of lines.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In addition to using &lt;code&gt;scan&lt;/code&gt; I also changed the regexen a bit: I replaced &lt;code&gt;[^\s]&lt;/code&gt; with &lt;code&gt;\S&lt;/code&gt;, which is equivalent but shorter, and used &lt;code&gt;+&lt;/code&gt; instead of &lt;code&gt;*&lt;/code&gt;, so it does not match empty strings.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;The &lt;code&gt;xrandr_string&lt;/code&gt; method can also be rewritten to be much nicer by using the &lt;code&gt;each_cons&lt;/code&gt; method like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def xrandr_string (x_pairs)&#xA;## Takes [[&amp;lt;display name&amp;gt;, &amp;lt;max-resolution&amp;gt;] ...] and returns an xrandr command string&#xA;  s = &quot;xrandr --output #{x_pairs[0][0]} --mode #{x_pairs[0][1]}&quot;&#xA;  x_pairs.each_cons(2) do |(previous_output, previous_mode), (output, mode)|&#xA;      s += &quot; --output #{output} --mode #{mode} --right-of #{previous_output}&quot;&#xA;    end&#xA;  end&#xA;  s&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You don't need to check that the size is at least 2 because &lt;code&gt;each_cons&lt;/code&gt; simply doesn't do anything if the array is smaller than the given chunk-size.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I also used the destructuring bind of block arguments to assign the elements of the subarrays to variables directly.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Instead of building up the string imperatively you could also use &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;join&lt;/code&gt; like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def xrandr_string (x_pairs)&#xA;## Takes [[&amp;lt;display name&amp;gt;, &amp;lt;max-resolution&amp;gt;] ...] and returns an xrandr command string&#xA;  cmd = &quot;xrandr --output #{x_pairs[0][0]} --mode #{x_pairs[0][1]}&quot;&#xA;  args = x_pairs.each_cons(2).map do |(previous_output, previous_mode), (output, mode)|&#xA;    &quot;--output #{output} --mode #{mode} --right-of #{previous_output}&quot;&#xA;  end&#xA;  [cmd, *args].join(&quot; &quot;)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="128" LastEditorUserId="128" LastEditDate="2011-02-04T04:36:06.710" LastActivityDate="2011-02-04T04:36:06.710" CommentCount="5" />
  <row Id="600" PostTypeId="2" ParentId="536" CreationDate="2011-02-04T09:56:37.110" Score="6" Body="&lt;p&gt;Just a few points that came to mind as I was reading your code.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;It appears to me that the main thread terminates once the &lt;code&gt;NetworkChange.NetworkAddressChanged&lt;/code&gt; event is hooked, in which case the thread is redundant as the event will be raised by another thread anyway.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;code&gt;MainShutdownEvent&lt;/code&gt; is created and 'set' but I don't see anything actually using it.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;code&gt;NetworkChange.NetworkAddressChanged&lt;/code&gt; is hooked but not unhooked, it won't matter much when the appdomain is unloaded on termination but I would just feel better if it was part of the standard 'shutdown' process in &lt;code&gt;OnStop()&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;I don't like the empty &lt;code&gt;UnhandledException&lt;/code&gt; event handler, if you are going to hook it I would suggest some form of logging. At a minimum you should use log such events to the event log via the &lt;code&gt;EventLog&lt;/code&gt; property on &lt;code&gt;ServiceBase&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;I'm not sure which thread will be used to rais the &lt;code&gt;NetworkChange.NetworkAddressChanged&lt;/code&gt;, but I wouldn't rely on it being the same one as &lt;code&gt;OnStop()&lt;/code&gt; so you should probably look at some form of locking/signaling to handle any situations where &lt;code&gt;OnStop()&lt;/code&gt; is called while the event handler is running. It might not cause any real issues but I personally would want to play it safe. It might be interesting to temporarily add a long sleep into the event handler just to see what happens if it's busy when told to stop.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="1432" LastActivityDate="2011-02-04T09:56:37.110" CommentCount="0" />
  <row Id="601" PostTypeId="1" CreationDate="2011-02-04T13:31:10.493" Score="8" ViewCount="5321" Body="&lt;p&gt;I'm working on a web application that I inherited from a colleague long gone. To connect to the MySQL database I use the following classes:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;statement.php&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?php&#xA;//class sql&#xA;//{&#xA;    class Statement&#xA;    {&#xA;        private $m_connection;&#xA;&#xA;        function __construct($connection)&#xA;        {&#xA;            $this-&amp;gt;m_connection = $connection;&#xA;        }&#xA;&#xA;        function query($query)&#xA;        {&#xA;            $connection = $this-&amp;gt;m_connection;&#xA;            $handle = $connection-&amp;gt;getHandle();&#xA;&#xA;            $result = mysql_query($query,$handle);&#xA;&#xA;            if ($result === FALSE)&#xA;                throw new Exception(mysql_error());&#xA;&#xA;            $instance = new Result($this);&#xA;            $instance-&amp;gt;setHandle($result);&#xA;&#xA;            return $instance;&#xA;        }&#xA;    }&#xA;//}&#xA;?&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;result.php&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?php&#xA;//class sql&#xA;//{&#xA;    class Result&#xA;    {&#xA;        private $m_handle;&#xA;        private $m_statement;&#xA;&#xA;        function __construct($statement)&#xA;        {&#xA;            $this-&amp;gt;m_statement = $statement;&#xA;        }&#xA;&#xA;        function setHandle($handle)&#xA;        {   &#xA;            $this-&amp;gt;m_handle = $handle;&#xA;        }&#xA;&#xA;        function fetch()&#xA;        {&#xA;            $handle = $this-&amp;gt;m_handle;          &#xA;            $row = mysql_fetch_array($handle);&#xA;&#xA;            return $row;&#xA;        }&#xA;    }&#xA;//}&#xA;?&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;connection.php&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?php&#xA;include_once(&quot;statement.php&quot;);&#xA;include_once(&quot;result.php&quot;);&#xA;&#xA;//class sql&#xA;//{&#xA;    class Connection&#xA;    {&#xA;        private $m_handle;&#xA;&#xA;        function __construct($server,$username,$password)&#xA;        {&#xA;            $handle = mysql_connect($server,$username,$password);&#xA;            $this-&amp;gt;m_handle = $handle;&#xA;        }&#xA;&#xA;        function __destruct()&#xA;        {&#xA;            $handle = $this-&amp;gt;m_handle;&#xA;            @mysql_close($handle);&#xA;        }&#xA;&#xA;        function createStatement()&#xA;        {&#xA;            return new Statement($this);&#xA;        }&#xA;&#xA;        function getHandle()&#xA;        {&#xA;            return $this-&amp;gt;m_handle;&#xA;        }&#xA;    }&#xA;//}&#xA;?&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;named.php&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?php&#xA;include_once(&quot;connection.php&quot;);&#xA;&#xA;function createNamedConnection($name)&#xA;{&#xA;    if ($name == &quot;dbalias1&quot;)&#xA;    {&#xA;        $connection = new Connection(&quot;first.host.com&quot;,&quot;user&quot;,&quot;uspw&quot;);&#xA;&#xA;        $statement = $connection-&amp;gt;createStatement();&#xA;        $statement-&amp;gt;query(&quot;USE db1&quot;);&#xA;&#xA;        return $connection;&#xA;    }   &#xA;    if ($name == &quot;dbalias2&quot;)&#xA;    {&#xA;        $connection = new Connection(&quot;second.host.com&quot;,&quot;user2&quot;,&quot;nouse&quot;);&#xA;&#xA;        $statement = $connection-&amp;gt;createStatement();&#xA;        $statement-&amp;gt;query(&quot;USE db2&quot;);&#xA;&#xA;        return $connection;&#xA;    }&#xA;&#xA;    return null;&#xA;}&#xA;?&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;To have a connection I can use the following script:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$connection = createNamedConnection(&quot;dbalias1&quot;);&#xA;$statement = $connection-&amp;gt;createStatement();&#xA;$query = &quot;SELECT   *&#xA;          FROM     tContent c&#xA;          WHERE    c.cID &amp;gt; 100&quot;;&#xA;$result = $statement-&amp;gt;query($query);&#xA;while(($row = $result-&amp;gt;fetch()) !== FALSE){&#xA;    //do something&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The problem is that those classes caused me a lot of trouble, and I'm sure there is work to be done on them. I don't know where to begin to make those classes more secure and easy to use.&lt;/p&gt;&#xA;" OwnerUserId="1029" LastEditorUserId="22222" LastEditDate="2015-07-29T20:26:58.240" LastActivityDate="2015-07-29T20:26:58.240" Title="Connecting to a database" Tags="&lt;php&gt;&lt;mysql&gt;" AnswerCount="2" CommentCount="8" FavoriteCount="2" />
  <row Id="602" PostTypeId="1" AcceptedAnswerId="670" CreationDate="2011-02-04T15:03:42.493" Score="7" ViewCount="11939" Body="&lt;p&gt;&lt;strong&gt;The point of this question&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'm actually using it while developing a simple application and it seems to cover all my needs. Also it uses PDO so that we don't really have to worry about SQL Injection. I know I usually code strange, but I hope you could give me suggestions and feedback in order to improve it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Code: Database Class&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/* Operate on the database using our super-safe PDO system */&#xA;class db&#xA;{&#xA;    /* PDO istance */&#xA;    private $db = NULL;&#xA;    /* Number of the errors occurred */&#xA;    private $errorNO = 0;&#xA;&#xA;    /* Connect to the database, no db? no party */&#xA;    public function __construct()&#xA;    {&#xA;        try&#xA;        {&#xA;            $this-&amp;gt;db = new PDO(&#xA;                'mysql:dbname='.reg::get('db-name').';host='.reg::get('db-host'), reg::get('db-username'), reg::get('db-password')&#xA;            );&#xA;        }&#xA;        catch (Exception $e) &#xA;        {&#xA;            exit('App shoutdown');&#xA;        }&#xA;    }&#xA;&#xA;    /* Have you seen any errors recently? */&#xA;    public function getErrors() { return ($this-&amp;gt;errorNO &amp;gt; 0) ? $this-&amp;gt;errorNO : false; }&#xA;&#xA;    /* Perform a full-control query */&#xA;    public function smartQuery($array)&#xA;    {&#xA;        # Managing passed vars&#xA;        $sql = $array['sql'];&#xA;        $par = (isset($array['par'])) ? $array['par'] : array();&#xA;        $ret = (isset($array['ret'])) ? $array['ret'] : 'res';&#xA;&#xA;        # Executing our query&#xA;        $obj = $this-&amp;gt;db-&amp;gt;prepare($sql);&#xA;        $result = $obj-&amp;gt;execute($par);&#xA;&#xA;            # Error occurred...&#xA;            if (!$result) { ++$this-&amp;gt;errorNO; }&#xA;&#xA;        # What do you want me to return?&#xA;        switch ($ret)&#xA;        {&#xA;            case 'obj':&#xA;            case 'object':&#xA;                return $obj;&#xA;            break;&#xA;&#xA;            case 'ass':&#xA;            case 'assoc':&#xA;            case 'fetch-assoc':&#xA;                return $obj-&amp;gt;fetch(PDO::FETCH_ASSOC);&#xA;            break;&#xA;&#xA;            case 'all':&#xA;            case 'fetch-all':&#xA;                return $obj-&amp;gt;fetchAll();&#xA;            break;&#xA;&#xA;            case 'res':&#xA;            case 'result':&#xA;                return $result;&#xA;            break;&#xA;&#xA;            default:&#xA;                return $result;&#xA;            break;&#xA;        }&#xA;    }&#xA;&#xA;    /* Get PDO istance to use it outside this class */&#xA;    public function getPdo() { return $this-&amp;gt;db; }&#xA;&#xA;    /* Disconnect from the database */&#xA;    public function __destruct() { $this-&amp;gt;db = NULL; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Use&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$db = new db;&#xA;$user = $db-&amp;gt;smartQuery(array(&#xA;    'sql' =&amp;gt; &quot;SELECT UserName FROM `post` WHERE UserUID = :uid&quot;,&#xA;    'par' =&amp;gt; array('uid' =&amp;gt; $uid),&#xA;    'ret' =&amp;gt; 'fetch-assoc'&#xA;));&#xA;echo $user['Username'];&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;What I think is wrong&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Well, I have encountered these 2 points while revisiting this code, and I'd like to get some feedback about them particularly:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;The error system (which, let's face it, sucks right now)&lt;/li&gt;&#xA;&lt;li&gt;The first &lt;code&gt;try-catch&lt;/code&gt; code, which is actually working, but I never use that so, please, look at it. &lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;Also if my application cannot connect to the database, most (if not all) features cannot be activated (such-as the PHP error log trough a database record, so that every times an error occurred, the admin is warned trough the application itself).&lt;/p&gt;&#xA;" OwnerUserId="186" LastEditorUserId="22222" LastEditDate="2014-07-04T02:35:38.977" LastActivityDate="2014-07-04T02:35:38.977" Title="Database class using PDO" Tags="&lt;php&gt;&lt;mysql&gt;&lt;php5&gt;&lt;pdo&gt;" AnswerCount="5" CommentCount="7" FavoriteCount="2" />
  <row Id="604" PostTypeId="1" AcceptedAnswerId="607" CreationDate="2011-02-04T16:19:12.370" Score="12" ViewCount="846" Body="&lt;p&gt;Please take a look at my program and let me know how I can improve it.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/*&#xA;&quot;   To Print A Line On The Display Screen&quot;&#xA;    Date:5th January 2011&#xA;    Programmer:Fahad&#xA;*/&#xA;#include &amp;lt;iostream&amp;gt;&#xA;using namespace std;&#xA;class Print&#xA;{&#xA;    public:&#xA;        void print_();&#xA;};&#xA;int main()&#xA;{&#xA;    Print Obj;&#xA;    Obj.print_();&#xA;    system( &quot;pause&quot; );&#xA;    return 0;&#xA;}&#xA;void Print::print_()&#xA;{&#xA;    cout &amp;lt;&amp;lt; &quot;I am in print function and the program runs fine.&quot; &amp;lt;&amp;lt; endl;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1211" LastEditorUserId="22222" LastEditDate="2014-06-16T01:28:24.197" LastActivityDate="2016-08-29T01:29:07.323" Title="&quot;Hello, world!&quot; program using a class for printing" Tags="&lt;c++&gt;&lt;beginner&gt;&lt;console&gt;" AnswerCount="8" CommentCount="2" />
  <row Id="605" PostTypeId="2" ParentId="604" CreationDate="2011-02-04T16:25:46.933" Score="10" Body="&lt;p&gt;Not sure what you mean by coding style. If you're talking about spacing and such, here are changes I would make. Note that these are entirely subjective and people are probably going to disagree with me.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Don't indent the &lt;code&gt;public:&lt;/code&gt; specifier in the class -- leave it flush with the curly braces that mark the class definition. The reason for this is the implicit private region in the class.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Example code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class Example&#xA;{&#xA;    int a; //Shouldn't this line&#xA;    public:&#xA;        void MyFunc(); //Indent to the same place this one does?&#xA;};&#xA;&#xA;&#xA;class Ahhhhh&#xA;{&#xA;    int a;  //Ahhh.. we match now :)&#xA;public:&#xA;    void MyFunc();&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;For that matter this class has no private members so I would just change &lt;code&gt;class&lt;/code&gt; to &lt;code&gt;struct&lt;/code&gt; and remove the access specifier entirely.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I would remove &lt;code&gt;using namespace std;&lt;/code&gt; and explicitly qualify those members which are in &lt;code&gt;std&lt;/code&gt;. Would really stink to get a nasty error message from the compiler because you happened to define a function called &lt;code&gt;copy&lt;/code&gt; (which might conflict with &lt;code&gt;std::copy&lt;/code&gt;).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;system(&quot;pause&quot;);&lt;/code&gt; should be &lt;code&gt;std::cin.get();&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you're talking about &quot;design&quot;, it seems overengineered to me. No reason to involve objects in a program like this at all. Just sticking the print statement in &lt;code&gt;main&lt;/code&gt; would suffice.&lt;/p&gt;&#xA;" OwnerUserId="22" LastActivityDate="2011-02-04T16:25:46.933" CommentCount="3" />
  <row Id="606" PostTypeId="2" ParentId="604" CreationDate="2011-02-04T16:32:45.367" Score="11" Body="&lt;p&gt;In addition to what Billy said, I find &lt;code&gt;Obj.print_()&lt;/code&gt; to look strange in C++ code.  I would have just made the method name &lt;code&gt;print()&lt;/code&gt;.&lt;/p&gt;&#xA;" OwnerUserId="55" LastActivityDate="2011-02-04T16:32:45.367" CommentCount="0" />
  <row Id="607" PostTypeId="2" ParentId="604" CreationDate="2011-02-04T16:36:23.403" Score="18" Body="&lt;p&gt;In addition to the other comments, I would also use a different naming convention for types and objects.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example, this looks unconventional.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Print Obj;&#xA;Obj.print_();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I prefer:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Print obj;&#xA;obj.print();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It's just a convention but being able to easily spot names that denote types helps if you start to use more complex expressions. For example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Print().print();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Personally, I would also avoid &lt;code&gt;system(&quot;pause&quot;)&lt;/code&gt;. You need to &lt;code&gt;#include&lt;/code&gt; either &lt;code&gt;&amp;lt;stdlib.h&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;cstdlib&amp;gt;&lt;/code&gt; to use it. Although the system call itself is standard C++ (from the standard C library), what you pass to it is system dependent.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In general I don't believe you should make your programs stop artificially. If they are designed to run in a terminal then the terminal user will be able to see the output even after the program exits.&lt;/p&gt;&#xA;" OwnerUserId="72" LastEditorUserId="72" LastEditDate="2011-02-04T16:48:16.787" LastActivityDate="2011-02-04T16:48:16.787" CommentCount="1" />
  <row Id="608" PostTypeId="2" ParentId="604" CreationDate="2011-02-04T18:17:10.150" Score="6" Body="&lt;p&gt;I prefer seeing class names that are nouns and method names that are verbs. &lt;code&gt;Print&lt;/code&gt; might read better as &lt;code&gt;Printer&lt;/code&gt;, &lt;code&gt;ObjectPrinter&lt;/code&gt; or &lt;code&gt;WhateverPrinter&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I've seen the _ suffix (or a m_ prefix) to denote members quite a bit but I've never found it useful to attach this sort of decoration to a name.&lt;/p&gt;&#xA;" OwnerUserId="1183" LastActivityDate="2011-02-04T18:17:10.150" CommentCount="0" />
  <row Id="610" PostTypeId="2" ParentId="604" CreationDate="2011-02-04T18:27:52.493" Score="7" Body="&lt;p&gt;Under the circumstances, a &lt;code&gt;using&lt;/code&gt; directive seems highly suspect. While there are times/places that it's useful, this doesn't seem (to me) to be one of them.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The name of a typical class should also be a noun, not a verb. A verb signals that what you have is a single action, which is not a good candidate for a normal class. If it's going to be a class at all, it should probably be a functor. I'd also add a parameter (with a default value) so it would be easy to use a stream other than &lt;code&gt;std::cout&lt;/code&gt; when/if necessary:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;struct Print { &#xA;    std::ostream &amp;amp;operator()(std::ostream &amp;amp;os = std::cout) { &#xA;        return os &amp;lt;&amp;lt; &quot;whatever\n&quot;;&#xA;    }&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Using &lt;code&gt;system(&quot;pause&quot;);&lt;/code&gt; is also quite non-portable. If you want to wait for the user to press a key before ending the program, it's generally better to build that into your own code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;void pause() { &#xA;    std::cout &amp;lt;&amp;lt; &quot;Press \&quot;enter\&quot; when ready.\n&quot;;&#xA;    getchar();&#xA;}&#xA;&#xA;int main() { &#xA;    Print()();&#xA;    pause();&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Frankly, even using the functor strikes me as silly in this case though -- you're taking something simple (print out a string) and making it much more complex without getting anything in return. Given how little the program does, the &lt;code&gt;Print&lt;/code&gt; class accomplishes nothing useful or positive at all.&lt;/p&gt;&#xA;" OwnerUserId="489" LastActivityDate="2011-02-04T18:27:52.493" CommentCount="0" />
  <row Id="611" PostTypeId="1" AcceptedAnswerId="612" CreationDate="2011-02-04T19:02:43.127" Score="5" ViewCount="129" Body="&lt;p&gt;The function below is called to determine if a given file is the archive of another file. I'm also looking for a way to supports wildcards. For example if the original log file is serverw3c.log and we type serverw3c*.log, it returns true for the following:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;serverw3c.log.2011-02-04&lt;/li&gt;&#xA;&lt;li&gt;serverw3c.log&lt;/li&gt;&#xA;&lt;li&gt;serverw3c.log.20110204_120132&lt;/li&gt;&#xA;&lt;li&gt;serverw3c_20110204.log&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;The code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/// &amp;lt;summary&amp;gt;&#xA;/// Check if a given file is an archive of an original file.&#xA;/// The check is performed on the names of the files only.&#xA;/// &amp;lt;/summary&amp;gt;&#xA;/// &amp;lt;param name=&quot;originalFile&quot;&amp;gt;The original file.&amp;lt;/param&amp;gt;&#xA;/// &amp;lt;param name=&quot;archivedFile&quot;&amp;gt;The file which is supposed to be an archive of the original one.&amp;lt;/param&amp;gt;&#xA;/// &amp;lt;returns&amp;gt;True if the file is an archive, False otherwise.&amp;lt;/returns&amp;gt;&#xA;public bool IsArchive(string originalFile, string archivedFile)&#xA;{&#xA;    // We assume that an archived file has the name of the original &#xA;    // concatenated with a timestamp '.YYYYMMDD_HHMMSS'&#xA;    Regex exp = new Regex(string.Concat(originalFile, &quot;.&quot;, &quot;[0-9][0-9][0-9][0-9][0-1][0-9][0-9][0-9]_[0-2][0-9][0-5][0-9][0-5][0-9]&quot;));&#xA;    if (exp.IsMatch(archivedFile))&#xA;        return true;&#xA;&#xA;    exp = new Regex(string.Concat(Path.GetFileNameWithoutExtension(originalFile), &quot;_&quot;, &quot;[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]&quot;, Path.GetExtension(&quot;.log&quot;)));&#xA;    if (exp.IsMatch(archivedFile))&#xA;        return true;&#xA;&#xA;    exp = new Regex(string.Concat(Path.GetFileNameWithoutExtension(originalFile), &quot;_&quot;, &quot;[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]&quot;, &quot;_&quot;, &quot;[0-9][0-9][0-9]&quot;, Path.GetExtension(&quot;.log&quot;)));&#xA;    if (exp.IsMatch(archivedFile))&#xA;        return true;&#xA;&#xA;    exp = new Regex(string.Concat(originalFile, &quot;.&quot;, &quot;[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]&quot;));&#xA;    if (exp.IsMatch(archivedFile))&#xA;        return true;&#xA;&#xA;    return false;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerDisplayName="Pierre 303" LastEditorUserId="228" LastEditDate="2011-02-04T19:21:52.290" LastActivityDate="2011-02-05T10:03:21.743" Title="How to reduce this archive detection function and make it supports wildcards" Tags="&lt;c#&gt;&lt;regex&gt;" AnswerCount="2" CommentCount="3" FavoriteCount="1" />
  <row Id="612" PostTypeId="2" ParentId="611" CreationDate="2011-02-04T19:52:33.120" Score="3" Body="&lt;p&gt;Your regex can be shortened using &lt;code&gt;{x}&lt;/code&gt;, which repeat a pattern &lt;code&gt;x&lt;/code&gt; times. So your third regex would become:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;exp = new Regex(string.Concat(Path.GetFileNameWithoutExtension(originalFile),&#xA;                              &quot;_[0-9]{8}_[0-9]{3}&quot;,&#xA;                              Path.GetExtension(&quot;.log&quot;)));&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;As far as wildcards, if you use &lt;code&gt;*&lt;/code&gt; it will be entered into the regex. It looks from &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.io.path.aspx&quot; rel=&quot;nofollow&quot;&gt;MSDN&lt;/a&gt; that it won't be removed from the file name when you call &lt;code&gt;GetFileNameWithoutExtension()&lt;/code&gt;. However, I was unable to test this as I don't have Visual Studio on my computer. It worked as a wildcard on my regex tests.&lt;/p&gt;&#xA;" OwnerUserId="110" LastEditorUserId="110" LastEditDate="2011-02-05T01:04:14.257" LastActivityDate="2011-02-05T01:04:14.257" CommentCount="0" />
  <row Id="613" PostTypeId="2" ParentId="604" CreationDate="2011-02-04T21:52:02.957" Score="8" Body="&lt;p&gt;The one thing that is not C++ like for me is this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Obj.print_();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This tightly couples the print method to a particular output method.&lt;br&gt;&#xA;It would be better to allow the user of your object to define what the output method is:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;std::cout &amp;lt;&amp;lt; Obj &amp;lt;&amp;lt; &quot;\n&quot;;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Which means you need to define an output operator for you object:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; str, Print const&amp;amp; data)&#xA;{&#xA;    // STUFF&#xA;    return str;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Though not technically wrong. I am not a fan of underscore at the ends of identifiers:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;print_()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Looks wierd to me. But this is a style thing. See you local coding conventions for rules. If you had put it on the front I would have been a lot more complainey about it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;System is hard to use cross platform. Especially when you do system(&quot;pause&quot;).&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;system( &quot;pause&quot; );&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I prefer the platform neutral:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;std::cout &amp;lt;&amp;lt; &quot;Hit Enter to continue\n&quot;;&#xA;std::cin.clear();&#xA;char plop;&#xA;std::cin &amp;gt;&amp;gt; plop;  // cin is buffered. So nothing is sent until you hit enter.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="507" LastActivityDate="2011-02-04T21:52:02.957" CommentCount="0" />
  <row Id="614" PostTypeId="2" ParentId="587" CreationDate="2011-02-04T22:34:42.630" Score="5" Body="&lt;p&gt;A barrier can ensure the threads execute in an interleaved fashion.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;final CyclicBarrier rendezvous = new CyclicBarrier(2);&#xA;final CyclicBarrier conclusion = new CyclicBarrier(3);&#xA;Thread a = new Thread() {&#xA;    public void run() {&#xA;         try {&#xA;             rendezvous.await();&#xA;             // do your stuff&#xA;             // do your stuff&#xA;             rendezvous.await(); // if you want to be extra sure the ops are interleaved&#xA;             // do your stuff&#xA;         } catch (...) {}&#xA;         finally { conclusion.await(); }&#xA;    }&#xA;};&#xA;&#xA;Thread b = new Thread() {&#xA;    public void run() {&#xA;         try {&#xA;             rendezvous.await();&#xA;             // do your other stuff&#xA;             // do your other stuff&#xA;             rendezvous.await(); // if you want to be extra sure the ops are interleaved&#xA;             // do your other stuff&#xA;         } catch (...) {}&#xA;         finally { conclusion.await(); }&#xA;    }&#xA;};&#xA;&#xA;a.start();&#xA;b.start();&#xA;conclusion.await();    &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;assertTrue instead of assertEquals(.., true, ..). &lt;/p&gt;&#xA;&#xA;&lt;p&gt;cut and paste error has you modifying t2Correct instead of t1Correct&lt;/p&gt;&#xA;" OwnerUserId="715" LastActivityDate="2011-02-04T22:34:42.630" CommentCount="1" />
  <row Id="615" PostTypeId="1" AcceptedAnswerId="616" CreationDate="2011-02-05T01:28:10.697" Score="5" ViewCount="2405" Body="&lt;p&gt;After asking &lt;a href=&quot;http://stackoverflow.com/questions/4868049/how-to-efficiently-wrap-the-index-of-a-fixed-size-circular-buffer&quot;&gt;this question&lt;/a&gt;, I decided to write a test and determine the fastest way to wrap an index (where my &lt;code&gt;maxSize&lt;/code&gt; is always a power of 2).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There are 3 functions that I'm comparing:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// plain wrap&#xA;public static int WrapIndex(int index, int endIndex, int maxSize)&#xA;{&#xA;    return (endIndex + index) &amp;gt; maxSize ? (endIndex + index) - maxSize : endIndex + index;&#xA;}&#xA;&#xA;// wrap using mod&#xA;public static int WrapIndexMod(int index, int endIndex, int maxSize)&#xA;{&#xA;    return (endIndex + index) % maxSize;&#xA;}&#xA;&#xA;// wrap my masking out the top bits&#xA;public static int WrapIndexMask(int index, int endIndex, int maxSize)&#xA;{&#xA;    return (endIndex + index) &amp;amp; (maxSize - 1);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Here is my test:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public static void WrapTest(int numRuns = 10000)&#xA;{&#xA;    int index = 256;&#xA;    int endIndex = 0;&#xA;    int maxSize = 4096;&#xA;&#xA;    long wrapPlain = 0;&#xA;    long wrapMod = 0;&#xA;    long wrapMask = 0;&#xA;&#xA;    Stopwatch sw = new Stopwatch();&#xA;&#xA;    for (int i = 0; i &amp;lt; numRuns; i++)&#xA;    {&#xA;&#xA;        // plain&#xA;        sw.Start();&#xA;        for (int j = 0; j &amp;lt; numRuns; j++)&#xA;        {&#xA;            WrapIndex(index, endIndex, maxSize);&#xA;        }&#xA;        sw.Stop();&#xA;        wrapPlain += sw.ElapsedTicks;&#xA;        sw.Reset();&#xA;&#xA;        // mod&#xA;        sw.Start();&#xA;        for (int j = 0; j &amp;lt; numRuns; j++)&#xA;        {&#xA;            WrapIndexMod(index, endIndex, maxSize);&#xA;        }&#xA;        sw.Stop();&#xA;        wrapMod += sw.ElapsedTicks;&#xA;        sw.Reset();&#xA;&#xA;        // mask&#xA;        sw.Start();&#xA;        for (int j = 0; j &amp;lt; numRuns; j++)&#xA;        {&#xA;            WrapIndexMask(index, endIndex, maxSize);&#xA;        }&#xA;        sw.Stop();&#xA;        wrapMask += sw.ElapsedTicks;&#xA;        sw.Reset();&#xA;&#xA;        // change indexes&#xA;        endIndex++;&#xA;        endIndex = endIndex % maxSize;&#xA;&#xA;        index++;&#xA;        index = index % maxSize;&#xA;    }&#xA;    Console.WriteLine(String.Format(&quot;Plain: {0} Mod: {1} Mask: {2}&quot;, wrapPlain / numRuns, wrapMod / numRuns, wrapMask / numRuns));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I ran the test and I'm consistently getting the following results (in ticks):&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;pre class=&quot;lang-none prettyprint-override&quot;&gt;&lt;code&gt;Plain: 25 Mod: 16 Mask: 16 (maxSize = 512)&#xA;Plain: 25 Mod: 17 Mask: 17 (maxSize = 1024)&#xA;Plain: 25 Mod: 17 Mask: 17 (maxSize = 4096)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;I was expecting that the mask will be faster than all of them, but it seems to be as fast as using the modulo operator. I've also tried increasing the &lt;code&gt;numRuns&lt;/code&gt;, but the results are consistent. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Is my test valid? Is there a better way to test the performance?&lt;/p&gt;&#xA;" OwnerUserId="1468" LastEditorUserId="22222" LastEditDate="2015-03-02T06:51:28.320" LastActivityDate="2015-03-02T06:51:28.320" Title="Performance testing functions for wrapping an index" Tags="&lt;c#&gt;&lt;performance&gt;&lt;unit-testing&gt;" AnswerCount="1" CommentCount="1" />
  <row Id="616" PostTypeId="2" ParentId="615" CreationDate="2011-02-05T07:38:34.980" Score="4" Body="&lt;p&gt;Your results do seem odd, so I tried to rewrite your test and see if I can get different results.  I suspected that you might be starting and stopping the stopwatch too frequently, which can skew your results due to the loss of precision every time you start and stop.  In my code, I only start and stop the stopwatch once per type of calculation.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Using the code below, I get results more in line with what you would expect, namely that masking is the fastest, followed by plain subtraction, followed by modulo division.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here is a typical output from one of my test runs:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Plain: 59.7033&#xA;Mod: 64.6872&#xA;Mask: 58.1923&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In various runs, Plain and Mask tend to vary with respect to each other, and sometimes show very similar numbers.  Mod always tends to be slower.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And here is the code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;static void Main(string[] args)&#xA;{&#xA;    TestPerf(WrapIndex, &quot;Plain&quot;);&#xA;    TestPerf(WrapIndexMod, &quot;Mod&quot;);&#xA;    TestPerf(WrapIndexMask, &quot;Mask&quot;);&#xA;}&#xA;&#xA;public static void TestPerf(Func&amp;lt;int, int, int, int&amp;gt; getIndex, string label, int numRuns = 10000)&#xA;{&#xA;    int maxSize = 4096;&#xA;&#xA;    Stopwatch sw = new Stopwatch();&#xA;    sw.Start();&#xA;&#xA;    for (int i = 0; i &amp;lt; numRuns; i++)&#xA;    {&#xA;        for (int index = 0; index &amp;lt; maxSize; index++)&#xA;        {&#xA;            getIndex(index, 1234, maxSize);&#xA;        }&#xA;    }&#xA;&#xA;    sw.Stop();&#xA;    Console.WriteLine(string.Format(&quot;{0}: {1}&quot;, label, ((double)sw.ElapsedTicks) / numRuns));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;EDIT: Also notice that I cast ElapsedTicks to double before dividing to avoid rounding.  You should be careful to avoid rounding in your calculations because that just adds noise to your final result.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;EDIT 2:&#xA;&lt;br&gt;&#xA;I played around with the code snippet in your pastie link and I was originally getting the same results as you, but I think I've finally gotten to the bottom of it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What's happening is that without that Func wrapper, the jitter is able to do some serious optimizing.  I know it's the jitter and not the C# compiler, because all of the code is intact in the ildasm output.  In fact, for 2 out of your 3 methods (mod and mask), it's able to deduce that the methods aren't accomplishing anything at all (because they're doing a simple calculation, and the return value is just discarded), so it doesn't even bother calling them.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To validate that statement, simply comment out the line in WrapIndex() and return a plain 0, which is sure to get optimized out.  Run your program again and you'll see that all three methods now report the same times.  There's no way that doing a mod or a mask has the same cost as returning a constant 0, so that tells you that the code just isn't being executed.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is another issue you have to be aware of when doing perf tests.  If your test is too simple, the optimizer will just discard all of your code.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In my test, the Func wrapper was preventing the jitter from optimizing as much, because it doesn't know which code is going to be executed, so it can't inline and then discard the code, which is why you get more reasonable numbers.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So I think the results from my code, using the Func delegate, give a more accurate reflection of the relative costs of your three index methods.&lt;/p&gt;&#xA;" OwnerUserId="1142" LastEditorUserId="1142" LastEditDate="2011-02-05T11:50:32.873" LastActivityDate="2011-02-05T11:50:32.873" CommentCount="6" />
  <row Id="617" PostTypeId="1" AcceptedAnswerId="618" CreationDate="2011-02-05T07:57:03.443" Score="4" ViewCount="714" Body="&lt;p&gt;I have a piece code similar to below:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But I keep having this nagging feeling that there has to be an easier way!&#xA;Any ideas?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var synch = false&#xA;var indexArray = new Array();&#xA;var rowCount = theTable.find('tr').length;&#xA;$(&quot;.views&quot;).each(function(index) {&#xA;    indexArray.push( $(this).val()); // Not the real code but something to this effect&#xA;    if (rowCount &amp;lt;= (index+1)) synch = true;&#xA;});&#xA;while (!synch);&#xA;DO something with indexArray.....&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1450" LastEditorUserId="18427" LastEditDate="2013-11-24T01:20:59.857" LastActivityDate="2013-11-24T01:20:59.857" Title="Making sure all elements are processed in a JQuery call" Tags="&lt;javascript&gt;&lt;jquery&gt;&lt;synchronization&gt;" AnswerCount="2" CommentCount="0" FavoriteCount="2" />
  <row Id="618" PostTypeId="2" ParentId="617" CreationDate="2011-02-05T09:14:08.890" Score="3" Body="&lt;p&gt;There is absolutely no need for the &lt;code&gt;synch&lt;/code&gt; part - &lt;a href=&quot;http://stackoverflow.com/questions/2035645/when-is-javascript-synchronous&quot;&gt;JavaScript &lt;em&gt;is&lt;/em&gt; synchronous&lt;/a&gt;, and you should not get into a situation where the processing of that function (the one you're showing) will not be completed before the next line runs. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;(By the way, that function you have there can be rewritten for greater efficiency) &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var indexArray = $('.views').map(function(){&#xA;    return this.value;&#xA;}).get();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Let's assume that you &lt;em&gt;are&lt;/em&gt; doing something async in that each loop, for instance, ajax calls. Your best bet is to keep a count of how many of the calls are completed in the callback function, then execute the rest of your code when the last callback function is called: &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var views = $('.views'), &#xA;    completed = 0,&#xA;    total = views.length;&#xA;&#xA;views.each(function(){&#xA;    someAsyncFunction (function(){&#xA;        // Process data&#xA;        if(++completed === total) {&#xA;            // We're done! Let's move on..&#xA;        }&#xA;    });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This can be abstracted away into another function, though doing that is left as an exercise for the reader. &lt;/p&gt;&#xA;" OwnerUserId="697" LastActivityDate="2011-02-05T09:14:08.890" CommentCount="2" />
  <row Id="619" PostTypeId="2" ParentId="536" CreationDate="2011-02-05T09:49:48.377" Score="4" Body="&lt;p&gt;I would recommend to look at &lt;em&gt;Exception Handling&lt;/em&gt; in your code - there is nothing except for empty CurrentDomainExceptionHandler. However it's very crucial for such services to have a clear exception hierarchy and handling policy. There should be at least 2 types: &lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;Non-recoverable errors - if service couldn't start because of invalid configuration etc &lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Recoverable errors - if you couldn't pong &quot;secret.domain&quot; because it's unavailable then should you proceed? How to deal with timeout exceptions? Should there be a queue with unproceeded requests or should they immediately be discarded? Should  the size of the queue be configurable if you need it? If you want your service to work in 24x7 mode then you must have answers on these and few other questions about how to deal with unexpected situations.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Another missing point is &lt;em&gt;Configuration&lt;/em&gt;. Are you goint to rewrite your code and re-install service if &quot;secret.domain&quot; changes? Or if you need to increase timeout or even change display name for service? I would recommend to have a configuration file that can be re-read on every start. It would save you a lot time.&lt;/p&gt;&#xA;" OwnerUserId="1396" LastEditorUserId="1396" LastEditDate="2011-02-05T17:37:19.913" LastActivityDate="2011-02-05T17:37:19.913" CommentCount="0" />
  <row Id="620" PostTypeId="2" ParentId="611" CreationDate="2011-02-05T10:03:21.743" Score="1" Body="&lt;p&gt;Here is the wildcard alternative&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public bool IsArchive(string filePattern, string archivedFile)&#xA;{&#xA;    return new Regex(filePattern.Replace(&quot;*&quot;, &quot;[^ ]*&quot;)).IsMatch(archivedFile);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerDisplayName="Pierre 303" LastActivityDate="2011-02-05T10:03:21.743" CommentCount="0" />
  <row Id="621" PostTypeId="1" AcceptedAnswerId="623" CreationDate="2011-02-05T10:55:43.063" Score="11" ViewCount="959" Body="&lt;p&gt;I have written another program in C++. Excluding the point that the class definition should be in a separate header file, is there anything that needs to be improved?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/*&#xA;    Date:5th January 2011&#xA;    Programmer:Fahad&#xA;*/&#xA;#include &amp;lt;iostream&amp;gt;&#xA;#include &amp;lt;string&amp;gt;&#xA;using namespace std;&#xA;class Persons     //A class that will store the name,addresses and id numbers of the users&#xA;{&#xA;    private:&#xA;        string name_;&#xA;        string address_;&#xA;        int id_number_;&#xA;&#xA;    public:&#xA;        static int count;    //This is the count of the objects created&#xA;        Persons();&#xA;        void getData(int n);&#xA;        void displayData(int n);&#xA;        ~Persons();&#xA;};&#xA;&#xA;int Persons count;//initializing the static member&#xA;&#xA;int main()&#xA;{&#xA;    cout &amp;lt;&amp;lt; &quot;Enter Number Of Persons:&quot;;&#xA;    int n;     //This is the number of objects that the user wants to make.&#xA;    cin &amp;gt;&amp;gt; n;&#xA;    Persons *ptr;    //A pointer that will be used for the dynamic memory allocation.&#xA;&#xA;    /*Exception Handling*/&#xA;    ////////////////////////////////////////////////////////////////////&#xA;    try&#xA;    {&#xA;        //ptr=new [sizeof(Persons) * n];&#xA;        ptr=new Persons[n];&#xA;    }&#xA;    catch(bad_alloc xa)&#xA;    {&#xA;        cout&amp;lt;&amp;lt;&quot;Sorry,Program Can Not Continue&quot;;&#xA;        cin.get();&#xA;        exit(1);&#xA;    }&#xA;    /////////////////////////////////////////////////////////////////////&#xA;    for(int i = 0; i&amp;lt; n; i++)&#xA;    {&#xA;        ptr[i].getData(n);&#xA;    }&#xA;    for(int j = 0; j&amp;lt; n; j++)&#xA;    {&#xA;        ptr[j].displayData( n );&#xA;    }&#xA;    cin.get();&#xA;    delete[] ptr;&#xA;    return 0;&#xA;}&#xA;&#xA;&#xA;/*Function Definitions*/&#xA;&#xA;Persons::Persons()&#xA;{&#xA;    name_=&quot;&quot;;&#xA;    address_=&quot;&quot;;&#xA;    id_number_=0;&#xA;    count++;&#xA;}&#xA;void Persons::getData(int n)&#xA;{&#xA;&#xA;        cout&amp;lt;&amp;lt;&quot;Enter Name (Press '$' To Exit):&quot;;&#xA;        getline(cin,name_,'$');&#xA;        cout&amp;lt;&amp;lt;endl&amp;lt;&amp;lt;&quot;Enter Address (Press '$' To Exit):&quot;;&#xA;        getline(cin,address_,'$');&#xA;        cout&amp;lt;&amp;lt;endl&amp;lt;&amp;lt;&quot;Enter Identitiy Card Number:&quot;;&#xA;        cin&amp;gt;&amp;gt;id_number_;&#xA;&#xA;}&#xA;void Persons::displayData(int n)&#xA;{&#xA;&#xA;        cout&amp;lt;&amp;lt;&quot;Name:&quot;&amp;lt;&amp;lt;name_;&#xA;        cout&amp;lt;&amp;lt;endl&amp;lt;&amp;lt;&quot;Address:&quot;&amp;lt;&amp;lt;address_;&#xA;        cout&amp;lt;&amp;lt;endl&amp;lt;&amp;lt;&quot;Identitiy Card Number:&quot;&amp;lt;&amp;lt;id_number_;&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1211" LastEditorUserId="23788" LastEditDate="2013-12-23T04:23:34.083" LastActivityDate="2013-12-23T04:23:34.083" Title="Class for holding person's information" Tags="&lt;c++&gt;&lt;classes&gt;" AnswerCount="6" CommentCount="0" FavoriteCount="1" />
  <row Id="622" PostTypeId="2" ParentId="514" CreationDate="2011-02-05T11:14:34.537" Score="2" Body="&lt;p&gt;There are several things you should do with this template, and templates that look like this in general:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;p&gt;Break some elements into partials.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Push logic to the model. Instead of &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; &amp;lt;% if condition with model %&amp;gt;&#xA;   stuff&#xA; &amp;lt;% else %&amp;gt;&#xA;   other stuff&#xA; &amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;when stuff or other stuff are strings with little or no markup, do&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; &amp;lt;%= model.display_for_condition %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Use helpers for cases like 2) where the things to be displayed have some markup:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; &amp;lt;% condition_helper(model.condition?) %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Use presenter objects, especially when dealing with display logic that references more than one model. &lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Most abstractly, but most importantly for learning to write code with fewer if statements, internalize one of the key distinctions between OO style and procedural style code: with OO you ask objects to do things they know how to do. If you find yourself always asking objects for information and deciding what to do with it, you are using objects as nothing more than structs and writing procedural code. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Or as my intern described it the other day: (this has become one of my favourite quotes about programming)&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;if you're itchy it's ok to scratch your own itch, but it would be kind of weird to scratch other people's itches.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;" OwnerUserId="1473" LastActivityDate="2011-02-05T11:14:34.537" CommentCount="0" />
  <row Id="623" PostTypeId="2" ParentId="621" CreationDate="2011-02-05T11:16:42.823" Score="17" Body="&lt;p&gt;I &lt;a href=&quot;http://stackoverflow.com/questions/1265039/using-std-namespace/1265092#1265092&quot;&gt;avoid&lt;/a&gt; &lt;code&gt;using namespace std;&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;cout &amp;lt;&amp;lt; &quot;Enter Number Of Persons:&quot;;&#xA;int n;     //This is the number of objects that the user wants to make.&#xA;cin &amp;gt;&amp;gt; n;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Personally, I always use &lt;code&gt;getline&lt;/code&gt; to capture a line at a time when using &lt;code&gt;std::cin&lt;/code&gt; for interactive input. The fact that &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; stops at whitespace means that it is very easy for the user to enter two fields in a single line and then the second field gets used at a subsequent point in the program without the user being able to respond to a later prompt.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also you should always check whether the input operation succeeded.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;std::string inputline;&#xA;if( std::getline( cin, inputline ) )&#xA;{&#xA;    std::istringstream iss( inputline );&#xA;    if( iss &amp;gt;&amp;gt; n )&#xA;    {&#xA;        // success&#xA;    }&#xA;    else&#xA;    {&#xA;    }   // fail&#xA;}&#xA;else&#xA;{&#xA;    // fail&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;catch(bad_alloc xa)&#xA;{&#xA;    cout&amp;lt;&amp;lt;&quot;Sorry,Program Can Not Continue&quot;;&#xA;    cin.get();&#xA;    exit(1);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;For all that you actually do in the exception handler, you may as well let the expection propogate. The runtime might actually give a more meaningful error message for &lt;code&gt;bad_alloc&lt;/code&gt;. Also, unless you have a good reason, always catch exception by &lt;code&gt;const&lt;/code&gt; reference. e.g. &lt;code&gt;catch( const std::bad_alloc&amp;amp; ba )&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Looking at your definition of &lt;code&gt;Persons&lt;/code&gt;, I think that &lt;code&gt;Person&lt;/code&gt; is a better name for the class. I see one name and one address member, if the class represented multiple people (e.g. a household) you would need at least multiple names, I would have thought.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Always try and avoid needing to use &lt;code&gt;delete[]&lt;/code&gt; explicitly. Here a vector would be much simpler and safer.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;std::vector&amp;lt;Person&amp;gt; persons(n);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;int Persons count;//initializing the static member&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Class &lt;code&gt;static&lt;/code&gt; variables are normally not advisable. This isn't valid, it should be:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;int Persons::count;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In this program it isn't giving you anything that &lt;code&gt;n&lt;/code&gt; isn't so I would just remove it.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Persons::Persons()&#xA;{&#xA;    name_=&quot;&quot;;&#xA;    address_=&quot;&quot;;&#xA;    id_number_=0;&#xA;    count++;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Always prefer to initialize member variables. Assigning &lt;code&gt;&quot;&quot;&lt;/code&gt; to a newly constructed &lt;code&gt;std::string&lt;/code&gt; is redundant so you could do either.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Persons::Persons()&#xA;    : name_()&#xA;    , address_()&#xA;    , id_number(0)&#xA;{&#xA;    count++;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;or even this (although some people prefer an explicit initializer for all members and bases).&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Persons::Persons()&#xA;    : id_number(0)&#xA;{&#xA;    count++;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for(int i = 0; i&amp;lt; n; i++)&#xA;{&#xA;    ptr[i].getData(n);&#xA;}&#xA;for(int j = 0; j&amp;lt; n; j++)&#xA;{&#xA;    ptr[j].displayData( n );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Why do &lt;code&gt;getData&lt;/code&gt; and &lt;code&gt;displayData&lt;/code&gt; take an &lt;code&gt;int&lt;/code&gt;? They don't use the parameter, and I don't understand why you are passing &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;cin.get();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This seems redundant.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;void Persons::getData(int n)&#xA;{&#xA;&#xA;        cout&amp;lt;&amp;lt;&quot;Enter Name (Press '$' To Exit):&quot;;&#xA;        getline(cin,name_,'$');&#xA;        cout&amp;lt;&amp;lt;endl&amp;lt;&amp;lt;&quot;Enter Address (Press '$' To Exit):&quot;;&#xA;        getline(cin,address_,'$');&#xA;        cout&amp;lt;&amp;lt;endl&amp;lt;&amp;lt;&quot;Enter Identitiy Card Number:&quot;;&#xA;        cin&amp;gt;&amp;gt;id_number_;&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Again, my comments about the unused parameter, always using &lt;code&gt;getline&lt;/code&gt; and always checking the success of input operations all apply.&lt;/p&gt;&#xA;" OwnerUserId="72" LastEditorUserId="72" LastEditDate="2011-02-05T12:08:44.177" LastActivityDate="2011-02-05T12:08:44.177" CommentCount="7" />
  <row Id="624" PostTypeId="2" ParentId="621" CreationDate="2011-02-05T11:23:27.157" Score="4" Body="&lt;p&gt;First the errors: the static member attribute has to be initialized as:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;int Persons::count = 0;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then in general: you should use &lt;code&gt;std::vector&lt;/code&gt; to avoid having to manually manage resources. While they are correctly managed in this small code sample, if you start building bigger projects you will most probably make a mistake some day (all of us do it). Program defensively to avoid errors: use existing libraries.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The &lt;code&gt;getData()&lt;/code&gt; and &lt;code&gt;displayDAta()&lt;/code&gt; member functions do not need the argument, nor they use it. Remove it from the interface.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You are not handling errors in the &lt;code&gt;getData()&lt;/code&gt; member function nor in main. You should check the state of the &lt;code&gt;istream&lt;/code&gt; after each operation.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I tend to avoid &lt;code&gt;using namespace&lt;/code&gt; directives, but this is a matter of taste.&lt;/p&gt;&#xA;" OwnerUserId="764" LastActivityDate="2011-02-05T11:23:27.157" CommentCount="1" />
  <row Id="625" PostTypeId="2" ParentId="503" CreationDate="2011-02-05T11:39:17.400" Score="3" Body="&lt;p&gt;Yes, it is a common problem. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;I think this is a great way to solve this, I wish I'd done it! Back in my java days I did use the typesafe enum pattern. In ruby I tend to create method objects after the third or so repetition in cases like this, but this is a much cleaner solution and I'm going to start using it for sure.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I found the documentation really clear. I do intend to use it in my app, because it is an excellent way to formalize what I am doing when I create method objects and suggest to others that they replace their long nested if statements with method objects.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The only think I think of at the moment that I might want to improve on it would be to have an option to create a back reference to the owning object for cases where double dispatch will further remove conditional logic. (or like for example where I had a a set of alarms that each should ring at some percentage of the owning objects master volume)&lt;/p&gt;&#xA;" OwnerUserId="1473" LastActivityDate="2011-02-05T11:39:17.400" CommentCount="1" />
  <row Id="626" PostTypeId="2" ParentId="621" CreationDate="2011-02-05T12:34:35.897" Score="4" Body="&lt;p&gt;if you need to comment about the use of a variable like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;static int count;    //This is the count of the objects created&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;you should use self descriptive  names like &lt;code&gt;object_count&lt;/code&gt; instead.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;same goes for&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;int n;     //This is the number of objects that the user wants to make.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;which could e &lt;code&gt;amount_of_objects&lt;/code&gt; ore something like that&lt;/p&gt;&#xA;" OwnerUserId="741" LastActivityDate="2011-02-05T12:34:35.897" CommentCount="0" />
  <row Id="627" PostTypeId="2" ParentId="621" CreationDate="2011-02-05T12:36:28.413" Score="4" Body="&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;em&gt;Persons&lt;/em&gt; name is quite confusing to represent a single person&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;It looks like the main idea is to serialize/deserialize instance of &lt;em&gt;Person&lt;/em&gt; (correct me if I'm wrong here). The more natural is to override &lt;em&gt;operator &gt;&gt;&lt;/em&gt; and &lt;em&gt;operator &amp;lt;&amp;lt;&lt;/em&gt; - it would allow you to specify every stream you want as data source/destination not only standart out/in.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;istream&amp;amp; operator&amp;gt;&amp;gt; (istream&amp;amp; in, Person&amp;amp; p)    &#xA;{    &#xA;  in &amp;gt;&amp;gt; p.Name    &#xA;  in &amp;gt;&amp;gt; p.Address;        &#xA;  return in;&#xA;} &#xA;&#xA;ostream&amp;amp; operator&amp;lt;&amp;lt; (ostream&amp;amp; out, const Person&amp;amp; p)    &#xA;{    &#xA;     out &amp;lt;&amp;lt; p.Name &amp;lt;&amp;lt; 't';    &#xA;     out &amp;lt;&amp;lt; p.Address &amp;lt;&amp;lt; endl;    &#xA;     return out;    &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="1396" LastActivityDate="2011-02-05T12:36:28.413" CommentCount="0" />
  <row Id="628" PostTypeId="2" ParentId="621" CreationDate="2011-02-05T14:46:00.840" Score="3" Body="&lt;p&gt;This probably isn't going to be the case, but is this class ever going to be used in a multithreaded application?  If so, you should be locking around the incrementing of &lt;code&gt;count&lt;/code&gt; since multiple threads could be allocating an object of that type at the same time.  In general, be careful when doing that sort of thing though and ask yourself if your class really cares how many times its been constructed, or if you should be keeping track outside of the class itself.&lt;/p&gt;&#xA;" OwnerUserId="55" LastActivityDate="2011-02-05T14:46:00.840" CommentCount="0" />
  <row Id="631" PostTypeId="1" AcceptedAnswerId="2483" CreationDate="2011-02-05T20:46:52.977" Score="7" ViewCount="1361" Body="&lt;p&gt;I've got a Clojure function here that's meant to parse a string of form:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;&quot;DDXXXYYY&quot;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;where DD is meant to be discarded, and XXX and YYY are string representations of integers.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(defn split-id [tileid]&#xA;  (map #(Integer/parseInt %)&#xA;       (map (partial apply str)&#xA;            (partition 3 (drop 2 tileid)))))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Or, written with the threading macro:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(defn split-id [tileid]&#xA;  (map #(Integer/parseInt %)&#xA;       (map (partial apply str)&#xA;            (-&amp;gt;&amp;gt; tileid (drop 2) (partition 3)))))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Does anyone have any recommendations for a simple way to do this? It feels like &lt;code&gt;clojure.contrib.string&lt;/code&gt; should have a partition function that takes a string and an integer.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I think I've come up with a fairly good block of code for the above function, which I had to extend a bit. I'd love comments and suggestions on the final block.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(defn parse-ints&#xA;  &quot;Converts all strings in the supplied collection to their integer&#xA;  representation.&quot;&#xA;  [coll]&#xA;  (map #(Integer/parseInt %) coll))&#xA;&#xA;(def res-map&#xA;  ^{:doc &quot;Map between the second digit in a MODIS TileID&#xA;metadata value and the corresponding resolution.&quot;}&#xA;  {:1 &quot;1000&quot;&#xA;   :2 &quot;500&quot;&#xA;   :4 &quot;250&quot;})&#xA;&#xA;(defn tileid-&amp;gt;res&#xA;  &quot;Returns a string representation of the resolution referenced by the&#xA;supplied MODIS TileID.&quot;&#xA;  [tileid]&#xA;  (res-map (keyword (subs tileid 1 2))))&#xA;&#xA;(defn tileid-&amp;gt;xy&#xA;  &quot;Extracts integer representations of the MODIS X and Y coordinates&#xA;referenced by the supplied MODIS TileID.&quot;&#xA;  [tileid]&#xA;  (parse-ints&#xA;   (map (partial apply str)&#xA;        (partition 3 (subs tileid 2)))))&#xA;&#xA;(defn split-id&#xA;  &quot;Returns a sequence containing the resolution, X and Y&#xA;  coordinates (on the MODIS grid) referenced by the supplied MODIS&#xA;  TileID.&quot;&#xA;  [tileid]&#xA;  (flatten&#xA;   ((juxt tileid-&amp;gt;res&#xA;          tileid-&amp;gt;xy) tileid)))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="169" LastEditorUserId="22222" LastEditDate="2015-01-02T22:54:59.193" LastActivityDate="2015-01-02T22:54:59.193" Title="Partitioning strings into substrings of fixed length" Tags="&lt;strings&gt;&lt;clojure&gt;" AnswerCount="3" CommentCount="0" FavoriteCount="1" />
  <row Id="634" PostTypeId="1" CreationDate="2011-02-06T00:09:11.227" Score="5" ViewCount="469" Body="&lt;p&gt;This is what I've done so far:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$block-height: 180px;&#xA;&#xA;@mixin block {&#xA;    float: left;&#xA;    margin-bottom: 20px !important;&#xA;    margin-right: 20px !important;&#xA;    overflow: hidden;&#xA;}&#xA;&#xA;#content h2 {&#xA;    height: 30px;&#xA;}&#xA;&#xA;#top-bar {&#xA;    overflow: hidden;&#xA;}&#xA;&#xA;.block-1 {&#xA;    @include block;&#xA;    width: 340px;&#xA;    height: 390px;&#xA;    h2 {&#xA;        color: #555;&#xA;        font-size: 28px;&#xA;        font-weight: 400;&#xA;        line-height: 120%;&#xA;    }&#xA;}&#xA;&#xA;.block-2 {&#xA;    @include block;&#xA;    width: 340px;&#xA;    height: $block-height;&#xA;}&#xA;&#xA;.block-3 {&#xA;    @include block;&#xA;    width: 160px;&#xA;    height: $block-height;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;HTML:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&quot;content&quot;&amp;gt;&#xA;    &amp;lt;?php // Create and run custom loop&#xA;        $custom_posts = new WP_Query();&#xA;        $custom_posts-&amp;gt;query('post_type=page_content&amp;amp;locations=Front Page&amp;amp;page_sections=Profile');&#xA;        while ($custom_posts-&amp;gt;have_posts()) : $custom_posts-&amp;gt;the_post();&#xA;    ?&amp;gt;&#xA;        &amp;lt;div class=&quot;block-1&quot;&amp;gt;&#xA;            &amp;lt;?php the_post_thumbnail('large'); ?&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;    &amp;lt;?php endwhile; ?&amp;gt;&#xA;&#xA;    &amp;lt;?php // Start the main loop&#xA;        if ( have_posts() ) while ( have_posts() ) : the_post();&#xA;    ?&amp;gt;&#xA;        &amp;lt;div class=&quot;block-2 padding-top&quot;&amp;gt;&#xA;            &amp;lt;?php the_content(); ?&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&amp;lt;!-- .entry-content --&amp;gt;&#xA;&#xA;    &amp;lt;?php endwhile; // end of the loop. ?&amp;gt;&#xA;&#xA;&#xA;    &amp;lt;?php // Create and run custom loop&#xA;        $custom_posts = new WP_Query();&#xA;        $custom_posts-&amp;gt;query('post_type=page_content&amp;amp;locations=Front Page&amp;amp;page_sections=Themep');&#xA;        while ($custom_posts-&amp;gt;have_posts()) : $custom_posts-&amp;gt;the_post();&#xA;    ?&amp;gt;&#xA;        &amp;lt;div class=&quot;block-2 border-top&quot;&amp;gt;&#xA;            &amp;lt;h2&amp;gt;&amp;lt;a href=&quot;&amp;lt;?php the_permalink(); ?&amp;gt;&quot; title=&quot;&amp;lt;?php printf( esc_attr__( 'Permalink to %s', 'twentyten' ), the_title_attribute( 'echo=0' ) ); ?&amp;gt;&quot; rel=&quot;bookmark&quot;&amp;gt;&amp;lt;?php the_title(); ?&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;&#xA;    &amp;lt;?php endwhile; ?&amp;gt;&#xA;&#xA;        &amp;lt;?php // Create and run custom loop&#xA;            $custom_posts = new WP_Query();&#xA;        $custom_posts-&amp;gt;query('post_type=page_content&amp;amp;locations=Front Page&amp;amp;page_sections=ThemeCL');&#xA;            while ($custom_posts-&amp;gt;have_posts()) : $custom_posts-&amp;gt;the_post();&#xA;        ?&amp;gt;&#xA;            &amp;lt;div class=&quot;float-left&quot;&amp;gt;&#xA;                &amp;lt;a href=&quot;&amp;lt;?php the_permalink(); ?&amp;gt;&quot; title=&quot;&amp;lt;?php printf( esc_attr__( 'Permalink to %s', 'twentyten' ), the_title_attribute( 'echo=0' ) ); ?&amp;gt;&quot; rel=&quot;bookmark&quot;&amp;gt;&amp;lt;?php the_post_thumbnail(); ?&amp;gt;&amp;lt;/a&amp;gt;&#xA;                &amp;lt;p&amp;gt;&amp;lt;?php the_excerpt(); ?&amp;gt;&amp;lt;/p&amp;gt;&#xA;            &amp;lt;/div&amp;gt;&#xA;        &amp;lt;?php endwhile; ?&amp;gt;&#xA;&#xA;        &amp;lt;?php // Create and run custom loop&#xA;            $custom_posts = new WP_Query();&#xA;        $custom_posts-&amp;gt;query('post_type=page_content&amp;amp;locations=Front Page&amp;amp;page_sections=Theme Child Right');&#xA;            while ($custom_posts-&amp;gt;have_posts()) : $custom_posts-&amp;gt;the_post();&#xA;        ?&amp;gt;&#xA;            &amp;lt;div class=&quot;float-right&quot;&amp;gt;&#xA;                    &amp;lt;a href=&quot;&amp;lt;?php the_permalink(); ?&amp;gt;&quot; title=&quot;&amp;lt;?php printf( esc_attr__( 'Permalink to %s', 'twentyten' ), the_title_attribute( 'echo=0' ) ); ?&amp;gt;&quot; rel=&quot;bookmark&quot;&amp;gt;&amp;lt;?php the_post_thumbnail(); ?&amp;gt;&amp;lt;/a&amp;gt;&#xA;                    &amp;lt;p&amp;gt;&amp;lt;?php the_excerpt(); ?&amp;gt;&amp;lt;/p&amp;gt;&#xA;                &amp;lt;/div&amp;gt;&#xA;            &amp;lt;/div&amp;gt;&#xA;    &amp;lt;?php endwhile; ?&amp;gt;&#xA;&#xA;    &amp;lt;?php // Create and run custom loop&#xA;        $custom_posts = new WP_Query();&#xA;        $custom_posts-&amp;gt;query('post_type=page_content&amp;amp;locations=Front Page&amp;amp;page_sections=FromBlog');&#xA;        while ($custom_posts-&amp;gt;have_posts()) : $custom_posts-&amp;gt;the_post();&#xA;    ?&amp;gt;&#xA;        &amp;lt;div class=&quot;block-3 border-top&quot;&amp;gt;&#xA;            &amp;lt;h2&amp;gt;&amp;lt;a href=&quot;&amp;lt;?php the_permalink(); ?&amp;gt;&quot; title=&quot;&amp;lt;?php printf( esc_attr__( 'Permalink to %s', 'twentyten' ), the_title_attribute( 'echo=0' ) ); ?&amp;gt;&quot; rel=&quot;bookmark&quot;&amp;gt;&amp;lt;?php the_title(); ?&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;&#xA;            &amp;lt;a href=&quot;&amp;lt;?php the_permalink(); ?&amp;gt;&quot; title=&quot;&amp;lt;?php printf( esc_attr__( 'Permalink to %s', 'twentyten' ), the_title_attribute( 'echo=0' ) ); ?&amp;gt;&quot; rel=&quot;bookmark&quot;&amp;gt;&amp;lt;?php the_post_thumbnail(); ?&amp;gt;&amp;lt;/a&amp;gt;&#xA;            &amp;lt;p&amp;gt;&amp;lt;?php the_excerpt(); ?&amp;gt;&amp;lt;/p&amp;gt;&#xA;            &amp;lt;p&amp;gt;&amp;lt;?php echo get_post_meta($post-&amp;gt;ID, &quot;Other_Work&quot;, true); ?&amp;gt;&amp;lt;/p&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;    &amp;lt;?php endwhile; ?&amp;gt;&#xA;&#xA;    &amp;lt;?php // Create and run custom loop&#xA;        $custom_posts = new WP_Query();&#xA;        $custom_posts-&amp;gt;query('post_type=page_content&amp;amp;locations=Front Page&amp;amp;page_sections=Featured');&#xA;        while ($custom_posts-&amp;gt;have_posts()) : $custom_posts-&amp;gt;the_post();&#xA;    ?&amp;gt;&#xA;        &amp;lt;div class=&quot;block-2 border-top&quot;&amp;gt;&#xA;            &amp;lt;h2&amp;gt;&amp;lt;a href=&quot;&amp;lt;?php the_permalink(); ?&amp;gt;&quot; title=&quot;&amp;lt;?php printf( esc_attr__( 'Permalink to %s', 'twentyten' ), the_title_attribute( 'echo=0' ) ); ?&amp;gt;&quot; rel=&quot;bookmark&quot;&amp;gt;&amp;lt;?php the_title(); ?&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;&#xA;            &amp;lt;a href=&quot;&amp;lt;?php the_permalink(); ?&amp;gt;&quot; title=&quot;&amp;lt;?php printf( esc_attr__( 'Permalink to %s', 'twentyten' ), the_title_attribute( 'echo=0' ) ); ?&amp;gt;&quot; rel=&quot;bookmark&quot;&amp;gt;&amp;lt;?php the_post_thumbnail('large'); ?&amp;gt;&amp;lt;/a&amp;gt;&#xA;            &amp;lt;p&amp;gt;&amp;lt;?php the_excerpt(); ?&amp;gt;&amp;lt;/p&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;    &amp;lt;?php endwhile; ?&amp;gt;&#xA;&#xA;    &amp;lt;?php // Create and run custom loop&#xA;        $custom_posts = new WP_Query();&#xA;        $custom_posts-&amp;gt;query('post_type=page_content&amp;amp;page_sections=Last');&#xA;        while ($custom_posts-&amp;gt;have_posts()) : $custom_posts-&amp;gt;the_post();&#xA;    ?&amp;gt;&#xA;        &amp;lt;div class=&quot;block-3 border-top&quot;&amp;gt;&#xA;            &amp;lt;h2&amp;gt;&amp;lt;a href=&quot;&amp;lt;?php the_permalink(); ?&amp;gt;&quot; title=&quot;&amp;lt;?php printf( esc_attr__( 'Permalink to %s', 'twentyten' ), the_title_attribute( 'echo=0' ) ); ?&amp;gt;&quot; rel=&quot;bookmark&quot;&amp;gt;&amp;lt;?php the_title(); ?&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;&#xA;            &amp;lt;a href=&quot;&amp;lt;?php the_permalink(); ?&amp;gt;&quot; title=&quot;&amp;lt;?php printf( esc_attr__( 'Permalink to %s', 'twentyten' ), the_title_attribute( 'echo=0' ) ); ?&amp;gt;&quot; rel=&quot;bookmark&quot;&amp;gt;&amp;lt;?php the_post_thumbnail(); ?&amp;gt;&amp;lt;/a&amp;gt;&#xA;            &amp;lt;p&amp;gt;&amp;lt;?php the_excerpt(); ?&amp;gt;&amp;lt;/p&amp;gt;&#xA;            &amp;lt;p&amp;gt;&amp;lt;?php the_meta(); ?&amp;gt;&amp;lt;/p&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;    &amp;lt;?php endwhile; ?&amp;gt;&#xA;&#xA;    &amp;lt;?php // Create and run custom loop&#xA;        $custom_posts = new WP_Query();&#xA;        $custom_posts-&amp;gt;query('post_type=page_content&amp;amp;page_sections=Lastest');&#xA;        while ($custom_posts-&amp;gt;have_posts()) : $custom_posts-&amp;gt;the_post();&#xA;    ?&amp;gt;&#xA;    &amp;lt;div class=&quot;block-7 border-top&quot;&amp;gt;&#xA;        &amp;lt;h2&amp;gt;&amp;lt;a href=&quot;&amp;lt;?php the_permalink(); ?&amp;gt;&quot; title=&quot;&amp;lt;?php printf( esc_attr__( 'Permalink to %s', 'twentyten' ), the_title_attribute( 'echo=0' ) ); ?&amp;gt;&quot; rel=&quot;bookmark&quot;&amp;gt;&amp;lt;?php the_title(); ?&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;&#xA;        &amp;lt;a href=&quot;&amp;lt;?php the_permalink(); ?&amp;gt;&quot; title=&quot;&amp;lt;?php printf( esc_attr__( 'Permalink to %s', 'twentyten' ), the_title_attribute( 'echo=0' ) ); ?&amp;gt;&quot; rel=&quot;bookmark&quot;&amp;gt;&amp;lt;?php the_post_thumbnail(); ?&amp;gt;&amp;lt;/a&amp;gt;&#xA;        &amp;lt;p&amp;gt;&amp;lt;?php the_excerpt(); ?&amp;gt;&amp;lt;/p&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;    &amp;lt;?php endwhile; ?&amp;gt;&#xA;&amp;lt;/div&amp;gt;&amp;lt;!-- #content --&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Do you have any other tips for good practice?&lt;/p&gt;&#xA;" OwnerUserId="1035" LastEditorUserId="22222" LastEditDate="2014-12-15T16:31:50.523" LastActivityDate="2014-12-15T16:31:50.523" Title="Adding flair to PHP page with Sassy (SCSS)" Tags="&lt;php&gt;&lt;css&gt;&lt;sass&gt;" AnswerCount="1" CommentCount="0" FavoriteCount="0" />
  <row Id="635" PostTypeId="2" ParentId="631" CreationDate="2011-02-06T00:50:07.453" Score="2" Body="&lt;p&gt;You could try the following, using the Java substring method and a vector of offsets:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(defn split-id [tileid]&#xA;  (map &#xA;    #(Integer. (.substring tileid % (+ % 3)) ) &#xA;    [2 5]))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1379" LastEditorUserId="1379" LastEditDate="2011-02-06T01:04:26.040" LastActivityDate="2011-02-06T01:04:26.040" CommentCount="0" />
  <row Id="636" PostTypeId="1" AcceptedAnswerId="638" CreationDate="2011-02-06T01:42:42.690" Score="7" ViewCount="816" Body="&lt;p&gt;I haven't had anyone help me out with code review, etc, so I thought I'd post a Python class I put together for interfacing with Telnet to get information from a memcached server.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import re, telnetlib&#xA;&#xA;class MemcachedStats:&#xA;&#xA;    _client = None&#xA;&#xA;    def __init__(self, host='localhost', port='11211'):&#xA;        self._host = host&#xA;        self._port = port&#xA;&#xA;    @property&#xA;    def client(self):&#xA;        if self._client is None:&#xA;            self._client = telnetlib.Telnet(self._host, self._port)&#xA;        return self._client&#xA;&#xA;    def key_details(self, sort=True):&#xA;        ' Return a list of tuples containing keys and details '&#xA;        keys = []&#xA;        slab_ids = self.slab_ids()&#xA;        for id in slab_ids:&#xA;            self.client.write(&quot;stats cachedump %s 100\n&quot; % id)&#xA;            response = self.client.read_until('END')&#xA;            keys.extend(re.findall('ITEM (.*) \[(.*); (.*)\]', response))&#xA;        if sort:&#xA;            return sorted(keys)&#xA;        return keys&#xA;&#xA;    def keys(self, sort=True):&#xA;        ' Return a list of keys in use '&#xA;        return [key[0] for key in self.key_details(sort=sort)]&#xA;&#xA;    def slab_ids(self):&#xA;        ' Return a list of slab ids in use '&#xA;        self.client.write(&quot;stats items\n&quot;)&#xA;        response = self.client.read_until('END')&#xA;        return re.findall('STAT items:(.*):number', response)&#xA;&#xA;    def stats(self):&#xA;        ' Return a dict containing memcached stats '&#xA;        self.client.write(&quot;stats\n&quot;)&#xA;        response = self.client.read_until('END')&#xA;        return dict(re.findall(&quot;STAT (.*) (.*)\r&quot;, response))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This is also up on &lt;a href=&quot;https://github.com/dlrust/python-memcached-stats/blob/master/src/memcached_stats.py&quot; rel=&quot;nofollow&quot;&gt;GitHub&lt;/a&gt;. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;I would love some feedback on:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Organization&lt;/li&gt;&#xA;&lt;li&gt;Better ways of accomplishing the same result&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="461" LastEditorUserId="22222" LastEditDate="2014-07-02T00:15:29.833" LastActivityDate="2014-07-02T00:15:29.833" Title="Python class w/ Telnet interface to memcached" Tags="&lt;python&gt;&lt;networking&gt;" AnswerCount="1" CommentCount="2" FavoriteCount="0" />
  <row Id="637" PostTypeId="2" ParentId="602" CreationDate="2011-02-06T04:15:47.630" Score="3" Body="&lt;h3&gt;Why not make DB a Singleton class?&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Making it Singleton will prevent multiple sign-ons. Now in your code, each time a DB object is created, you authenticate with the database server.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you make it Singleton, you just have to connect once. And whenever you need the instance, you just have to fetch it.&lt;/p&gt;&#xA;" OwnerUserId="1497" LastActivityDate="2011-02-06T04:15:47.630" CommentCount="3" />
  <row Id="638" PostTypeId="2" ParentId="636" CreationDate="2011-02-06T05:08:06.750" Score="6" Body="&lt;p&gt;The pattern&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;self.client.write(&quot;some command\n&quot;)&#xA;response = self.client.read_until('END')&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;appears three times in your code. I think this is often enough to warrant refactoring it into its own method like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def command(self, cmd):&#xA;    self.client.write(&quot;%s\n&quot; % cmd)&#xA;    return self.client.read_until('END')&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;In &lt;code&gt;key_details&lt;/code&gt; you're using &lt;code&gt;extend&lt;/code&gt; to build up a list. However it's more pythonic to use list comprehensions than building up a list imperatively. Thus I'd recommend using the following list comprehension:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;regex = 'ITEM (.*) \[(.*); (.*)\]'&#xA;cmd = &quot;stats cachedump %s 100&quot;&#xA;keys = [key for id in slab_ids for key in re.findall(regex, command(cmd % id))]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Afterwards you do this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if sort:&#xA;    return sorted(keys)&#xA;return keys&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now this might be a matter of opinion, but I'd rather write this using an &lt;code&gt;else&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if sort:&#xA;    return sorted(keys)&#xA;else:&#xA;    return keys&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I think this is optically more pleasing as both &lt;code&gt;return&lt;/code&gt;s are indented at the same level. It also makes it immediately obviously that the second &lt;code&gt;return&lt;/code&gt; is what happens if the &lt;code&gt;if&lt;/code&gt; condition is false.&lt;/p&gt;&#xA;" OwnerUserId="128" LastEditorUserId="128" LastEditDate="2011-02-07T05:29:00.987" LastActivityDate="2011-02-07T05:29:00.987" CommentCount="6" />
  <row Id="639" PostTypeId="1" CreationDate="2011-02-06T05:23:13.670" Score="8" ViewCount="291" Body="&lt;p&gt;I basically have an AJAX-fetched skin (html/css) that's loaded into a dummy element (id=SkinContainer) when the page is loaded, and then the content of one of its divs (contentdiv) is fetched with another AJAXHTTPRequest.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;At any rate, when the page is loaded, the user can click a button to swap the theme/skin. Below is the (working) code for my theme swap, but I'm wondering whether or not it's the best way to do this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function themeSwap() {&#xA;    var oldTheme = themeSelect;&#xA;    themeSelect++;&#xA;    if (themeSelect&amp;gt;2 || themeSelect&amp;lt;1) {themeSelect=1;}&#xA;    $('html').addClass('js');&#xA;&#xA;    var tempContentDiv = document.getElementById(&quot;contentdiv&quot;);&#xA;    var tempContent = tempContentDiv.innerHTML;&#xA;&#xA;    ReplaceJSCSSFile(&quot;css/skin&quot; + oldTheme  + &quot;.css&quot;, &quot;css/skin&quot; + themeSelect + &quot;.css&quot;, &quot;css&quot;);&#xA;    AJAX_LoadResponseIntoElement(&quot;skinContainer&quot;, &quot;skin&quot; + themeSelect + &quot;.txt&quot;, function() {themeSwapCallback(tempContent)} );&#xA;}&#xA;&#xA;function themeSwapCallback (tempContent) {&#xA;    initPage();&#xA;    document.getElementById(&quot;contentdiv&quot;).innerHTML = tempContent;&#xA;    setCookie(&quot;themeSelection&quot;,themeSelect,365);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;What this basically does is stores the innerHTML of contentdiv into the &quot;tempContent&quot; variable, loads the new skin into skinContainer with an AJAX fetch, and then restores the original content by setting contentdiv's innerHTML to &quot;tempContent.&quot;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The reason why it has to use an AJAX fetch on top of the CSS swap is because the structure of the elements changes.  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Have I finally have this done correctly?  or is this still not perfect? :(&lt;/p&gt;&#xA;" OwnerUserId="1099" LastEditorUserId="18427" LastEditDate="2013-11-24T02:34:39.610" LastActivityDate="2013-12-09T14:36:08.607" Title="Theme/skin swap... version 2! (CSS-driven)" Tags="&lt;javascript&gt;&lt;html&gt;&lt;css&gt;&lt;ajax&gt;" AnswerCount="2" CommentCount="3" />
  <row Id="640" PostTypeId="1" AcceptedAnswerId="643" CreationDate="2011-02-06T03:08:27.397" Score="10" ViewCount="782" Body="&lt;p&gt;Do you have any suggestions for improving it? Instead of writing four almost identical &lt;code&gt;setOnClickListener&lt;/code&gt; method calls, I opted to iterate over an array, but I'm wondering if this was the best way to do it.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/* Set up the radio button click listeners so two categories are not selected&#xA;   at the same time. When one of them is clicked it clears the others.&#xA;*/&#xA;final RadioButton[] buttons = {radio_books,radio_games,radio_dvds,radio_electronics};&#xA;for (int i = 0; i &amp;lt; 4; i++) {&#xA;    final int k = i;&#xA;    buttons[i].setOnClickListener(new OnClickListener() {&#xA;        @Override&#xA;        public void onClick(View v) {&#xA;            for (int j = 0; j &amp;lt; 4; j++) {&#xA;                if (buttons[j] != buttons[k]) {&#xA;                    buttons[j].setChecked(false);&#xA;                }&#xA;            }&#xA;        }&#xA;    });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1495" OwnerDisplayName="davidk01" LastEditorUserId="22222" LastEditDate="2014-10-10T00:49:33.687" LastActivityDate="2014-10-10T00:49:33.687" Title="Setting up radio button click listeners" Tags="&lt;java&gt;" AnswerCount="2" CommentCount="1" FavoriteCount="1" />
  <row Id="642" PostTypeId="2" ParentId="640" CreationDate="2011-02-06T03:18:24.573" Score="2" Body="&lt;p&gt;It's typical callback method, you just &lt;strong&gt;defined&lt;/strong&gt; &lt;code&gt;setOnClickListener&lt;/code&gt; once. Calling 4 times is not bad &lt;a href=&quot;http://en.wikipedia.org/wiki/Code_smell&quot; rel=&quot;nofollow&quot;&gt;smell&lt;/a&gt;.&lt;/p&gt;&#xA;" OwnerDisplayName="卢声远 Shengyuan Lu" LastEditorUserId="8891" LastEditDate="2012-01-28T19:09:48.263" LastActivityDate="2012-01-28T19:09:48.263" CommentCount="0" />
  <row Id="643" PostTypeId="2" ParentId="640" CreationDate="2011-02-06T06:12:52.973" Score="5" Body="&lt;p&gt;What GUI framework is this? Is the &lt;code&gt;View v&lt;/code&gt; being passed to the &lt;code&gt;OnClick&lt;/code&gt; method actually the clicked &lt;code&gt;RadioButton&lt;/code&gt;? If so, here are some changes to consider&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;final RadioButton[] buttons = {radio_books,radio_games,radio_dvds,radio_electronics};&#xA;&#xA;final OnClickListener onClickHandler =&#xA;    new OnClickListener() {&#xA;        @Override&#xA;        public void onClick(final View v) {&#xA;            final RadioButton checkedButton = (RadioButton) v;&#xA;            for (final RadioButton button : buttons) {&#xA;                if (button != checkedButton) {&#xA;                    button.setChecked(false);&#xA;                }&#xA;            }&#xA;        }&#xA;    };&#xA;&#xA;for (final RadioButton button : buttons) {&#xA;    button.setOnClickListener(onClickHandler);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If &lt;code&gt;View v&lt;/code&gt; != the checked radio button, then:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;final RadioButton[] buttons = {radio_books,radio_games,radio_dvds,radio_electronics};&#xA;for (final RadioButton thisButton: buttons) {&#xA;    thisButton.setOnClickListener(&#xA;        new OnClickListener() {&#xA;            @Override&#xA;            public void onClick(final View v) {&#xA;                for (final RadioButton button : buttons) {&#xA;                    if (button != thisButton) {&#xA;                        button.setChecked(false);&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;    );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="334" LastEditorUserId="334" LastEditDate="2011-02-06T06:35:34.430" LastActivityDate="2011-02-06T06:35:34.430" CommentCount="6" />
  <row Id="645" PostTypeId="1" AcceptedAnswerId="660" CreationDate="2011-02-06T06:51:17.670" Score="8" ViewCount="401" Body="&lt;p&gt;I wrote the following Ruby script several years ago and have been using it often ever since.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It opens a text editor with the list of files in current directory. You can then edit the file names as text. Once you save and exit the files are renamed.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The &lt;code&gt;renamer&lt;/code&gt; allowed me to maintain spreadsheet-like file names thanks to the powerful column editing capabilities of vi (emacs also has those).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here is how one such directory looks:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&quot;http://i.stack.imgur.com/gvomL.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I would like to use it as an example for a Ruby workshop. Could you please suggest best-practice and design pattern improvements?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#!/usr/bin/ruby&#xA;&#xA;RM = '/bin/rm'&#xA;MV = '/bin/mv'&#xA;&#xA;from = Dir.entries('.').sort; from.delete('.'); from.delete('..')&#xA;from.sort!&#xA;&#xA;from.delete_if {|i| i =~ /^\./} # Hidden files&#xA;&#xA;tmp = &quot;/tmp/renamer.#{Time.now.to_i}.#{(rand * 1000).to_i}&quot;&#xA;&#xA;File.open(tmp, 'w') do |f|&#xA;  from.each {|i| f.puts i}&#xA;end&#xA;&#xA;ENV['EDITOR'] = 'vi' if ENV['EDITOR'].nil?&#xA;system(&quot;#{ENV['EDITOR']} #{tmp}&quot;)&#xA;&#xA;to = File.open(tmp) {|f| f.readlines.collect{|l| l.chomp}}&#xA;`#{RM} #{tmp}`&#xA;&#xA;if to.size != from.size&#xA;  STDERR.puts &quot;renamer: ERROR: number of lines changed&quot;&#xA;  exit(1)&#xA;end&#xA;&#xA;from.each_with_index do |f, i|&#xA;  puts `#{MV} -v --interactive &quot;#{f}&quot; &quot;#{to[i]}&quot;` unless f == to[i]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="492" LastEditorUserId="22222" LastEditDate="2016-11-08T00:02:59.977" LastActivityDate="2016-11-08T00:02:59.977" Title="A text editor driven file renamer in Ruby" Tags="&lt;ruby&gt;&lt;file-system&gt;" AnswerCount="2" CommentCount="0" FavoriteCount="1" />
  <row Id="646" PostTypeId="1" CreationDate="2011-02-06T07:12:24.630" Score="8" ViewCount="2026" Body="&lt;p&gt;I just want to make sure there aren't any deadlocks or inconsistencies (the code is also available &lt;a href=&quot;https://github.com/ripper234/Basic/blob/master/java/src/main/java/org/basic/concurrent/SynchedQueue.java&quot;&gt;on github&lt;/a&gt;). &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt; - In real life, I would not implement a queue myself, but use an existing implementation. This is just preparations for job interviews.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package org.basic.concurrent;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;&#xA;public class SynchedQueue&amp;lt;T&amp;gt; {&#xA;    private final Object lock = new Object();&#xA;    private final Object full = new Object();&#xA;    private final Object free = new Object();&#xA;&#xA;    private final List&amp;lt;T&amp;gt; buffer;&#xA;    private int head;&#xA;    private int tail;&#xA;    private int size;&#xA;    private final int capacity;&#xA;&#xA;    public SynchedQueue(int capacity) {&#xA;        // http://stackoverflow.com/questions/4912088/how-to-create-a-fixed-size-generic-buffer-in-java&#xA;        buffer = new ArrayList&amp;lt;T&amp;gt;(capacity);&#xA;        for (int i = 0; i &amp;lt; capacity; ++i)&#xA;            buffer.add(null);&#xA;        this.capacity = capacity;&#xA;    }&#xA;&#xA;    public void enqueue(T x) {&#xA;        if (x == null)&#xA;            throw new RuntimeException(&quot;Doesn't allow storing nulls&quot;);&#xA;&#xA;        synchronized (lock) {&#xA;            while (!tryEnqueue(x)) {&#xA;                try {&#xA;                    free.wait();&#xA;                } catch (InterruptedException ignored) {&#xA;                }&#xA;            }&#xA;            full.notify();&#xA;        }&#xA;    }&#xA;&#xA;    public T dequeue() {&#xA;        synchronized (lock) {&#xA;            while (true) {&#xA;                T item = tryDequeue();&#xA;                if (item != null)&#xA;                {&#xA;                    free.notify();&#xA;                    return item;&#xA;                }&#xA;                try {&#xA;                    full.wait();&#xA;                }&#xA;                catch (InterruptedException ignored) {}&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    private boolean tryEnqueue(T x) {&#xA;        assert size &amp;lt;= capacity;&#xA;        if (size &amp;gt;= capacity) {&#xA;            return false;&#xA;        }&#xA;&#xA;        buffer.set(tail, x);&#xA;        tail = (tail + 1) % capacity;&#xA;        ++size;&#xA;        return true;&#xA;    }&#xA;&#xA;    private T tryDequeue() {&#xA;        assert size &amp;gt;= 0;&#xA;        if (size == 0)&#xA;            return null;&#xA;        T item = buffer.get(head);&#xA;        head = (head + 1) % capacity;&#xA;        --size;&#xA;        return item;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1501" LastEditorUserId="54718" LastEditDate="2015-05-02T20:08:41.393" LastActivityDate="2015-05-02T20:08:41.393" Title="Java synchronous queue implementation" Tags="&lt;java&gt;&lt;multithreading&gt;" AnswerCount="3" CommentCount="3" FavoriteCount="0" />
  <row Id="647" PostTypeId="2" ParentId="645" CreationDate="2011-02-06T07:37:31.497" Score="4" Body="&lt;p&gt;Just a couple of things:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#!/usr/bin/ruby&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It's possible that on some systems this isn't where ruby lives, it's better to do:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#!/usr/bin/env ruby&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;from = Dir.entries('.').sort; from.delete('.'); from.delete('..')&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Can be written as&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;from = Dir.entries('.').sort - ['.', '..']&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Which is more succinct and eliminates having three statements on one line (which you shouldn't do).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Or you could eliminate hidden files and . / .. in one go with:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;from = Dir.entries(.).select do |filename|&#xA;    filename[0].chr != '.'&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Edit:&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;from = Dir.glob(&quot;*&quot;).sort&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Is definitely the best solution.&lt;/p&gt;&#xA;" OwnerUserId="1172" LastEditorUserId="1172" LastEditDate="2011-02-06T16:01:02.010" LastActivityDate="2011-02-06T16:01:02.010" CommentCount="2" />
  <row Id="649" PostTypeId="2" ParentId="646" CreationDate="2011-02-06T08:17:44.713" Score="4" Body="&lt;p&gt;I have not coded in Java for a few years so it might be good to get another opinion, though some points did stand out while reading your code.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;It seems odd to me that you would use an &lt;code&gt;ArrayList&lt;/code&gt; with a fixed size, personally I would just use an array for the buffer.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;when you dequeue, you do not overwrite the value until you enqueue over the top of it. This might not seem like an issue (and if you only queue primative types like &lt;code&gt;int&lt;/code&gt;, its not) but if you use reference types and the queue cycles slowly then it means you hold a reference to the object for longer than needed and it cannot be collected.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;I'm a bit worried about catching the &lt;code&gt;InterruptedException&lt;/code&gt; inside a while(true) loops without breaking out of the loop. The most common reason I have seen for one thread to interrupt another is when the interrupting thread wants to give the interrupted thread the opportunity to terminate gratefully, but this will prevent that option. I thought about what can be returned in such a case and eventually decided it might be best to let this exception flow through and be handled by the caller.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="1432" LastEditorUserId="1432" LastEditDate="2011-03-26T04:37:37.573" LastActivityDate="2011-03-26T04:37:37.573" CommentCount="1" />
  <row Id="650" PostTypeId="2" ParentId="646" CreationDate="2011-02-06T08:27:55.167" Score="1" Body="&lt;ol&gt;&#xA;&lt;li&gt;&lt;p&gt;It looks like a BlockingQueue not just SynchQueue&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;em&gt;throw new RuntimeException(&quot;Doesn't allow storing nulls&quot;);&lt;/em&gt; - there is &lt;em&gt;IllegalArgumnetException&lt;/em&gt; for this.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;It would better to add &lt;em&gt;throws InterruptedException&lt;/em&gt; to method declaration rather than swallowing it.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;You are going to add/remove from the tail/head of the internal buffer - LinkedList looks like better options for internal storage. You don't need tons of Array.Copy in this case. It would also remove those &lt;em&gt;tryDequeue()&lt;/em&gt; and &lt;em&gt;tryEnqueue()&lt;/em&gt; and greatly simplify the code. &lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;This code doesn't work in a single thread scenario. Consider the situation when I call &lt;em&gt;enqueue()&lt;/em&gt; for the first time on queue then &lt;em&gt;full.notify()&lt;/em&gt; will fail immediately.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;" OwnerUserId="1396" LastEditorUserId="1396" LastEditDate="2011-02-07T18:43:34.637" LastActivityDate="2011-02-07T18:43:34.637" CommentCount="7" />
  <row Id="654" PostTypeId="1" AcceptedAnswerId="711" CreationDate="2011-02-06T12:04:29.877" Score="14" ViewCount="18349" Body="&lt;p&gt;I wanted a class which executes any number of tasks but only a certain amount at the same time (e.g. to download various internet content and keep the overall download speed at a good level). The class I wrote seems to work but there are probably things that can be improved.&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Do these locks make sense? Should there be other locks as well?&lt;/li&gt;&#xA;&lt;li&gt;I have a method and an event that is only relevant if a specific constructor is used.  Is there a way to improve that?&lt;/li&gt;&#xA;&lt;li&gt;The class I use for tasks is &lt;code&gt;ThreadStart&lt;/code&gt;.  Is that a good idea?&lt;/li&gt;&#xA;&lt;li&gt;There might be better method names/class names.&lt;/li&gt;&#xA;&lt;li&gt;Are there any general errors (e.g. that more Threads than the max-count will be executed)?&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;There are probably more points that could be improved.  Also, if anyone knows a good open source library (or native .NET class even) which does just what my class is supposed to do, I would be interested in that too.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public class ThreadQueue&#xA;{&#xA;    private readonly HashSet&amp;lt;ThreadStart&amp;gt; WorkingThreads = new HashSet&amp;lt;ThreadStart&amp;gt;();&#xA;    private readonly Queue&amp;lt;ThreadStart&amp;gt; Queue = new Queue&amp;lt;ThreadStart&amp;gt;();&#xA;&#xA;    private bool RaiseCompleteEventIfQueueEmpty = false;&#xA;&#xA;    private int ThreadsMaxCount;&#xA;&#xA;    public ThreadQueue(int threadsMaxCount)&#xA;    {&#xA;        ThreadsMaxCount = threadsMaxCount;&#xA;    }&#xA;&#xA;    /// &amp;lt;summary&amp;gt;&#xA;    /// Creates a new thread queue with a maximum number of threads and the tasks that should be executed.&#xA;    /// &amp;lt;/summary&amp;gt;&#xA;    /// &amp;lt;param name=&quot;threadsMaxCount&quot;&amp;gt;The maximum number of currently active threads.&amp;lt;/param&amp;gt;&#xA;    /// &amp;lt;param name=&quot;tasks&quot;&amp;gt;The tasks that should be executed by the queue.&amp;lt;/param&amp;gt;&#xA;    public ThreadQueue(int threadsMaxCount, ThreadStart[] tasks) : this(threadsMaxCount)&#xA;    {&#xA;        RaiseCompleteEventIfQueueEmpty = true;&#xA;        foreach (ThreadStart task in tasks)&#xA;        {&#xA;            Queue.Enqueue(task);&#xA;        }&#xA;    }&#xA;&#xA;    /// &amp;lt;summary&amp;gt;&#xA;    /// Starts to execute tasks. Used in conjunction with the constructor in which all tasks are provided.&#xA;    /// &amp;lt;/summary&amp;gt;&#xA;    public void Start()&#xA;    {&#xA;        CheckQueue();&#xA;    }&#xA;&#xA;    private readonly object addlock = new object();&#xA;    /// &amp;lt;summary&amp;gt;&#xA;    /// Adds a task and runs it if a execution slot is free. Otherwise it will be enqueued.&#xA;    /// &amp;lt;/summary&amp;gt;&#xA;    /// &amp;lt;param name=&quot;task&quot;&amp;gt;The task that should be executed.&amp;lt;/param&amp;gt;&#xA;    public void AddTask(ThreadStart task)&#xA;    {&#xA;        lock (addlock)&#xA;        {&#xA;            if (WorkingThreads.Count == ThreadsMaxCount)&#xA;            {&#xA;                Queue.Enqueue(task);&#xA;            }&#xA;            else&#xA;            {&#xA;                StartThread(task);&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    /// &amp;lt;summary&amp;gt;&#xA;    /// Starts the execution of a task.&#xA;    /// &amp;lt;/summary&amp;gt;&#xA;    /// &amp;lt;param name=&quot;task&quot;&amp;gt;The task that should be executed.&amp;lt;/param&amp;gt;&#xA;    private void StartThread(ThreadStart task)&#xA;    {&#xA;        WorkingThreads.Add(task);&#xA;        BackgroundWorker thread = new BackgroundWorker();&#xA;        thread.DoWork += delegate { task.Invoke(); };&#xA;        thread.RunWorkerCompleted += delegate { ThreadCompleted(task); };&#xA;        thread.RunWorkerAsync();&#xA;    }&#xA;&#xA;    private void ThreadCompleted(ThreadStart start)&#xA;    {&#xA;        WorkingThreads.Remove(start);&#xA;        CheckQueue();&#xA;        if (Queue.Count == 0 &amp;amp;&amp;amp; WorkingThreads.Count == 0 &amp;amp;&amp;amp; RaiseCompleteEventIfQueueEmpty) OnCompleted();&#xA;    }&#xA;&#xA;    private readonly object checklock = new object();&#xA;    /// &amp;lt;summary&amp;gt;&#xA;    /// Checks if the queue contains tasks and runs as many as there are free execution slots.&#xA;    /// &amp;lt;/summary&amp;gt;&#xA;    private void CheckQueue()&#xA;    {&#xA;        lock (checklock)&#xA;        {&#xA;            while (Queue.Count &amp;gt; 0 &amp;amp;&amp;amp; WorkingThreads.Count &amp;lt; ThreadsMaxCount)&#xA;            {&#xA;                StartThread(Queue.Dequeue());&#xA;            }&#xA;            if (Queue.Count == 0 &amp;amp;&amp;amp; WorkingThreads.Count == 0 &amp;amp;&amp;amp; RaiseCompleteEventIfQueueEmpty) OnCompleted();&#xA;        }&#xA;    }&#xA;&#xA;    /// &amp;lt;summary&amp;gt;&#xA;    /// Raised when all tasks have been completed. Will only be used if the ThreadQueue has been initialized with all the tasks it should execute.&#xA;    /// &amp;lt;/summary&amp;gt;&#xA;    public event EventHandler Completed;&#xA;&#xA;    /// &amp;lt;summary&amp;gt;&#xA;    /// Raises the Completed event.&#xA;    /// &amp;lt;/summary&amp;gt;&#xA;    protected void OnCompleted()&#xA;    {&#xA;        if (Completed != null)&#xA;        {&#xA;            Completed(this, null);&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1508" LastEditorUserId="22222" LastEditDate="2014-04-07T07:47:38.247" LastActivityDate="2014-04-07T07:50:04.723" Title="A custom thread-pool/queue class" Tags="&lt;c#&gt;&lt;multithreading&gt;&lt;queue&gt;&lt;locking&gt;" AnswerCount="5" CommentCount="3" FavoriteCount="4" />
  <row Id="655" PostTypeId="2" ParentId="654" CreationDate="2011-02-06T12:30:29.560" Score="2" Body="&lt;p&gt;In &lt;code&gt;ThreadCompleted&lt;/code&gt; looks like you're raising &lt;code&gt;OnCompleted&lt;/code&gt; twice - once in this method itself and another one in &lt;code&gt;CheckQueue&lt;/code&gt; method&lt;/p&gt;&#xA;" OwnerUserId="645" LastActivityDate="2011-02-06T12:30:29.560" CommentCount="2" />
  <row Id="656" PostTypeId="1" CreationDate="2011-02-06T12:32:10.430" Score="5" ViewCount="2626" Body="&lt;p&gt;I have inherited this snippet of jQuery JavaScript and am currently brushing up on my jQuery. NetBeans IDE complains that &lt;code&gt;Anonymous function does not always return a value&lt;/code&gt;. So there is not always an explicit exit point.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I am aware that the &lt;code&gt;$()&lt;/code&gt; shortcut is not being used. This is because it is running within a WordPress environment and needs to be in no-conflict mode.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function init() {&#xA;&#xA;    jQuery(&quot;#post&quot;).submit(function(_e) {&#xA;        // Make sure question is supplied&#xA;        var contents;&#xA;        if(window.tinyMCE &amp;amp;&amp;amp; document.getElementById(&quot;content&quot;).style.display==&quot;none&quot;) { // If visual mode is activated.&#xA;            contents = tinyMCE.get(&quot;content&quot;).getContent();&#xA;        } else {&#xA;            contents = document.getElementById(&quot;content&quot;).value;&#xA;        }&#xA;&#xA;        if(!contents) {&#xA;            alert(msg_enter_question);&#xA;            _e.preventDefault();&#xA;            _e.stopPropagation();&#xA;            return true;&#xA;        }&#xA;&#xA;&#xA;        // We must have atleast 2 answers.&#xA;        var answer_count = 0&#xA;        jQuery(&quot;.answer&quot;).each(function() {&#xA;            if(this.value) answer_count++;&#xA;        });&#xA;        //if(answer_count &amp;lt; 2) {&#xA;        //  alert(&quot;&amp;lt;?php //_e(&quot;Please enter atleast two answers&quot;); ?&amp;gt;&quot;);&#xA;        //  _e.preventDefault();&#xA;        //  _e.stopPropagation();&#xA;        //  return true;&#xA;        //}&#xA;&#xA;        //A correct answer must be selected.&#xA;        var correct_answer_selected = false;&#xA;        jQuery(&quot;.correct_answer&quot;).each( function(_e) {&#xA;            if(this.checked) {&#xA;                correct_answer_selected = true;&#xA;                return true;&#xA;            } &#xA;        });&#xA;        if(!correct_answer_selected) {&#xA;            alert(msg_correct_answer);&#xA;            _e.preventDefault();&#xA;            _e.stopPropagation();&#xA;&#xA;        } &#xA;    });&#xA;}&#xA;jQuery(document).ready(init);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;My question is - do I always have to return something in an anonymous function? I.e. is NetBeans right to complain? &lt;/p&gt;&#xA;" OwnerUserId="1511" LastEditorUserId="7076" LastEditDate="2012-06-16T05:20:30.917" LastActivityDate="2012-06-16T05:20:30.917" Title="Do I always have to return something in an anonymous function?" Tags="&lt;javascript&gt;&lt;jquery&gt;" AnswerCount="2" CommentCount="2" FavoriteCount="1" />
  <row Id="657" PostTypeId="1" CreationDate="2011-02-06T14:17:58.370" Score="6" ViewCount="554" Body="&lt;p&gt;The following code retrieve custom post types with their custom taxonomy.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'm just a beginner in PHP and I would like to know tips in order to improve readability and perhaps efficiency.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;home.php:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?php&#xA;/**&#xA; * Template Name: Home&#xA; * @package WordPress&#xA; * @subpackage Prominent&#xA; * @since Prominent 1.0&#xA; */&#xA;get_header(); ?&amp;gt;&#xA;&#xA;&amp;lt;div id=&quot;sidebar&quot;&amp;gt;&#xA;    &amp;lt;?php get_sidebar(); ?&amp;gt;&#xA;&amp;lt;/div&amp;gt;&amp;lt;!-- #sidebar --&amp;gt;&#xA;&#xA;&amp;lt;div id=&quot;content&quot;&amp;gt;&#xA;&#xA;    &amp;lt;?php // Create and run custom loop&#xA;        $custom_posts = new WP_Query();&#xA;        $custom_posts-&amp;gt;query('post_type=page_content&amp;amp;page_sections=Profile');&#xA;        while ($custom_posts-&amp;gt;have_posts()) : $custom_posts-&amp;gt;the_post();&#xA;    ?&amp;gt;&#xA;    &amp;lt;div class=&quot;block-1&quot;&amp;gt;&#xA;        &amp;lt;?php the_post_thumbnail('large'); ?&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;    &amp;lt;?php endwhile; ?&amp;gt;&#xA;&#xA;    &amp;lt;?php // Create and run custom loop&#xA;        $custom_posts = new WP_Query();&#xA;        $custom_posts-&amp;gt;query('post_type=page_content&amp;amp;page_sections=Tagline');&#xA;        while ($custom_posts-&amp;gt;have_posts()) : $custom_posts-&amp;gt;the_post();&#xA;    ?&amp;gt;&#xA;    &amp;lt;div class=&quot;block-2 padding-top&quot;&amp;gt;&#xA;        &amp;lt;h2&amp;gt;&amp;lt;?php the_title(); ?&amp;gt;&amp;lt;/h2&amp;gt;&#xA;        &amp;lt;p&amp;gt;&amp;lt;?php the_content(); ?&amp;gt;&amp;lt;/p&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;    &amp;lt;?php endwhile; ?&amp;gt;&#xA;&#xA;    &amp;lt;?php // Create and run custom loop&#xA;        $custom_posts = new WP_Query();&#xA;        $custom_posts-&amp;gt;query('post_type=page_content&amp;amp;page_sections=Themep');&#xA;        while ($custom_posts-&amp;gt;have_posts()) : $custom_posts-&amp;gt;the_post();&#xA;    ?&amp;gt;&#xA;    &amp;lt;div class=&quot;block-2 border-top&quot;&amp;gt;&#xA;        &amp;lt;h2&amp;gt;&amp;lt;a href=&quot;&amp;lt;?php the_permalink(); ?&amp;gt;&quot; title=&quot;&amp;lt;?php printf( esc_attr__( 'Permalink to %s', 'twentyten' ), the_title_attribute( 'echo=0' ) ); ?&amp;gt;&quot; rel=&quot;bookmark&quot;&amp;gt;&amp;lt;?php the_title(); ?&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;&#xA;    &amp;lt;?php endwhile; ?&amp;gt;&#xA;&#xA;        &amp;lt;?php // Create and run custom loop&#xA;            $custom_posts = new WP_Query();&#xA;            $custom_posts-&amp;gt;query('post_type=page_content&amp;amp;page_sections=ThemeCL');&#xA;            while ($custom_posts-&amp;gt;have_posts()) : $custom_posts-&amp;gt;the_post();&#xA;        ?&amp;gt;  &amp;lt;div class=&quot;float-left&quot;&amp;gt;&#xA;                &amp;lt;a href=&quot;&amp;lt;?php the_permalink(); ?&amp;gt;&quot; title=&quot;&amp;lt;?php printf( esc_attr__( 'Permalink to %s', 'twentyten' ), the_title_attribute( 'echo=0' ) ); ?&amp;gt;&quot; rel=&quot;bookmark&quot;&amp;gt;&amp;lt;?php the_post_thumbnail(); ?&amp;gt;&amp;lt;/a&amp;gt;&#xA;                &amp;lt;p&amp;gt;&amp;lt;?php the_excerpt(); ?&amp;gt;&amp;lt;/p&amp;gt;&#xA;            &amp;lt;/div&amp;gt;&#xA;        &amp;lt;?php endwhile; ?&amp;gt;&#xA;&#xA;        &amp;lt;?php // Create and run custom loop&#xA;            $custom_posts = new WP_Query();&#xA;            $custom_posts-&amp;gt;query('post_type=page_content&amp;amp;page_sections=Theme Child Right');&#xA;            while ($custom_posts-&amp;gt;have_posts()) : $custom_posts-&amp;gt;the_post();&#xA;        ?&amp;gt;  &amp;lt;div class=&quot;float-right&quot;&amp;gt;&#xA;                &amp;lt;a href=&quot;&amp;lt;?php the_permalink(); ?&amp;gt;&quot; title=&quot;&amp;lt;?php printf( esc_attr__( 'Permalink to %s', 'twentyten' ), the_title_attribute( 'echo=0' ) ); ?&amp;gt;&quot; rel=&quot;bookmark&quot;&amp;gt;&amp;lt;?php the_post_thumbnail(); ?&amp;gt;&amp;lt;/a&amp;gt;&#xA;                &amp;lt;p&amp;gt;&amp;lt;?php the_excerpt(); ?&amp;gt;&amp;lt;/p&amp;gt;&#xA;            &amp;lt;/div&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;    &amp;lt;?php endwhile; ?&amp;gt;&#xA;&#xA;    &amp;lt;?php // Create and run custom loop&#xA;        $custom_posts = new WP_Query();&#xA;        $custom_posts-&amp;gt;query('post_type=page_content&amp;amp;page_sections=FromBlog');&#xA;        while ($custom_posts-&amp;gt;have_posts()) : $custom_posts-&amp;gt;the_post();&#xA;    ?&amp;gt;  &amp;lt;div class=&quot;block-3 border-top&quot;&amp;gt;&#xA;            &amp;lt;h2&amp;gt;&amp;lt;a href=&quot;&amp;lt;?php the_permalink(); ?&amp;gt;&quot; title=&quot;&amp;lt;?php printf( esc_attr__( 'Permalink to %s', 'twentyten' ), the_title_attribute( 'echo=0' ) ); ?&amp;gt;&quot; rel=&quot;bookmark&quot;&amp;gt;&amp;lt;?php the_title(); ?&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;&#xA;            &amp;lt;a href=&quot;&amp;lt;?php the_permalink(); ?&amp;gt;&quot; title=&quot;&amp;lt;?php printf( esc_attr__( 'Permalink to %s', 'twentyten' ), the_title_attribute( 'echo=0' ) ); ?&amp;gt;&quot; rel=&quot;bookmark&quot;&amp;gt;&amp;lt;?php the_post_thumbnail(); ?&amp;gt;&amp;lt;/a&amp;gt;&#xA;            &amp;lt;p&amp;gt;&amp;lt;?php the_excerpt(); ?&amp;gt;&amp;lt;/p&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;    &amp;lt;?php endwhile; ?&amp;gt;&#xA;&#xA;    &amp;lt;?php // Create and run custom loop&#xA;        $custom_posts = new WP_Query();&#xA;        $custom_posts-&amp;gt;query('post_type=page_content&amp;amp;page_sections=Featured');&#xA;        while ($custom_posts-&amp;gt;have_posts()) : $custom_posts-&amp;gt;the_post();&#xA;    ?&amp;gt;&#xA;    &amp;lt;div class=&quot;block-2 border-top&quot;&amp;gt;&#xA;        &amp;lt;h2&amp;gt;&amp;lt;a href=&quot;&amp;lt;?php the_permalink(); ?&amp;gt;&quot; title=&quot;&amp;lt;?php printf( esc_attr__( 'Permalink to %s', 'twentyten' ), the_title_attribute( 'echo=0' ) ); ?&amp;gt;&quot; rel=&quot;bookmark&quot;&amp;gt;&amp;lt;?php the_title(); ?&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;&#xA;        &amp;lt;a href=&quot;&amp;lt;?php the_permalink(); ?&amp;gt;&quot; title=&quot;&amp;lt;?php printf( esc_attr__( 'Permalink to %s', 'twentyten' ), the_title_attribute( 'echo=0' ) ); ?&amp;gt;&quot; rel=&quot;bookmark&quot;&amp;gt;&amp;lt;?php the_post_thumbnail('large'); ?&amp;gt;&amp;lt;/a&amp;gt;&#xA;        &amp;lt;p&amp;gt;&amp;lt;?php the_excerpt(); ?&amp;gt;&amp;lt;/p&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;    &amp;lt;?php endwhile; ?&amp;gt;&#xA;&#xA;    &amp;lt;?php // Create and run custom loop&#xA;        $custom_posts = new WP_Query();&#xA;        $custom_posts-&amp;gt;query('post_type=page_content&amp;amp;page_sections=Last');&#xA;        while ($custom_posts-&amp;gt;have_posts()) : $custom_posts-&amp;gt;the_post();&#xA;    ?&amp;gt;&#xA;    &amp;lt;div class=&quot;block-3 border-top&quot;&amp;gt;&#xA;        &amp;lt;h2&amp;gt;&amp;lt;a href=&quot;&amp;lt;?php the_permalink(); ?&amp;gt;&quot; title=&quot;&amp;lt;?php printf( esc_attr__( 'Permalink to %s', 'twentyten' ), the_title_attribute( 'echo=0' ) ); ?&amp;gt;&quot; rel=&quot;bookmark&quot;&amp;gt;&amp;lt;?php the_title(); ?&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;&#xA;        &amp;lt;a href=&quot;&amp;lt;?php the_permalink(); ?&amp;gt;&quot; title=&quot;&amp;lt;?php printf( esc_attr__( 'Permalink to %s', 'twentyten' ), the_title_attribute( 'echo=0' ) ); ?&amp;gt;&quot; rel=&quot;bookmark&quot;&amp;gt;&amp;lt;?php the_post_thumbnail(); ?&amp;gt;&amp;lt;/a&amp;gt;&#xA;        &amp;lt;p&amp;gt;&amp;lt;?php the_excerpt(); ?&amp;gt;&amp;lt;/p&amp;gt;&#xA;        &amp;lt;p&amp;gt;&amp;lt;?php the_meta(); ?&amp;gt;&amp;lt;/p&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;    &amp;lt;?php endwhile; ?&amp;gt;&#xA;&#xA;    &amp;lt;?php // Create and run custom loop&#xA;        $custom_posts = new WP_Query();&#xA;        $custom_posts-&amp;gt;query('post_type=page_content&amp;amp;page_sections=Lastest');&#xA;        while ($custom_posts-&amp;gt;have_posts()) : $custom_posts-&amp;gt;the_post();&#xA;    ?&amp;gt;&#xA;    &amp;lt;div class=&quot;block-7 border-top&quot;&amp;gt;&#xA;        &amp;lt;h2&amp;gt;&amp;lt;a href=&quot;&amp;lt;?php the_permalink(); ?&amp;gt;&quot; title=&quot;&amp;lt;?php printf( esc_attr__( 'Permalink to %s', 'twentyten' ), the_title_attribute( 'echo=0' ) ); ?&amp;gt;&quot; rel=&quot;bookmark&quot;&amp;gt;&amp;lt;?php the_title(); ?&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;&#xA;        &amp;lt;a href=&quot;&amp;lt;?php the_permalink(); ?&amp;gt;&quot; title=&quot;&amp;lt;?php printf( esc_attr__( 'Permalink to %s', 'twentyten' ), the_title_attribute( 'echo=0' ) ); ?&amp;gt;&quot; rel=&quot;bookmark&quot;&amp;gt;&amp;lt;?php the_post_thumbnail(); ?&amp;gt;&amp;lt;/a&amp;gt;&#xA;        &amp;lt;p&amp;gt;&amp;lt;?php the_excerpt(); ?&amp;gt;&amp;lt;/p&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;    &amp;lt;?php endwhile; ?&amp;gt;&#xA;&#xA;&amp;lt;/div&amp;gt;&amp;lt;!-- #content --&amp;gt;&#xA;&#xA;&amp;lt;?php get_footer(); ?&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1035" LastEditorUserId="18427" LastEditDate="2013-11-24T01:01:53.257" LastActivityDate="2013-11-24T01:01:53.257" Title="modify custom loops to improve readability and efficiency for Wordpress?" Tags="&lt;php&gt;&lt;wordpress&gt;" AnswerCount="2" CommentCount="0" FavoriteCount="1" />
  <row Id="660" PostTypeId="2" ParentId="645" CreationDate="2011-02-06T16:40:31.397" Score="7" Body="&lt;pre&gt;&lt;code&gt;RM = '/bin/rm'&#xA;MV = '/bin/mv'&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In general it's preferable to use the &lt;a href=&quot;http://ruby-doc.org/stdlib/libdoc/fileutils/rdoc/index.html&quot;&gt;&lt;code&gt;FileUtils&lt;/code&gt; class&lt;/a&gt; rather than relying on shell utilities. Though in this particular case, you might want to stick at least with &lt;code&gt;mv&lt;/code&gt; since the &lt;code&gt;FileUtils.mv&lt;/code&gt; method does not have an &lt;code&gt;:interactive&lt;/code&gt; option.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;tmp = &quot;/tmp/renamer.#{Time.now.to_i}.#{(rand * 1000).to_i}&quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Ruby has a &lt;a href=&quot;http://ruby-doc.org/stdlib/libdoc/tempfile/rdoc/index.html&quot;&gt;&lt;code&gt;Tempfile&lt;/code&gt; class&lt;/a&gt; which can generate a unique temporary file more reliably than this. You should use it.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;from.each {|i| f.puts i}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Calling &lt;code&gt;puts&lt;/code&gt; on an array will &lt;code&gt;puts&lt;/code&gt; each line individually, so the above can just be shortened to &lt;code&gt;f.puts from&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;ENV['EDITOR'] = 'vi' if ENV['EDITOR'].nil?&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Can be shortened to &lt;code&gt;ENV['EDITOR'] ||= 'vi'&lt;/code&gt;. Though what you have isn't particularly verbose either, so it doesn't really matter much which one you choose.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;system(&quot;#{ENV['EDITOR']} #{tmp}&quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Use &lt;code&gt;system(ENV[EDITOR], tmp)&lt;/code&gt; instead. This way you get rid of the string interpolation and the code still works if either &lt;code&gt;ENV['EDITOR']&lt;/code&gt; or &lt;code&gt;tmp&lt;/code&gt; should contain a space or other shell meta-character (not that they're particularly likely to, but it's a good idea to use the multiple-argument-form of &lt;code&gt;system&lt;/code&gt; where ever possible).&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;to = File.open(tmp) {|f| f.readlines.collect{|l| l.chomp}}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Usually this could be replaced with &lt;code&gt;to = File.readlines(tmp).collect {|l| l.chomp}&lt;/code&gt;. However if you follow my suggestion of using &lt;code&gt;Tempfile&lt;/code&gt;, that won't be an option any more.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;`#{RM} #{tmp}`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you use fileutils, this will just be &lt;code&gt;FileUtils.rm(tmp)&lt;/code&gt; (or &lt;code&gt;rm(tmp)&lt;/code&gt; if you include &lt;code&gt;FileUtils&lt;/code&gt;). If you don't want to use &lt;code&gt;FileUtils&lt;/code&gt;, you should at least use &lt;code&gt;system(RM, tmp)&lt;/code&gt; for the same reasons as above.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;However if you use &lt;code&gt;Tempfile&lt;/code&gt;, which you should, this becomes redundant anyway.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;from.each_with_index do |f, i|&#xA;  puts `#{MV} -v --interactive &quot;#{f}&quot; &quot;#{to[i]}&quot;` unless f == to[i]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;To iterate over two arrays in parallel, use &lt;code&gt;zip&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;from.zip(to) do |f, t|&#xA;  system(MV, &quot;-v&quot;, &quot;--interactive&quot;, f, t) unless f == t&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note that here using &lt;code&gt;system&lt;/code&gt; instead of backticks is especially important since one of the files in &lt;code&gt;from&lt;/code&gt; or &lt;code&gt;to&lt;/code&gt; containing spaces is actually somewhat likely.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;So with all my suggestions, your code should now look like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#!/usr/bin/env ruby&#xA;require 'tempfile'&#xA;&#xA;MV = '/bin/mv'&#xA;&#xA;from = Dir.glob('*').sort&#xA;&#xA;ENV['EDITOR'] ||= 'vi'&#xA;&#xA;to = nil&#xA;Tempfile.open(&quot;renamer&quot;) do |f|&#xA;  f.puts from&#xA;  f.close&#xA;  system(ENV['EDITOR'], f.path)&#xA;  f.open&#xA;  to = f.readlines.collect {|l| l.chomp}&#xA;end&#xA;&#xA;if to.size != from.size&#xA;  STDERR.puts &quot;renamer: ERROR: number of lines changed&quot;&#xA;  exit(1)&#xA;end&#xA;&#xA;from.zip(to) do |f, t|&#xA;  system(MV, &quot;-v&quot;, &quot;--interactive&quot;, f, t) unless f == t&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="128" LastEditorUserId="128" LastEditDate="2011-02-06T21:37:53.490" LastActivityDate="2011-02-06T21:37:53.490" CommentCount="3" />
  <row Id="663" PostTypeId="2" ParentId="646" CreationDate="2011-02-06T18:34:31.430" Score="2" Body="&lt;p&gt;Have you tried running this implementation? It fails immediately with a &lt;code&gt;java.lang.IllegalMonitorStateException&lt;/code&gt; which according to the Javadoc is:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Thrown to indicate that a thread has attempted to wait on an object's monitor or to notify other threads waiting on an object's monitor without owning the specified monitor.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;The problem is that the implementation synchronizes on the field &lt;code&gt;lock&lt;/code&gt; but calls &lt;code&gt;notify()&lt;/code&gt; and &lt;code&gt;wait()&lt;/code&gt; on &lt;code&gt;full&lt;/code&gt; and &lt;code&gt;free&lt;/code&gt; without holding their locks. When you fix this, it's important to keep in mind that calling wait() automatically releases the lock of the object you are waiting on, but does not release locks on other objects. If you don't take that into account, it's quite easy to create deadlocks.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For readability, I'd recommend using &lt;a href=&quot;http://download.oracle.com/javase/1.5.0/docs/api/java/util/concurrent/locks/Condition.html&quot; rel=&quot;nofollow&quot;&gt;java.util.concurrent.locks.Condition&lt;/a&gt; instead of &lt;code&gt;wait()&lt;/code&gt; and &lt;code&gt;notify()&lt;/code&gt; which are fairly low level and difficult to reason about. In fact, the example usages in the Javadoc for Condition come from the implementation of a bounded buffer.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I also have to echo Brian's concern: it's important that you don't silently swallow &lt;code&gt;InterruptedException&lt;/code&gt;. You have two choices on how to handle interruption. If you want to handle the exception yourself, then JCIP says you need to set the interrupted status back.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;catch (InterruptedException e)&#xA;{&#xA;  Thread.interrupt();&#xA;  // Handle the interruption&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The other choice, which is better in my opinion, is to just propagate the exception. Java's built in libraries use this strategy, for an example see &lt;a href=&quot;http://download.oracle.com/javase/6/docs/api/java/util/concurrent/BlockingQueue.html#take%28%29&quot; rel=&quot;nofollow&quot;&gt;BlockingQueue.take()&lt;/a&gt;.&lt;/p&gt;&#xA;" OwnerUserId="555" LastEditorUserId="555" LastEditDate="2011-02-07T17:21:47.323" LastActivityDate="2011-02-07T17:21:47.323" CommentCount="0" />
  <row Id="664" PostTypeId="2" ParentId="656" CreationDate="2011-02-06T18:37:40.097" Score="2" Body="&lt;p&gt;Netbeans is right to complain about this (there are &lt;a href=&quot;http://wiki.netbeans.org/JavaScript_anonnoreturnvalue&quot; rel=&quot;nofollow&quot;&gt;some details&lt;/a&gt; on the website about it but they are a bit sparse). Also this isn't Netbeans specific, for example Firefox with &lt;a href=&quot;http://kb.mozillazine.org/Javascript.options.strict&quot; rel=&quot;nofollow&quot;&gt;strict-mode enabled&lt;/a&gt; will warn about this also.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So in:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;jQuery(&quot;.correct_answer&quot;).each( function(_e) {&#xA;    if(this.checked) {&#xA;        correct_answer_selected = true;&#xA;        return true;&#xA;    }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In the event that &lt;code&gt;this.checked&lt;/code&gt; is false, your function returns &lt;code&gt;undefined&lt;/code&gt; so it is much better to explicitly handle that event.&lt;/p&gt;&#xA;" OwnerUserId="1172" LastActivityDate="2011-02-06T18:37:40.097" CommentCount="0" />
  <row Id="665" PostTypeId="2" ParentId="587" CreationDate="2011-02-06T19:13:55.997" Score="2" Body="&lt;p&gt;The test in the OP and Ron's test are both valid tests, but it's important to realize that they may not fail even if there are legitimate concurrency problems.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The test in the OP is unlikely to ever interleave the calls to add(). Even if the test ran thousands of times, t1 would usually always finish before t2 started.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Ron's test ensures that the calls to add() do interleave by using a CyclicBarrier. However, using the CyclicBarrier ensures that the state maintained by the two threads gets flushed to main memory, potentially hiding concurrency problems in both add() &lt;em&gt;and&lt;/em&gt; dump().&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Both tests are decent, and you might as well run them both. For true peace of mind though, why not post the code for the logger on this site?&lt;/p&gt;&#xA;" OwnerUserId="555" LastActivityDate="2011-02-06T19:13:55.997" CommentCount="0" />
  <row Id="666" PostTypeId="2" ParentId="634" CreationDate="2011-02-06T20:30:28.363" Score="6" Body="&lt;p&gt;It looks a bit like block-1's height is calculated from @block-height, in which case I would do that calculation rather than putting in a literal value. This way if you change @block-height, block-1 will adjust with it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Beyond Sass and efficiency, I would also advise you to think again about the class names block-1, block-2 and block-3. If there will only be one of each of these on a page then use IDs rather than classes and name them after the content (eg. site-nav-block or article-block). If there will be more than one then give it a class name and name it after the content type (eg. nav-item or article-summary).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This will be much less confusing for a third party like myself to read, and indeed for you as your page gets bigger and requires more styling.&lt;/p&gt;&#xA;" OwnerUserId="1416" LastActivityDate="2011-02-06T20:30:28.363" CommentCount="0" />
  <row Id="670" PostTypeId="2" ParentId="602" CreationDate="2011-02-07T06:30:35.167" Score="4" Body="&lt;p&gt;A few things. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;When you connect, don't hard code mysql, you are already fetching all the db info from a registry/config ... make the the dbtype configurable as well. That is after all, the point of PDO.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;When you catch errors in connection or when executing a query, use the &lt;a href=&quot;http://www.php.net/manual/en/class.pdoexception.php&quot; rel=&quot;nofollow&quot;&gt;PDOException&lt;/a&gt; class&lt;/p&gt;&#xA;&#xA;&lt;p&gt;use exceptions for your prepare and execute calls instead of counting the errors that happens...as that's not really useful (it will be obvious an error happened, what I care about is what that error actually is).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;personally, I would break down this class into specific methods. instead of connecting to the db in the constructor, I would have a connect() method to do this. I would also have a query, prepare, and bind method and then have interaction method: delete, update, insert and then a set of fetch methods, fetchOne, fetchAll, fetchCol, etc. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also the connect method would check for a set conn, and only attempt to connect if you didn't already have an existing connection. The query method would call connect(). The reason for this is that you may include your db class throughout your code, even if you dont fetch anything in particular requests...with your code if this is the case a connection will be made regardless. What you want is lazy loading...meaning a db connection will only be made if you actually attempt to use the db with a fetch/update/delete/insert/etc.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here is some sample pseudo code&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$db = new MyPdoClass();&#xA;$db-&amp;gt;connect();&#xA;$stmt = $db-&amp;gt;query($sql, $params);&#xA;$results = $stmt-&amp;gt;fetchAll(PDO::FETCH_ASSOC);&#xA;// or call your MyPdoClass::fetchAll, which would do that so you would just call&#xA;$results = $db-&amp;gt;fetchAll($sql, $params);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1090" LastEditorUserId="1090" LastEditDate="2011-02-07T06:41:04.757" LastActivityDate="2011-02-07T06:41:04.757" CommentCount="1" />
  <row Id="673" PostTypeId="1" AcceptedAnswerId="697" CreationDate="2011-02-07T11:12:54.570" Score="5" ViewCount="444" Body="&lt;p&gt;First question here ... exciting :)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Question + Desired Outcome&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The code below works currently, however I'm not convinced the utilisation of an Array to iterate through numerous non-existent form fields is anywhere near efficient enough for my liking. Can this process be improved to effectively eliminate the first step in the Suggested Solution?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Desired Outcome: When a response is submitted on FormB, validate data on FormA to ensure entries have been at least some input on each field.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Background&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We're using a support ticketing system within our organisation which thus far is working pretty well. One minor niggle however is that the 'View Ticket' page separates &quot;Important Ticket Variables&quot; (assigned technician, ticket category etc.) - from the &quot;Reply to Ticket&quot; form. Two forms, one page. Validation for both forms happens post-submit on the next page, again each is seperate from the other.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In theory that method makes sense, however as they are two seperate forms, What this often means is that people are able to bypass often-critical data from the &quot;Important Ticket Variables&quot;, and just add a reply. An element of human-training exists here but as ever, a programatic change will satisfy the need for consistency.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Save for rewriting the whole process to resolve this issue, I've looked at putting in a fairly simple JS &quot;overlay&quot; on the view ticket page, so that when they submit a &quot;Reply to ticket&quot; - it does a quick verification to make sure all the 'Important Ticket Variables' have some form of entry. It's a quick fix but comes with some (for me) interesting challenges.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Languages:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Main application is written in PHP, using MySQL, complimented with jQuery v1.3.2&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Constant&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&quot;Important Ticket Variables&quot; always have a name= of &quot;ticket_fields[customXX]&quot;, where XX is basically the id in the database, which at present means we're at an upper limit of around 60 at the moment, obviously this may increase in time as more ticket_fields are created!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Not all ticket_fields are used on every ticket, some tickets use 5-10 fields, others use none.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Example FormA Data (Formatting stripped out)&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;input type=&quot;radio&quot; name=&quot;ticket_fields[custom5][selection]&quot; id=&quot;custom50&quot; value=&quot;3&quot;  /&amp;gt;&amp;amp;nbsp;&amp;lt;label for=&quot;custom50&quot;&amp;gt;No&amp;lt;/label&amp;gt;&amp;amp;nbsp;&#xA;&amp;lt;input type=&quot;radio&quot; name=&quot;ticket_fields[custom5][selection]&quot; id=&quot;custom51&quot; value=&quot;4&quot;  /&amp;gt;&amp;amp;nbsp;&amp;lt;label for=&quot;custom51&quot;&amp;gt;Yes&amp;lt;/label&amp;gt;&amp;amp;nbsp;&#xA;&#xA;&amp;lt;input type=&quot;checkbox&quot; name=&quot;ticket_fields[custom6][selections][]&quot; id=&quot;custom60&quot; value=&quot;1&quot;  /&amp;gt;&amp;amp;nbsp;&amp;lt;label for=&quot;custom60&quot;&amp;gt;A&amp;lt;/label&amp;gt;&#xA;&amp;lt;input type=&quot;checkbox&quot; name=&quot;ticket_fields[custom6][selections][]&quot; id=&quot;custom64&quot; value=&quot;5&quot;  /&amp;gt;&amp;amp;nbsp;&amp;lt;label for=&quot;custom64&quot;&amp;gt;B&amp;lt;/label&amp;gt;&amp;amp;nbsp;&#xA;&#xA;&amp;lt;select name=&quot;ticket_fields[custom27][parent]&quot; id=&quot;ticket_fields_custom27_parent&quot;  &amp;gt;&#xA;&amp;lt;option value=&quot;0&quot;&amp;gt;Please Select&amp;lt;/option&amp;gt;&#xA;&amp;lt;option value=&quot;129562786078&quot;&amp;gt;Sample Option - Add new option, then delete this&amp;lt;/option&amp;gt;&#xA;&amp;lt;option value=&quot;129562792948&quot;&amp;gt;Top level&amp;lt;/option&amp;gt;&#xA;&amp;lt;/select&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Suggested Solution&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This JS executes onSubmit of FormB:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;  // ####################################################################&#xA;  // The following bits validate the 'Additional Ticket Fields' on submit&#xA;  // ####################################################################&#xA;    // Need an array of numbers for some horrible hacking. Used to iterate through the dynamically generated &quot;ticket_fields&quot; 100 should be safe, famous last words.&#xA;    var numArray = new Array();&#xA;    var b;&#xA;    for (b = 0; b &amp;lt; 100; b++) { numArray[b] = b; }&#xA;&#xA;    // Text boxes&#xA;&#xA;    // Radio Buttons&#xA;    // iterates through existing ticket_fields and finds existing radio buttons, then validates on that radio button&#xA;    $.each(numArray, function(i, v) {&#xA;        var radbut = $('input:radio[name^=&quot;ticket_fields[custom' + v + ']&quot;]');&#xA;        // If found a checkbox, validate it&#xA;        if (radbut.length &amp;gt; 0) {&#xA;            var radbut2 = $('input:radio[name^=&quot;ticket_fields[custom' + v + ']&quot;]:checked');&#xA;            console.log(radbut2.length);&#xA;            if (radbut2.length &amp;gt; 0) {  } else { validationFail = true; }&#xA;        } else {&#xA;        // do nowt&#xA;        }&#xA;    });&#xA;&#xA;    // Check boxes&#xA;    // iterates through existing ticket_fields and finds existing checkboxes, then validates on that checkbox&#xA;    $.each(numArray, function(i, v) {&#xA;        var chkbox = $('input:checkbox[name^=&quot;ticket_fields[custom' + v + ']&quot;]');&#xA;        // If found a checkbox, validate it&#xA;        if (chkbox.length &amp;gt; 0) {&#xA;            var chkbox2 = $('input:checkbox[name^=&quot;ticket_fields[custom' + v + ']&quot;]:checked');&#xA;            if (chkbox2.length &amp;gt; 0) {  } else { validationFail = true; }&#xA;        } else {&#xA;        // do nowt&#xA;        }&#xA;    });&#xA;&#xA;    // Select boxes ... includes multi-levels&#xA;    // Checks each select box in turn, fails if value set to 0. Does nothing if no selectors exist.&#xA;    $('select[name^=&quot;ticket_fields&quot;] option:selected').each(function(){&#xA;        if (this.length) {&#xA;        } else { &#xA;            if(this.value == 0) {&#xA;                validationFail = true;&#xA;            }&#xA;        }&#xA;    });&#xA;&#xA;if (validationFail) {&#xA;    alert('Please ensure all Additional Ticket Fields are completed. \n REMEMBER: Click Update when done.');&#xA;    return false;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1533" LastActivityDate="2011-02-11T09:34:02.090" Title="Review request: Javascript, basic form validation, looking to improve efficiency" Tags="&lt;javascript&gt;&lt;jquery&gt;" AnswerCount="2" CommentCount="0" FavoriteCount="2" />
  <row Id="675" PostTypeId="2" ParentId="602" CreationDate="2011-02-07T16:47:07.227" Score="1" Body="&lt;h3&gt;Coupling&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;The first thing that comes to mind is the tight coupling between &lt;code&gt;db&lt;/code&gt; and &lt;code&gt;reg&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Since &lt;code&gt;db&lt;/code&gt; doesn't actually need to know anything about &lt;code&gt;reg&lt;/code&gt;, and only needs a few values from it, I feel it's better practice to pass the required values in as needed:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public function __construct($host, $database, $username, $password)&#xA;{&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3&gt;Exception handling&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;As mentioned in another answer, catch &lt;a href=&quot;http://php.net/manual/en/class.pdoexception.php&quot; rel=&quot;nofollow&quot;&gt;PDOException&lt;/a&gt; instead. Also, you will have a lot of frustration down the track trying to figure out what an &quot;App shoutdown&quot; error means with improved error reporting.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;try&#xA;{&#xA;    $db = new DB(...);&#xA;}&#xA;catch (PDOException $e)&#xA;{&#xA;    logError($e);&#xA;    exit('Sorry, the site is broken!');&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3&gt;Commenting&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://www.phpdoc.org/&quot; rel=&quot;nofollow&quot;&gt;phpDoc&lt;/a&gt; comments can prove invaluable as the size and complexity of classes grow. Even if not strictly necessary for simple projects, I've found it a useful habit to get into.&lt;/p&gt;&#xA;" OwnerUserId="1541" LastActivityDate="2011-02-07T16:47:07.227" CommentCount="2" />
  <row Id="676" PostTypeId="1" CreationDate="2011-02-07T17:46:50.907" Score="8" ViewCount="419" Body="&lt;p&gt;Is there a better way to accomplish the following?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/**&#xA; * Performs an access check given a user.&#xA; *&#xA; * @param Cas_Acl_Sid $user The user or SID being checked.&#xA; * @param Cas_Acl_Privilege $privilege The privilege to check.&#xA; * @return int|null 1 if user access allowed, 2 if group access allowed, false if access is denied, null if access cannot be determined.&#xA; */&#xA;public function accessCheck(Cas_Acl_Sid $user, Cas_Acl_Privilege $privilege)&#xA;{&#xA;    $db = Zend_Db_Table_Abstract::getDefaultAdapter();&#xA;    $usersQuery = $db-&amp;gt;select()-&amp;gt;from('AccessControlEntries', array('Allowed', new Zend_Db_Expr('1 AS Type')))&#xA;        -&amp;gt;where('Acl = ?', $this-&amp;gt;_id)&#xA;        -&amp;gt;where('Sid = ?', $user-&amp;gt;GetGuid())&#xA;        -&amp;gt;where('Privilege = ?', $privilege-&amp;gt;GetId());&#xA;&#xA;    $groupsQuery = $db-&amp;gt;select()-&amp;gt;from('AccessControlEntries', array('Allowed', new Zend_Db_Expr('2 AS Type')))&#xA;        -&amp;gt;join('GroupMembers', $db-&amp;gt;quoteIdentifier(array('GroupMembers', 'Group')) . ' = ' .&#xA;                               $db-&amp;gt;quoteIdentifier(array('AccessControlEntries', 'Sid')), array())&#xA;        -&amp;gt;where('Acl = ?', $this-&amp;gt;_id)&#xA;        -&amp;gt;where($db-&amp;gt;quoteIdentifier(array('GroupMembers', 'User')) . ' = ?', $user-&amp;gt;GetGuid())&#xA;        -&amp;gt;where('Privilege = ?', $privilege-&amp;gt;GetId());&#xA;&#xA;    $query = $db-&amp;gt;select()&#xA;        -&amp;gt;union(array($usersQuery, $groupsQuery), Zend_Db_Select::SQL_UNION_ALL)&#xA;        -&amp;gt;order('Type')&#xA;        -&amp;gt;order('Allowed')&#xA;        -&amp;gt;limit(1);&#xA;&#xA;    $dbResult = $db-&amp;gt;fetchAll($query);&#xA;&#xA;    if (!count($dbResult))&#xA;    {&#xA;        return null;&#xA;    }&#xA;    else {&#xA;        if ($dbResult[0]['Allowed'])&#xA;        {&#xA;            return (int)$dbResult[0]['Type'];&#xA;        }&#xA;        else&#xA;        {&#xA;            return false;&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="22" LastEditorUserId="22" LastEditDate="2012-05-16T17:24:20.183" LastActivityDate="2013-02-09T21:21:26.523" Title="Large Zend_Db query" Tags="&lt;php&gt;&lt;zend-framework&gt;" AnswerCount="1" CommentCount="6" FavoriteCount="1" />
  <row Id="677" PostTypeId="1" AcceptedAnswerId="679" CreationDate="2011-02-07T18:29:30.293" Score="4" ViewCount="187" Body="&lt;p&gt;I started to write a code with top-down tests. &#xA;My first version, grow to something like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public class Worker&#xA;{&#xA;  public void Execute(Foo foo)&#xA;  {&#xA;     //Do X on Foo&#xA;     //Do Y on Foo&#xA;     //Do Z on Foo&#xA;&#xA;     //Get Bar from Foo&#xA;&#xA;     //Do A on Bar&#xA;     //Do B on Bar&#xA;     //Do C on Bar&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;then this started to grow more. So, I've to add more actions like X,Y,Z&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I refactorized the code in something like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public interface IFooVisitor&#xA;{&#xA;  void Visit(Foo foo);&#xA;}&#xA;&#xA;public interface IBarVisitor&#xA;{&#xA;  void Visit(Bar bar);&#xA;}&#xA;&#xA;public class Worker&#xA;{&#xA;  public Worker(&#xA;            IEnumerable&amp;lt;IFooVisitor&amp;gt; fooVisitors, &#xA;            IEnumerable&amp;lt;IBarVisitor&amp;gt; barVisitors)&#xA;  { ... }&#xA;  public void Execute(Foo foo)&#xA;  {&#xA;    foreach(var fooVisitor in fooVisitors) { fooVisitor.Visit(foo); }&#xA;    var bar = getbarfromfoo(foo);&#xA;    foreach(var barVisitor in barVisitors) { barVisitor.Visit(bar); }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The code is much more cleaner, but the problem is that i need some specific order in the execution of visitors. So, one alternative is to add a property to each visitor like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public int Priority {get { return 1; } }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The project is opensource and the full code is &lt;a href=&quot;http://code.google.com/p/heredar/source/browse/&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;IAbcVisitor is ICloneVisitor&lt;/li&gt;&#xA;&lt;li&gt;IXyzVisitor is IPostWeaveAction&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="1545" LastActivityDate="2011-02-07T22:27:08.303" Title="Sorting Visitors" Tags="&lt;c#&gt;&lt;design-patterns&gt;&lt;oop&gt;" AnswerCount="1" CommentCount="0" />
  <row Id="678" PostTypeId="1" AcceptedAnswerId="882" CreationDate="2011-02-07T18:47:18.450" Score="3" ViewCount="202" Body="&lt;p&gt;This seems a bit wrong because there's a lot of business logic going on inside the bootstrapper. Is there a better way to accomplish what's going on here?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?php&#xA;&#xA;/**&#xA; * Zend_Application Bootstrapper&#xA; *&#xA; * @copyright 2011 Case Western Reserve University, College of Arts and Sciences&#xA; * @author Billy O'Neal III (bro4@case.edu)&#xA; */&#xA;&#xA;class Bootstrap extends Zend_Application_Bootstrap_Bootstrap&#xA;{&#xA;    public function __construct($application)&#xA;    {&#xA;        parent::__construct($application);&#xA;        Cas_Ldap::SetGlobalOptions($this-&amp;gt;getOption('ldapserver'), $this-&amp;gt;getOption('ldapsearchbase'));&#xA;    }&#xA;&#xA;    protected function _initLayout()&#xA;    {&#xA;        $layout = Zend_Layout::startMvc();&#xA;        $layout-&amp;gt;setLayoutPath(APPLICATION_PATH . '/layouts/scripts');&#xA;        $layout-&amp;gt;setLayout('layout');&#xA;        return $layout;&#xA;    }&#xA;&#xA;    protected function _initView()&#xA;    {&#xA;        $this-&amp;gt;bootstrap('db');&#xA;        $view = new Zend_View();&#xA;&#xA;        //Set the version string with subversion revision if found.&#xA;        $version = '0.1';&#xA;        $svnPath = APPLICATION_PATH . '/../.svnrev';&#xA;        if (file_exists($svnPath))&#xA;        {&#xA;            $hFile = fopen($svnPath, 'r');&#xA;            $version .= '.' . fgets($hFile);&#xA;            fclose($hFile);&#xA;            $lastModTime = filemtime($svnPath);&#xA;            $dateTime = new DateTime('@' . $lastModTime, new DateTimeZone('America/New_York'));&#xA;            $version .= ' ' . $dateTime-&amp;gt;format('o-n-j G:i') . 'Z';&#xA;        }&#xA;        $view-&amp;gt;version = $version;&#xA;&#xA;        // Setup Navigation&#xA;&#xA;        $nav = array();&#xA;        $nav[] = array(&#xA;            'label' =&amp;gt; 'Welcome',&#xA;            'controller' =&amp;gt; 'index',&#xA;            'action' =&amp;gt; 'index',&#xA;            'order' =&amp;gt; -1&#xA;        );&#xA;&#xA;        $loggedIn = Cas_Users_User::LoggedIn();&#xA;&#xA;        $logxLink = array('controller' =&amp;gt; 'User', 'order' =&amp;gt; 1000);&#xA;        $logxLink['label'] = $loggedIn ? 'Logout' : 'Login';&#xA;        $logxLink['action'] = strtolower($logxLink['label']);&#xA;        $logxLink['pages'] = array(array(&#xA;            'controller' =&amp;gt; 'User',&#xA;            'action' =&amp;gt; 'AccessDenied',&#xA;            'visible' =&amp;gt; false,&#xA;            'label' =&amp;gt; 'Access Denied'&#xA;        ));&#xA;        $nav[] = $logxLink;&#xA;&#xA;        $adminPermission = Cas_Acl_Privilege::CreateExisting('refreshAdmin');&#xA;        unset($hasAdmin);&#xA;        $hasAdmin = (bool)Cas_Users_User::CurrentPrivilegeCheck($adminPermission);&#xA;        $nav[] = array(&#xA;            'controller' =&amp;gt; 'admin',&#xA;            'action' =&amp;gt; 'index',&#xA;            'order' =&amp;gt; 2,&#xA;            'label' =&amp;gt; 'Administration',&#xA;            'visible' =&amp;gt; $hasAdmin,&#xA;            'pages' =&amp;gt; array(array(&#xA;                'controller' =&amp;gt; 'admin',&#xA;                'action' =&amp;gt; 'useradmin',&#xA;                'label' =&amp;gt; 'User Administration',&#xA;                'order' =&amp;gt; 1&#xA;            ),array(&#xA;                'controller' =&amp;gt; 'admin',&#xA;                'action' =&amp;gt; 'globalpermissions',&#xA;                'label' =&amp;gt; 'System Permissions',&#xA;                'order' =&amp;gt; 2&#xA;            ),array(&#xA;                'controller' =&amp;gt; 'admin',&#xA;                'action' =&amp;gt; 'editevents',&#xA;                'label' =&amp;gt; 'Edit Events List',&#xA;                'order' =&amp;gt; 3&#xA;            ),array(&#xA;                'controller' =&amp;gt; 'template',&#xA;                'action' =&amp;gt; 'index',&#xA;                'label' =&amp;gt; 'Edit Templates',&#xA;                'order' =&amp;gt; 4&#xA;            ), array(&#xA;                'controller' =&amp;gt; 'admin',&#xA;                'action' =&amp;gt; 'notauthorized',&#xA;                'label' =&amp;gt; 'Access Denied',&#xA;                'visible' =&amp;gt; false&#xA;            ), array(&#xA;                'controller' =&amp;gt; 'admin',&#xA;                'action' =&amp;gt; 'usermembership',&#xA;                'label' =&amp;gt; 'User Membership Edit',&#xA;                'visible' =&amp;gt; false&#xA;            ))&#xA;        );&#xA;&#xA;        $nav[] = array(&#xA;            'controller' =&amp;gt; 'faq',&#xA;            'action' =&amp;gt; 'index',&#xA;            'order' =&amp;gt; 3,&#xA;            'label' =&amp;gt; 'Frequently Asked Questions'&#xA;        );&#xA;&#xA;        if ($loggedIn)&#xA;        {&#xA;            $nav[] = array(&#xA;                'order' =&amp;gt; 4,&#xA;                'label' =&amp;gt; 'My Refresh',&#xA;                'uri' =&amp;gt; '#',&#xA;                'pages' =&amp;gt; array(&#xA;                    array(&#xA;                        'label' =&amp;gt; 'Accelerate My Refresh',&#xA;                        'order' =&amp;gt; 1,&#xA;                        'controller' =&amp;gt; 'accelerate',&#xA;                        'action' =&amp;gt; 'index'&#xA;                    )&#xA;                )&#xA;            );&#xA;&#xA;            $standardSystems = array();&#xA;            $standardSystems[] = array(&#xA;                'label' =&amp;gt; 'About Standard Computers'&#xA;            );&#xA;            $standardSystems[] = array(&#xA;                'label' =&amp;gt; 'Dell Optiplex 980 MT',&#xA;                'make' =&amp;gt; 'Dell',&#xA;                'model' =&amp;gt; 'Optiplex980MT'&#xA;            );&#xA;            $standardSystems[] = array(&#xA;                'label' =&amp;gt; 'Dell Latitude E4310',&#xA;                'make' =&amp;gt; 'Dell',&#xA;                'model' =&amp;gt; 'LatitudeE4310'&#xA;            );&#xA;            $standardSystems[] = array(&#xA;                'label' =&amp;gt; 'Dell Latitude E6410',&#xA;                'make' =&amp;gt; 'Dell',&#xA;                'model' =&amp;gt; 'LatitudeE6410'&#xA;            );&#xA;            $standardSystems[] = array(&#xA;                'label' =&amp;gt; 'Dell Latitude E6510',&#xA;                'make' =&amp;gt; 'Dell',&#xA;                'model' =&amp;gt; 'LatitudeE6510'&#xA;            );&#xA;            $standardSystems[] = array(&#xA;                'label' =&amp;gt; 'Apple iMac 21.5&amp;amp;quot;',&#xA;                'make' =&amp;gt; 'Apple',&#xA;                'model' =&amp;gt; 'iMac'&#xA;            );&#xA;            $standardSystems[] = array(&#xA;                'label' =&amp;gt; 'Apple MacBook Pro 13&amp;amp;quot;',&#xA;                'make' =&amp;gt; 'Apple',&#xA;                'model' =&amp;gt; 'MacBookPro'&#xA;            );&#xA;            $standardSystems[] = array(&#xA;                'label' =&amp;gt; 'Apple MacBook Air 11&amp;amp;quot;',&#xA;                'make' =&amp;gt; 'Apple',&#xA;                'model' =&amp;gt; 'MacBookAir'&#xA;            );&#xA;&#xA;            foreach ($standardSystems as $key =&amp;gt; &amp;amp;$value)&#xA;            {&#xA;                $value['controller'] = 'StandardSystem';&#xA;                $value['action'] = 'index';&#xA;                $value['order'] = $key;&#xA;                if (!isset($value['make']))&#xA;                    continue;&#xA;                $value['params'] = array('make' =&amp;gt; $value['make'], 'model' =&amp;gt; $value['model']);&#xA;                unset($value['make']);&#xA;                unset($value['model']);&#xA;            }&#xA;&#xA;            $nav[] = array(&#xA;                'controller' =&amp;gt; 'StandardSystem',&#xA;                'action' =&amp;gt; 'index',&#xA;                'label' =&amp;gt; 'Standard Computers',&#xA;                'order' =&amp;gt; 5,&#xA;                'pages' =&amp;gt; $standardSystems&#xA;            );&#xA;&#xA;            $nav[] = array(&#xA;                'uri' =&amp;gt; 'mailto:casrefresh@case.edu',&#xA;                'label' =&amp;gt; 'Send Feedback',&#xA;                'order' =&amp;gt; 6&#xA;            );&#xA;        }&#xA;&#xA;        $nav = new Zend_Navigation(new Zend_Config($nav));&#xA;        $view-&amp;gt;navigation($nav);&#xA;        //Done setting up navigation.&#xA;&#xA;        //Register the view, and return it.&#xA;        $viewRenderer =&#xA;            Zend_Controller_Action_HelperBroker::getStaticHelper('ViewRenderer');&#xA;        $viewRenderer-&amp;gt;setView($view);&#xA;&#xA;        $view-&amp;gt;setHelperPath(APPLICATION_PATH . '/views/helpers', 'Cas_View_Helper');&#xA;        return $view;&#xA;       }&#xA;&#xA;    protected function _initFrontController()&#xA;    {&#xA;        $fc = Zend_Controller_Front::getInstance();&#xA;        $fc-&amp;gt;setControllerDirectory(APPLICATION_PATH . '/controllers');&#xA;        $fc-&amp;gt;registerPlugin(new Cas_Controller_DefaultViews());&#xA;        Zend_Controller_Action_HelperBroker::addPrefix('Cas_Controller_Helper');&#xA;        return $fc;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="22" LastEditorUserId="22222" LastEditDate="2015-08-04T19:34:03.797" LastActivityDate="2015-08-04T19:34:03.797" Title="Zend_Application bootstrapper" Tags="&lt;php&gt;&lt;zend-framework&gt;" AnswerCount="2" CommentCount="0" />
  <row Id="679" PostTypeId="2" ParentId="677" CreationDate="2011-02-07T19:34:30.590" Score="5" Body="&lt;p&gt;Have you considered using the Chain of Command instead of the visitor?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public interface IFooChainLink&#xA;{&#xA;    void Execute(Foo foo);&#xA;}&#xA;&#xA;public interface IBarChainLink&#xA;{&#xA;    void Execute(Bar bar);&#xA;}&#xA;&#xA;public class Worker&#xA;{&#xA;    public Worker(IFooChainLink fooChain, IBarChainLink barChain)&#xA;    { ... }&#xA;&#xA;    public void Execute(Foo foo)&#xA;    {&#xA;        fooChain.Execute(foo);&#xA;        var bar = getbarfromfoo(foo);&#xA;        barChain.Execute(bar);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Your chain links would look like this&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public DoXToFoo : IFooChainLink&#xA;{&#xA;    private static IFooChainLink NextInChain = new DoYToFoo();&#xA;&#xA;    public void Execute(Foo foo)&#xA;    {&#xA;        // DO STUFF HERE&#xA;        NextInChain.Execute(foo);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You will also need an EndOfFooChain&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public EndOfFooChain : IFooChainLink&#xA;{&#xA;    public void Execute(Foo foo)&#xA;    {&#xA;        // DO NOTHING HERE&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And you might want a start point that makes more sense in your calling code, such as&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public FooChainActivator : IFooChainLink&#xA;{&#xA;    private static IFooChainLink NextInChain = new DoXToFoo();&#xA;&#xA;    public void Execute(Foo foo)&#xA;    {&#xA;        // DO NOTHING&#xA;        NextInChain.Execute(foo);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;With this, you can have your chain well sequenced and easily insert links into the chain, even the beginning and end without ever changing the calling code.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you would rather have your chain sequence declared in one place, you can pass NextInChain as a constructor parameter to each layer of the chain, so that your calling code becomes&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var worker = new Worker(&#xA;                 new DoXToFoo(&#xA;                 new DoYToFoo(&#xA;                 new DoZToFoo(&#xA;                 new EndOfFooChain()))),&#xA;                 new DoAToBar(&#xA;                 new DoBToBar(&#xA;                 new DoCToBar(&#xA;                 new EndOfBarChain())))&#xA;              );&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This has an added advantage that you can send arguments to the links in the chain, but I feel it's a little messier than defining the NextLinkInChain within the links themselves.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I guess that's a matter of personal preference.&lt;/p&gt;&#xA;" OwnerUserId="1416" LastEditorUserId="1416" LastEditDate="2011-02-07T22:27:08.303" LastActivityDate="2011-02-07T22:27:08.303" CommentCount="4" />
  <row Id="680" PostTypeId="1" CreationDate="2011-02-07T19:37:41.053" Score="12" ViewCount="1297" Body="&lt;p&gt;I am trying to write a LISP interpreter in C#, so I started with a tokenizer. I haven't finished it yet (have to handle floating point numbers &amp;amp; symbols), but I already rewrote it two times because I can't wasn't satisfied with design. &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    public class TokenizerException : System.ApplicationException&#xA;{&#xA;    public TokenizerException() {}&#xA;    public TokenizerException(string message) {}&#xA;    public TokenizerException(string message, System.Exception inner) {}&#xA;&#xA;    // Constructor needed for serialization &#xA;    // when exception propagates from a remoting server to the client.&#xA;    protected TokenizerException(System.Runtime.Serialization.SerializationInfo info,&#xA;        System.Runtime.Serialization.StreamingContext context) {}&#xA;}&#xA;public abstract class Token&#xA;{&#xA;    public string val;&#xA;    public Token(string val)&#xA;    {&#xA;        if(val != null) this.val = val;&#xA;        else this.val = &quot;&quot;;&#xA;    }&#xA;}&#xA;class OpenParenToken: Token &#xA;{&#xA;    public OpenParenToken(string value) : base(value) {}        &#xA;}&#xA;class CloseParenToken: Token &#xA;{&#xA;    public CloseParenToken(string value) : base(value) {}&#xA;}&#xA;class NumberToken: Token &#xA;{&#xA;    public NumberToken(string value) : base(value) {}&#xA;}&#xA;class StringToken: Token &#xA;{&#xA;    public StringToken(string value) : base(value) {}&#xA;}&#xA;class IdToken: Token &#xA;{&#xA;    public IdToken(string value) : base(value) {}&#xA;}&#xA;class SymbolToken: Token &#xA;{&#xA;    public SymbolToken(string value) : base(value) {}&#xA;}&#xA;&#xA;&#xA;public class Tokenizer&#xA;{&#xA;&#xA;    private const string parens = &quot;([])&quot;;&#xA;    private string code;&#xA;    private char ch;&#xA;    private object token;&#xA;    private List&amp;lt;Token&amp;gt; tokens;&#xA;&#xA;    private int p = 0;&#xA;&#xA;    public Tokenizer(string code)&#xA;    {&#xA;        this.code = code;&#xA;        tokens = new List&amp;lt;Token&amp;gt;();&#xA;    }&#xA;&#xA;    private char getCh()&#xA;    {&#xA;        ch = code[p];&#xA;        return ch;&#xA;    }&#xA;&#xA;    public void DumpTokens()&#xA;    {&#xA;        foreach(object t in tokens)&#xA;        {&#xA;            Console.Write(&quot;&amp;lt;&quot;+t.GetType()+&quot;, &quot;+(t as Token).val+&quot;&amp;gt; &quot;);&#xA;        }&#xA;        Console.WriteLine();&#xA;    }&#xA;&#xA;    private char NextCh()&#xA;    {&#xA;        if(p &amp;gt;= code.Length) throw new TokenizerException(&quot;End of input reached, cant get more chars&quot;);&#xA;        ch = getCh();&#xA;        if(char.IsWhiteSpace(ch)) { p++; return NextCh(); }&#xA;        else return ch;&#xA;    }&#xA;&#xA;    private Token NextParenToken(char ch)&#xA;    {&#xA;        Token t;&#xA;        if(parens.IndexOf(ch) &amp;lt;= parens.Length/2)&#xA;        {&#xA;            t = new OpenParenToken(ch.ToString());&#xA;        }&#xA;        else t = new CloseParenToken(ch.ToString());&#xA;        tokens.Add(t);&#xA;        return t;&#xA;    }&#xA;&#xA;    private Token NextNumberToken()&#xA;    {&#xA;        int startPos = p;&#xA;        while(p &amp;lt; code.Length)&#xA;        {&#xA;            char c = getCh();&#xA;            if(!char.IsDigit(c)) break;&#xA;            p++;&#xA;        }&#xA;        p--;&#xA;        NumberToken n = new NumberToken(code.Substring(startPos, p - startPos + 1));&#xA;        tokens.Add(n);&#xA;        return n;&#xA;    }&#xA;&#xA;    private Token NextStringToken()&#xA;    {&#xA;        if(p + 1 &amp;gt; code.Length) throw new TokenizerException(&quot;Unmatched \&quot; at the end of the code&quot;);&#xA;        int startPos = ++p;&#xA;        while(p &amp;lt; code.Length)&#xA;        {&#xA;            char c = getCh();&#xA;            if(c == '\&quot;') break;&#xA;            p++;&#xA;        }&#xA;&#xA;        StringToken t = new StringToken(code.Substring(startPos, p - startPos + 1));&#xA;        tokens.Add(t);&#xA;        return t;&#xA;    }&#xA;&#xA;    private Token NextIDToken()&#xA;    {&#xA;        int startPos = p;&#xA;        while(p &amp;lt; code.Length)&#xA;        {&#xA;            getCh();&#xA;            if(parens.IndexOf(ch) &amp;gt; parens.Length/2 || char.IsWhiteSpace(ch)) break;&#xA;            if(parens.IndexOf(ch) &amp;gt;= 0 &amp;amp;&amp;amp; parens.IndexOf(ch) &amp;lt;= parens.Length/2) throw new TokenizerException(&quot;Bad identifier at &quot; + p);&#xA;            p++;&#xA;        }&#xA;        p--;&#xA;        string id = code.Substring(startPos, p - startPos + 1);&#xA;        IdToken t = new IdToken(id);&#xA;        tokens.Add(t);&#xA;        IdTable.insert(id, t);&#xA;&#xA;        return t;&#xA;    }&#xA;&#xA;    public Token NextToken()&#xA;    {&#xA;        char ch = NextCh();&#xA;        if(parens.Contains(ch))&#xA;        {&#xA;            return NextParenToken(ch);&#xA;        }&#xA;&#xA;        if(char.IsDigit(ch))&#xA;        {&#xA;            return NextNumberToken();&#xA;        }&#xA;&#xA;        if(ch == '\&quot;')&#xA;        {&#xA;            return NextStringToken();&#xA;        }&#xA;&#xA;        // identifiers&#xA;        return NextIDToken();&#xA;    }&#xA;&#xA;    public void Lex()&#xA;    {&#xA;        tokens.Clear();&#xA;        for(p=0; p &amp;lt; code.Length; p++)&#xA;        {&#xA;            NextToken();&#xA;        }&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1548" LastEditorUserId="62429" LastEditDate="2015-12-14T03:44:19.993" LastActivityDate="2015-12-14T03:44:19.993" Title="LL(1) tokenizer for LISP" Tags="&lt;c#&gt;&lt;parsing&gt;" AnswerCount="4" CommentCount="7" />
  <row Id="682" PostTypeId="2" ParentId="505" CreationDate="2011-02-07T22:18:04.843" Score="1" Body="&lt;p&gt;just something that i have considered how about hiding the paginate stuff behind a helper method and then stub the helper method this way you can swap out the pagination implementation with anytime you want&#xA;and then just test the helper method is delegating the params to will_paginate&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class ProgramssController &amp;lt; ApplicationController&#xA;  def index&#xA;    @programs = paginate_progams(params)&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;now you stub the paginate_programs method&#xA;and then you can spec up the helper method paginate&lt;/p&gt;&#xA;" OwnerUserId="1230" LastActivityDate="2011-02-07T22:18:04.843" CommentCount="0" />
  <row Id="683" PostTypeId="1" CreationDate="2011-02-07T22:21:35.953" Score="15" ViewCount="942" Body="&lt;p&gt;I wrote this &lt;a href=&quot;http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes&quot; rel=&quot;nofollow&quot;&gt;sieve of Eratosthenes&lt;/a&gt; with MPI, but I'm not sure if it's good enough. Should I use &lt;code&gt;MPI_Scatter&lt;/code&gt; and &lt;code&gt;MPI_Gather&lt;/code&gt; instead of collecting arrays of separate processes in the root process?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also, I'm not sure if I call &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;printArray(myArray, (N/size)-1);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;right, where &lt;code&gt;myArray&lt;/code&gt; is an array of pointers. GCC gives a warning at this point. &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#include &quot;mpi.h&quot;&#xA;#include &amp;lt;stdio.h&amp;gt;&#xA;#include &amp;lt;stdlib.h&amp;gt;&#xA;#include &amp;lt;math.h&amp;gt;&#xA;#include &amp;lt;time.h&amp;gt;&#xA;&#xA;#define N 60&#xA;&#xA;int main(int argc, char *argv[])&#xA;{&#xA;long timeCPU;&#xA;int rank, size, k, i, v, n, scatterSize;&#xA;int **tmpArray, *myArray, firstElement, lastElement;&#xA;&#xA;MPI_Init(&amp;amp;argc,&amp;amp;argv);&#xA;&#xA;MPI_Comm_rank(MPI_COMM_WORLD, &amp;amp;rank);&#xA;MPI_Comm_size(MPI_COMM_WORLD, &amp;amp;size);&#xA;&#xA;if(N%size != 0)&#xA;{&#xA;    MPI_Finalize();&#xA;    printf(&quot;ERROR!&quot;);&#xA;    exit(0);&#xA;}&#xA;&#xA;firstElement = (rank*N)/size;&#xA;lastElement = floor(((rank+1)*N)/size);&#xA;myArray = (int*) (malloc(((N/size)-1)*sizeof(int)));&#xA;&#xA;for(i=0, v=firstElement+2; i&amp;lt;=(N/size)-1; i++, v++)&#xA;{&#xA;    myArray[i] = v;&#xA;}&#xA;    printArray(myArray, (N/size)-1);&#xA;/* All processes have to execute above code first */&#xA;MPI_Barrier(MPI_COMM_WORLD);&#xA;&#xA;k = 2;&#xA;&#xA;do&#xA;{&#xA;    markMultiples(k, myArray, lastElement-firstElement);&#xA;    k = nextNumber(k, myArray, lastElement-firstElement);&#xA;    MPI_Bcast(&amp;amp;k, 1, MPI_INT, 0, MPI_COMM_WORLD);&#xA;}&#xA;while(k*k &amp;lt;=N);&#xA;&#xA;MPI_Send(myArray, (N/size)-1, MPI_INT, 0, 50, MPI_COMM_WORLD);&#xA;&#xA;MPI_Barrier(MPI_COMM_WORLD);&#xA;&#xA;if (rank == 0)&#xA;{&#xA;    // Initialize 2D array&#xA;    tmpArray = (int**) (malloc(size*sizeof(int)));&#xA;    for(i=0;i&amp;lt;size;i++)&#xA;    {&#xA;        tmpArray[i] = (int*) (malloc(((N/size)-1)*sizeof(int)));&#xA;    }&#xA;&#xA;    // Gather from every process his own array&#xA;    for (i=0; i&amp;lt;size;i++)&#xA;    {&#xA;        MPI_Recv(tmpArray[i], (N/size)-1, MPI_INT, i, 50, MPI_COMM_WORLD, MPI_STATUS_IGNORE);&#xA;        printArray(tmpArray[i], (N/size)-1);&#xA;        printf(&quot;-----------------------------------------\n&quot;);&#xA;    }&#xA;&#xA;    // Build 1d array with primes - TODO&#xA;&#xA;}&#xA;&#xA;//printArray(array, lastElement-firstElement);&#xA;free(myArray);&#xA;MPI_Finalize();&#xA;return 0;&#xA;}&#xA;&#xA;int nextNumber(int k, int *array, int n)&#xA;{&#xA;int i;&#xA;&#xA;for(i=0; i&amp;lt;=n; i++)&#xA;{&#xA;    if(array[i] &amp;gt; k)&#xA;        return array[i];&#xA;}&#xA;return -1;&#xA;}&#xA;&#xA;void markMultiples(int k, int *array, int n)&#xA;{&#xA;int i;&#xA;&#xA;for (i=0; i&amp;lt;=n; i++)&#xA;{&#xA;    if(array[i] % k == 0 &amp;amp;&amp;amp; array[i] != k)&#xA;    {&#xA;        array[i] = -1;&#xA;    }&#xA;}&#xA;}&#xA;&#xA;void printArray(int *array, int n)&#xA;{&#xA;int i;&#xA;&#xA;for(i=0; i&amp;lt;=n; i++)&#xA;{&#xA;    printf(&quot;array[%d] = %d\n&quot;, i, array[i]);&#xA;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1551" LastEditorUserId="22222" LastEditDate="2014-10-28T15:52:39.867" LastActivityDate="2014-10-28T15:52:39.867" Title="Eratosthenes sieve and MPI" Tags="&lt;c++&gt;&lt;c&gt;&lt;primes&gt;&lt;sieve-of-eratosthenes&gt;&lt;mpi&gt;" AnswerCount="2" CommentCount="2" />
  <row Id="684" PostTypeId="2" ParentId="680" CreationDate="2011-02-08T00:11:25.903" Score="5" Body="&lt;p&gt;1) I would remove &lt;code&gt;string val&lt;/code&gt; from your base &lt;code&gt;Token&lt;/code&gt; class, it smells like stringly typed code. Your inheritors may have more specific information, for example number token may provide a double instead of string&lt;br&gt;&#xA;2) &lt;code&gt;public string val;&lt;/code&gt; - Pascal case for public properties is a rule for .Net&lt;br&gt;&#xA;3) &lt;code&gt;if(val != null) this.val = val; else this.val = &quot;&quot;;&lt;/code&gt; is a long form for:&lt;br&gt;&#xA;&lt;code&gt;this.val = val ?? &quot;&quot;;&lt;/code&gt;&lt;br&gt;&#xA;4) &lt;code&gt;private char NextCh()&lt;/code&gt; recursion makes no sense here, regular loop is more than enough.&lt;br&gt;&#xA;5) haven't found any sense having this field: &lt;code&gt;private char ch;&lt;/code&gt;, you have it as local variable everywhere. This field should be removed.&lt;br&gt;&#xA;6) &lt;code&gt;code&lt;/code&gt; field can be made readonly&lt;br&gt;&#xA;7) &lt;code&gt;getCh()&lt;/code&gt; one-line method should be removed&lt;br&gt;&#xA;8) 'token' field should be removed since it doesn't seem to be used and doesn't make any sense in 'Tokenizer' context&lt;br&gt;&#xA;9) Is &lt;code&gt;IdTable&lt;/code&gt; a singleton? Singletons are evil.&lt;br&gt;&#xA;10) String.IndexOf(c) does the same as this&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    while(p &amp;lt; code.Length)&#xA;    {&#xA;        char c = getCh();&#xA;        if(c == '\&quot;') break;&#xA;        p++;&#xA;    }`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;11) Your tricks with parentheses and &lt;code&gt;indexOf &amp;lt;= Length/2&lt;/code&gt; do not improve readability at all&lt;br&gt;&#xA;12) IMO your class is too stateful, while parsing tokens in each method you have to keep in mind all those fields you have in your class. I would recommend remove ALL fields and use method parameters instead.&lt;/p&gt;&#xA;" OwnerUserId="645" LastEditorUserId="645" LastEditDate="2011-02-08T13:25:16.460" LastActivityDate="2011-02-08T13:25:16.460" CommentCount="0" />
  <row Id="686" PostTypeId="2" ParentId="680" CreationDate="2011-02-08T01:58:36.777" Score="8" Body="&lt;p&gt;In adition to Snowbear's points:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;1) I don't use an inheritance hierarchy for the token, instead I find it more convenient to use an enum property on the token to identify the type.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;2) You might want to think about &quot;reading&quot; the whitespace as a token that simply isn't returned (this is an extension of Snowbear's point about not using recursion to read the next char).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;3) LL(1) is a term that refers to parsers, not scanners (tokenisers).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;4) I also like implement my scanners as an IEnumerator that takes the string to be scanned in the constructor ... but that's just a matter of personal taste. :)&lt;/p&gt;&#xA;" OwnerUserId="1432" LastActivityDate="2011-02-08T01:58:36.777" CommentCount="2" />
  <row Id="687" PostTypeId="1" AcceptedAnswerId="771" CreationDate="2011-02-08T09:24:24.270" Score="2" ViewCount="282" Body="&lt;p&gt;Here is the pertinent code:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;index.html&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;!--  DOM INITIALIZATION --&amp;gt;&#xA;&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;&#xA;$().ready(function() {&#xA;&#xA;getThemeInfo();&#xA;&#xA;if (themeSelect==2) {&#xA;   ReplaceJSCSSFile(&quot;css/skin1.css&quot;, &quot;css/skin2.css&quot;, &quot;css&quot;);   // overwrite CSS&#xA;}&#xA;&#xA;AJAX_LoadResponseIntoElement(&quot;skinContainer&quot;, &quot;skin&quot; + themeSelect + &quot;.txt&quot;, function() {&#xA;    AJAX_LoadResponseIntoElement(&quot;contentdiv&quot;, &quot;index.txt&quot;, initPage);&#xA;    });&#xA;&#xA;});&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;funcs.js&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function initPage()&#xA;{&#xA;    setContentDimensions();&#xA;    replaceCSSMenu();&#xA;    showContainer();&#xA;    setContentPositions();&#xA;}&#xA;&#xA;function setContentPositions()&#xA;{&#xA;    var contentTop = findTop(document.getElementById('NavMenu')) + 4;&#xA;    var contentLeft = findLeft(document.getElementById('kwick1')) + 226;&#xA;&#xA;    document.getElementById('contentdiv').style.top = (contentTop)+ &quot;px&quot;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Quick recap: It fetches the theme selection, and if it's not the default (1), then it changes the CSS file to skin2.css.  Then, it fetches the page with AJAX and initializes it, and part of initialization is setting the div dimensions and positions.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Although the theme swap works perfectly through the button (code not shown here,) it does not work in Opera if the theme setting, stored in cookies, is a non-default theme, causing the CSS to be swapped during the loading of the page (i.e. this code here.)  For whatever reason, the .top and .left of my &quot;contentdiv,&quot; which is set in ContentPositions() function, is wrong.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'd assumed this was happening because the CSS styles were not loaded prior to the JavaScript attempting to set contentdiv's position.  To test this theory, I put an alert() in setContentPositions() to test that contentTop &amp;amp; contentTop were indeed wrong (they were,) and then another alert() after the DOM init line that changes the CSS file.  With the addition of the alert() after the CSS change within DOM init, it loads perfectly.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Why is the CSS file not processed by the time it does two AJAX fetches?  Is a callback function the proper way to fix this?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Edit...&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The code for some of the functions used in the above code was requested.  Here it is:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function ReplaceJSCSSFile(oldfilename, newfilename, filetype){&#xA; var targetelement=(filetype==&quot;js&quot;)? &quot;script&quot; : (filetype==&quot;css&quot;)? &quot;link&quot; : &quot;none&quot;;&#xA; var targetattr=(filetype==&quot;js&quot;)? &quot;src&quot; : (filetype==&quot;css&quot;)? &quot;href&quot; : &quot;none&quot;;&#xA; var allElements=document.getElementsByTagName(targetelement);&#xA;&#xA; for (var i=allElements.length; i&amp;gt;=0; i--){&#xA;  if (allElements[i] &amp;amp;&amp;amp; allElements[i].getAttribute(targetattr)!=null &amp;amp;&amp;amp; allElements[i].getAttribute(targetattr).indexOf(oldfilename)!=-1){&#xA;   var newelement=CreateJSCSSFile(newfilename, filetype);&#xA;   allElements[i].parentNode.replaceChild(newelement, allElements[i]);&#xA;  }&#xA; }&#xA;}&#xA;&#xA;function CreateJSCSSFile(filename, filetype){&#xA; if (filetype==&quot;js&quot;){&#xA;  var fileref=document.createElement('script');&#xA;  fileref.setAttribute(&quot;type&quot;,&quot;text/javascript&quot;);&#xA;  fileref.setAttribute(&quot;src&quot;, filename);&#xA; }&#xA; else if (filetype==&quot;css&quot;){&#xA;  var fileref=document.createElement(&quot;link&quot;);&#xA;  fileref.setAttribute(&quot;rel&quot;, &quot;stylesheet&quot;);&#xA;  fileref.setAttribute(&quot;type&quot;, &quot;text/css&quot;);&#xA;  fileref.setAttribute(&quot;href&quot;, filename);&#xA; }&#xA; return fileref;&#xA;}&#xA;&#xA;&#xA;&#xA;function AJAX_LoadResponseIntoElement (elementId, fetchFileName, cfunc) {&#xA;  var XMLHRObj;&#xA;  if (window.XMLHttpRequest) { XMLHRObj=new XMLHttpRequest(); }&#xA;    else { XMLHRObj=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;); }&#xA;&#xA;  XMLHRObj.onreadystatechange=function()&#xA;    {&#xA;    if (XMLHRObj.readyState==4 &amp;amp;&amp;amp; XMLHRObj.status==200)&#xA;      {&#xA;      document.getElementById(elementId).innerHTML=XMLHRObj.responseText;&#xA;      cfunc();&#xA;      }&#xA;    }&#xA;  XMLHRObj.open(&quot;GET&quot;,fetchFileName,true);&#xA;  XMLHRObj.send();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1099" LastEditorUserId="1099" LastEditDate="2011-02-13T13:39:07.587" LastActivityDate="2011-02-14T13:03:40.437" Title="Do I need to use a callback function here, or is there another way?" Tags="&lt;javascript&gt;&lt;css&gt;" AnswerCount="1" CommentCount="2" />
  <row Id="688" PostTypeId="1" AcceptedAnswerId="689" CreationDate="2011-02-08T10:42:26.507" Score="4" ViewCount="1049" Body="&lt;p&gt;This sample code works fine, but it looks awful.  How would you improve this?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;data.Add(((Adress)(((OwnerIDList)owner.Adresses.Value)[0].Adress.Value)).FirstName.Value.ToString());&#xA;data.Add(((Adress)(((OwnerIDList)owner.Adresses.Value)[0].Adress.Value)).LastName.Value.ToString());&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Why do we use &lt;code&gt;.Value&lt;/code&gt; in &lt;code&gt;FirstName.Value.ToString()&lt;/code&gt;?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;FirstName&lt;/code&gt; is a &lt;code&gt;DTString&lt;/code&gt; object (implements a basic interface for all data types to be stored in data base).&lt;/p&gt;&#xA;" OwnerUserId="1283" LastEditorUserId="22222" LastEditDate="2014-07-01T23:31:01.070" LastActivityDate="2014-07-01T23:31:01.070" Title="Multiple explicit cast operations" Tags="&lt;c#&gt;&lt;casting&gt;" AnswerCount="2" CommentCount="2" />
  <row Id="689" PostTypeId="2" ParentId="688" CreationDate="2011-02-08T10:54:42.647" Score="8" Body="&lt;p&gt;at least I would extract a variable:  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var address = (Adress)((OwnerIDList)owner.Adresses.Value)[0].Adress.Value;&#xA;data.Add(address.FirstName.Value.ToString());&#xA;data.Add(address.LastName.Value.ToString());&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;All these cast operations make me believe that your code is not that strongly typed. If it so then there is not that much you can do with readability in this code.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;P.S.: &lt;code&gt;Address&lt;/code&gt; in English has two &lt;code&gt;d&lt;/code&gt;.&lt;/p&gt;&#xA;" OwnerUserId="645" LastActivityDate="2011-02-08T10:54:42.647" CommentCount="6" />
  <row Id="690" PostTypeId="1" AcceptedAnswerId="693" CreationDate="2011-02-08T11:57:36.830" Score="7" ViewCount="554" Body="&lt;pre&gt;&lt;code&gt;public boolean connectedOnGameServer = false;&#xA;public final Object conGameServerMonitor = new Object();&#xA;&#xA;public void connectedToGameServer() {&#xA;    synchronized (conGameServerMonitor) {&#xA;        if (connectedOnGameServer != false)&#xA;            throw new RuntimeException(&quot;Player connected twice&quot;);&#xA;        connectedOnGameServer = true;&#xA;        conGameServerMonitor.notifyAll();&#xA;    }&#xA;}&#xA;&#xA;public void waitForGameServerConnection() {&#xA;    synchronized (conGameServerMonitor) {&#xA;        try {&#xA;            long startTime = System.currentTimeMillis();&#xA;            long waited = 0;&#xA;            while (!connectedOnGameServer &amp;amp;&amp;amp; waited &amp;lt; GAMESERVER_CONNECT_TIMEOUT) {&#xA;                conGameServerMonitor.wait(GAMESERVER_CONNECT_TIMEOUT - waited);&#xA;                waited = System.currentTimeMillis() - startTime;&#xA;            }&#xA;            if (waited &amp;gt; GAMESERVER_CONNECT_TIMEOUT &amp;amp;&amp;amp; connectedOnGameServer) {&#xA;                throw new RuntimeException(&quot;Client didn't connect to game server in time (&quot; + GAMESERVER_CONNECT_TIMEOUT + &quot; ms)&quot;);&#xA;            }&#xA;        } catch (InterruptedException e) {&#xA;            throw new RuntimeException(&quot;Interrupted while waiting for client to connect to game server&quot;, e);&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;What I need is:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Thread A calls &lt;code&gt;waitForGameServerConnection&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Thread B calls &lt;code&gt;connectedToGameServer&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Thread A continues&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="1558" LastEditorUserId="18427" LastEditDate="2014-12-15T16:27:45.577" LastActivityDate="2014-12-15T16:27:45.577" Title="Waiting for game server connection" Tags="&lt;java&gt;&lt;synchronization&gt;&lt;timeout&gt;&lt;locking&gt;" AnswerCount="1" CommentCount="0" />
  <row Id="691" PostTypeId="2" ParentId="688" CreationDate="2011-02-08T12:29:42.623" Score="2" Body="&lt;p&gt;What's with all the .Value is it because the variables are defined as Nullable&amp;lt; T &gt; variables?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In that case, you can substitute &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;FirstName.Value.ToString()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;With&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;FirstName.ToString()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Besides that, the place where I would clean up would be the actual objects that you are querying for data. You have a lot of casts, and a lot of .Value lookups to get to the real data. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;This results in the code that uses those classes reflects the design choices made when implementing those classes, And that is the real reason why your code looks awful. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;I would change those types, so you would be able to write:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;data.Add(owner.Adresses[0].Adress.FirstName);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Also it seems illogical that an object that you retrieve from an Addresses collection should have a property called Address? Maybe that should have a better name.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And as already mentioned, there are two d's in address.&lt;/p&gt;&#xA;" OwnerUserId="332" LastActivityDate="2011-02-08T12:29:42.623" CommentCount="1" />
  <row Id="692" PostTypeId="1" AcceptedAnswerId="739" CreationDate="2011-02-08T12:57:24.190" Score="5" ViewCount="247" Body="&lt;p&gt;I'm writing a quiz application in PHP and am querying the DB for questions and their associated answers. I then wrangle the result set into a usable array for my front end. However, it always seems like a wrestling match and I'm wondering if I could have got to my desired array structure more efficiently.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What I wanted was an associative array / dictionary which was structured so that the questions were at the top level with their associated answers underneath. I also wanted a numeric index above the question level so that I can later use that to match my &lt;code&gt;current_step&lt;/code&gt; session variable for stepping through the form.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function get_question_data( $quiz_id)&#xA;{&#xA;    global $wpdb;&#xA;&#xA;    if ( !isset($quiz_id)) {&#xA;        return FALSE;&#xA;    }&#xA;&#xA;    $sql = $wpdb-&amp;gt;prepare(&quot;SELECT q.ID AS 'question_id', question, explanation, q.sort_order, qa.ID AS 'answer_id', qa.answer, qa.correct, qa.hint&#xA;                           FROM {$wpdb-&amp;gt;prefix}my_quiz_questions q&#xA;                           LEFT JOIN wp_nmsi_quiz_answers AS qa ON q.ID = qa.question_id&#xA;                           WHERE quiz_id=%d ORDER BY q.ID&quot;, $quiz_id);&#xA;    $quiz_data = $wpdb-&amp;gt;get_results($sql, ARRAY_A);&#xA;    fb($quiz_data,'DATABASE RESULTS');&#xA;&#xA;    //build into a user-friendly array which we can use to manage quiz steps and questions later.&#xA;    $question_array = array();&#xA;&#xA;    foreach ($quiz_data as $key=&amp;gt;$value) {&#xA;&#xA;&#xA;      foreach ($value as $k =&amp;gt; $v) {&#xA;            if ($k == 'question' ) {&#xA;                if (!array_key_exists('question_'.$value['question_id'], $question_array)) {&#xA;                $question_array['question_'.$value['question_id']]['question_text'] = $v;&#xA;                $question_array['question_'.$value['question_id']]['question_id'] = $value['question_id'];&#xA;                }&#xA;            }&#xA;&#xA;            if ($k == 'answer'){&#xA;                $question_array['question_'.$value['question_id']]['answers'][$value['answer_id']]['text'] = $v;        &#xA;            }&#xA;&#xA;            if ($k == 'hint') {&#xA;                $question_array['question_'.$value['question_id']]['answers'][$value['answer_id']]['hint'] = $v;&#xA;            }&#xA;&#xA;            if ($k == 'correct') {&#xA;                $question_array['question_'.$value['question_id']]['answers'][$value['answer_id']]['correct'] = $v;&#xA;            }&#xA;&#xA;&#xA;            if ($k == 'explanation' ) {&#xA;                $question_array['question_'.$value['question_id']]['explanation'] = $v;&#xA;            }&#xA;&#xA;        }&#xA;&#xA;&#xA;    }&#xA;&#xA;    //echo $wpdb-&amp;gt;last_query;&#xA;    return array_values($question_array);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I ended up with &lt;a href=&quot;http://cl.ly/2F313J2j0K0t0i2O2g3V&quot; rel=&quot;nofollow&quot;&gt;this solution&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Update: Query Results&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;array(6) {&#xA;  [0]=&amp;gt;&#xA;  array(8) {&#xA;    [&quot;question_id&quot;]=&amp;gt;&#xA;    string(1) &quot;1&quot;&#xA;    [&quot;question&quot;]=&amp;gt;&#xA;    string(34) &quot;Question 1. What is the question ?&quot;&#xA;    [&quot;explanation&quot;]=&amp;gt;&#xA;    string(38) &quot;This is the explanation for question 1&quot;&#xA;    [&quot;sort_order&quot;]=&amp;gt;&#xA;    string(1) &quot;0&quot;&#xA;    [&quot;answer_id&quot;]=&amp;gt;&#xA;    string(2) &quot;20&quot;&#xA;    [&quot;answer&quot;]=&amp;gt;&#xA;    string(16) &quot;this is answer 4&quot;&#xA;    [&quot;correct&quot;]=&amp;gt;&#xA;    string(1) &quot;0&quot;&#xA;    [&quot;hint&quot;]=&amp;gt;&#xA;    string(29) &quot;this is the hint for answer 4&quot;&#xA;  }&#xA;  [1]=&amp;gt;&#xA;  array(8) {&#xA;    [&quot;question_id&quot;]=&amp;gt;&#xA;    string(1) &quot;1&quot;&#xA;    [&quot;question&quot;]=&amp;gt;&#xA;    string(34) &quot;Question 1. What is the question ?&quot;&#xA;    [&quot;explanation&quot;]=&amp;gt;&#xA;    string(38) &quot;This is the explanation for question 1&quot;&#xA;    [&quot;sort_order&quot;]=&amp;gt;&#xA;    string(1) &quot;0&quot;&#xA;    [&quot;answer_id&quot;]=&amp;gt;&#xA;    string(2) &quot;19&quot;&#xA;    [&quot;answer&quot;]=&amp;gt;&#xA;    string(16) &quot;this is answer 3&quot;&#xA;    [&quot;correct&quot;]=&amp;gt;&#xA;    string(1) &quot;0&quot;&#xA;    [&quot;hint&quot;]=&amp;gt;&#xA;    string(29) &quot;this is the hint for answer 3&quot;&#xA;  }&#xA;  [2]=&amp;gt;&#xA;  array(8) {&#xA;    [&quot;question_id&quot;]=&amp;gt;&#xA;    string(1) &quot;1&quot;&#xA;    [&quot;question&quot;]=&amp;gt;&#xA;    string(34) &quot;Question 1. What is the question ?&quot;&#xA;    [&quot;explanation&quot;]=&amp;gt;&#xA;    string(38) &quot;This is the explanation for question 1&quot;&#xA;    [&quot;sort_order&quot;]=&amp;gt;&#xA;    string(1) &quot;0&quot;&#xA;    [&quot;answer_id&quot;]=&amp;gt;&#xA;    string(2) &quot;18&quot;&#xA;    [&quot;answer&quot;]=&amp;gt;&#xA;    string(16) &quot;this is answer 2&quot;&#xA;    [&quot;correct&quot;]=&amp;gt;&#xA;    string(1) &quot;0&quot;&#xA;    [&quot;hint&quot;]=&amp;gt;&#xA;    string(29) &quot;this is the hint for answer 2&quot;&#xA;  }&#xA;  [3]=&amp;gt;&#xA;  array(8) {&#xA;    [&quot;question_id&quot;]=&amp;gt;&#xA;    string(1) &quot;1&quot;&#xA;    [&quot;question&quot;]=&amp;gt;&#xA;    string(34) &quot;Question 1. What is the question ?&quot;&#xA;    [&quot;explanation&quot;]=&amp;gt;&#xA;    string(38) &quot;This is the explanation for question 1&quot;&#xA;    [&quot;sort_order&quot;]=&amp;gt;&#xA;    string(1) &quot;0&quot;&#xA;    [&quot;answer_id&quot;]=&amp;gt;&#xA;    string(2) &quot;17&quot;&#xA;    [&quot;answer&quot;]=&amp;gt;&#xA;    string(16) &quot;this is answer 1&quot;&#xA;    [&quot;correct&quot;]=&amp;gt;&#xA;    string(1) &quot;1&quot;&#xA;    [&quot;hint&quot;]=&amp;gt;&#xA;    string(29) &quot;this is the hint for answer 1&quot;&#xA;  }&#xA;  [4]=&amp;gt;&#xA;  array(8) {&#xA;    [&quot;question_id&quot;]=&amp;gt;&#xA;    string(1) &quot;2&quot;&#xA;    [&quot;question&quot;]=&amp;gt;&#xA;    string(10) &quot;Question 2&quot;&#xA;    [&quot;explanation&quot;]=&amp;gt;&#xA;    string(26) &quot;Explanation for question 2&quot;&#xA;    [&quot;sort_order&quot;]=&amp;gt;&#xA;    string(1) &quot;0&quot;&#xA;    [&quot;answer_id&quot;]=&amp;gt;&#xA;    string(2) &quot;24&quot;&#xA;    [&quot;answer&quot;]=&amp;gt;&#xA;    string(28) &quot;test answer 2 for question 2&quot;&#xA;    [&quot;correct&quot;]=&amp;gt;&#xA;    string(1) &quot;0&quot;&#xA;    [&quot;hint&quot;]=&amp;gt;&#xA;    string(13) &quot;answer 2 hint&quot;&#xA;  }&#xA;  [5]=&amp;gt;&#xA;  array(8) {&#xA;    [&quot;question_id&quot;]=&amp;gt;&#xA;    string(1) &quot;2&quot;&#xA;    [&quot;question&quot;]=&amp;gt;&#xA;    string(10) &quot;Question 2&quot;&#xA;    [&quot;explanation&quot;]=&amp;gt;&#xA;    string(26) &quot;Explanation for question 2&quot;&#xA;    [&quot;sort_order&quot;]=&amp;gt;&#xA;    string(1) &quot;0&quot;&#xA;    [&quot;answer_id&quot;]=&amp;gt;&#xA;    string(2) &quot;23&quot;&#xA;    [&quot;answer&quot;]=&amp;gt;&#xA;    string(28) &quot;test answer 1 for question 2&quot;&#xA;    [&quot;correct&quot;]=&amp;gt;&#xA;    string(1) &quot;1&quot;&#xA;    [&quot;hint&quot;]=&amp;gt;&#xA;    string(13) &quot;answer 1 hint&quot;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1511" LastEditorUserId="62429" LastEditDate="2015-06-04T14:08:11.387" LastActivityDate="2015-06-04T14:08:11.387" Title="Extract a joined result set into a parent-child hierarchy" Tags="&lt;php&gt;&lt;sql&gt;&lt;array&gt;" AnswerCount="2" CommentCount="0" FavoriteCount="1" />
  <row Id="693" PostTypeId="2" ParentId="690" CreationDate="2011-02-08T15:12:08.887" Score="6" Body="&lt;p&gt;My code examples are excerpts. Don't copy/paste them, they are suggestions you can incorporate into your code. &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if (waited &amp;gt; GAMESERVER_CONNECT_TIMEOUT &amp;amp;&amp;amp; connectedOnGameServer)&#xA;{&#xA;   throw new RuntimeException(&quot;Client didn't connect to game server in time (&quot; + GAMESERVER_CONNECT_TIMEOUT + &quot; ms)&quot;);&#xA;} &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;can be reduced to:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if (!connectedOnServer) {&#xA;   throw new RuntimeException(&quot;Client didn't connect to game server in time (&quot; + GAMESERVER_CONNECT_TIMEOUT + &quot; ms)&quot;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now, you can handle this without an exception. Connections fail quite regularly, and it's easy to handle that.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public boolean waitForConnection() {&#xA;   synchronized (conGameServerMonitor) {&#xA;      // loop, guard&#xA;      return connectedOnGameServer? true : false;&#xA;   }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;With this you can ask the player if he wants to try again, or wait a bit and try again, etc without having to catch an exception.&#xA;But what if B calls &lt;code&gt;connectedToGameServer()&lt;/code&gt; &lt;em&gt;after&lt;/em&gt; the wait completes?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;boolean connectionInProgress;&#xA;&#xA;public void connectedToGame() {&#xA;   synchronized (conGameServerMonitor) {&#xA;      if (connectionInProgress) {&#xA;         connectedOnGameServer = true;&#xA;         conGameServerMonitor.notifyAll(); &#xA;      }&#xA;   }&#xA;}&#xA;&#xA;public boolean waitForConnection() {&#xA;   synchronized (conGameServerMonitor) {&#xA;      connectionInProgress = true;&#xA;      // wait&#xA;      connectionInProgress = false;&#xA;      return connectedOnGameServer? true : false;&#xA;   }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You handle the wakeups and interuptions correctly. Kudos for the &lt;code&gt;waited&lt;/code&gt; part - I thought &quot;Useless!&quot; for a second, but I forgot that a thread could wake anytime, and it's the thread's responsibility to be sure that it's conditions are fulfilled.&lt;/p&gt;&#xA;" OwnerUserId="110" LastActivityDate="2011-02-08T15:12:08.887" CommentCount="0" />
  <row Id="694" PostTypeId="2" ParentId="680" CreationDate="2011-02-08T16:22:48.350" Score="3" Body="&lt;p&gt;The main comment I have is that I think that C# is the &lt;strong&gt;wrong&lt;/strong&gt;  language to pick for tokenizing a language. Its perfectly good for the main bulk of the lisp interpretor but one of the major skills of software engineer is picking the correct language for the job. Not just of ease of writing but ease of maintainability and future work.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Now I personally like LEX but there are other lexical generators out there. But I just want to show you how simple the LEX file is. Even if you don't know the exact syntax of LEX it is simple enough that most people will immediately be able to read (assuming a CS background) and even the most complex modification can be done within an hour given an appropriate book.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;OK I am not 100% sure of the exact rules for tokenizing Lisp.  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;DIGIT           [0-9]&#xA;NUMBER          [+-]?{DIGIT}+&#xA;EXP             [EeDd]{NUMBER}&#xA;IDTOKEN         [^)(; \t\v\r]&#xA;IDENTIFIER      {IDTOKEN}+&#xA;SPACE           [ \t\v\r]&#xA;&#xA;%x              STRING COMMENT&#xA;%%&#xA;&#xA;;                               { BEGIN(COMMENT); }&#xA;&amp;lt;COMMENT&amp;gt;[^\n]+                 { /* IGNORE */ }&#xA;&amp;lt;COMMENT&amp;gt;\n                     { BEGIN(INITIAL); }&#xA;&#xA;{NUMBER}                        { return CONSTANT_NUMBER_INT; }&#xA;&#xA;{NUMBER}{EXP}                   { return CONSTANT_NUMBER_FLOAT; }&#xA;{NUMBER}?&quot;.&quot;{DIGIT}+{EXP}?      { return CONSTANT_NUMBER_FLOAT; }&#xA;{NUMBER}&quot;.&quot;{DIGIT}*{EXP}?       { return CONSTANT_NUMBER_FLOAT; }&#xA;&#xA;{NUMBER}\/{NUMBER}              { return CONSTANT_NUMBER_RATIO; }&#xA;&#xA;\&quot;                              { BEGIN(STRING); yymore(); }&#xA;&amp;lt;STRING&amp;gt;[^\&quot;\\\n]+              { yymore(); }&#xA;&amp;lt;STRING&amp;gt;\\.                     { yymore(); }&#xA;&amp;lt;STRING&amp;gt;\&quot;                      { BEGIN(INITIAL); return CONSTANT_STRING; }&#xA;&amp;lt;STRING&amp;gt;\n                      { error(&quot;NewLine inside string&quot;);}&#xA;&#xA;{IDENTIFIER}                    { return NAME; }&#xA;&#xA;\(                              { return '('; }&#xA;\)                              { return ')'; }&#xA;&#xA;\n                              { lineCount++; }&#xA;{SPACE}+                        { /* Ignore Space */ }&#xA;&#xA;%%&#xA;/* Add this rule if there are things that can't match&#xA; * But Lisp seems to be very flexible on Identifier&#xA; * names so it seems like it is not required.&#xA; .                               { error(&quot;Unknown character&quot;); }&#xA; */&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;50 lines is a lot easier to read than 200.&lt;/p&gt;&#xA;" OwnerUserId="507" LastEditorUserId="507" LastEditDate="2011-02-08T19:32:19.050" LastActivityDate="2011-02-08T19:32:19.050" CommentCount="0" />
  <row Id="695" PostTypeId="2" ParentId="505" CreationDate="2011-02-08T16:51:42.817" Score="17" Body="&lt;p&gt;You forgot to test what view should be rendered. If you use &lt;a href=&quot;https://github.com/thoughtbot/shoulda&quot; rel=&quot;nofollow&quot;&gt;this&lt;/a&gt;, your specs will be much cleaner. The last four should be standard matchers. See &lt;a href=&quot;https://github.com/thoughtbot/shoulda-matchers/blob/master/lib/shoulda/matchers/action_controller/assign_to_matcher.rb&quot; rel=&quot;nofollow&quot;&gt;this&lt;/a&gt; as an example.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;describe ProgramsController do&#xA;  let(:programs) { [mock_model(Program)] }    &#xA;&#xA;  describe &quot;GET index&quot; do&#xA;    it { should paginate(Program).with_default_per_page(30) }&#xA;&#xA;    describe &quot;after pagination&quot; do&#xA;      before(:each) do&#xA;        Program.stub(:paginate).and_return(programs)    &#xA;        get :index&#xA;      end&#xA;&#xA;      it { should assign_to(:programs).with(programs) }&#xA;      it { should respond_with(:success) }&#xA;      it { should render_template(:index) }&#xA;      it { should_not set_the_flash } &#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1566" LastEditorUserId="22222" LastEditDate="2015-03-06T07:10:54.963" LastActivityDate="2015-03-06T07:10:54.963" CommentCount="1" />
  <row Id="696" PostTypeId="2" ParentId="692" CreationDate="2011-02-08T17:36:33.513" Score="0" Body="&lt;p&gt;From the structure of the sql query, it looks like your output is going to have duplicate rows, due to the fact that a single question can have multiple answers. This means you're going to have to do some screwy stuff, like what you did with the nested &lt;code&gt;foreach&lt;/code&gt; loops. I would recommend splitting this into two separate queries, one to get the questions and one to get the answers, and then just assigning the responses straight into the array without all the &lt;code&gt;if(key==whatever) { // assign something }&lt;/code&gt; magic.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As for the array itself, it looks quite good. Some pretty minor points:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;code&gt;question_array&lt;/code&gt; doesn't really need to have a string-based key (e.g., &lt;code&gt;$question_array['question_1']&lt;/code&gt;); it may be easier to work with if you just use numbers (e.g., &lt;code&gt;$question_array[1]&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;You don't have a field for how many points each question is worth.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;" OwnerUserId="192" LastActivityDate="2011-02-08T17:36:33.513" CommentCount="1" />
  <row Id="697" PostTypeId="2" ParentId="673" CreationDate="2011-02-08T17:53:28.233" Score="3" Body="&lt;p&gt;I managed to get around a generic array by pulling out the numbers from the name= attribute on each form field with the following:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// Pulls numbers from submitted &quot;ticket_fields&quot; which are stored in the name= attribute.&#xA;// Used to iterate through the dynamically generated &quot;ticket_fields&quot;&#xA;var numArray = new Array();&#xA;$(':input[name^=&quot;ticket_fields&quot;]').each(function(){&#xA;    fieldId = $(this).attr('name').replace(/\D/g, &quot;&quot;);&#xA;    if ($.inArray(fieldId,numArray) &amp;gt; -1) { } else { numArray.push(fieldId); }          &#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This makes it much friendlier, so rather than numArray having a ridiculous level of integers to iterate through, it gets exactly the right values from the form fields themselves every time. Also allows it to scale infinitely.&lt;/p&gt;&#xA;" OwnerUserId="1533" LastActivityDate="2011-02-08T17:53:28.233" CommentCount="0" />
  <row Id="698" PostTypeId="1" CreationDate="2011-02-08T17:37:42.390" Score="9" ViewCount="2596" Body="&lt;p&gt;I recently had a discussion in the forum of an API, because they changed an exception from checked to unchecked. I believed it needs to be checked, because it is recoverable. The arguments of &quot;the other side&quot; were verbosity and tediousness of try/catch or throws.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If it were purely theoretical question, I'd be right, but I agree that in practice it is sometimes tedious to write all these try/catches just for the sake of rethrowing unchecked exceptions, or logging.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So, an idea came to my mind, and I wonder whether it's viable. I'll illustrate with simple code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public interface Foo {&#xA;    String foo() throws Exception;&#xA;}&#xA;&#xA;public interface EasyFoo extends Foo {&#xA;    String foo();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;These are two interfaces that define the same method (and this is enforced by inheritance), but the &quot;easy&quot; version does not define throwing checked exceptions. Then come 2 default implementations:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public class FooImpl implements Foo {&#xA;&#xA;    @Override&#xA;    public String foo() throws Exception {&#xA;        return &quot;foo&quot;;&#xA;    }&#xA;}&#xA;&#xA;public class EasyFooImpl implements EasyFoo {&#xA;&#xA;    Foo foo;&#xA;&#xA;    public EasyFooImpl(Foo foo) {&#xA;        this.foo = foo;&#xA;    }&#xA;&#xA;    @Override&#xA;    public String foo() {&#xA;        try {&#xA;            return foo.foo();&#xA;        } catch (Exception ex) {&#xA;            throw new RuntimeException(ex);&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The latter delegates to the former, wrapping all exceptions in runtime exceptions.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And finally a factory:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public class FooFactory {&#xA;    public static Foo createFoo() {&#xA;        return new FooImpl();&#xA;    }&#xA;&#xA;    public static EasyFoo createEasyFoo() {&#xA;        return new EasyFooImpl(new FooImpl());&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The benefits:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;the user of the API can choose how he likes to use the implementation. If he doesn't intend to do anything with the checked exceptions, he can use the &quot;easy&quot; version&lt;/li&gt;&#xA;&lt;li&gt;you support only one interface. The 2nd is the same, and you'll just have to add the methods that you have in the main one.&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;the user can use the &lt;code&gt;EasyFoo&lt;/code&gt; in places where &lt;code&gt;Foo&lt;/code&gt; is required:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;EasyFoo foo = FooFactory.createEasyFoo();&#xA;helper.doSomething(foo); // which is public void doSomething(Foo foo);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Enough foos - the question is, is this a viable solution that can reduce verbosity while retaining the good sides of checked exceptions?&lt;/p&gt;&#xA;" OwnerUserId="1577" OwnerDisplayName="Bozho" LastActivityDate="2014-05-31T03:49:11.380" Title="Providing unchecked exception &quot;wrapper&quot; interfaces for an API with checked exceptions" Tags="&lt;java&gt;&lt;api&gt;&lt;exception&gt;&lt;exception-handling&gt;" AnswerCount="5" CommentCount="21" FavoriteCount="2" />
  <row Id="699" PostTypeId="2" ParentId="505" CreationDate="2011-02-08T20:52:58.667" Score="1" Body="&lt;p&gt;I'm a few years out of RoR, but worked for a company that was heavy on testing an we used RSpec.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In a case like this we would have tested some additional points, mainly about the content of the response. A few lines like (syntax may be totally wrong, as said I'm out of this):&lt;/p&gt;&#xA;&#xA;&lt;p&gt;test the amount of records&#xA;@programs.should.have(30).records&lt;/p&gt;&#xA;&#xA;&lt;p&gt;then there was a command to test if certain records are in the result&#xA;@programs.should.contain(...)&#xA;this requires fixtures of course.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The idea behind this was to make sure we could replace a certain plugin against a new one and be sure it doesn't break anything or contains bugs. (For example the acts_as_taggable plugin had a bug that made it impossible to delete tags, thing was running into an infinite loop)&#xA;And of course to avoid programmers to make changes while testing in the browser or similar. With will_paginate a typical bug would be to set the pagination to 10 to see several pages in the browser (because there are only 20 records in the fixtures...) and forget to set this value back to 30. And if it's not the programmer, then maybe the guy working on the HTML/CSS. We made sure every of those details were tested&lt;/p&gt;&#xA;&#xA;&lt;p&gt;More tests would make sure that the right file would be used for rendering. &#xA;something like response.should.render_template(name)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This seems to be a lot of work. But on the positive side: When my first web site for a customer went online, after six weeks of programming and my humble 3 months of knowing about Ruby on Rails, it had no bugs at all and stood 1.000 hits/minute without a single line of code to be changed.&lt;/p&gt;&#xA;" OwnerUserId="741" LastActivityDate="2011-02-08T20:52:58.667" CommentCount="0" />
  <row Id="700" PostTypeId="2" ParentId="698" CreationDate="2011-02-08T21:22:37.817" Score="1" Body="&lt;p&gt;Ok, I'm going to assume that this is a honest-to-goodness exceptional case, that is extremely unlikely to happen. It isn't like java.sql, that throws an exception when opening a connection fails, which can happen very easily and should be handled by returning &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If there are people who want this exception unchecked, they should write their own wrapper for it, IMO. If you did want it in the library, though, I'd do it exactly as you did for interfaces. The unchecked version doesn't depend on the checked vesion's implementation, so you only ever need one wrapper &lt;code&gt;EasyFooImpl&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I would wonder about the design of the library if I ever saw that. Checked or unchecked, it's best to avoid throwing exceptions altogether. There are only two valid reasons I see as being &quot;exception-worthy&quot;:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Where an unknown operation leaves the code in a unknown/invalid state. This should unrecoverable by the code that throws the exception.&lt;/li&gt;&#xA;&lt;li&gt;Where it is impossible to return an invalid state, such as &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt;. An example that comes to mind is &lt;code&gt;Integer.parse()&lt;/code&gt;. You can't return &lt;code&gt;null&lt;/code&gt;; it requires &lt;code&gt;int&lt;/code&gt;. And you can't return &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;NAN&lt;/code&gt; because that is in the valid return set of the method. An exception the cleanest, most readable way you can signal that the string is unparsable to an integer.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="110" LastActivityDate="2011-02-08T21:22:37.817" CommentCount="5" />
  <row Id="701" PostTypeId="2" ParentId="698" CreationDate="2011-02-09T00:55:02.890" Score="4" Body="&lt;p&gt;Just accept the fact that the exception is unchecked and move on.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The industry is moving away from checked exceptions: C++ never had them, C# decided not to follow Java in this place, and the latest frameworks for Java are using unchecked exceptions.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Face it, checked exceptions are a nice idea that doesn't work in practice.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As a result, the thing you try in your code, will never pass any code review I'll be part of.&lt;/p&gt;&#xA;" OwnerUserId="1492" LastActivityDate="2011-02-09T00:55:02.890" CommentCount="3" />
  <row Id="702" PostTypeId="1" AcceptedAnswerId="704" CreationDate="2011-02-09T01:09:51.197" Score="4" ViewCount="520" Body="&lt;p&gt;I have a rectangle with size &lt;code&gt;w&lt;/code&gt; and height &lt;code&gt;h&lt;/code&gt;. Now I want to split this rectangle into &lt;code&gt;n&lt;/code&gt; new rectangles that are as similar as possible to a square. Afterwards I'd like to calculated the center of each square.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public static List&amp;lt;Point&amp;gt; getCenters(int number, double width, double height)&#xA;    {&#xA;        List&amp;lt;Point&amp;gt; points = new List&amp;lt;Point&amp;gt;();&#xA;        int originalNumberOfSquares = number;&#xA;        int numberOfSquares = number;&#xA;        if (numberOfSquares % 2 == 1)&#xA;        {&#xA;            numberOfSquares++;&#xA;        }&#xA;        int rectangleWidth = Convert.ToInt32(width);&#xA;        int rectangleHeight = Convert.ToInt32(height);&#xA;&#xA;        double minDistance = Double.MaxValue;&#xA;        int nSquaresInRow = -1;&#xA;        int nSquaresInColumn = -1;&#xA;&#xA;        for (int i = 0; i &amp;lt;= numberOfSquares; i++)&#xA;        {&#xA;            for (int j = 0; j &amp;lt;= numberOfSquares; j++)&#xA;            {&#xA;                if (i * j == numberOfSquares)&#xA;                {&#xA;                    if (Math.Abs(i - j) &amp;lt; minDistance)&#xA;                    {&#xA;                        minDistance = Math.Abs(i - j);&#xA;                        nSquaresInRow = i;&#xA;                        nSquaresInColumn = j;&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;&#xA;        int squareWidth = rectangleWidth / nSquaresInColumn;&#xA;        int squareHeight = rectangleHeight / nSquaresInRow;&#xA;&#xA;        for (int r = 0; r &amp;lt; originalNumberOfSquares; r++)&#xA;        {&#xA;            int xSquareCenter = (((r + 1) * 2) - 1) * (squareWidth / 2);&#xA;            while (xSquareCenter &amp;gt; rectangleWidth)&#xA;            {&#xA;                xSquareCenter = xSquareCenter - rectangleWidth;&#xA;            }&#xA;&#xA;            int row = (r / nSquaresInColumn) + 1;&#xA;            int ySquareCenter = ((2 * row) - 1) * (squareHeight / 2);&#xA;&#xA;            points.Add(new Point(Convert.ToDouble(xSquareCenter), Convert.ToDouble(ySquareCenter)));&#xA;        }&#xA;&#xA;        return points;&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now the code works, but I think it's a little bit ugly. Any hints on how I can improve it?&lt;/p&gt;&#xA;" OwnerUserId="40" LastEditorUserId="9357" LastEditDate="2015-07-04T08:23:08.053" LastActivityDate="2015-07-04T08:23:08.053" Title="Find the center of n squares which together build a rectangle" Tags="&lt;c#&gt;&lt;algorithm&gt;&lt;computational-geometry&gt;" AnswerCount="3" CommentCount="3" />
  <row Id="703" PostTypeId="2" ParentId="702" CreationDate="2011-02-09T02:11:04.963" Score="3" Body="&lt;p&gt;Your first step should be to use meaningful variable names, even for your looping variables. I've never looked at this code before. I have no idea what it's doing. When other members of your team (if you have one) look at this code, they'll have no idea what's happening. If you come back to this code in a few days, weeks, months, etc., you will be in the same boat as the rest of us. Once you've given variables good names, it will be easier to reason about the code for both yourself and anyone else who comes after you. In turn, it will be easier to give additional refactoring advice, if appropriate.&lt;/p&gt;&#xA;" OwnerUserId="153" LastActivityDate="2011-02-09T02:11:04.963" CommentCount="1" />
  <row Id="704" PostTypeId="2" ParentId="702" CreationDate="2011-02-09T02:25:07.823" Score="5" Body="&lt;p&gt;A couple of notes:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The width, height and number of sub-rectangles should be parameters, not local variables. If you should, for example, want to print out the centres for differing values of &lt;code&gt;w&lt;/code&gt;, &lt;code&gt;h&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt;, calling the method in a loop with different arguments is more convenient than changing the code and rerunning it multiple times.&lt;/li&gt;&#xA;&lt;li&gt;Determining the size of the sub-rectangles and collecting their centres could be done in two separate methods because a) they can easily be separated as they're not intertwined b) it makes it immediately obvious which part is done by which code and c) they might be useful on their own.&lt;/li&gt;&#xA;&lt;li&gt;Rather than outputting the centres, you should return them in an array or list. This way you can also easily use the method in a context where you don't want to print the centres or want to do something to them before printing. Also it's generally a good practice to separate IO code from logic code.&lt;/li&gt;&#xA;&lt;li&gt;Since both &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; are ints and thus &lt;code&gt;minDistance&lt;/code&gt; will only ever hold integer values, it should have type &lt;code&gt;int&lt;/code&gt;, not &lt;code&gt;double&lt;/code&gt;. Otherwise it leaves the impression that it could possibly have a non-integer value.&lt;/li&gt;&#xA;&lt;li&gt;On a similar note you should probably make the type of &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; &lt;code&gt;int&lt;/code&gt; as well since the first thing you do is to truncate them to &lt;code&gt;int&lt;/code&gt;s. Having their type be &lt;code&gt;double&lt;/code&gt; might make the user of your method think the results will be more accurate than they really are.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="128" LastEditorUserId="128" LastEditDate="2011-02-09T02:43:06.543" LastActivityDate="2011-02-09T02:43:06.543" CommentCount="1" />
  <row Id="705" PostTypeId="2" ParentId="341" CreationDate="2011-02-09T10:06:30.763" Score="2" Body="&lt;p&gt;I'm not really sure what you want from this, if all you want is to make it more readable, then a few well placed new-lines will make a world of difference. If you want to reduce the amount of code, I don't think there is much room for that other than switching constructors for &lt;code&gt;InputScopeName&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;txtBox.InputScope = new InputScope&#xA;{&#xA;    Names =&#xA;    {&#xA;        new InputScopeName(InputScopeNameValue.Text)&#xA;    }&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note: &lt;code&gt;Text&lt;/code&gt; does not appear to be a &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.windows.input.inputscopenamevalue.aspx&quot; rel=&quot;nofollow&quot;&gt;valid member&lt;/a&gt; of &lt;code&gt;InputScopeNameValue&lt;/code&gt;, but ill keep it for the sake of consistency with the question.&lt;/p&gt;&#xA;" OwnerUserId="1432" LastActivityDate="2011-02-09T10:06:30.763" CommentCount="0" />
  <row Id="706" PostTypeId="1" CreationDate="2011-02-09T15:46:57.603" Score="7" ViewCount="248" Body="&lt;p&gt;Here's a function that interpolates between a given value and a value fetched out of a legacy serialization buffer:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;template&amp;lt;typename T&amp;gt;&#xA;T interpolate(Buffer&amp;amp; buffer, const T currentValue, const float prop)&#xA;{&#xA;    T bufferValue;&#xA;    buffer.readT(&amp;amp;buferValue);&#xA;    return currentValue + (bufferValue-currentValue)*prop;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This works great for &lt;code&gt;interpolate&amp;lt;float&amp;gt;&lt;/code&gt; and &lt;code&gt;interpolate&amp;lt;int&amp;gt;&lt;/code&gt; and so on. However if I want to pass a more complex structure such as a vector, I'd rather the currentValue parameter was passed by reference instead of by value.  I can use overloading to handle that situation:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// in addition to original function&#xA;Vector interpolate(Buffer&amp;amp; buffer, const Vector&amp;amp; currentValue, float prop)&#xA;{&#xA;    Vector bufferValue;&#xA;    buffer.readT(bufferValue);&#xA;    return currentValue + (bufferValue-currentValue)*prop;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Even if you rip out the lerp into a helper function, it still isn't ideal to repeat the function like this when the only difference from the original is the &amp;amp; parameter, especially if there's more than one type I'd like to pass by reference.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I can use traits to auto-detect when to use a reference:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// to replace original function&#xA;&#xA;template&amp;lt;typename T&amp;gt;&#xA;struct RefTrait { typedef const T Ref; }&#xA;&#xA;template&amp;lt;&amp;gt;&#xA;struct RefTrait&amp;lt;Vector&amp;gt; { typedef const Vector&amp;amp; Ref; }&#xA;&#xA;template&amp;lt;typename T&amp;gt;&#xA;T interpolate(Buffer&amp;amp; buffer, typename RefTrait&amp;lt;T&amp;gt;::Ref currentValue, const float prop)&#xA;{&#xA;    T bufferValue;&#xA;    buffer.readT(&amp;amp;buferValue);&#xA;    return currentValue + (bufferValue-currentValue)*prop;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;However now the compiler can't induce the type of T by default, and the calling code has to explicitly state type:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;floatVal = interpolate&amp;lt;float&amp;gt;(buffer, floatVal, 0.5f);&#xA;vectorVal = interpolate&amp;lt;Vector&amp;gt;(buffer, vectorVal, 0.5f);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Is there anyway to have compact calling code as well as a single defined function?&lt;/p&gt;&#xA;" OwnerUserId="145" LastEditorUserId="18427" LastEditDate="2014-12-15T16:24:30.560" LastActivityDate="2014-12-15T16:24:30.560" Title="Interpolating given value and legacy value from serialization buffer" Tags="&lt;c++&gt;&lt;serialization&gt;" AnswerCount="1" CommentCount="8" />
  <row Id="707" PostTypeId="1" AcceptedAnswerId="709" CreationDate="2011-02-09T15:50:05.563" Score="7" ViewCount="3180" Body="&lt;p&gt;I am building up a basic folder tree with a list of strings in the form /root/node/node/node. Here is the basic algorithm I am using currently to build this collection and fill in my &lt;code&gt;TreeGridView&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// This method gets the list of folders and leaves, then trims out any folder paths&#xA;// that are already encompassed in a larger folder path, the idea is that it causes&#xA;// less work when adding the actual tree nodes (I may be wrong in this assumption)&#xA;List&amp;lt;string&amp;gt; BuildFinalList()&#xA;{&#xA;    // This list is a collection of root folder paths and leaf folder names&#xA;    // i.e. pair(&quot;/root/node/node&quot;, &quot;node&quot;), pair(&quot;/root/node&quot;, &quot;node)&#xA;    List&amp;lt;KeyValuePair&amp;lt;string, string&amp;gt;&amp;gt; folders = GetListOfFolders();&#xA;    var paths = new List&amp;lt;string&amp;gt;();&#xA;    foreach(var folder in folders)&#xA;    {&#xA;        var leaf = folder.Value;&#xA;        var root = folder.Key;&#xA;        paths.Add(string.Concat(root, &quot;/&quot;, leaf);&#xA;    }&#xA;    paths.Sort(_INVERSE_LENGTH_COMPARE); // this sorts the list longest to shortest&#xA;&#xA;    // Iterate the computed paths from longest to shortest, if a path is not&#xA;    // encompassed by an existing path in the final list, add it to the&#xA;    // final list, otherwise just move to the next path&#xA;    var finalList = new List&amp;lt;string&amp;gt;();&#xA;    foreach(var path in paths)&#xA;    {&#xA;        bool found = false;&#xA;        foreach(var item in finalList)&#xA;        {&#xA;            if (item.StartsWith(path, StringComparison.Ordinal))&#xA;            {&#xA;                found = true;&#xA;                break;&#xA;            }&#xA;        }&#xA;&#xA;        if (!found)&#xA;        {&#xA;            finalList.Add(path);&#xA;        }&#xA;    }&#xA;    return finalList;&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Once I have the final list built, I then add the nodes to the tree (for simplification, I have removed the calls to end update and begin update of the tree that contains the root node):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;void FillTreeNodes(TreeNode root)&#xA;{&#xA;    var rootText = root.Text;&#xA;    var rootTextLength = rootText.Length;&#xA;    var nodeStrings = BuildFinalList();&#xA;    foreach(var nodeString in nodeStrings)&#xA;    {&#xA;        var roots = nodeString.Split(new char[] { '/' },&#xA;            StringSplitOptions.RemoveEmptyEntries);&#xA;&#xA;        // The initial parent is the root node&#xA;        var parentNode = root;&#xA;        var sb = new StringBuilder(rootText, nodeString.Length + rootTextLength);&#xA;        for(int rootIndex = 0; rootIndex &amp;lt; roots.Length; rootIndex++)&#xA;        {&#xA;            // Build the node name&#xA;            var parentName = roots[rootIndex];&#xA;            sb.Append(&quot;/&quot;);&#xA;            sb.Append(parentName);&#xA;            var nodeName = sb.ToString();&#xA;&#xA;            // Search for the node&#xA;            var index = parentNode.Nodes.IndexOfKey(nodeName);&#xA;            if (index == -1)&#xA;            {&#xA;                 // Node was not found, add it&#xA;                 var temp = new TreeNode(parentName, 1, 1);&#xA;                 temp.Name = nodeName;&#xA;                 parentNode.Nodes.Add(temp);&#xA;                 parentNode = temp;&#xA;            }&#xA;            else&#xA;            {&#xA;                 // Node was found, set that as parent and continue&#xA;                 parentNode = parentNode.Nodes[index];&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1572" LastEditorUserId="22222" LastEditDate="2014-09-09T07:24:26.427" LastActivityDate="2014-09-09T23:21:10.013" Title="Basic folder tree with a list of strings" Tags="&lt;c#&gt;&lt;tree&gt;" AnswerCount="4" CommentCount="0" />
  <row Id="708" PostTypeId="1" AcceptedAnswerId="710" CreationDate="2011-02-09T15:57:29.487" Score="4" ViewCount="264" Body="&lt;p&gt;For interop purpose, this is something that I always do (C#):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; public static extern BigObject InteropWithCPlusPlus();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;where &lt;code&gt;BigObject&lt;/code&gt; is ( you guess it) a big object, it's not something small like &lt;code&gt;int&lt;/code&gt;, or &lt;code&gt;double&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Now, is this a good practice? Or is it better to do the interop in this way:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public static extern void InteropWithCPlusPlus(ref BigObject bigObject);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I prefer the first one as it is easier to read and understand, but I afraid that it comes with performance penalty when the return object is a large, consuming memory one. &lt;/p&gt;&#xA;" OwnerUserId="1513" LastEditorUserId="136" LastEditDate="2011-02-20T21:15:19.100" LastActivityDate="2011-02-20T21:15:19.100" Title="Interop: Return Parameter Method as Void" Tags="&lt;c#&gt;&lt;c++&gt;" AnswerCount="1" CommentCount="2" FavoriteCount="1" />
  <row Id="709" PostTypeId="2" ParentId="707" CreationDate="2011-02-09T16:16:06.593" Score="5" Body="&lt;p&gt;One improvement that comes to mind is:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;bool found = false;&#xA;foreach(var item in finalList)&#xA;{&#xA;    if (item.StartsWith(path, StringComparison.Ordinal))&#xA;    {&#xA;        found = true;&#xA;        break;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Finding out whether a condition is met for any item in a collection is a common enough problem that LINQ has a method for that: &lt;code&gt;Enumerable.Any&lt;/code&gt;. Using that the above code can be written as just:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;bool found = finalList.Any(item =&amp;gt;&#xA;    item.StartsWith(path,StringComparison.Ordinal);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Which is both shorter and simpler.&lt;/p&gt;&#xA;" OwnerUserId="128" LastActivityDate="2011-02-09T16:16:06.593" CommentCount="1" />
  <row Id="710" PostTypeId="2" ParentId="708" CreationDate="2011-02-09T16:19:17.967" Score="3" Body="&lt;p&gt;I don't think there would be too much of a difference. You have to use a reference anyway, because non-native types are stored as references. On x86 processors, returns are placed in register A, which is limited length. So, your C++ program would be either returning a reference to &lt;code&gt;BigObject&lt;/code&gt; or modifying an existing instance of it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The area where I can see a performance hit is in memory allocation. If you are making that call, using the object, and then discarding it, it would be faster to create on single instance in your C# code and use that rather than allocating memory every time. You'll get diminishing returns for small numbers of calls, though; unless you have a couple thousand in a given program run, you probably won't notice the hit either way.&lt;/p&gt;&#xA;" OwnerUserId="110" LastActivityDate="2011-02-09T16:19:17.967" CommentCount="2" />
  <row Id="711" PostTypeId="2" ParentId="654" CreationDate="2011-02-09T17:37:16.390" Score="17" Body="&lt;p&gt;There is a lot that needs to be taken into consideration when implementing a threaded work queue and I wouldn't recommend doing it manually unless you've got a really good reason because existing solutions are tested and reliable and without very specific design needs and some hardcore coding to go with it you'll likely wind up with something less efficient/powerful than the existing options. That said, as an exercise this can be a very educational challenge and I'll try to review it as such; production relevant notes are below.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Technically it's just a matter of preference, but generally speaking, private member variables don't have capitalized first letters to help differentiate between public members and internal implementation details (typical .NET style is CamelCase for public members and pascalCase for fields/variables/parameters). &lt;/p&gt;&#xA;&#xA;&lt;p&gt;It seems you are using the &lt;code&gt;Complete&lt;/code&gt; event for two different meanings; you should make this two separate events. I wouldn't bother with &lt;code&gt;RaiseCompleteEventIfQueueEmpty&lt;/code&gt;, instead just have an &lt;code&gt;ItemComplete&lt;/code&gt; event and a &lt;code&gt;QueueComplete&lt;/code&gt; event or something like that and always raise the events; if the caller doesn't care about one or the other (or either) they simply don't attach handlers to them.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There are synchronization issues due to your locking strategy. Because your &lt;code&gt;AddTask&lt;/code&gt; and &lt;code&gt;CheckQueue&lt;/code&gt; methods use different lock objects it's possible to be adding to and accessing the queue at the same time. Because &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/7977ey2c.aspx&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;Queue&lt;/code&gt;&lt;/a&gt; is not inherently thread-safe this could cause issues. You're better off using a single lock between the two. If you're on framework 4.0 you may want to consider using &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd267265.aspx&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;ConcurrentQueue&lt;/code&gt;&lt;/a&gt; instead.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.componentmodel.backgroundworker.aspx&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;BackgroundWorker&lt;/code&gt;&lt;/a&gt; contains provisions intended to make it easy to setup simple background tasks separate from a UI thread. &lt;code&gt;BackgroundWorker&lt;/code&gt; is also a Component, which technically means you should Dispose of it when you're done (not from its own thread) although I don't think its implementation depends on it currently, that could change and you want to follow proper practices regarding &lt;code&gt;IDisposable&lt;/code&gt;. It doesn't look like you need much of the convenience it offers and are mainly using it for the completion event, which you could implement yourself pretty easily. You would have more control and less overhead using &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.threading.thread.aspx&quot; rel=&quot;nofollow&quot;&gt;Thread&lt;/a&gt; which should also keep you conscious of everything that's happening in something this low level. &lt;a href=&quot;http://stackoverflow.com/questions/1506838/backgroundworker-vs-background-thread&quot;&gt;Here's a brief discussion on Stack Overflow&lt;/a&gt;. Also worth noting: &lt;code&gt;BackgroundWorker&lt;/code&gt; uses &lt;code&gt;BeginInvoke&lt;/code&gt; internally which executes the work on a &lt;code&gt;ThreadPool&lt;/code&gt; thread.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In regard to using &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.threading.threadstart.aspx&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;ThreadStart&lt;/code&gt;&lt;/a&gt;, it's just a delegate like any other, but if you are wanting to parallelize work, it's likely that you will want to provide a context or workload to each thread. It's possible to work around this a few ways, including using closures when defining the delegate but that's messy and not suitable for all situations. The Thread class, which uses &lt;code&gt;ThreadStart&lt;/code&gt;, also supports &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.threading.parameterizedthreadstart.aspx&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;ParameterizedThreadStart&lt;/code&gt;&lt;/a&gt;. Since you're using Invoke you can probably accept any delegate and any number of parameters, perhaps like so:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private readonly Queue&amp;lt;KeyValuePair&amp;lt;Delegate, object[]&amp;gt;&amp;gt; Queue = new Queue&amp;lt;KeyValuePair&amp;lt;Delegate, object[]&amp;gt;&amp;gt;();&#xA;private readonly object queueSync = new object();&#xA;&#xA;public void AddTask&amp;lt;F&amp;gt;(F task, params object[] parameters) where F : Delegate&#xA;{&#xA;    lock (queueSync)&#xA;    {&#xA;        if (WorkingThreads.Count == ThreadsMaxCount)&#xA;        {&#xA;            Queue.Enqueue(new KeyValuePair&amp;lt;Delegate, object[]&amp;gt;(task, parameters));&#xA;        }&#xA;        else&#xA;        {&#xA;            StartThread(task, parameters);&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;private void StartThread(Delegate task, object[] parameters)&#xA;{&#xA;    WorkingThreads.Add(task);&#xA;    BackgroundWorker thread = new BackgroundWorker();&#xA;    thread.DoWork += delegate { task.Invoke(parameters); };&#xA;    thread.RunWorkerCompleted += delegate { ThreadCompleted(task); };&#xA;    thread.RunWorkerAsync();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Warnings: this code doesn't take into account my other suggestions and was written ad-hoc in the text editor here so it has not been compiled or tested; the idea is all I'm trying to demonstrate. There are several better ways to make use of generics or the delegate choice in general and you would probably also want to provide the context data in your completion event.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You should probably provide a little more information in your completion event so that the attached code can see &lt;em&gt;what&lt;/em&gt; completed (consider one event handler can be used for many threads and even many pools). Use an object that inherits from EventArgs to contain your task (and the parameters if you take that bit of advice).&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;In regard to Darragh's answer and your comments there: if you would like to leverage the &lt;code&gt;ThreadPool&lt;/code&gt; but need to know when work is complete you can use Task Parallel Library which now ships with 4.0 to use Task objects which by default are scheduled using the &lt;code&gt;ThreadPool&lt;/code&gt;. Alternatively, if your tasks will be very long running and you still want to run on your own threads or specify your own concurrency regulations you can &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ee789351.aspx&quot; rel=&quot;nofollow&quot;&gt;implement&lt;/a&gt; a &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd997402.aspx&quot; rel=&quot;nofollow&quot;&gt;Task Scheduler&lt;/a&gt; and continue to leverage the existing patterns/classes. This will promote usability and maintenance and if at some point you wanted to use a different scheduling mechanism it would require minimal change. It should be noted (as can be see in the documentation above) that there is already support for long running tasks not using the &lt;code&gt;ThreadPool&lt;/code&gt; even in the default scheduler.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The following free &quot;books&quot; have a lot of good information, both on the new parallelism extensions to the framework (TPL, PLINQ, Parallel.For, etc.) as well as information on synchronization primitives and the raw patterns used to manage multi-threaded workloads:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://www.microsoft.com/downloads/en/details.aspx?FamilyID=86b3d32b-ad26-4bb8-a3ae-c1637026c3ee&amp;amp;displaylang=en&quot; rel=&quot;nofollow&quot;&gt;Patterns for Parallel Programming: Understanding and Applying Parallel Patterns with the .NET Framework 4&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ff963553.aspx&quot; rel=&quot;nofollow&quot;&gt;Parallel Programming with Microsoft .NET&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://www.albahari.com/threading/&quot; rel=&quot;nofollow&quot;&gt;Threading in C#&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Most of these contain very similar information, but each has their own style as well as different juicy nuggets of wisdom.&lt;/p&gt;&#xA;" OwnerUserId="1349" LastEditorUserId="22222" LastEditDate="2014-04-07T07:50:04.723" LastActivityDate="2014-04-07T07:50:04.723" CommentCount="2" />
  <row Id="712" PostTypeId="2" ParentId="654" CreationDate="2011-02-09T19:56:25.417" Score="3" Body="&lt;p&gt;We use &lt;a href=&quot;http://smartthreadpool.codeplex.com/&quot; rel=&quot;nofollow&quot;&gt;Smart Thread Pool&lt;/a&gt;.  It is simple and tested.  You should be able to implement your requirements with less effort and more confidence by building on it rather than implementing your own.&lt;/p&gt;&#xA;" OwnerUserId="259" LastActivityDate="2011-02-09T19:56:25.417" CommentCount="1" />
  <row Id="713" PostTypeId="2" ParentId="654" CreationDate="2011-02-09T20:20:20.553" Score="4" Body="&lt;p&gt;I know you have already marked one of the answers as the answer, and rightly so, it is very complete and helpful. I am adding this answer as well as no one mentioned this and it is part of your first question: 1. Do those locks make sense? Should there be other locks as well?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In regards to the second half of that, Should there be other locks as well. Yes. You are using a &lt;code&gt;HashSet&lt;/code&gt; to keep track of working threads. You are adding to, removing from, and getting the count of this set without any locking. That is a disaster waiting to happen. You need to mutex around your reads and writes to the &lt;code&gt;HashSet&lt;/code&gt;. As has already been mentioned, if you can use .Net 4.0 then there is a &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd381779.aspx&quot; rel=&quot;nofollow&quot;&gt;ConcurrentBag&lt;/a&gt; collection that you can use. Otherwise you need to add another lock object and lock around access to your &lt;code&gt;HashSet&lt;/code&gt;.&lt;/p&gt;&#xA;" OwnerUserId="1572" LastActivityDate="2011-02-09T20:20:20.553" CommentCount="3" />
  <row Id="714" PostTypeId="1" AcceptedAnswerId="750" CreationDate="2011-02-09T21:06:39.297" Score="9" ViewCount="1359" Body="&lt;p&gt;Could this be made more efficient, and/or simpler?  It's a path-finding function.  It seems to work, but do you see any potential cases where it could fail?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// Searches for a path from [start] to [end].&#xA;// Predicate [passable] should take an std::pair&amp;lt;int,int&amp;gt; and return true if the node is passable.&#xA;// Nodes in path are stored in [out].&#xA;// Return value is a pair.  With first being a bool to indicate if a path was found,&#xA;// and second an iterator for the end of the path&#xA;template&amp;lt;typename OutputIterator, typename PassablePR&amp;gt;&#xA;std::pair&amp;lt;bool, OutputIterator&amp;gt; ShortestPath(std::pair&amp;lt;int,int&amp;gt; start, std::pair&amp;lt;int,int&amp;gt; end, PassablePR passable, OutputIterator out)&#xA;{&#xA;    typedef std::pair&amp;lt;int,int&amp;gt; node;&#xA;&#xA;    std::pair&amp;lt;bool, OutputIterator&amp;gt; ret(false, out);&#xA;&#xA;    // queue of nodes expanding out from the starting point&#xA;    std::queue&amp;lt;node&amp;gt; q;&#xA;&#xA;    // keep track of visited nodes so we don't visit them twice&#xA;    std::vector&amp;lt;node&amp;gt; visited_nodes;&#xA;    auto visited = [&amp;amp;visited_nodes] (node n) {&#xA;        return std::find(visited_nodes.begin(), visited_nodes.end(), n) != visited_nodes.end();&#xA;    };&#xA;&#xA;    // link child nodes to parents&#xA;    std::map&amp;lt;node,node&amp;gt; path_tree;&#xA;&#xA;    q.push(start);&#xA;    while(q.empty() == false)&#xA;    {&#xA;        auto parent = q.front();&#xA;        if(passable(parent) &amp;amp;&amp;amp; !visited(parent))&#xA;        {&#xA;            visited_nodes.push_back(parent);&#xA;&#xA;            if(parent == end)&#xA;            {&#xA;                ret.first = true;&#xA;                std::vector&amp;lt;std::pair&amp;lt;int,int&amp;gt;&amp;gt; path;&#xA;                auto i = path_tree.find(parent);&#xA;                while(i != path_tree.end())&#xA;                {&#xA;                    path.push_back(i-&amp;gt;first);&#xA;                    parent = i-&amp;gt;second;&#xA;                    path_tree.erase(i);&#xA;                    i = path_tree.find(parent);&#xA;                }&#xA;&#xA;                // path is currently from end to start, so reverse it&#xA;                std::copy(path.rbegin(), path.rend(), ret.second);&#xA;&#xA;                return ret;&#xA;            }&#xA;&#xA;            auto child(parent);&#xA;&#xA;            // node to the left         &#xA;            --child.first;&#xA;            q.push(child);          &#xA;            if(path_tree.find(child) == path_tree.end())&#xA;                path_tree[child] = parent;&#xA;&#xA;            // right&#xA;            child.first += 2;&#xA;            q.push(child);&#xA;            if(path_tree.find(child) == path_tree.end())&#xA;                path_tree[child] = parent;&#xA;&#xA;            // above&#xA;            --child.first;&#xA;            --child.second;&#xA;            q.push(child);&#xA;            if(path_tree.find(child) == path_tree.end())&#xA;                path_tree[child] = parent;&#xA;&#xA;            // and below&#xA;            child.second += 2;&#xA;            q.push(child);&#xA;            if(path_tree.find(child) == path_tree.end())&#xA;                path_tree[child] = parent;&#xA;        }&#xA;        q.pop();&#xA;    }&#xA;    return ret;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Testing it out:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;int main()&#xA;{&#xA;    int grid[5][5] =&#xA;    { { 0, 1, 0, 0, 0 },&#xA;      { 0, 0, 0, 1, 0 },&#xA;      { 0, 1, 0, 1, 0 },&#xA;      { 0, 1, 0, 1, 0 },&#xA;      { 0, 0, 0, 1, 0 } };&#xA;&#xA;    std::vector&amp;lt;std::pair&amp;lt;int,int&amp;gt;&amp;gt; path;&#xA;&#xA;    auto ret = ShortestPath(std::pair&amp;lt;int,int&amp;gt;(0,0), std::pair&amp;lt;int,int&amp;gt;(4,4),&#xA;        [&amp;amp;grid] (std::pair&amp;lt;int,int&amp;gt; n) -&amp;gt; bool {&#xA;            if(ben::WithinBoundsInclusive(std::pair&amp;lt;int,int&amp;gt;(0,0), std::pair&amp;lt;int,int&amp;gt;(4,4), n) == false)&#xA;                return false;&#xA;            return grid[n.first][n.second] == 0;&#xA;        },&#xA;        std::back_inserter(path));&#xA;&#xA;    if(ret.first)&#xA;    {&#xA;        std::cout &amp;lt;&amp;lt; &quot;Path found\n&quot;;&#xA;&#xA;        std::for_each(path.begin(), path.end(),&#xA;            [](std::pair&amp;lt;int,int&amp;gt; n) {&#xA;                std::cout &amp;lt;&amp;lt; '(' &amp;lt;&amp;lt; n.first &amp;lt;&amp;lt; ',' &amp;lt;&amp;lt; n.second &amp;lt;&amp;lt; &quot;)\n&quot;;&#xA;            });&#xA;    }&#xA;    else&#xA;        std::cout &amp;lt;&amp;lt; &quot;Path not found\n&quot;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1598" LastEditorUserId="22222" LastEditDate="2014-03-30T23:22:55.430" LastActivityDate="2014-03-30T23:22:55.430" Title="Path finding function" Tags="&lt;c++&gt;&lt;algorithm&gt;&lt;c++11&gt;&lt;pathfinding&gt;" AnswerCount="1" CommentCount="0" FavoriteCount="1" />
  <row Id="715" PostTypeId="2" ParentId="706" CreationDate="2011-02-10T01:55:21.953" Score="4" Body="&lt;p&gt;If I understand your question correctly, using the &lt;code&gt;RefTrait&lt;/code&gt; policy in your second solution is acceptable but you want to avoid specifying template parameters from the client code that's using it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If so then perhaps one possible idea is to create an inline wrapper function around your &lt;code&gt;interpolate&lt;/code&gt; for marshaling the call so type deduction happens automatically:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;template &amp;lt;&amp;gt;&#xA;struct RefTrait&amp;lt;Vector&amp;gt; { typedef const Vector &amp;amp;Ref; };&#xA;&#xA;template &amp;lt;typename T&amp;gt;&#xA;T interpolateImp(Buffer&amp;amp; buffer, typename RefTrait&amp;lt;T&amp;gt;::Ref currentValue, const float prop)&#xA;{&#xA;    T bufferValue;&#xA;    buffer.readT(&amp;amp;bufferValue);&#xA;    return currentValue + (bufferValue-currentValue)*prop;&#xA;}&#xA;&#xA;template &amp;lt;typename T&amp;gt;&#xA;inline T interpolate(Buffer&amp;amp; buffer, T &amp;amp;currentValue, const float prop)&#xA;{&#xA;    return interpolateImp&amp;lt;T&amp;gt;(buffer, currentValue, prop);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It doesn't avoid the overloading but it'll at least help with the automatic type-deduction when you try to use it:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;floatVal  = interpolate(buffer, floatVal, 0.5f);&#xA;vectorVal = interpolate(buffer, vectorVal, 0.5f);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And the &lt;code&gt;interpolate&lt;/code&gt; wrapper should get optimized away into just a &lt;code&gt;interpolateImp&lt;/code&gt; call when the compiler inlines it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But I would recommend taking a look at what Mike said first and find out really how much of a performance impact this is. If afterwards you still decide to pursue this route there are two things to keep in mind.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Caveat with using your current &lt;code&gt;RefTrait&lt;/code&gt;. At the moment, &lt;code&gt;T bufferValue;&lt;/code&gt; in your &lt;code&gt;interpolate&lt;/code&gt; creates a locate T variable but doesn't initialize it. This poses a problem if T = const Vector&amp;amp;. Furthermore, it also means you're unable to &lt;em&gt;change&lt;/em&gt; this T object later on should you need to. One possible way to fix it is to also add a valueType to your RefTraits policy. You would then use &lt;code&gt;typename T::valueType&lt;/code&gt; to create any locates you would need inside &lt;code&gt;interpolate&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Using templates in this matter will reduce code clarity unless you're extra dilgent. The syntax has a matter of exploding in your face and could be difficult to get right especially if you're trying to cover the funny corner cases. Be sure to weight the tradeoffs.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Edit: After thinking about my above code some more, I noticed it could be simplified a bit by just keeping the syntax the same as the OP. I've updated mines to reflect that.&lt;/p&gt;&#xA;" OwnerUserId="71" LastEditorUserId="71" LastEditDate="2011-02-10T06:22:47.697" LastActivityDate="2011-02-10T06:22:47.697" CommentCount="0" />
  <row Id="716" PostTypeId="1" AcceptedAnswerId="1365" CreationDate="2011-02-10T00:34:51.283" Score="5" ViewCount="674" Body="&lt;p&gt;I've written this rather naïve branch-and-bound based IP solver.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Are there any obvious JavaScript optimisations that could speed it up?  I am not looking for asymptotically better algorithms, just simple speed optimisations effective on problem sizes with 5-6 variables and &lt;code&gt;minSize&lt;/code&gt; values up to about 500.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/** Represents a simple 1-dimensional &#xA; * IP (Integer Programming) problem.&#xA; * @constructor&#xA; * @param {Array&amp;lt;size: Number, cost: Number&amp;gt;} priceList&#xA; *   List of costs for given sizes.&#xA; *   Note that this list will be sorted by this constructor.&#xA; */&#xA;function Prices (priceList) {&#xA;  this.prices = priceList;&#xA;  this.prices.sort (PriceCompare);&#xA;  this.minimise = PricesMinimise;&#xA;  this.pricesBB = PricesBB;&#xA;}&#xA;&#xA;/** Solves the simple 1-dimensional IP problem:&#xA; * Minimise Sum_i cost_i * x_i&#xA; *    where Sum_i size_i * x_i &amp;gt;= minSize&#xA; *      and cost_i, size_i are positive reals,&#xA; *      and x_i is a nonnegative integer. (i = 0..prices.length - 1)&#xA; *&#xA; * cost_i = this.prices[i].cost and size_i = this.prices[i].size.&#xA; *&#xA; * @param {Number} minSize  The minimum size that must be supplied.&#xA; * @return {xs: Array, cost: Number}  [x_0, x_1, ...] and total cost.&#xA; */&#xA;function PricesMinimise (minSize) {&#xA;  this.minSize = minSize;&#xA;  this.incumbent = Number.POSITIVE_INFINITY;&#xA;  this.maxCost = Number.POSITIVE_INFINITY;&#xA;  var xsCost = this.pricesBB (0, 0, 0, 0);&#xA;  xsCost.xs.reverse ();&#xA;  return xsCost;&#xA;}&#xA;&#xA;/** Solves a sub problem using only price list elements with&#xA; * index &amp;gt;= i.  It uses instance fields&#xA; * minSize: the minimum required size sum,&#xA; * incumbent: lowest full solution cost seen so far,&#xA; * maxCost: upper bound on full solution cost.&#xA; * @param {Number} i        Minimum price list index.&#xA; * @param {Number} sizeSum  Size sum already selected.&#xA; * @param {Number} costSum  Cost sum already spent.&#xA; * @param {Number} minCost  Lower bound on full solution cost in this&#xA; *                          subtree.&#xA; * @return {xs: Array, cost: Number}  A minimum candidate&#xA; *   solution, or null if none better than the incumbent were&#xA; *   found.&#xA; */&#xA;function PricesBB (i, sizeSum, costSum, minCost) {&#xA;  var price = this.prices [i];&#xA;  var size = price.size;&#xA;  var cost = price.cost;&#xA;  var xReal = (this.minSize - sizeSum) / size;&#xA;  var x = Math.ceil (xReal);&#xA;  var localCostSum;&#xA;  if (size == Number.POSITIVE_INFINITY) {&#xA;    x = 1;&#xA;    size = 0; // Avoid NaN in recursive call&#xA;    localCostSum = cost;&#xA;  } else {&#xA;    localCostSum = costSum + cost * x;&#xA;    var localMinCost = costSum + cost * xReal;&#xA;    minCost = Math.max (minCost, localMinCost);&#xA;    if (localMinCost &amp;gt;= this.incumbent) return null;&#xA;  }&#xA;  this.maxCost = Math.min (this.maxCost, localCostSum);&#xA;  var localMin = {'xs': [x], 'cost': localCostSum};&#xA;  if (localCostSum &amp;lt; this.incumbent) this.incumbent = localCostSum;&#xA;  if (localCostSum == minCost) return localMin;&#xA;  if (i &amp;lt; this.prices.length - 1)&#xA;    for (x--; x &amp;gt;= 0; x--) {&#xA;      var xsCost =&#xA;        this.pricesBB (i + 1, sizeSum + size * x, costSum + cost * x, minCost);&#xA;      if (xsCost == null) continue;&#xA;      xsCost.xs.push (x);&#xA;      localMin = xsCost;&#xA;      if (localMin.cost == minCost) return localMin;&#xA;    }&#xA;  if (localMin.cost == this.incumbent)&#xA;    return localMin;&#xA;  else&#xA;    return null;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1611" OwnerDisplayName="Arne" LastEditorUserId="22222" LastEditDate="2014-12-08T08:56:53.143" LastActivityDate="2014-12-08T08:56:53.143" Title="Branch-and-bound based IP solver" Tags="&lt;javascript&gt;&lt;algorithm&gt;&lt;optimization&gt;&lt;integer&gt;" AnswerCount="1" CommentCount="12" FavoriteCount="2" />
  <row Id="719" PostTypeId="1" CreationDate="2011-02-10T08:04:17.733" Score="5" ViewCount="559" Body="&lt;p&gt;I've got some legacy code which I need to maintain and its got this function which &lt;strong&gt;works perfectly fine&lt;/strong&gt;, but I'm trying to understand if it is working using acceptable coding practices or not... I am trying to understand if it is safe and secure to operate the site with the function as-it-is.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The function would be called as:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$this-&amp;gt;editData('users',&quot;activation_key&quot;,$_GET['key']);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The actual function (unedited):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function editData($table_name,$fldname,$fldval,$other='',$lang_flag=0)&#xA;{&#xA;&#xA;    $link = $this-&amp;gt;my_connect();&#xA;    $this-&amp;gt;my_select_db($this-&amp;gt;DATABASE_NAME,$link);&#xA;$arr_types =  array(&quot;TR_&quot;, &quot;TN_&quot;, &quot;TREF_&quot;, &quot;PHR_&quot;, &quot;PHN_&quot;, &quot;IR_&quot;, &quot;IN_&quot;, &quot;MR_&quot;, &quot;MN_&quot;, &quot;TNEF_&quot;, &quot;TRC_&quot;, &quot;TNC_&quot;, &quot;TRFN_&quot;, &quot;TNFN_&quot;,&quot;TNURL_&quot;,&quot;TRURL_&quot;);&#xA;    if (!empty($GLOBALS[&quot;HTTP_POST_VARS&quot;])) {&#xA;        reset($GLOBALS[&quot;HTTP_POST_VARS&quot;]);&#xA;        while (list($k,$v)=each($GLOBALS[&quot;HTTP_POST_VARS&quot;])) &#xA;        {&#xA;&#xA;            for($p=0;$p&amp;lt;count($arr_types);$p++)&#xA;            {&#xA;                if(stristr($k,$arr_types[$p])!=&quot;&quot;)&#xA;                {&#xA;                    $k = str_replace($arr_types[$p],&quot;&quot;,$k);&#xA;                }&#xA;            }&#xA;            ${strtolower($k)}=$v;&#xA;            //echo &quot;&amp;lt;br&amp;gt; k =$k -- v = $v&quot;;&#xA;        }   &#xA;    }&#xA;    if (!empty($_POST)) {&#xA;        reset($_POST);&#xA;        while (list($k,$v)=each($_POST)) &#xA;        {&#xA;&#xA;            for($p=0;$p &amp;lt; count($arr_types);$p++)&#xA;            {&#xA;                if(stristr($k,$arr_types[$p])!=&quot;&quot;)&#xA;                {&#xA;                    $k = str_replace($arr_types[$p],&quot;&quot;,$k);&#xA;                }&#xA;            }&#xA;            ${strtolower($k)}=$v;&#xA;            //echo &quot;&amp;lt;br&amp;gt; k =$k -- v = $v&quot;;&#xA;        }   &#xA;    }&#xA;    if (!empty($GLOBALS[&quot;HTTP_GET_VARS&quot;])) {&#xA;        reset($GLOBALS[&quot;HTTP_GET_VARS&quot;]);&#xA;        while (list($k,$v)=each($GLOBALS[&quot;HTTP_GET_VARS&quot;])) &#xA;        {&#xA;&#xA;            for($p=0;$p &amp;lt; count($arr_types);$p++)&#xA;            {&#xA;                if(stristr($k,$arr_types[$p])!=&quot;&quot;)&#xA;                {&#xA;                    $k = str_replace($arr_types[$p],&quot;&quot;,$k);&#xA;                }&#xA;            }&#xA;            ${strtolower($k)}=$v;&#xA;            //echo &quot;&amp;lt;br&amp;gt; k =$k -- v = $v&quot;;&#xA;        }   &#xA;    }&#xA;    if (!empty($_GET)) {&#xA;        reset($_GET);&#xA;        while (list($k,$v)=each($_GET)) &#xA;        {&#xA;&#xA;            for($p=0;$p &amp;lt; count($arr_types);$p++)&#xA;            {&#xA;                if(stristr($k,$arr_types[$p])!=&quot;&quot;)&#xA;                {&#xA;                    $k = str_replace($arr_types[$p],&quot;&quot;,$k);&#xA;                }&#xA;            }&#xA;            ${strtolower($k)}=$v;&#xA;            //echo &quot;&amp;lt;br&amp;gt; k =$k -- v = $v&quot;;&#xA;        }   &#xA;    }&#xA;     $result=$this-&amp;gt;my_query(&quot;show fields from $table_name&quot;,$link);&#xA;    $query=&quot;update $table_name SET   &quot;;&#xA;     while ($a_row = $this-&amp;gt;my_fetch_array($result)) {&#xA;        $field=&quot;$a_row[Field]&quot;;&#xA;&#xA;&#xA;            if($field!=$fldname)&#xA;            {&#xA;                if(isset($$field))&#xA;                {&#xA;                       $query.=&quot;`&quot;.$field.&quot;`=&quot;;&#xA;&#xA;                       $query.=&quot;'&quot;.$this-&amp;gt;removeQuotes($$field,$lang_flag).&quot;' , &quot;;&#xA;                }&#xA;                else&#xA;                {&#xA;                    if(isset($GLOBALS[&quot;$field&quot;]))&#xA;                    {&#xA;                        //echo &quot;&amp;lt;br&amp;gt; var &quot;.$GLOBALS[&quot;$field&quot;];&#xA;                        $query.=&quot;`&quot;.$field.&quot;`=&quot;;&#xA;                        $query.=&quot;'&quot;.$this-&amp;gt;removeQuotes($GLOBALS[&quot;$field&quot;],$lang_flag).&quot;' , &quot;;&#xA;&#xA;                    }&#xA;                }&#xA;            }&#xA;     }&#xA;     $query = substr($query,0,-2);&#xA;    $query.=&quot; where `$fldname`='$fldval' $other&quot;; &#xA;    $query  ;&#xA;    //echo $query;&#xA;     $result=$this-&amp;gt;my_query($query,$link);&#xA;     $this-&amp;gt;my_free_result($result);&#xA;     $this-&amp;gt;my_close($link);&#xA;     return $result;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1610" LastEditorUserId="62429" LastEditDate="2015-06-04T14:09:12.123" LastActivityDate="2015-06-04T14:09:12.123" Title="Generalized PHP function for editing data in a table" Tags="&lt;php&gt;&lt;mysql&gt;" AnswerCount="1" CommentCount="3" />
  <row Id="720" PostTypeId="1" AcceptedAnswerId="730" CreationDate="2011-02-10T10:21:06.773" Score="7" ViewCount="5808" Body="&lt;p&gt;I'm going over the interview questions from &quot;&lt;a href=&quot;http://rads.stackoverflow.com/amzn/click/145157827X&quot; rel=&quot;nofollow&quot;&gt;Cracking the Coding Interview&lt;/a&gt;&quot; and one of the chapters (Chapter 7) deals with Object Oriented Design (OOD). The requirements for one of the problems are as follows:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Imagine you have a call center with&#xA;  three levels of employees: fresher, &#xA;  technical lead (TL), product manager&#xA;  (PM). There can be multiple employees,&#xA;  but only one TL or PM. An incoming&#xA;  telephone call must be allocated to a &#xA;  fresher who is free. If a fresher&#xA;  can’t handle the call, he or she must &#xA;  escalate the call to technical lead.&#xA;  If the TL is not free or not able to &#xA;  handle it, then the call should be&#xA;  escalated to PM. Design the classes&#xA;  and  data structures for this problem.&#xA;  Implement a method getCallHandler().&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;I've written a solution in C#, it was not compiled (suggested by the author of the book) and it is currently not multithreaded. My solution is a bit long, but it should be really simple to understand. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Based on my understanding of the problem, I've established a &quot;chain of command&quot; where each employee knows who his/her superior is. Calls get handled in the following manner:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;If a fresher is given a call which he/she cannot handle, then the fresher escalates the call to his/her superior: a tech lead. &lt;/li&gt;&#xA;&lt;li&gt;If there are no free freshers, then the tech lead automatically gets the call. &lt;/li&gt;&#xA;&lt;li&gt;If the tech lead is busy or cannot service the call, then he/she escalates the call to the product manager. &lt;/li&gt;&#xA;&lt;li&gt;If the product manager (PM) is busy, then the call gets queued on the PM's queue and dequeued once their current call is serviced.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;NOTE: multithreading will be added in a later revision, so please ignore any multithreading issues.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;enum EStatus{ HANDLING, ESCALATED, QUEUED }&#xA;enum ERank{ FRESHER, TECH_LEAD, PROD_MANAGER }&#xA;&#xA;abstract class Employee&#xA;{&#xA;    public ERank Rank{get; private set;}&#xA;&#xA;    public Employee(ERank rank)&#xA;    {&#xA;        Rank = rank;&#xA;    }&#xA;&#xA;    public abstract EStatus ServiceCall(Call call);&#xA;}&#xA;&#xA;class Fresher:Employee&#xA;{&#xA;    private TechLead _superior;&#xA;&#xA;    public Fresher(TechLead superior):base(ERank.FRESHER)&#xA;    {&#xA;        _superior = superior;&#xA;    }&#xA;&#xA;    public override EStatus ServiceCall(Call call)&#xA;    {&#xA;        if(CanService(call))&#xA;        {&#xA;            call.Service(this);&#xA;            return EStatus.HANDLING;&#xA;        }&#xA;        else&#xA;        {&#xA;            _superior.ServiceCall(call);&#xA;            return EStatus.ESCALATED;&#xA;        }&#xA;    }&#xA;&#xA;    private bool CanService(Call call)&#xA;    {&#xA;        // some logic to determine if the call can be serviced &#xA;    }&#xA;}&#xA;&#xA;class TechLead:Employee&#xA;{&#xA;    private Call _activeCall;&#xA;    private ProductManager _superior;&#xA;&#xA;    public TechLead(ProductManager superior):base(ERank.TECH_LEAD)&#xA;    {&#xA;        _activeCall = null;&#xA;        _superior = superior;&#xA;    }&#xA;&#xA;    public override EStatus ServiceCall(Call call)&#xA;    {&#xA;        if(_activeCall == null &amp;amp;&amp;amp; CanService(call))&#xA;        {&#xA;            HandleCall(call);&#xA;            return EStatus.HANDLING;&#xA;        }&#xA;        else&#xA;        {&#xA;            _superior.ServiceCall(call);&#xA;            return EStatus.ESCALATED;&#xA;        }&#xA;    }&#xA;&#xA;    private bool CanService(Call call)&#xA;    {&#xA;        // some logic to determine if the call can be serviced &#xA;    }&#xA;&#xA;    private HandleCall(Call call)&#xA;    {&#xA;        _activeCall = call;&#xA;        call.OnCallServiced += new Call.CallServicedDelegate(OnCallServiced);&#xA;        call.Service(this);&#xA;    }&#xA;&#xA;    private void OnCallServiced(Call call)&#xA;    {&#xA;        if(call!=_activeCall)&#xA;        {&#xA;            // TODO: this call was never accepted&#xA;        }&#xA;        else&#xA;        {&#xA;            _activeCall = null;&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;class ProductManager:Employee&#xA;{&#xA;    private Call _activeCall;&#xA;    private Queue&amp;lt;Call&amp;gt; _callQueue;&#xA;&#xA;    public ProductManager():base(ERank.PROD_MANAGER)&#xA;    {&#xA;        _activeCall = null;&#xA;        _callQueue = new Queue&amp;lt;Call&amp;gt;();&#xA;    }&#xA;&#xA;    public override EStatus ServiceCall(Call call)&#xA;    {&#xA;        if(_activeCall == null)&#xA;        {&#xA;            HandleCall(call);&#xA;            return EStatus.HANDLING;&#xA;        }&#xA;        else&#xA;        {&#xA;            _callQueue.Enqueue(call);&#xA;            return EStatus.QUEUED;&#xA;        }&#xA;    }&#xA;&#xA;    private HandleCall(Call call)&#xA;    {&#xA;        _activeCall = call;&#xA;        call.OnCallServiced += new Call.CallServicedDelegate(OnCallServiced);&#xA;        call.Service(this);&#xA;    }&#xA;&#xA;    private void OnCallServiced(Call call)&#xA;    {&#xA;        if(call!=_activeCall)&#xA;        {&#xA;            // TODO: this call was never accepted&#xA;        }&#xA;        else&#xA;        {&#xA;            if(_callQueue.Count==0)&#xA;            {&#xA;                _activeCall = null;&#xA;            }&#xA;            else&#xA;            {&#xA;                HandleCall(_callQueue.Dequeue());&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;class Call&#xA;{&#xA;    public delegate void CallServicedDelegate(Call call);&#xA;    public event CallServicedDelegate OnCallServiced;&#xA;&#xA;    public Employee CallHandler{get; private set;}&#xA;&#xA;    public Call()&#xA;    {&#xA;        CallHandler = null;&#xA;    }&#xA;&#xA;    public void Service(Employee callHandler)&#xA;    {&#xA;        CallHandler = callHandler;&#xA;&#xA;        // Invoke the notification when the call is complete&#xA;        OnCallServiced(this);&#xA;    }&#xA;&#xA;    public void Disconnect()&#xA;    {&#xA;        // Disconnect the call&#xA;    }&#xA;}&#xA;&#xA;class CallCenter&#xA;{&#xA;    private bool _running;&#xA;    private BlockingQueue&amp;lt;Call&amp;gt; _callQueue;&#xA;    private Queue&amp;lt;Employee&amp;gt; _freeFreshers;&#xA;    private List&amp;lt;Employee&amp;gt; _busyFreshers;&#xA;    private readonly TechLead _techLead;&#xA;&#xA;    public CallCenter(int numEmployees)&#xA;    {&#xA;        // create the tech lead and a supervising product manager&#xA;        _techLead = TechLead(new ProductManager());&#xA;&#xA;        _callQueue = new BlockingQueue&amp;lt;Call&amp;gt;();&#xA;        _freeFreshers = new Queue&amp;lt;Employee&amp;gt;();&#xA;        _busyFreshers = new List&amp;lt;Employee&amp;gt;();&#xA;&#xA;        for(int i = 0; i &amp;lt; numEmployees; i++)&#xA;        {&#xA;            _freeFreshers.Enqueue(new Fresher(_techLead));&#xA;        }&#xA;    }&#xA;&#xA;    public void AcceptCall(Call call)&#xA;    {&#xA;        _callQueue.Enqueue(call);&#xA;    }&#xA;&#xA;    // Assuming that threading will be handled&#xA;    public void StartCallService()&#xA;    {&#xA;        _running = true;&#xA;&#xA;        while(_running)&#xA;        {&#xA;            Call call = _callQueue.Dequeue();&#xA;&#xA;            // Subscribe for the on call serviced delegate&#xA;            call.OnCallServiced += new Call.CallServicedDelegate(OnCallServiced);&#xA;&#xA;            if(_freeFreshers.Count&amp;gt;0)&#xA;            {&#xA;                // Block until a fresher is available&#xA;                 Employee e = _freeFreshers.Dequeue();&#xA;&#xA;                 // Assign the call to a free fresher&#xA;                switch(e.ServiceCall(call))&#xA;                {&#xA;                    case EStatus.HANDLING:&#xA;                        _busyFreshers.Add(e);&#xA;                        break;&#xA;                    case EStatus.ESCALATED:&#xA;                        _freeFreshers.Enqueue(e);&#xA;                        break;&#xA;                    case EStatus.QUEUED:&#xA;                    default:&#xA;                        break;&#xA;                }&#xA;            }&#xA;            else&#xA;            {&#xA;                _techLead.ServiceCall(call);&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    // Assuming that threading will be handled&#xA;    public void StopCallService()&#xA;    {&#xA;        _running = false;&#xA;    }&#xA;&#xA;    private void OnCallServiced(Call call)&#xA;    {&#xA;        switch(call.CallHandler.Rank)&#xA;        {&#xA;            case ERank.FRESHER:&#xA;                _busyFreshers.Remove(call.CallHandler);&#xA;                _freeFreshers.Enqueue(call.CallHandler);&#xA;                break;&#xA;            case ERank.TECH_LEAD:&#xA;            case ERank.PROD_MANAGER:&#xA;            default:&#xA;                // nothing to do if it's a tech lead or prod manager&#xA;                break;&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I was hoping to get some feedback since this question came from a book, there are many possible OOD solutions and I don't have an actual interviewer to comment on the solution. In addition, I do have the author's solution and I can post it if necessary.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Does this seem like a decent solution to the problem as stated? Is there something that I should definitely improve?&lt;/p&gt;&#xA;" OwnerUserId="1468" LastEditorUserId="1468" LastEditDate="2011-02-10T22:34:26.223" LastActivityDate="2011-02-11T02:21:54.700" Title="Review of object oriented design for a sample interview question" Tags="&lt;c#&gt;&lt;interview-questions&gt;" AnswerCount="4" CommentCount="2" FavoriteCount="2" />
  <row Id="721" PostTypeId="1" AcceptedAnswerId="745" CreationDate="2011-02-10T11:12:42.267" Score="7" ViewCount="2456" Body="&lt;p&gt;I want my application to support multiple UI-languages (aka i18n). To do so, I have built the static class below, to automatically translate the form and all its contents to the desired language. It looks into a resource file for the user's Culture, and replaces the .Text properties of the controls with the strings it finds there, or falls-back to the initial strings, which is English.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Usage is calling TranslateForm(this) from each form's constructor.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Two concerns about my code:&lt;br&gt;&#xA;* The overloading of the &quot;Translate&quot; method. I didn't find any way to overcome this.&lt;br&gt;&#xA;* The special handling of different controls, which seems unnecessary.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'm not a professional programmer, so any correction / enhancement / fix to my code is more than welcomed!&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;using System;&#xA;using System.Collections.Generic;&#xA;using System.ComponentModel;&#xA;using System.Data;&#xA;using System.Drawing;&#xA;using System.Linq;&#xA;using System.Text;&#xA;using System.Windows.Forms;&#xA;using System.Threading;&#xA;using System.Globalization;&#xA;using System.Resources;&#xA;using System.Reflection;&#xA;using System.Runtime.InteropServices;&#xA;using System.Collections;&#xA;&#xA;namespace blahblah&#xA;{&#xA;    static class TranslationHelper&#xA;    {&#xA;        static private ResourceManager rm = null;&#xA;&#xA;        static private CultureInfo default_ci = null;&#xA;&#xA;        static private CultureInfo lang_ci = null;&#xA;&#xA;        /// &amp;lt;summary&amp;gt;&#xA;        /// translate control into the specific lang, or leave it untranslated if no translation string found&#xA;        /// &amp;lt;/summary&amp;gt;&#xA;        /// &amp;lt;param name=&quot;ctrl&quot;&amp;gt;&amp;lt;/param&amp;gt;&#xA;        /// &amp;lt;param name=&quot;lang&quot;&amp;gt;&amp;lt;/param&amp;gt;&#xA;        static private void Translate(Control ctrl, string lang)&#xA;        {&#xA;            string str = TranslateString(ctrl.Name, lang);&#xA;            if (str != null)&#xA;                ctrl.Text = str;&#xA;        }&#xA;&#xA;        static private void Translate(ToolStripMenuItem o, string lang)&#xA;        {&#xA;            string str = TranslateString(o.Name, lang);&#xA;            if (str != null)&#xA;                o.Text = str;&#xA;        }&#xA;&#xA;        static private void Translate(ToolStripItem o, string lang)&#xA;        {&#xA;            string str = TranslateString(o.Name, lang);&#xA;            if (str != null)&#xA;                o.Text = str;&#xA;        }&#xA;&#xA;        static private void Translate(Form o, string lang)&#xA;        {&#xA;            string str = TranslateString(o.Name, lang);&#xA;            if (str != null)&#xA;                o.Text = str;&#xA;        }&#xA;&#xA;        /// &amp;lt;summary&amp;gt;&#xA;        /// returns the &amp;lt;c&amp;gt;name&amp;lt;/c&amp;gt; string from the &amp;lt;c&amp;gt;lang&amp;lt;/c&amp;gt; resource&#xA;        /// &amp;lt;/summary&amp;gt;&#xA;        /// &amp;lt;param name=&quot;name&quot;&amp;gt;string/key name&amp;lt;/param&amp;gt;&#xA;        /// &amp;lt;param name=&quot;lang&quot;&amp;gt;the language to translate to&amp;lt;/param&amp;gt;&#xA;        /// &amp;lt;returns&amp;gt;a translated string for &amp;lt;c&amp;gt;name&amp;lt;/c&amp;gt;&amp;lt;/returns&amp;gt;&#xA;        static public string TranslateString(string name, string lang)&#xA;        {&#xA;            if (lang_ci == null || !lang_ci.TwoLetterISOLanguageName.Equals(lang))&#xA;                lang_ci = new CultureInfo(lang);&#xA;&#xA;            try&#xA;            {&#xA;                return rm.GetString(name, lang_ci);&#xA;            }&#xA;            catch (Exception)&#xA;            {&#xA;                // no translation yet&#xA;                try&#xA;                {&#xA;                    return rm.GetString(name, default_ci);&#xA;                }&#xA;                catch (Exception)&#xA;                {&#xA;                    return null;&#xA;                    //MessageBox.Show(ex.Message.ToString(), name);&#xA;                    //System.Console.WriteLine(ex.Message.ToString());&#xA;                }&#xA;            }&#xA;        }&#xA;&#xA;        static public void TranslateForm(string lang, Form parent)&#xA;        {&#xA;            if (rm == null)&#xA;                rm = new ResourceManager(&quot;etimet.i18nResources.i18n&quot;, Assembly.GetExecutingAssembly(), null);&#xA;            if (default_ci == null)&#xA;                default_ci = new CultureInfo(&quot;en&quot;);&#xA;&#xA;            // handle direction&#xA;            if (Program.conf.CurrentLang.Equals(&quot;he&quot;) || Program.conf.CurrentLang.Equals(&quot;ar&quot;) || Program.conf.CurrentLang.Equals(&quot;fa&quot;))&#xA;            {&#xA;                parent.RightToLeft = RightToLeft.Yes;&#xA;            }&#xA;            else&#xA;            {&#xA;                parent.RightToLeft = RightToLeft.No;&#xA;            }&#xA;&#xA;            // translate the form itself&#xA;            Translate(parent, lang);&#xA;&#xA;            // translate all the children controls, recursively&#xA;            Control.ControlCollection c = parent.Controls;&#xA;            foreach (Control o in c)&#xA;            {&#xA;                // special handling for the menu&#xA;                if (o.GetType() == typeof(MenuStrip))&#xA;                {&#xA;                    foreach (ToolStripMenuItem it in ((MenuStrip)o).Items)&#xA;                    {&#xA;                        Translate(it, lang);&#xA;                        //MessageBox.Show(it.Text);&#xA;                        foreach (ToolStripItem f in it.DropDownItems)&#xA;                        {&#xA;                            if (typeof(ToolStripSeparator) != f.GetType())&#xA;                                Translate(f, lang);&#xA;                        }&#xA;                    }&#xA;                }&#xA;                RecursiveTranslateCtrl(lang, o);&#xA;            }&#xA;        }&#xA;&#xA;        static private void RecursiveTranslateCtrl(string lang, Control ctrl)&#xA;        {&#xA;            Translate(ctrl, lang);&#xA;&#xA;            foreach (Control c in ctrl.Controls)&#xA;            {&#xA;                RecursiveTranslateCtrl(lang, c);&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="768" LastEditorUserId="110" LastEditDate="2011-02-10T14:52:17.317" LastActivityDate="2011-02-11T14:40:18.087" Title="Automatic translation of forms" Tags="&lt;c#&gt;&lt;.net&gt;" AnswerCount="2" CommentCount="2" />
  <row Id="723" PostTypeId="2" ParentId="719" CreationDate="2011-02-10T12:07:17.323" Score="10" Body="&lt;p&gt;Simply put, this code fails a lot best practices also contains massive security issues.&#xA;Suggestion to improve for best practices:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;&lt;code&gt;$GLOBALS[&quot;HTTP_POST_VARS&quot;]&lt;/code&gt; is &lt;strong&gt;deprecated&lt;/strong&gt; in favor of &lt;code&gt;$_POST&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;So you looping over &lt;code&gt;$GLOBALS[&quot;HTTP_POST_VARS&quot;]&lt;/code&gt; and &lt;code&gt;$_POST&lt;/code&gt; is redundant and bad mojo. Just looping over &lt;code&gt;$_POST&lt;/code&gt; will accomplish the same thing. Same goes for &lt;code&gt;$GLOBALS[&quot;HTTP_GET_VARS&quot;]&lt;/code&gt; and &lt;code&gt;$_GET&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;You should be passing in the $link object as parameter. &lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Since there is no code intended to change the database connection conditionally (the connect parameters are always the same). This prevents your scripts creating multiple database connection resources and destroying them (more memory and time consuming). Also passing in the database resource as parameter to the function is a type of dependency injection which makes your code testable should you want to in the future. Since this also appears to be in a class, consider creating the database connection in the &lt;code&gt;__construct&lt;/code&gt; and use that single instance.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Using sessions in favor of $GLOBALS&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Pretty much any use of $GLOBALS is considered bad practice. I'm sure there are a few exceptions to the rule. But there you should definitely not be using is for storing data in a scopeless fashion. This is what sessions are for.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;removeQuotes() is never called on &lt;code&gt;$fldname&lt;/code&gt; or &lt;code&gt;$fldval&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;As you can imagine this a serious security issue leaving your script open to SQL Injection attacks.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Use &lt;a href=&quot;http://php.net/manual/en/function.mysql-real-escape-string.php&quot;&gt;mysql_real_escape_string&lt;/a&gt; in favor of home made sanitising functions i.e. &lt;code&gt;removeQuotes()&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;There is a lot more to safe escaping query parameters that remove slashes. And in my experience home made sanitising functions often quietly fail when you have mixed string and number parameters.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;As a matter of readability and style&lt;/strong&gt; I would make to following suggestions, I know these are subject matters but there are common ways of doing things.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Substitute the use of string concatenation&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$query.=&quot;`&quot;.$field.&quot;`=&quot;;&#xA;$query.=&quot;'&quot;.$this-&amp;gt;removeQuotes($$field,$lang_flag).&quot;' , &quot;;&#xA;... more concatenation ...&#xA;$query = substr($query,0,-2);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;for array joining&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$queryParams[] = &quot;`&quot;.$field.&quot;`='&quot;.$this-&amp;gt;removeQuotes($$field,$lang_flag).&quot;'&quot;;&#xA;... more array filling ...&#xA;$query = join(',', $queryParams);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;General WTFs&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;This is doing nothing at all &lt;code&gt;$query  ;&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;And code that does nothing is very bad mojo.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Call &lt;code&gt;count()&lt;/code&gt; once.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;This is not really an issue, doing something like this &lt;/p&gt;&#xA;&#xA;&lt;p&gt;for($p=0;$p&#xA;&#xA;&lt;p&gt;In actual fact calls &lt;code&gt;count()&lt;/code&gt; on every iteration of the loop, even though the return value will never change. It causes the interpreter to do more work than necessary, although I suspect during compilation to byte code this would be optimised automatically. This could be substituted for:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// only call count() once&#xA;$count = count($arr_types);&#xA;for($p=0;$p&amp;lt;$count;$p++)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Don't nest unnecessarily.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Don't nest conditionals (if/else/switch) and loop(while/for) unnecessarily. It makes for messier code, code that's harder to read and follow mentally, and importantly difficult to test.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if(isset($$field))&#xA;{&#xA;     $query.=&quot;`&quot;.$field.&quot;`=&quot;;&#xA;&#xA;     $query.=&quot;'&quot;.$this-&amp;gt;removeQuotes($$field,$lang_flag).&quot;' , &quot;;&#xA; }&#xA; else&#xA; {&#xA;     if(isset($GLOBALS[&quot;$field&quot;]))&#xA;     {&#xA;         $query.=&quot;`&quot;.$field.&quot;`=&quot;;&#xA;         $query.=&quot;'&quot;.$this-&amp;gt;removeQuotes($GLOBALS[&quot;$field&quot;],$lang_flag).&quot;' , &quot;;&#xA;     }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The above code is exactly equal to the following, notice less nesting.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if(isset($$field))&#xA;{&#xA;     $query.=&quot;`&quot;.$field.&quot;`=&quot;;&#xA;&#xA;     $query.=&quot;'&quot;.$this-&amp;gt;removeQuotes($$field,$lang_flag).&quot;' , &quot;;&#xA; }&#xA; else if(isset($GLOBALS[&quot;$field&quot;]))&#xA; {&#xA;         $query.=&quot;`&quot;.$field.&quot;`=&quot;;&#xA;         $query.=&quot;'&quot;.$this-&amp;gt;removeQuotes($GLOBALS[&quot;$field&quot;],$lang_flag).&quot;' , &quot;;&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Personal preference&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;This is completely subjective, but something to think about.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if(stristr($k,$arr_types[$p])!=&quot;&quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;equal to&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if(stristr($k,$arr_types[$p]) == true)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;equal to&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if(stristr($k,$arr_types[$p]))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Considering the above, this:&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;while (list($k,$v)=each($_GET)) &#xA;{&#xA;    for($p=0;$p &amp;lt; count($arr_types);$p++)&#xA;    {&#xA;        if(stristr($k,$arr_types[$p])!=&quot;&quot;)&#xA;        {&#xA;            $k = str_replace($arr_types[$p],&quot;&quot;,$k);&#xA;        }&#xA;    }&#xA;    ${strtolower($k)}=$v;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Is exactly the same as:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;while (list($k,$v)=each($_GET)) &#xA;{&#xA;    $count = count($arr_types);&#xA;    for($p=0; $p&amp;lt;$count; $p++);&#xA;    {&#xA;        $k = str_replace($arr_types[$p],&quot;&quot;,$k);&#xA;    }&#xA;    ${strtolower($k)}=$v;&#xA;}  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Which would you rather test and/or work with?&lt;/em&gt;&lt;/p&gt;&#xA;" OwnerUserId="1613" LastActivityDate="2011-02-10T12:07:17.323" CommentCount="1" />
  <row Id="725" PostTypeId="2" ParentId="602" CreationDate="2011-02-10T12:32:31.043" Score="0" Body="&lt;p&gt;I'm assuming you're using PHP5, in which case do you have a &lt;em&gt;good&lt;/em&gt; reason not to use existing libraries like &lt;a href=&quot;http://www.doctrine-project.org/projects/dbal&quot; rel=&quot;nofollow&quot;&gt;Doctrine2 DBAL&lt;/a&gt; the defacto standard for database abstraction, or &lt;a href=&quot;http://pear.php.net/package/MDB2&quot; rel=&quot;nofollow&quot;&gt;Pear_MDB2&lt;/a&gt;? &lt;/p&gt;&#xA;&#xA;&lt;p&gt;In this day and age of open source libraries, rolling your own home made (and possible error prone class) to solve already &lt;em&gt;thoroughly&lt;/em&gt; solved problems is doing yourself and the PHP community at large more harm than good don't you think?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;These libraries are well documented (not so much in the case of Pear_MDB2), thoroughly tested and have 1000s of hours of production use in a myriad of environments. And shoudl you find an issue or have a suggestion you'd be helping the PHP community. &lt;strong&gt;At the very least&lt;/strong&gt; have a look at these fantastic projects, you might learn something and possible even answer some of your own questions should you insist on doing your own way.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Admittedly Pear_MDB2 is a bit behind the times now, but it does a solid job&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;" OwnerUserId="1613" LastActivityDate="2011-02-10T12:32:31.043" CommentCount="3" />
  <row Id="726" PostTypeId="2" ParentId="492" CreationDate="2011-02-10T13:00:02.533" Score="7" Body="&lt;p&gt;I'm assuming from looking the code you're using Zend Framework. I've solved similar issues in Zend and Symfony using php partials.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You could create a partial _list_item.phtml&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;li class=&quot;ui-content&quot;&amp;gt;&#xA;    &amp;lt;div style=&quot;float: left; width: 200px;&quot;&amp;gt;&#xA;        &amp;lt;span class=&quot;ui-icon ui-icon-trash ui-button ui-state-active&quot; style=&quot;float: left; margin:3px;&quot;&amp;gt;&amp;lt;/span&amp;gt;&#xA;        &amp;lt;input name=&quot;dates[]&quot; class=&quot;datebox&quot; style=&quot;width: 120px;&quot; type=&quot;text&quot; value=&quot;&amp;lt;?php echo $date ?&amp;gt;&quot; /&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;    &amp;lt;div style=&quot;padding-left: 200px;&quot;&amp;gt;&#xA;        &amp;lt;input name=&quot;contents[]&quot; type=&quot;text&quot; value=&quot;&amp;lt;?php echo $message ?&amp;gt;&quot; style=&quot;width: 100%;&quot; /&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;&amp;lt;/li&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then in your view:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?php foreach ($this-&amp;gt;events as $event): ?&amp;gt;&#xA;    &amp;lt;?php echo $this-&amp;gt;partial('list_item.phtml', array(&#xA;        'date' =&amp;gt; $event-&amp;gt;GetDate()-&amp;gt;format('Y-m-d'),&#xA;        'message' =&amp;gt; $event-&amp;gt;GetMessage(),&#xA;    )); ?&amp;gt;&#xA;&amp;lt;?php endforeach; ?&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then for your javascript:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function AddNewEvent()&#xA;{&#xA;    var today, html, temp;&#xA;    // call str_replace because javascript doesn't like new lines in strings&#xA;    html = '&amp;lt;?php echo str_replace(PHP_EOL, &quot;\n&quot;, $this-&amp;gt;partial('list_item.phtml', array(&#xA;        'date' =&amp;gt; $event-&amp;gt;GetDate()-&amp;gt;format('Y-m-d'),&#xA;        'message' =&amp;gt; '',&#xA;    ))); ?&amp;gt;';&#xA;    $(this).after(html);&#xA;    temp = $(this).next();&#xA;    CreateDateboxes($('.datebox', temp));&#xA;    $('.ui-icon-trash', temp).click(RemoveParent);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Viola! No template duplication because the affected code is in a partial. No excess javscript templating libraries, although if this kind of thing is prevalent in your application I'd suggest some refactoring and implementing such a templating library.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This approach will have the least impact on your work flow, little to no learning curve, and a short investment in development time for big decrease duplication (bosses love hearing that kind of thing). &lt;/p&gt;&#xA;" OwnerUserId="1613" LastEditorUserId="1613" LastEditDate="2011-02-13T01:04:19.450" LastActivityDate="2011-02-13T01:04:19.450" CommentCount="4" />
  <row Id="729" PostTypeId="2" ParentId="721" CreationDate="2011-02-10T19:51:43.417" Score="1" Body="&lt;p&gt;You can avoid the overloading by using the common superclass on &lt;code&gt;ToolStripItem&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;static private void Translate(ToolStripItem o, string lang)&#xA;{&#xA;   string str = TranslateString(o.Name, lang);&#xA;   if (str != null)&#xA;      c.Text = str;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Unfortunately that only works for those two component types since it looks like &lt;code&gt;Component&lt;/code&gt; does not have the &lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;Text&lt;/code&gt; attributes.&lt;/p&gt;&#xA;" OwnerUserId="110" LastActivityDate="2011-02-10T19:51:43.417" CommentCount="0" />
  <row Id="730" PostTypeId="2" ParentId="720" CreationDate="2011-02-10T21:26:20.057" Score="8" Body="&lt;p&gt;In short, in my opinion, I think you've done too much.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It seems like your design has gone beyond a design for the initial interview question and into an exercise of your own.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;However&lt;/strong&gt;, I don't have the book you're reading, so you may be going off more than just that snippet in your question.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Based on the principle:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Do the simplest thing that could&#xA;  possibly work.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;The basics I pulled from that question were:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;We need a way to represent the three different kinds of employees.&lt;/li&gt;&#xA;&lt;li&gt;We need a way of representing a call.&lt;/li&gt;&#xA;&lt;li&gt;We need a way of choosing an employee to handle a call (the getCallHandler method).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;i.e. I &lt;em&gt;think&lt;/em&gt; the question is just after an implementation of &lt;code&gt;GetCallHandler&lt;/code&gt; and some basic definitions of the types involved.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I came up with the following:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public class Call&#xA;{&#xA;    // TODO: Implement Call.&#xA;}&#xA;&#xA;public enum EmployeePosition&#xA;{&#xA;    Fresher,&#xA;    TechnicalLead,&#xA;    ProductManager&#xA;}&#xA;&#xA;public class CallCentre&#xA;{&#xA;    private IList&amp;lt;IEmployee&amp;gt; employees;&#xA;&#xA;    public IEmployee GetCallHandler(Call call)&#xA;    {&#xA;        return employees.Where(e =&amp;gt; e.CanHandle(call))&#xA;                        .OrderBy(e =&amp;gt; e.Position)&#xA;                        .FirstOrDefault();&#xA;    }&#xA;&#xA;    public CallCentre(IList&amp;lt;IEmployee&amp;gt; employees)&#xA;    {&#xA;        if (employees == null)&#xA;        {&#xA;            throw new ArgumentNullException(&quot;employees&quot;);&#xA;        }&#xA;&#xA;        this.employees = employees;&#xA;    }&#xA;}&#xA;&#xA;public interface IEmployee&#xA;{&#xA;    EmployeePosition Position { get; }&#xA;    Boolean CanHandle(Call call);&#xA;}&#xA;&#xA;public class Fresher : IEmployee&#xA;{&#xA;    public EmployeePosition Position { get { return EmployeePosition.Fresher; } }&#xA;&#xA;    public Boolean CanHandle(Call call)&#xA;    {&#xA;        // TODO: Logic for handling a call.&#xA;    }&#xA;}&#xA;&#xA;// Similar implementations of IEmployee for TechnicalLead and ProductManager.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;That would be the starting point based on what the question says. After this would usually be a period of interaction between interviewee and interviewer(s) in which assumptions could be addressed and the design discussed/updated with more detail, such as employees being in a busy state etc.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I think your design is a step beyond that.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The combination of class and enumeration for the different employee types is something we both went for. However, I chose an interface over a base class. I don't think your base class provides a lot of value - just code to assign a &lt;code&gt;Rank&lt;/code&gt; property. My proposal has the benefit that someone's not going to break implementation for some employees inadvertantly by altering the base class. The interface contains no implmentation. Using an interface also allows the employee classes to use a different base class in the future if needs be.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;One point for further discussion might be where it states:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;If a fresher can’t handle the call, he&#xA;  or she must escalate the call to&#xA;  technical lead.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;This may suggest that they want a fresher object to communicate directly with their superior like in your design (as opposed to my implementation, where employees don't need to know each other even exist - similar to many workplaces!). This could be clarified in the interview. However, I prefer my design because of the looser coupling between employees.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As far as multithreading goes, I'd expect quite a bit of discussion on &lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;how it might be implemented&lt;/li&gt;&#xA;&lt;li&gt;potential issues with different threading models&lt;/li&gt;&#xA;&lt;li&gt;potential bottlenecks&lt;/li&gt;&#xA;&lt;li&gt;typical call volume &lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;before it got added to any code. But like I say, it does seem like your design is more than just an answer to the interview question.&lt;/p&gt;&#xA;" OwnerUserId="139" LastActivityDate="2011-02-10T21:26:20.057" CommentCount="6" />
  <row Id="731" PostTypeId="1" AcceptedAnswerId="1074" CreationDate="2011-02-10T21:47:11.813" Score="7" ViewCount="752" Body="&lt;p&gt;I use named scopes all over the place. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;When I have a named scope that deals with two different tables, I tend to query the second table in a sub-query. That way, if I mix and match with other tables I don't need to worry about reusing a table alias or having ambiguous column names that only appear in bizarre scenarios.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example, suppose I have a &lt;code&gt;posts&lt;/code&gt; table that is one-to-many related to a &lt;code&gt;tags&lt;/code&gt; table. I might add a &lt;code&gt;with_tags&lt;/code&gt; scope on my &lt;code&gt;Post&lt;/code&gt; model like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;named_scope :with_tags, lambda { |tags|&#xA;  tags = [tags] if tags.kind_of? String&#xA;  {:conditions =&amp;gt; [&quot;id IN (SELECT post_id FROM tags WHERE name IN (?))&quot;, tags]}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;However, that doesn't seem ideal. Many databases can use a join more efficiently than they can use a sub-query. A query that looks like this might perform better:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;SELECT DISTINCT posts.* FROM posts JOIN tags ON posts.id = tags.post_id WHERE tags.name IN (?)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;How do other people do this? Do you use the &lt;code&gt;:include/:join&lt;/code&gt; parameters cleverly to know what the aliases &lt;code&gt;ActiveRecord&lt;/code&gt; will use?&lt;/p&gt;&#xA;" OwnerUserId="1629" LastEditorUserId="59481" LastEditDate="2015-12-14T01:55:16.913" LastActivityDate="2015-12-14T01:55:53.510" Title="Avoiding sub-queries in named scopes" Tags="&lt;mysql&gt;&lt;ruby-on-rails&gt;" AnswerCount="1" CommentCount="0" FavoriteCount="2" />
  <row Id="732" PostTypeId="1" CreationDate="2011-02-10T22:28:31.387" Score="7" ViewCount="3322" Body="&lt;p&gt;I've implemented the &lt;strong&gt;&lt;code&gt;GroupBy&lt;/code&gt;&lt;/strong&gt; extension method for &lt;strong&gt;&lt;code&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/strong&gt; type as an excersise to deep a little more into &lt;strong&gt;LINQ&lt;/strong&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What do you think about the source code?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Code:&lt;/strong&gt;  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;static IEnumerable&amp;lt;IGrouping&amp;lt;TKey,TElement&amp;gt;&amp;gt; GroupBy&amp;lt;TKey,TElement&amp;gt;(this IEnumerable&amp;lt;TElement&amp;gt; source, Func&amp;lt;TElement,TKey&amp;gt; keySelector)&#xA;{&#xA;    //Grouping elements in the dictionary according to the criteria&#xA;    var dict = new Dictionary&amp;lt;TKey, List&amp;lt;TElement&amp;gt;&amp;gt;();&#xA;&#xA;    //Filling the dictionary. It will contain: [Key -&amp;gt; List&amp;lt;Values&amp;gt;]&#xA;    foreach (var x in source)&#xA;    {&#xA;        var key = keySelector(x);&#xA;        if (dict.Keys.Contains(key))&#xA;        {&#xA;            dict[key].Add(x);&#xA;        }&#xA;        else&#xA;        {&#xA;            dict.Add(key, new List&amp;lt;TElement&amp;gt; { x });&#xA;        }&#xA;    }&#xA;&#xA;    //For each group...&#xA;    foreach (var x in dict)&#xA;    {&#xA;        yield return new Grouping&amp;lt;TKey, TElement&amp;gt;(x.Key, x.Value);&#xA;    }&#xA;}&#xA;&#xA;class Grouping&amp;lt;TKey, TElement&amp;gt; : IGrouping&amp;lt;TKey, TElement&amp;gt;&#xA;{&#xA;    private TKey _key;&#xA;    private IEnumerable&amp;lt;TElement&amp;gt; _elements;&#xA;&#xA;    public Grouping(TKey key, IEnumerable&amp;lt;TElement&amp;gt; elements)&#xA;    {&#xA;        _key = key;&#xA;        _elements = elements;&#xA;    }&#xA;&#xA;    public IEnumerator&amp;lt;TElement&amp;gt; GetEnumerator()&#xA;    {&#xA;        return _elements.GetEnumerator();&#xA;    }&#xA;&#xA;    IEnumerator IEnumerable.GetEnumerator()&#xA;    {&#xA;        return GetEnumerator();&#xA;    }&#xA;&#xA;    public TKey Key&#xA;    {&#xA;        get { return _key; }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1631" LastEditorUserId="1636" LastEditDate="2011-02-11T13:15:00.300" LastActivityDate="2016-11-16T22:00:05.563" Title="Implementation of GroupBy&lt;TKey, TElement&gt; in .NET" Tags="&lt;c#&gt;&lt;linq&gt;" AnswerCount="3" CommentCount="2" FavoriteCount="1" />
  <row Id="733" PostTypeId="2" ParentId="720" CreationDate="2011-02-10T22:39:38.653" Score="0" Body="&lt;p&gt;It looks like it may be a good idea to provide the solution from the book just to establish a frame of reference:  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public class CallHandler &#xA;{&#xA;    static final int LEVELS = 3; // we have 3 levels of employees&#xA;    static final int NUM_FRESHERS = 5; // we have 5 freshers&#xA;    ArrayList&amp;lt;Employee&amp;gt;[] employeeLevels = new ArrayList[LEVELS];&#xA;&#xA;    // queues for each call’s rank&#xA;    Queue&amp;lt;Call&amp;gt;[] callQueues = new LinkedList[LEVELS];&#xA;&#xA;    public CallHandler() { ... }&#xA;&#xA;    Employee getCallHandler(Call call) &#xA;    {&#xA;        for (int level = call.rank; level &amp;lt; LEVELS - 1; level++) &#xA;        {&#xA;            ArrayList&amp;lt;Employee&amp;gt; employeeLevel = employeeLevels[level];&#xA;            for (Employee emp : employeeLevel) &#xA;            {&#xA;                if (emp.free) &#xA;                {&#xA;                    return emp;&#xA;                }&#xA;            }&#xA;        }&#xA;        return null;&#xA;    }&#xA;&#xA;    // routes the call to an available employee, or adds to a queue&#xA;&#xA;    void dispatchCall(Call call) &#xA;    {&#xA;        // try to route the call to an employee with minimal rank&#xA;        Employee emp = getCallHandler(call);&#xA;        if (emp != null) &#xA;        {&#xA;            emp.ReceiveCall(call);&#xA;        } else {&#xA;            // place the call into queue according to its rank&#xA;            callQueues[call.rank].add(call);&#xA;        }&#xA;    }&#xA;&#xA;    void getNextCall(Employee e) {...} // look for call for e’s rank&#xA;}&#xA;&#xA;class Call &#xA;{&#xA;    int rank = 0; // minimal rank of employee who can handle this call&#xA;    public void reply(String message) { ... }&#xA;    public void disconnect() { ... }&#xA;}&#xA;&#xA;class Employee &#xA;{&#xA;    CallHandler callHandler;&#xA;    int rank; // 0- fresher, 1 - technical lead, 2 - product manager&#xA;    boolean free;&#xA;    Employee(int rank) { this.rank = rank; }&#xA;    void ReceiveCall(Call call) { ... }&#xA;    void CallHandled(Call call) { ... } // call is complete&#xA;    void CannotHandle(Call call) &#xA;    { // escalate call&#xA;        call.rank = rank + 1;&#xA;        callHandler.dispatchCall(call);&#xA;        free = true;&#xA;        callHandler.getNextCall(this); // look for waiting call&#xA;    }&#xA;}&#xA;&#xA;class Fresher extends Employee &#xA;{&#xA;    public Fresher() { super(0); }&#xA;}&#xA;&#xA;class TechLead extends Employee &#xA;{&#xA;    public TechLead() { super(1); }&#xA;}&#xA;&#xA;class ProductManager extends Employee &#xA;{&#xA;    public ProductManager() { super(2); }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The solution of the book is similar similar in design and extent... there is no additional information besides what is provided by the quote above. My evaluation is that:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;I did not actually make a method called &lt;code&gt;GetCallHandler()&lt;/code&gt;, I converted it to a property of the &lt;code&gt;Call&lt;/code&gt;. &lt;/li&gt;&#xA;&lt;li&gt;There might have been a specific reason why a &lt;code&gt;GetCallHandler()&lt;/code&gt; method is needed, i.e. necessary for another component of the system.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;I do have a justification for my design compared to the Author's design:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;It's more efficient to maintain a queue of free employees than to actually go through a list of employees and check which one is free every time a call comes through.&lt;/li&gt;&#xA;&lt;li&gt;The behavior in response to a call is defined by particular implementation of &lt;code&gt;Employee&lt;/code&gt;, rather than an Employee &quot;expert&quot; (i.e. each employee knows what they're supposed to do, rather than the system telling each employee what to do).&lt;/li&gt;&#xA;&lt;li&gt;If a &lt;code&gt;GetCallHandler&lt;/code&gt; method is needed in another system, then the question would have been more specific as to the signature of the method.&lt;/li&gt;&#xA;&lt;li&gt;Judging on the solution, &lt;code&gt;GetCallHandler&lt;/code&gt; is only called by the &lt;code&gt;CallHandler&lt;/code&gt; class itself, so that supports #3. Nobody outside of &lt;code&gt;CallHandler&lt;/code&gt; seems to use it.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;" OwnerUserId="1468" LastEditorUserId="1468" LastEditDate="2011-02-10T22:48:10.657" LastActivityDate="2011-02-10T22:48:10.657" CommentCount="2" />
  <row Id="734" PostTypeId="2" ParentId="732" CreationDate="2011-02-10T22:54:51.063" Score="3" Body="&lt;pre&gt;&lt;code&gt;foreach (var x in dict)&#xA;{&#xA;    yield return new Grouping&amp;lt;TKey, TElement&amp;gt;(x.Key, x.Value);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Could change to:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;return dict.Select(x =&amp;gt; new Grouping&amp;lt;TKey, TElement&amp;gt;(x.Key, x.Value));&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It's a little thing, but I would make _key and _elements in Grouping readonly.&lt;/p&gt;&#xA;" OwnerUserId="163" LastActivityDate="2011-02-10T22:54:51.063" CommentCount="1" />
  <row Id="735" PostTypeId="1" AcceptedAnswerId="758" CreationDate="2011-02-10T23:13:04.567" Score="6" ViewCount="907" Body="&lt;p&gt;The CMS I use uses the Xalan XSLT processor which is a XSLT version 1.0 processor. Editors who use WYSIWYG fields within the CMS can save content that will look like either:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;story&amp;gt;&#xA;    &amp;lt;p&amp;gt;Story Text which may have &amp;lt;em&amp;gt;formatting&amp;lt;/em&amp;gt;.&amp;lt;/p&amp;gt;&#xA;&amp;lt;/story&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;or:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;story&amp;gt;Story Text which may have &amp;lt;em&amp;gt;formatting&amp;lt;/em&amp;gt;.&amp;lt;/story&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;or even:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;story&amp;gt;&#xA;    &amp;lt;div&amp;gt;Story Text which may&amp;lt;br /&amp;gt; have &amp;lt;em&amp;gt;formatting&amp;lt;/em&amp;gt;.&amp;lt;/div&amp;gt;&#xA;&amp;lt;/story&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In order to handle those varying cases I've been using:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&#xA;&amp;lt;xsl:stylesheet version=&quot;1.0&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&amp;gt;&#xA;&amp;lt;xsl:output method=&quot;html&quot;/&amp;gt; &#xA;&amp;lt;xsl:template match=&quot;/system-index-block&quot;&amp;gt;&#xA;    &amp;lt;xsl:for-each select=&quot;story&quot;&amp;gt;&#xA;        &amp;lt;xsl:choose&amp;gt;&#xA;            &amp;lt;!-- If wrapped in an element --&amp;gt;&#xA;            &amp;lt;xsl:when test=&quot;./p|./div&quot;&amp;gt;&#xA;                &amp;lt;!-- copy what is inside story, allow for text outside of elements --&amp;gt;&#xA;                &amp;lt;xsl:copy-of select=&quot;./text()|./*&quot;/&amp;gt;&#xA;            &amp;lt;/xsl:when&amp;gt;&#xA;            &amp;lt;!-- wrap the content in a paragraph tag --&amp;gt;&#xA;            &amp;lt;xsl:otherwise&amp;gt;&#xA;                &amp;lt;p&amp;gt;&#xA;                    &amp;lt;!-- copy text and tags from inside story --&amp;gt;&#xA;                    &amp;lt;xsl:copy-of select=&quot;./text()|./*&quot;/&amp;gt;&#xA;                &amp;lt;/p&amp;gt;&#xA;            &amp;lt;/xsl:otherwise&amp;gt;&#xA;        &amp;lt;/xsl:choose&amp;gt;&#xA;    &amp;lt;/xsl:for-each&amp;gt;&#xA;&amp;lt;/xsl:template&amp;gt;&#xA;&amp;lt;/xsl:stylesheet&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Is there a better way of producing well formed HTML from this data? Is there a way to simply this?&lt;/p&gt;&#xA;" OwnerUserId="1498" LastEditorUserId="18427" LastEditDate="2013-11-24T05:25:07.353" LastActivityDate="2013-11-24T05:25:07.353" Title="Using XSLT to turn content of WYSIWYG stored in XML into HTML" Tags="&lt;html&gt;&lt;xml&gt;&lt;xslt&gt;" AnswerCount="1" CommentCount="2" />
  <row Id="736" PostTypeId="2" ParentId="720" CreationDate="2011-02-10T23:37:53.127" Score="4" Body="&lt;p&gt;Sorry if there is a lack of pleasantries, but I am going to get down to it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Source at time of review:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;enum EStatus{ HANDLING, ESCALATED, QUEUED }&#xA;enum ERank{ FRESHER, TECH_LEAD, PROD_MANAGER }&#xA;&#xA;abstract class Employee&#xA;{&#xA;    public ERank Rank{get; private set;}&#xA;&#xA;    public Employee(ERank rank)&#xA;    {&#xA;        Rank = rank;&#xA;    }&#xA;&#xA;    public abstract EStatus ServiceCall(Call call);&#xA;}&#xA;&#xA;class Fresher:Employee&#xA;{&#xA;    private TechLead _superior;&#xA;&#xA;    public Fresher(TechLead superior):base(ERank.FRESHER)&#xA;    {&#xA;        _superior = superior;&#xA;    }&#xA;&#xA;    public override EStatus ServiceCall(Call call)&#xA;    {&#xA;        if(CanService(call))&#xA;        {&#xA;            call.Service(this);&#xA;            return EStatus.HANDLING;&#xA;        }&#xA;        else&#xA;        {&#xA;            _superior.ServiceCall(call);&#xA;            return EStatus.ESCALATED;&#xA;        }&#xA;    }&#xA;&#xA;    private bool CanService(Call call)&#xA;    {&#xA;        // some logic to determine if the call can be serviced &#xA;    }&#xA;}&#xA;&#xA;class TechLead:Employee&#xA;{&#xA;    private Call _activeCall;&#xA;    private ProductManager _superior;&#xA;&#xA;    public TechLead(ProductManager superior):base(ERank.TECH_LEAD)&#xA;    {&#xA;        _activeCall = null;&#xA;        _superior = superior;&#xA;    }&#xA;&#xA;    public override EStatus ServiceCall(Call call)&#xA;    {&#xA;        if(_activeCall == null &amp;amp;&amp;amp; CanService(call))&#xA;        {&#xA;            HandleCall(call);&#xA;            return EStatus.HANDLING;&#xA;        }&#xA;        else&#xA;        {&#xA;            _superior.ServiceCall(call);&#xA;            return EStatus.ESCALATED;&#xA;        }&#xA;    }&#xA;&#xA;    private bool CanService(Call call)&#xA;    {&#xA;        // some logic to determine if the call can be serviced &#xA;    }&#xA;&#xA;    private HandleCall(Call call)&#xA;    {&#xA;        _activeCall = call;&#xA;        call.OnCallServiced += new Call.CallServicedDelegate(OnCallServiced);&#xA;        call.Service(this);&#xA;    }&#xA;&#xA;    private void OnCallServiced(Call call)&#xA;    {&#xA;        if(call!=_activeCall)&#xA;        {&#xA;            // TODO: this call was never accepted&#xA;        }&#xA;        else&#xA;        {&#xA;            _activeCall = null;&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;class ProductManager:Employee&#xA;{&#xA;    private Call _activeCall;&#xA;    private Queue&amp;lt;Call&amp;gt; _callQueue;&#xA;&#xA;    public ProductManager():base(ERank.PROD_MANAGER)&#xA;    {&#xA;        _activeCall = null;&#xA;        _callQueue = new Queue&amp;lt;Call&amp;gt;();&#xA;    }&#xA;&#xA;    public override EStatus ServiceCall(Call call)&#xA;    {&#xA;        if(_activeCall == null)&#xA;        {&#xA;            HandleCall(call);&#xA;            return EStatus.HANDLING;&#xA;        }&#xA;        else&#xA;        {&#xA;            _callQueue.Enqueue(call);&#xA;            return EStatus.QUEUED;&#xA;        }&#xA;    }&#xA;&#xA;    private HandleCall(Call call)&#xA;    {&#xA;        _activeCall = call;&#xA;        call.OnCallServiced += new Call.CallServicedDelegate(OnCallServiced);&#xA;        call.Service(this);&#xA;    }&#xA;&#xA;    private void OnCallServiced(Call call)&#xA;    {&#xA;        if(call!=_activeCall)&#xA;        {&#xA;            // TODO: this call was never accepted&#xA;        }&#xA;        else&#xA;        {&#xA;            if(_callQueue.Count==0)&#xA;            {&#xA;                _activeCall = null;&#xA;            }&#xA;            else&#xA;            {&#xA;                HandleCall(_callQueue.Dequeue());&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;class Call&#xA;{&#xA;    public delegate void CallServicedDelegate(Call call);&#xA;    public event CallServicedDelegate OnCallServiced;&#xA;&#xA;    public Employee CallHandler{get; private set;}&#xA;&#xA;    public Call()&#xA;    {&#xA;        CallHandler = null;&#xA;    }&#xA;&#xA;    public void Service(Employee callHandler)&#xA;    {&#xA;        CallHandler = callHandler;&#xA;&#xA;        // Invoke the notification when the call is complete&#xA;        OnCallServiced(this);&#xA;    }&#xA;&#xA;    public void Disconnect()&#xA;    {&#xA;        // Disconnect the call&#xA;    }&#xA;}&#xA;&#xA;class CallCenter&#xA;{&#xA;    private bool _running;&#xA;    private BlockingQueue&amp;lt;Call&amp;gt; _callQueue;&#xA;    private Queue&amp;lt;Employee&amp;gt; _freeFreshers;&#xA;    private List&amp;lt;Employee&amp;gt; _busyFreshers;&#xA;    private readonly TechLead _techLead;&#xA;&#xA;    public CallCenter(int numEmployees)&#xA;    {&#xA;        // create the tech lead and a supervising product manager&#xA;        _techLead = TechLead(new ProductManager());&#xA;&#xA;        _callQueue = new BlockingQueue&amp;lt;Call&amp;gt;();&#xA;        _freeFreshers = new Queue&amp;lt;Employee&amp;gt;();&#xA;        _busyFreshers = new List&amp;lt;Employee&amp;gt;();&#xA;&#xA;        for(int i = 0; i &amp;lt; numEmployees; i++)&#xA;        {&#xA;            _freeFreshers.Enqueue(new Fresher(_techLead));&#xA;        }&#xA;    }&#xA;&#xA;    public void AcceptCall(Call call)&#xA;    {&#xA;        _callQueue.Enqueue(call);&#xA;    }&#xA;&#xA;    // Assuming that threading will be handled&#xA;    public void StartCallService()&#xA;    {&#xA;        _running = true;&#xA;&#xA;        while(_running)&#xA;        {&#xA;            Call call = _callQueue.Dequeue();&#xA;&#xA;            // Subscribe for the on call serviced delegate&#xA;            call.OnCallServiced += new Call.CallServicedDelegate(OnCallServiced);&#xA;&#xA;            if(_freeFreshers.Count&amp;gt;0)&#xA;            {&#xA;                // Block until a fresher is available&#xA;                 Employee e = _freeFreshers.Dequeue();&#xA;&#xA;                 // Assign the call to a free fresher&#xA;                switch(e.ServiceCall(call))&#xA;                {&#xA;                    case EStatus.HANDLING:&#xA;                        _busyFreshers.Add(e);&#xA;                        break;&#xA;                    case EStatus.ESCALATED:&#xA;                        _freeFreshers.Enqueue(e);&#xA;                        break;&#xA;                    case EStatus.QUEUED:&#xA;                    default:&#xA;                        break;&#xA;                }&#xA;            }&#xA;            else&#xA;            {&#xA;                _techLead.ServiceCall(call);&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    // Assuming that threading will be handled&#xA;    public void StopCallService()&#xA;    {&#xA;        _running = false;&#xA;    }&#xA;&#xA;    private void OnCallServiced(Call call)&#xA;    {&#xA;        switch(call.CallHandler.Rank)&#xA;        {&#xA;            case ERank.FRESHER:&#xA;                _busyFreshers.Remove(call.CallHandler);&#xA;                _freeFreshers.Enqueue(call.CallHandler);&#xA;                break;&#xA;            case ERank.TECH_LEAD:&#xA;            case ERank.PROD_MANAGER:&#xA;            default:&#xA;                // nothing to do if it's a tech lead or prod manager&#xA;                break;&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Observation on chain of command.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;First thing to address is that &quot;chain of command&quot; behaves in a way other then what is specified in the problem. The problem states:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;An incoming telephone call must be allocated to a fresher who is free.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;The defined &quot;chain of command&quot; behavior...&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;If there are no free freshers, then the tech lead automatically gets the call.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;...stands in opposition to that. Additionally, in the way the solution is implemented it then follows that if the tech lead is busy then the call gets bumped to product manager. If the product manager is busy then the call is placed in his personal call queue, to wait until he is free.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This behavior has the consequence of filling the PMs personal call queue with unscreened calls whenever all freshers and the tech is busy. This makes the PM responsible for screening all of those calls, even if at some point a fresher were to become free.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Suggested improvement.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Implement the base caller class in such a way that it have to it assigned a queue^ of calls to watch. This would allow for 2 things:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;All freshers could watch the same queue^ of new calls. When a new call is received, it then could be added to a common fresher queue^.&lt;/li&gt;&#xA;&lt;li&gt;The tech lead and project manager could each be assigned their own queues^ where escalated calls could wait for them to become available.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;This allows for all new calls to wait for a fresher to be free, and for the TL and PM to only have calls queued to them that they need answer.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;^Queues could be lists. Read on...&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Observation on queuing behaviors.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In the implementation I counted 3 queues and a bonus list.&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;_callQueue in CallCenter. Intended to contain new calls.&lt;/li&gt;&#xA;&lt;li&gt;_freeFreshers in CallCenter. Holds freshers without calls.&lt;/li&gt;&#xA;&lt;li&gt;_callQueue in ProductManager. Holds PMs calls or unserviced calls (see chain of command).&lt;/li&gt;&#xA;&lt;li&gt;_busyFreshers* in CallCenter. This is not really a queue but it holds freshers from the _freeFreshers queue when they are not free.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;Q1:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In design, this queue holds the incoming calls. In practice, Q1 keeps the while(_running) loop in the StartCallService method from eating up as much cpu as possible. As soon as a call is added to Q1 it is &lt;em&gt;promptly&lt;/em&gt; dequeued and handled by (A)a free caller, (B) the tech lead, (C) the project manager, or (D) thrown in the PMs queue. &lt;em&gt;Nothing ever stays in Q1&lt;/em&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Q2 &amp;amp; Q4:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Q2 and Q4 are simply keeping track of the freshers busy state. Q4 only exists so that busy freshers are not lost? This also enforces a set behavior of choosing which free fresher takes a call. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Q3:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This queue behaves like a queue. Callers wait here for the attention of the project manager.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Suggested improvement.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;I am struggling with what to write here because, minus a few design flaws in other places, these queues are perfectly functional.&lt;/em&gt; But, what really should be asked is, &lt;strong&gt;is the function of a queue really wanted?&lt;/strong&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;In the case of Q2 &amp;amp; Q4, which are holding the free state and dictating who gets the next call. It makes more sense to add a IsBusy property to employee. That way CallCenter can simply have a _freshers list. To determine if a fresher is busy you just ask. To get a free fresher you are no longer stuck with whoever pops out of Q2. You may simply ask for the employee that fits the any criteria you like.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In the same way Q1 could be replaced by a list. When a new call comes in it is assigned to the best free fresher. If no fresher is available it is added to the unanswered calls list. When a fresher finishes a call a check to the unanswered calls list is made. This allows for the elimination of the while(_running) loop, &lt;em&gt;and I love eliminating loops&lt;/em&gt;, &lt;strong&gt;really love&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;really&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Observation on use of enums&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The defined enums...&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;enum EStatus{ HANDLING, ESCALATED, QUEUED }&#xA;enum ERank{ FRESHER, TECH_LEAD, PROD_MANAGER }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;...really end up being just duplicated information. ERank can be determined by class, and EStatus can be determined by which queue or employee has the call.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Suggested improvement.&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Just get rid of them.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;OH, getCallHandler()&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;At this point this seems like a silly (and somewhat mysteriously defined) thing to implement. Maybe another user why this is a sensible thing to implement?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;But, a requirement is a requirement.&lt;/em&gt; And, your Call.CallHandler, property has the right idea. I would just make it a method called getCallHandler() to play by the letter of the law, and null seems like a reasonable value to return if no one has handled the call yet.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As always, I too welcome comments or criticisms. Cheers!&lt;/p&gt;&#xA;" OwnerUserId="805" LastActivityDate="2011-02-10T23:37:53.127" CommentCount="5" />
  <row Id="737" PostTypeId="2" ParentId="720" CreationDate="2011-02-11T01:57:44.550" Score="0" Body="&lt;p&gt;Here is a running revision of my solution (based on all the answers):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;enum ERank{ FRESHER = 0, TECH_LEAD = 1, PROD_MANAGER = 2 }&#xA;&#xA;abstract class Employee&#xA;{&#xA;    // Properties&#xA;    public ERank Rank{get; private set;}&#xA;    public bool Busy{get; priavte set;}&#xA;&#xA;    // Fields&#xA;    protected static readonly CallService _callService = new CallService(SOME_GLOBAL_VALUE);&#xA;&#xA;    // Constructors&#xA;    public Employee(ERank rank)&#xA;    {&#xA;        Rank = rank;&#xA;        Busy = false;&#xA;    }&#xA;&#xA;    public void ServiceCall(Call call)&#xA;    {&#xA;        if(CanService(call))&#xA;        {&#xA;            Busy = true;&#xA;            call.Service(this);&#xA;        }&#xA;        else&#xA;        {&#xA;            // Only escalate if there is a superior rank available&#xA;            if(!Busy &amp;amp;&amp;amp; (Rank != ERank.PROD_MANAGER))&#xA;            {&#xA;                call.Escalate();&#xA;            }&#xA;&#xA;            // Put the call back onto the queue&#xA;            _callService.AcceptCall(call);&#xA;        }&#xA;    }&#xA;&#xA;    public void OnCallServiced(Call call)&#xA;    {&#xA;        if(this != call.CallHandler)&#xA;        {&#xA;            // TODO: this call was never accepted&#xA;            // somebody is innapropriately calling this method&#xA;        }&#xA;        else&#xA;        {&#xA;            Call nextCall = _callService.GetNextCall();&#xA;            if(nextCall == null)&#xA;            {&#xA;                Busy = false;&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    protected abstract bool CanService(Call call);&#xA;}&#xA;&#xA;class Fresher:Employee&#xA;{&#xA;    public Fresher():base(ERank.FRESHER){}&#xA;    private override bool CanService(Call call){ /*...*/ }&#xA;}&#xA;&#xA;class TechLead:Employee&#xA;{    &#xA;    public TechLead():base(ERank.TECH_LEAD){}&#xA;    private override bool CanService(Call call){ /*...*/ }&#xA;}&#xA;&#xA;class ProductManager:Employee&#xA;{    &#xA;    public ProductManager():base(ERank.PROD_MANAGER){}&#xA;    private override bool CanService(Call call){ /*...*/ }&#xA;}&#xA;&#xA;class Call&#xA;{    &#xA;    public Employee CallHandler{get; private set;}&#xA;    public ERank AcceptableRank{get; private set;}&#xA;&#xA;    public Call()&#xA;    {&#xA;        CallHandler = null;&#xA;        AcceptableRank = ERank.FRESHER;&#xA;    }&#xA;&#xA;    public void Service(Employee callHandler)&#xA;    {&#xA;        CallHandler = callHandler;&#xA;&#xA;        // notify the call handler when the call is serviced&#xA;        CallHandler.OnCallServiced(this);&#xA;    }&#xA;&#xA;    public void Escalate()&#xA;    {&#xA;        if((in)AcceptableRank &amp;lt; (int)ERank.PROD_MANAGER)&#xA;        {&#xA;            AcceptableRank = ERank(((int)AcceptableRank)+1);&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;class CallCenter&#xA;{&#xA;    private Employee[][] _employees;&#xA;    private Queue&amp;lt;Call&amp;gt;[] _rankedCallQueue;&#xA;&#xA;    public CallCenter(int numEmployees)&#xA;    {&#xA;        _prodManager = new ProductManager();&#xA;        _techLead = new TechLead();&#xA;&#xA;        _rankedCallQueue = new Queue&amp;lt;Call&amp;gt;[((int)ERank.PROD_MANAGER)+1];&#xA;        _employees = new Employee[((int)ERank.PROD_MANAGER)+1][];&#xA;&#xA;        for(int rank = 0; rank &amp;lt;= (int)ERank.PROD_MANAGER; rank++)&#xA;        {&#xA;            _rankedCallQueue[rank] = new Queue&amp;lt;Call&amp;gt;();&#xA;            switch((ERank)rank)&#xA;            {&#xA;                case ERank.Fresher:&#xA;                    _employees[rank] = new Employee[numEmployees];&#xA;                    for(int i = 0; i &amp;lt; numEmployees; i++)&#xA;                    {&#xA;                        _employees[rank][i] = new Fresher();&#xA;                    }&#xA;                    break;&#xA;                case ERank.TECH_LEAD:&#xA;                    _emlpoyees[rank] = new Employee[]{new TechLead()};&#xA;                    break;&#xA;                case ERank.PROD_MANAGER:&#xA;                    _employees[rank] = new Employee[]{new ProductManager()};&#xA;                    break;&#xA;                default:&#xA;                    break;&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    public Employee GetCallHandler(Call call)&#xA;    {&#xA;        int rank = (int)call.AcceptableRank;&#xA;        for(int i = 0; i &amp;lt; _employees[rank].Length; i++)&#xA;        {&#xA;            if(!_employees[rank][i].Busy)&#xA;            {&#xA;                return _employees[rank][i];&#xA;            }&#xA;        }&#xA;        return null;&#xA;    }&#xA;&#xA;    public void AcceptCall(Call call)&#xA;    {&#xA;        Employee employe = GetCallHandler(call);&#xA;        if(employee == null)&#xA;        {&#xA;            _rankedQueue[(int)call.AcceptableRank].Enqueue(call);&#xA;        }&#xA;        else&#xA;        {&#xA;            employee.ServiceCall(call);&#xA;        }&#xA;    }&#xA;&#xA;    public Call GetNextCall(ERank rank)&#xA;    {&#xA;        if(_callQueue[(int)rank].Count == 0)&#xA;        {&#xA;            return null;&#xA;        }&#xA;        else&#xA;        {&#xA;            return _callQueue[(int)rank].Dequeue();&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1468" LastEditorUserId="1468" LastEditDate="2011-02-11T02:21:54.700" LastActivityDate="2011-02-11T02:21:54.700" CommentCount="0" />
  <row Id="739" PostTypeId="2" ParentId="692" CreationDate="2011-02-11T03:20:44.103" Score="3" Body="&lt;p&gt;&lt;strong&gt;First Cut:&lt;/strong&gt; Since every row contains the same set of fields, you can clean up the code considerably by skipping the inner loop.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$question_array = array();&#xA;foreach ($quiz_data as $row) {&#xA;    $qId = $row['question_id'];&#xA;    $aId = $row['answer_id'];&#xA;    $answer = array(&#xA;            'id' =&amp;gt; $aId,&#xA;            'text' =&amp;gt; $row['answer'],&#xA;            'hint' =&amp;gt; $row['hint'],&#xA;            'correct' =&amp;gt; $row['correct'],&#xA;        );&#xA;    if (!array_key_exists($qId, $question_array)) {&#xA;        $question_array[$qId] = array(&#xA;                'id' =&amp;gt; $qId,&#xA;                'text' =&amp;gt; $row['question'],&#xA;                'explanation' = $row['explanation'],&#xA;                'sort' = $row['sort_order'],&#xA;            );&#xA;    }&#xA;    $question_array[$qId]['answers'][$aId] = $answer;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Second Cut:&lt;/strong&gt; Use objects instead of arrays. While it may seem to have little payoff at first, as you start performing more complex operations on questions and answers you'll gain much from the encapsulation.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$question_array = array();&#xA;foreach ($quiz_data as $row) {&#xA;    $qId = $row['question_id'];&#xA;    $answer = new Answer($row['answer_id'], $row['answer'], $row['hint'], $row['correct']);&#xA;    if (!array_key_exists($qId, $question_array)) {&#xA;        $question_array[$qId] = $question &#xA;                = new Question($qId, $row['question'], $row['explanation'], $row['sort_order']);&#xA;    }&#xA;    else {&#xA;        $question = $question_array[$qId];&#xA;    }&#xA;    $question-&amp;gt;addAnswers($answer);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Here are the most basic definitions for the Question and Answer classes to get you started.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class Question {&#xA;    private $id;&#xA;    private $text;&#xA;    private $explanation;&#xA;    private $sortOrder;&#xA;    private $answers = array();&#xA;    public function __construct($id, $text, $explanation, $sortOrder) {&#xA;        $this-&amp;gt;id = $id;&#xA;        $this-&amp;gt;text = $text;&#xA;        $this-&amp;gt;explanation = $explanation;&#xA;        $this-&amp;gt;sortOrder = $sortOrder;&#xA;    }&#xA;    public addAnswer(Answer $answer) {&#xA;        $this-&amp;gt;answers[$answer-&amp;gt;getId()] = $answer;&#xA;    }&#xA;    ... property accessors and other methods ...&#xA;}&#xA;&#xA;class Answer {&#xA;    private $id;&#xA;    private $text;&#xA;    private $hint;&#xA;    private $correct;&#xA;    public function __construct($id, $text, $hint, $correct) {&#xA;        $this-&amp;gt;id = $id;&#xA;        $this-&amp;gt;text = $text;&#xA;        $this-&amp;gt;hint = $hint;&#xA;        $this-&amp;gt;correct = $correct;&#xA;    }&#xA;    ... property accessors and other methods ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1635" LastActivityDate="2011-02-11T03:20:44.103" CommentCount="4" />
  <row Id="740" PostTypeId="2" ParentId="732" CreationDate="2011-02-11T04:30:53.200" Score="5" Body="&lt;p&gt;If you want to duplicate &lt;code&gt;GroupBy&lt;/code&gt; semantics exactly, there are several things missing:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Eager error checking on parameters instead of deferred&lt;/li&gt;&#xA;&lt;li&gt;The correct order of the groups (&lt;code&gt;GroupBy&lt;/code&gt; guarantees that the groups are ordered by the relative order of the group's first element in the source)&lt;/li&gt;&#xA;&lt;li&gt;Allowing keys that are &lt;code&gt;null&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;You may be interested in Jon Skeet's &lt;a href=&quot;http://codeblog.jonskeet.uk/2011/01/01/reimplementing-linq-to-objects-part-21-groupby/&quot; rel=&quot;nofollow noreferrer&quot;&gt;recent blog postings&lt;/a&gt;.&lt;/p&gt;&#xA;" OwnerUserId="1636" LastEditorUserId="103677" LastEditDate="2016-11-16T22:00:05.563" LastActivityDate="2016-11-16T22:00:05.563" CommentCount="5" />
  <row Id="741" PostTypeId="2" ParentId="590" CreationDate="2011-02-11T05:34:33.960" Score="2" Body="&lt;p&gt;Pull that block of code out into its own method if it isn't already, and then just do:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if (runPart1.Checked &amp;amp;&amp;amp; (cmdPart1 != &quot;done&quot;)) return;&#xA;if (runPart2.Checked &amp;amp;&amp;amp; (cmdPart2 != &quot;done&quot;)) return;&#xA;if (runPart3.Checked &amp;amp;&amp;amp; (cmdPart3 != &quot;done&quot;)) return;&#xA;if (runPart4.Checked &amp;amp;&amp;amp; (cmdPart4 != &quot;done&quot;)) return;&#xA;&#xA;allDone();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This isn't C. We don't have to be afraid of early returns anymore.&lt;/p&gt;&#xA;" OwnerUserId="816" LastActivityDate="2011-02-11T05:34:33.960" CommentCount="0" />
  <row Id="742" PostTypeId="2" ParentId="673" CreationDate="2011-02-11T09:34:02.090" Score="0" Body="&lt;p&gt;You could do a simple &lt;a href=&quot;http://api.jquery.com/map/&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt;, instead of the code you have there in your self-answer: &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var numArray = $(':input[name^=&quot;ticket_fields&quot;]').map(function(){&#xA;    fieldId = this.name.replace(/\D/g, &quot;&quot;);&#xA;    if ($.inArray(fieldId,numArray) === -1) return fieldId;&#xA;}).get();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Also using &lt;code&gt;this.name&lt;/code&gt; instead of &lt;code&gt;$(this).attr('name')&lt;/code&gt;, which is &lt;a href=&quot;http://whattheheadsaid.com/2010/10/utilizing-the-awesome-power-of-jquery-to-access-properties-of-an-element&quot; rel=&quot;nofollow&quot;&gt;massively inefficient&lt;/a&gt;. &lt;/p&gt;&#xA;" OwnerUserId="697" LastActivityDate="2011-02-11T09:34:02.090" CommentCount="0" />
  <row Id="743" PostTypeId="2" ParentId="533" CreationDate="2011-02-11T10:40:35.640" Score="3" Body="&lt;p&gt;Since you are writing Django code, you don't need lambdas at all (explanation below). In other Python code, you might want to use list comprehensions, as other commenters have mentioned. &lt;code&gt;lambda&lt;/code&gt;s are a powerful concept, but they are extremely crippled in Python, so you are better off with loops and comprehensions.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Now to the Django corrections.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;tasks = Task.objects.all()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;tasks&lt;/code&gt; is a &lt;code&gt;QuerySet&lt;/code&gt;. &lt;code&gt;QuerySet&lt;/code&gt;s are lazy-evaluated, i.e. the actual SQL to the database is deferred to the latest possible time. Since you are using lambdas, you actually force Django to do an expensive &lt;code&gt;SELECT * FROM ...&lt;/code&gt; and filter everything manually and in-memory, instead of letting the database do its work.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;contexts_to_display = ...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If those contexts are Django model instances, then you can be more efficient with the queries and fields instead of separate methods:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;# tasks = Task.objects.all()&#xA;# tasks = filter(lambda t: t.matches_contexts(contexts_to_display), tasks)    &#xA;# tasks = filter(lambda t: not t.is_future(), tasks)&#xA;# tasks = sorted(tasks, Task.compare_by_due_date)&#xA;qs = Task.objects.filter(contexts__in=contexts_to_display, date__gt=datetime.date.today()).order_by(due_date)&#xA;tasks = list(qs)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The last line will cause Django to actually evaluate the &lt;code&gt;QuerySet&lt;/code&gt; and thus send the SQL to the database. Therefore you might as well want to return &lt;code&gt;qs&lt;/code&gt; instead of &lt;code&gt;tasks&lt;/code&gt; and iterate over it in your template.&lt;/p&gt;&#xA;" OwnerUserId="1591" LastActivityDate="2011-02-11T10:40:35.640" CommentCount="2" />
  <row Id="744" PostTypeId="1" AcceptedAnswerId="749" CreationDate="2011-02-11T13:23:35.370" Score="8" ViewCount="1428" Body="&lt;p&gt;I've written a lengthy procedure that I call a few times to apply filters defined by the customer to a table, as I didn't see how I could turn my &lt;strong&gt;column name string&lt;/strong&gt; into a &lt;strong&gt;LINQ column&lt;/strong&gt; and how I could turn my &lt;strong&gt;action string&lt;/strong&gt; into an &lt;strong&gt;action on a string&lt;/strong&gt; in such way that the function can be used in the LINQ query like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private void applyFilterAction(ref IQueryable&amp;lt;TempArticle&amp;gt; products, FilterAction action)&#xA;{&#xA;    products = from p in products where MAGIC(p, action.Column).ToLower().MAGIC2(action.Action, action.Value) == action.AddOrKill select p;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I wrote this instead as a temporary solution:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private void applyFilterAction(ref IQueryable&amp;lt;TempArticle&amp;gt; products, FilterAction action)&#xA;{&#xA;    var actionValue = action.Value.ToLower();&#xA;    var column = action.Column;&#xA;&#xA;    if (action.Action.Equals(&quot;StartsWith&quot;))&#xA;    {&#xA;        if (column.Equals(&quot;Description&quot;))           products = from p in products where p.Description.ToLower().StartsWith(actionValue) == action.AddOrKill select p;&#xA;        else if (column.Equals(&quot;LongDescription&quot;))  products = from p in products where p.LongDescription.ToLower().StartsWith(actionValue) == action.AddOrKill select p;&#xA;        else if (column.Equals(&quot;Provider&quot;))         products = from p in products where p.Provider.ToLower().StartsWith(actionValue) == action.AddOrKill select p;&#xA;        else if (column.Equals(&quot;ProviderCode&quot;))     products = from p in products where p.ProviderCode.ToLower().StartsWith(actionValue) == action.AddOrKill select p;&#xA;        else if (column.Equals(&quot;Publisher&quot;))        products = from p in products where p.Publisher.ToLower().StartsWith(actionValue) == action.AddOrKill select p;&#xA;        else if (column.Equals(&quot;PublisherCode&quot;))    products = from p in products where p.PublisherCode.ToLower().StartsWith(actionValue) == action.AddOrKill select p;&#xA;        else if (column.Equals(&quot;Custom1&quot;))          products = from p in products where p.Custom1.ToLower().StartsWith(actionValue) == action.AddOrKill select p;&#xA;        else if (column.Equals(&quot;Custom2&quot;))          products = from p in products where p.Custom2.ToLower().StartsWith(actionValue) == action.AddOrKill select p;&#xA;        else if (column.Equals(&quot;Custom3&quot;))          products = from p in products where p.Custom3.ToLower().StartsWith(actionValue) == action.AddOrKill select p;&#xA;        else if (column.Equals(&quot;EanCode&quot;))          products = from p in products where p.EanCode.ToLower().StartsWith(actionValue) == action.AddOrKill select p;&#xA;    }&#xA;&#xA;    else if (action.Action.Equals(&quot;EndsWith&quot;))&#xA;    {&#xA;        if (column.Equals(&quot;Description&quot;))           products = from p in products where p.Description.ToLower().EndsWith(actionValue) == action.AddOrKill select p;&#xA;        else if (column.Equals(&quot;LongDescription&quot;))  products = from p in products where p.LongDescription.ToLower().EndsWith(actionValue) == action.AddOrKill select p;&#xA;        else if (column.Equals(&quot;Provider&quot;))         products = from p in products where p.Provider.ToLower().EndsWith(actionValue) == action.AddOrKill select p;&#xA;        else if (column.Equals(&quot;ProviderCode&quot;))     products = from p in products where p.ProviderCode.ToLower().EndsWith(actionValue) == action.AddOrKill select p;&#xA;        else if (column.Equals(&quot;Publisher&quot;))        products = from p in products where p.Publisher.ToLower().EndsWith(actionValue) == action.AddOrKill select p;&#xA;        else if (column.Equals(&quot;PublisherCode&quot;))    products = from p in products where p.PublisherCode.ToLower().EndsWith(actionValue) == action.AddOrKill select p;&#xA;        else if (column.Equals(&quot;Custom1&quot;))          products = from p in products where p.Custom1.ToLower().EndsWith(actionValue) == action.AddOrKill select p;&#xA;        else if (column.Equals(&quot;Custom2&quot;))          products = from p in products where p.Custom2.ToLower().EndsWith(actionValue) == action.AddOrKill select p;&#xA;        else if (column.Equals(&quot;Custom3&quot;))          products = from p in products where p.Custom3.ToLower().EndsWith(actionValue) == action.AddOrKill select p;&#xA;        else if (column.Equals(&quot;EanCode&quot;))          products = from p in products where p.EanCode.ToLower().EndsWith(actionValue) == action.AddOrKill select p;&#xA;    }&#xA;&#xA;    else if (action.Action.Equals(&quot;Contains&quot;))&#xA;    {&#xA;        if (column.Equals(&quot;Description&quot;))           products = from p in products where p.Description.ToLower().Contains(actionValue) == action.AddOrKill select p;&#xA;        else if (column.Equals(&quot;LongDescription&quot;))  products = from p in products where p.LongDescription.ToLower().Contains(actionValue) == action.AddOrKill select p;&#xA;        else if (column.Equals(&quot;Provider&quot;))         products = from p in products where p.Provider.ToLower().Contains(actionValue) == action.AddOrKill select p;&#xA;        else if (column.Equals(&quot;ProviderCode&quot;))     products = from p in products where p.ProviderCode.ToLower().Contains(actionValue) == action.AddOrKill select p;&#xA;        else if (column.Equals(&quot;Publisher&quot;))        products = from p in products where p.Publisher.ToLower().Contains(actionValue) == action.AddOrKill select p;&#xA;        else if (column.Equals(&quot;PublisherCode&quot;))    products = from p in products where p.PublisherCode.ToLower().Contains(actionValue) == action.AddOrKill select p;&#xA;        else if (column.Equals(&quot;Custom1&quot;))          products = from p in products where p.Custom1.ToLower().Contains(actionValue) == action.AddOrKill select p;&#xA;        else if (column.Equals(&quot;Custom2&quot;))          products = from p in products where p.Custom2.ToLower().Contains(actionValue) == action.AddOrKill select p;&#xA;        else if (column.Equals(&quot;Custom3&quot;))          products = from p in products where p.Custom3.ToLower().Contains(actionValue) == action.AddOrKill select p;&#xA;        else if (column.Equals(&quot;EanCode&quot;))          products = from p in products where p.EanCode.ToLower().Contains(actionValue) == action.AddOrKill select p;&#xA;    }&#xA;&#xA;    else if (action.Action.Equals(&quot;Exact&quot;))&#xA;    {&#xA;        if (column.Equals(&quot;Description&quot;))           products = from p in products where p.Description.ToLower().Equals(actionValue) == action.AddOrKill select p;&#xA;        else if (column.Equals(&quot;LongDescription&quot;))  products = from p in products where p.LongDescription.ToLower().Equals(actionValue) == action.AddOrKill select p;&#xA;        else if (column.Equals(&quot;Provider&quot;))         products = from p in products where p.Provider.ToLower().Equals(actionValue) == action.AddOrKill select p;&#xA;        else if (column.Equals(&quot;ProviderCode&quot;))     products = from p in products where p.ProviderCode.ToLower().Equals(actionValue) == action.AddOrKill select p;&#xA;        else if (column.Equals(&quot;Publisher&quot;))        products = from p in products where p.Publisher.ToLower().Equals(actionValue) == action.AddOrKill select p;&#xA;        else if (column.Equals(&quot;PublisherCode&quot;))    products = from p in products where p.PublisherCode.ToLower().Equals(actionValue) == action.AddOrKill select p;&#xA;        else if (column.Equals(&quot;Custom1&quot;))          products = from p in products where p.Custom1.ToLower().Equals(actionValue) == action.AddOrKill select p;&#xA;        else if (column.Equals(&quot;Custom2&quot;))          products = from p in products where p.Custom2.ToLower().Equals(actionValue) == action.AddOrKill select p;&#xA;        else if (column.Equals(&quot;Custom3&quot;))          products = from p in products where p.Custom3.ToLower().Equals(actionValue) == action.AddOrKill select p;&#xA;        else if (column.Equals(&quot;EanCode&quot;))          products = from p in products where p.EanCode.ToLower().Equals(actionValue) == action.AddOrKill select p;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It filters products based on an &lt;code&gt;action&lt;/code&gt; object that contains:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;column&lt;/code&gt;: Column of the product table that needs to be filtered.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;action&lt;/code&gt;: The action to perform on the strings coming from that column.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;value&lt;/code&gt;: The value to compare against using the action. &lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Could I write this in a better way? I didn't get the switch statements in the MAGIC functions to LINQify.&lt;/p&gt;&#xA;" OwnerUserId="1654" LastEditorUserId="22222" LastEditDate="2015-06-12T05:12:38.140" LastActivityDate="2015-06-12T05:49:47.753" Title="Applying filters to a table" Tags="&lt;c#&gt;&lt;linq&gt;" AnswerCount="4" CommentCount="2" FavoriteCount="0" />
  <row Id="745" PostTypeId="2" ParentId="721" CreationDate="2011-02-11T14:40:18.087" Score="4" Body="&lt;p&gt;There are built in mechanisms for automatically switching an entire form to use text from culture-specific resource files and it is more powerful than just setting the text property (ToolTips for example). The only times you should need to manually load from the resource file are for things like message boxes, but unless you need your application to block while displaying an alert you might as well use balloon tips which are localizable as well. &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/y99d1cd3%28v=VS.100%29.aspx&quot; rel=&quot;nofollow&quot;&gt;This&lt;/a&gt; is an easy place to start. It will also be more efficient as the controls themselves are localization aware so there's no need to loop through anything.&lt;/p&gt;&#xA;" OwnerUserId="1349" LastActivityDate="2011-02-11T14:40:18.087" CommentCount="1" />
  <row Id="746" PostTypeId="1" CreationDate="2011-02-11T14:54:59.473" Score="5" ViewCount="294" Body="&lt;p&gt;The main view in my (toy!) Todo app is, of course, to display the list of tasks.  These are grouped by some criterion, and the &lt;code&gt;tasks&lt;/code&gt; structure below is actually a list of pairs (header, list of tasks).&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;{% for tasks in tasks %}&#xA;    &amp;lt;p class=&quot;list-header&quot;&amp;gt;{{ tasks.0 }}:&amp;lt;/p&amp;gt;&#xA;    &amp;lt;ul&amp;gt;&#xA;    {% for t in tasks.1 %}&#xA;        &amp;lt;li&amp;gt;&#xA;            &amp;lt;span class=&quot;&#xA;                {% if t.priority &amp;gt;= 1 %}prio-medium{% endif %}&#xA;                {% if t.priority &amp;gt;= 2 %}prio-high{% endif %}&#xA;                &quot;&amp;gt;&#xA;                {{ t.description }}&#xA;            &amp;lt;/span&amp;gt;&#xA;            {% if t.due_date %}&#xA;                due, &#xA;                &amp;lt;span class=&quot;&#xA;                    {% if t.days_to_due_date &amp;lt; 15 %}date-soon{% endif %}&#xA;                    {% if t.days_to_due_date &amp;lt; 3 %}date-very-soon{% endif %}&#xA;                    {% if t.days_to_due_date &amp;lt; 0 %}date-overdue{% endif %}&#xA;                    &quot;&amp;gt;&#xA;                    {{ t.relative_due_date }}&#xA;                &amp;lt;/span&amp;gt;&#xA;            {% endif %}&#xA;            - &#xA;            {% if not t.done %}&#xA;                &amp;lt;a href=&quot;/yata/{{ t.id }}/mark_done/&quot;&amp;gt;Done!&amp;lt;/a&amp;gt;&#xA;            {% else %}&#xA;                &amp;lt;a href=&quot;/yata/{{ t.id }}/mark_not_done/&quot;&amp;gt;Not done!&amp;lt;/a&amp;gt;&#xA;            {% endif %}&#xA;            - &#xA;            &amp;lt;a href=&quot;/yata/{{ t.id }}/edit/&quot;&amp;gt;Edit&amp;lt;/a&amp;gt;&#xA;        &amp;lt;/li&amp;gt;&#xA;    {% endfor %}&#xA;    &amp;lt;/ul&amp;gt;&#xA;{% empty %}&#xA;    &amp;lt;p class=&quot;list-header&quot;&amp;gt;Cool! Nothing to do...&amp;lt;/p&amp;gt;&#xA;{% endfor %}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In particular, I'm wondering if deciding which CSS class to assign is considered to be the view function's role, or if it's correct to put it in the template.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Similarly, I'm also wondering about the presence of several URLs in the template. Would they be better in the &lt;code&gt;tasks&lt;/code&gt; structure itself?  Or should they be provided through some methods in the &lt;code&gt;Task&lt;/code&gt; class? After all, &lt;code&gt;relative_due_date&lt;/code&gt; is already a function that's only used for display (it returns a string like 'Yesterday', 'Tomorrow' or 'In 3 days'). And shouldn't I use &lt;code&gt;reverse()&lt;/code&gt;?&lt;/p&gt;&#xA;" OwnerUserId="917" LastEditorUserId="22222" LastEditDate="2015-07-10T21:05:21.363" LastActivityDate="2015-07-10T21:05:21.363" Title="Todo app for displaying a list of tasks" Tags="&lt;css&gt;&lt;django&gt;&lt;to-do-list&gt;" AnswerCount="3" CommentCount="0" />
  <row Id="747" PostTypeId="2" ParentId="744" CreationDate="2011-02-11T15:15:17.790" Score="2" Body="&lt;p&gt;I don't see anything LINQ related that could be done here... but it looks to me like all the contents of all the IF statements are the same. Perhaps that should be extracted into a method?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also: &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;ToLower().StartsWith(actionValue) == action.AddOrKill&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Should be&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;StartsWith(actionValue, StringComparison.CurrentCultureIgnoreCase) == action.AddOrKill &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Using &lt;code&gt;ToLower&lt;/code&gt; for case insensitive string comparisons doesn't respect the culture of the current system, and will give wrong results for several languages (particularly those with 3 cases rather than 2). Plus, it's slower, because you're converting the entire string, rather than simply running comparisons on the beginning of the string.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;EDIT: I see the difference between the IF blocks now. It's been a while since I've played with C#, so I'm not entirely sure this will compile out of the box, but it should give you the idea. Basically you pass around a functor rather than replicating the if block over and over again:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private void applyFilterAction(ref IQueryable&amp;lt;TempArticle&amp;gt; products, FilterAction action)&#xA;{&#xA;    var actionValue = action.Value.ToLower();&#xA;    var column = action.Column;&#xA;    Func&amp;lt;string, string, bool&amp;gt; comparer;&#xA;&#xA;    if (action.Action.Equals(&quot;StartsWith&quot;))&#xA;    {&#xA;        comparer = (a, b) =&amp;gt; a.StartsWith(b, StringComparison.CurrentCultureIgnoreCase);&#xA;    }&#xA;    else if (action.Action.Equals(&quot;EndsWith&quot;))&#xA;    {&#xA;        comparer = (a, b) =&amp;gt; a.EndsWith(b, StringComparison.CurrentCultureIgnoreCase);&#xA;    }&#xA;    else if (action.Action.Equals(&quot;Contains&quot;))&#xA;    {&#xA;        comparer = (a, b) =&amp;gt; a.Contains(b, StringComparison.CurrentCultureIgnoreCase);&#xA;    }&#xA;    else if (action.Action.Equals(&quot;Exact&quot;))&#xA;    {&#xA;        comparer = (a, b) =&amp;gt; a.Equals(b, StringComparison.CurrentCultureIgnoreCase);&#xA;    }&#xA;&#xA;    if (column == &quot;Description&quot;)           products = from p in products where comparer(p.Description, actionValue) == action.AddOrKill select p;&#xA;    else if (column == &quot;LongDescription&quot;)  products = from p in products where comparer(p.LongDescription, actionValue) == action.AddOrKill select p;&#xA;    else if (column == &quot;Provider&quot;)         products = from p in products where comparer(p.Provider, actionValue) == action.AddOrKill select p;&#xA;    else if (column == &quot;ProviderCode&quot;)     products = from p in products where comparer(p.ProviderCode, actionValue) == action.AddOrKill select p;&#xA;    else if (column == &quot;Publisher&quot;)        products = from p in products where comparer(p.Publisher, actionValue) == action.AddOrKill select p;&#xA;    else if (column == &quot;PublisherCode&quot;)    products = from p in products where comparer(p.PublisherCode, actionValue) == action.AddOrKill select p;&#xA;    else if (column == &quot;Custom1&quot;)          products = from p in products where comparer(p.Custom1, actionValue) == action.AddOrKill select p;&#xA;    else if (column == &quot;Custom2&quot;)          products = from p in products where comparer(p.Custom2, actionValue) == action.AddOrKill select p;&#xA;    else if (column == &quot;Custom3&quot;)          products = from p in products where comparer(p.Custom3, actionValue) == action.AddOrKill select p;&#xA;    else if (column == &quot;EanCode&quot;)          products = from p in products where comparer(p.EanCode, actionValue) == action.AddOrKill select p;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Like I said, it's been a while since I've messed with C#, so this might not work :)&lt;/p&gt;&#xA;" OwnerUserId="22" LastEditorUserId="22" LastEditDate="2011-02-11T21:21:13.377" LastActivityDate="2011-02-11T21:21:13.377" CommentCount="5" />
  <row Id="748" PostTypeId="2" ParentId="732" CreationDate="2011-02-11T15:50:27.547" Score="0" Body="&lt;p&gt;One thing that stands out is your Dictionary usage. When checking existence and using a value you should use TryGetValue like so:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;List&amp;lt;TElement&amp;gt; tmpList;&#xA;if (!dict.TryGetValue(key, out tmpList))&#xA;{&#xA;    dict.Add(key, tmpList = new List&amp;lt;TElement&amp;gt;());&#xA;}&#xA;tmpList.Add(x);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Also, in regard to the LINQ change mentioned by mjcopple, there's no need to use Select; it's less efficient and provides no benefit over your yield return in this case. I could understand if it even promoted more readability, but in this case it doesn't and I would stick to your first solution for the sake of efficiency.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;No biggie, but since you're just decorating the enumeration of elements, you might as well use it's implementation of the non-generic IEnumerable which will save you a method on the call stack (not much). There's also a chance that the underlying implementation has a more efficient non-generic enumerator than wrapping the generic one (though this is generally uncommon and not the case for List)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;IEnumerator IEnumerable.GetEnumerator()&#xA;{&#xA;    return ((IEnumerable)_elements).GetEnumerator();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Stephen Cleary makes relevant comments on the completeness of your implementation so I thought I'd just toss out code pointers.&lt;/p&gt;&#xA;" OwnerUserId="1349" LastActivityDate="2011-02-11T15:50:27.547" CommentCount="2" />
  <row Id="749" PostTypeId="2" ParentId="744" CreationDate="2011-02-11T20:39:59.887" Score="7" Body="&lt;ol&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;strong&gt;YOU HAVE A LOT OF CODE REPEATING ITSELF&lt;/strong&gt; - it definitely means something. Basically you have two fields to consider - &lt;code&gt;action&lt;/code&gt; and &lt;code&gt;column&lt;/code&gt;. Since all your columns are considered to be strings so you can separate &lt;strong&gt;a)&lt;/strong&gt; logic which determines which column to take and &lt;strong&gt;b)&lt;/strong&gt; logic which determines how to filter columns. This will lead to dramatical changes in your code.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here is a sample:  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private void applyFilterAction(ref IQueryable&amp;lt;TempArticle&amp;gt; products, FilterAction action)&#xA;{&#xA;    var actionValue = action.Value.ToLower();&#xA;    var column = action.Column;&#xA;&#xA;    Func&amp;lt;TempArticle, string&amp;gt; valueExtractor;&#xA;    // determining field&#xA;    if (column.Equals(&quot;Description&quot;)) valueExtractor = p =&amp;gt; p.Description;&#xA;    else if (column.Equals(&quot;LongDescription&quot;)) valueExtractor = p =&amp;gt; p.LongDescription;&#xA;    else if (column.Equals(&quot;Provider&quot;)) valueExtractor = p =&amp;gt; p.Provider;&#xA;    else if (column.Equals(&quot;ProviderCode&quot;)) valueExtractor = p =&amp;gt; p.ProviderCode;&#xA;    else if (column.Equals(&quot;Publisher&quot;)) valueExtractor = p =&amp;gt; p.Publisher;&#xA;    else if (column.Equals(&quot;PublisherCode&quot;)) valueExtractor = p =&amp;gt; p.PublisherCode;&#xA;    else if (column.Equals(&quot;Custom1&quot;)) valueExtractor = p =&amp;gt; p.Custom1;&#xA;    else if (column.Equals(&quot;Custom2&quot;)) valueExtractor = p =&amp;gt; p.Custom2;&#xA;    else if (column.Equals(&quot;Custom3&quot;)) valueExtractor = p =&amp;gt; p.Custom3;&#xA;    else if (column.Equals(&quot;EanCode&quot;)) valueExtractor = p =&amp;gt; p.EanCode;&#xA;    else throw new NotSupportedException(column);&#xA;&#xA;    Predicate&amp;lt;string&amp;gt; filteringPredicate;&#xA;&#xA;    // determining predicate&#xA;    if (action.Action.Equals(&quot;StartsWith&quot;)) filteringPredicate = s =&amp;gt; s.StartsWith(actionValue);&#xA;    else if (action.Action.Equals(&quot;EndsWith&quot;)) filteringPredicate = s =&amp;gt; s.EndsWith(actionValue);&#xA;    else if (action.Action.Equals(&quot;Contains&quot;)) filteringPredicate = s =&amp;gt; s.Contains(actionValue);&#xA;    else if (action.Action.Equals(&quot;Exact&quot;)) filteringPredicate = s =&amp;gt; s.Equals(actionValue);&#xA;    else throw new NotSupportedException(action.Action);&#xA;&#xA;    products = from p in products where filteringPredicate(valueExtractor(p).ToLower()) == action.AddOrKill select p;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This approach is much better but I would go even further. Instead of this &lt;code&gt;if&lt;/code&gt; blocks I would use dictionaries which will map input string into corresponding delegates .&lt;br&gt;&#xA;It has nothing to do with LINQ yet, only common sense. This was the main part. My other points are:  &lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;strong&gt;UpperCamelCase&lt;/strong&gt;?  &lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;&lt;code&gt;action.AddOrKill&lt;/code&gt; looks very strange. It took me a while to understand what are you trying to achieve with it. It looks very weird and should be rewritten in some other, more developer-friendly way. &lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;I would not use such a method signature - void with ref parameter. It doesn't look solid with existing LINQ methods and there is no point in having such a signature. I would use regular LINQ &lt;code&gt;IQueryable MethodName(IQueryable&amp;lt;&amp;gt; source, ...other parameters)&lt;/code&gt;.  &lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;I believe in such cases you should create fluent interface - it will improve code readability a lot. Especially in implementing &lt;code&gt;NOT&lt;/code&gt; functionality.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;" OwnerUserId="645" LastEditorUserId="22222" LastEditDate="2015-06-12T05:49:47.753" LastActivityDate="2015-06-12T05:49:47.753" CommentCount="3" />
  <row Id="750" PostTypeId="2" ParentId="714" CreationDate="2011-02-11T20:59:53.250" Score="8" Body="&lt;pre&gt;&lt;code&gt;// keep track of visited nodes so we don't visit them twice&#xA;std::vector&amp;lt;node&amp;gt; visited_nodes;&#xA;auto visited = [&amp;amp;visited_nodes] (node n) {&#xA;    return std::find(visited_nodes.begin(), visited_nodes.end(), n) != visited_nodes.end();&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Every time you have to check whether a point has been visited, this is going to scan over the entire list of visited_nodes. Better to do a std::set&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// path is currently from end to start, so reverse it&#xA;std::copy(path.rbegin(), path.rend(), ret.second);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Rather then constructing the path and reversing it, you could construct the path backwards.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;When it comes to constructing all of the child nodes, I think your approach is confusing. You'd be better of constructing a new node rather then reusing the node. As it is, its not clear what you are doing. That section of code is also repetitive. I'd do something like&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;int x_dir = {0, 0, 1, -1}&#xA;int y_dir = {1, -1, 0, 0}&#xA;&#xA;for(int pos = 0; pos &amp;lt; 4; pos++)&#xA;{&#xA;    node child = parent;&#xA;    child.first += x_dir[pos];&#xA;    child.second += y_dir[pos];&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Other notes:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The use of map is going to O(log), if you use a multidimensional array to hold the information for each point you can do it in O(1) time.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Using pairs to hold co-ordinates is easy. However, I suggest that its better to have a point class with x and y members. I think it makes what is going on clearer. Additionally, the point class can encapsulate the neighboring cell logic.&lt;/p&gt;&#xA;" OwnerUserId="1659" LastActivityDate="2011-02-11T20:59:53.250" CommentCount="1" />
  <row Id="751" PostTypeId="2" ParentId="744" CreationDate="2011-02-11T21:14:50.010" Score="2" Body="&lt;p&gt;If you can edit the &lt;code&gt;TempArticle&lt;/code&gt; class, the best way would be to add an indexer to the class that switches on the column name and returns the value of that column. Your filter code would then be&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private void applyFilterAction(ref IQueryable&amp;lt;TempArticle&amp;gt; products, FilterAction action)&#xA;{&#xA;    if (action.Action == &quot;StartsWith&quot;)&#xA;    {&#xA;        products = from p in products where p[action.Column].StartsWith(action.Value, StringComparison.CurrentCultureIgnoreCase) == action.AddOrKill select p;&#xA;    }&#xA;    else&#xA;    {&#xA;        products = from p in products where p[action.Column].EndsWith(action.Value, StringComparison.CurrentCultureIgnoreCase) == action.AddOrKill select p;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In case you can't change &lt;code&gt;TempArticle&lt;/code&gt;'s definition and assuming &lt;code&gt;action.Column&lt;/code&gt; equals the name of the corresponding property in &lt;code&gt;TempArticle&lt;/code&gt;, you can use compiled Expressions as accessors:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;static class PropertyAccessor&amp;lt;T&amp;gt;&#xA;{&#xA;    static Dictionary&amp;lt;string, Func&amp;lt;T, object&amp;gt;&amp;gt; propGetters;&#xA;    static Dictionary&amp;lt;string, Func&amp;lt;T, object&amp;gt;&amp;gt; PropGetters&#xA;    {&#xA;        get&#xA;        {&#xA;            if (propGetters == null)&#xA;            {&#xA;                Initialize();&#xA;            }&#xA;            return propGetters;&#xA;        }&#xA;    }&#xA;&#xA;    static Dictionary&amp;lt;string, Action&amp;lt;T, object&amp;gt;&amp;gt; propSetters;&#xA;    static Dictionary&amp;lt;string, Action&amp;lt;T, object&amp;gt;&amp;gt; PropSetters&#xA;    {&#xA;        get&#xA;        {&#xA;            if (propSetters == null)&#xA;            {&#xA;                Initialize();&#xA;            }&#xA;            return propSetters;&#xA;        }&#xA;    }&#xA;&#xA;    static void Initialize()&#xA;    {&#xA;        propGetters = new Dictionary&amp;lt;string, Func&amp;lt;T, object&amp;gt;&amp;gt;();&#xA;        propSetters = new Dictionary&amp;lt;string, Action&amp;lt;T, object&amp;gt;&amp;gt;();&#xA;&#xA;        var type = typeof(T);&#xA;&#xA;        foreach (var pi in type.GetProperties(BindingFlags.Public | BindingFlags.GetProperty | BindingFlags.Instance))&#xA;        {&#xA;            if (pi.CanRead)&#xA;            {&#xA;                var parameter = Expression.Parameter(type, &quot;instance&quot;);&#xA;&#xA;                Expression&amp;lt;Func&amp;lt;T, object&amp;gt;&amp;gt; lambda;&#xA;&#xA;                if (pi.PropertyType.IsValueType)&#xA;                {&#xA;                    lambda = Expression.Lambda&amp;lt;Func&amp;lt;T, object&amp;gt;&amp;gt;(Expression.TypeAs(Expression.Property(parameter, pi.Name), typeof(object)), parameter);&#xA;                }&#xA;                else&#xA;                {&#xA;                    lambda = Expression.Lambda&amp;lt;Func&amp;lt;T, object&amp;gt;&amp;gt;(Expression.Property(parameter, pi.Name), parameter);&#xA;                }&#xA;&#xA;                propGetters.Add(pi.Name, lambda.Compile());&#xA;            }&#xA;&#xA;            if (pi.CanWrite)&#xA;            {&#xA;                var paramExpT = Expression.Parameter(type, &quot;instance&quot;);&#xA;                var paramExpObj = Expression.Parameter(typeof(object), &quot;value&quot;);&#xA;                var setterLambda = Expression.Lambda&amp;lt;Action&amp;lt;T, object&amp;gt;&amp;gt;(Expression.Call(paramExpT, pi.GetSetMethod(), Expression.ConvertChecked(paramExpObj, pi.PropertyType)), paramExpT, paramExpObj);&#xA;                propSetters.Add(pi.Name, setterLambda.Compile());&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    public static object Get(T instance, string propName)&#xA;    {&#xA;        return PropGetters[propName](instance);&#xA;    }&#xA;&#xA;    public static string[] GetAccessorKeys&#xA;    {&#xA;        get&#xA;        {&#xA;            return PropGetters.Keys.ToArray();&#xA;        }&#xA;    }&#xA;&#xA;    public static void Set(T instance, string propName, object value)&#xA;    {&#xA;        PropSetters[propName](instance, value);&#xA;    }&#xA;&#xA;    public static string[] SetAccessorKeys&#xA;    {&#xA;        get&#xA;        {&#xA;            return PropSetters.Keys.ToArray();&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;applyFilterAction&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private void applyFilterAction(ref IQueryable&amp;lt;TempArticle&amp;gt; products, FilterAction action)&#xA;{&#xA;    if (action.Action == &quot;StartsWith&quot;)&#xA;    {&#xA;        products = from p in products where ((string)PropertyAccessor&amp;lt;TempArticle&amp;gt;.Get(p, action.Column)).StartsWith(action.Value, StringComparison.CurrentCultureIgnoreCase) == action.AddOrKill select p;&#xA;    }&#xA;    else&#xA;    {&#xA;        products = from p in products where ((string)PropertyAccessor&amp;lt;TempArticle&amp;gt;.Get(p, action.Column)).EndsWith(action.Value, StringComparison.CurrentCultureIgnoreCase) == action.AddOrKill select p;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The accessors are compiled only once for each type, but are slightly slower than direct access, partly because of the type casting. (You can use &lt;code&gt;string&lt;/code&gt; instead of &lt;code&gt;object&lt;/code&gt; if you filter by &lt;code&gt;pi.PropertyType&lt;/code&gt; in the initialize loop.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Other than that, I agree with Snowbear on the coding style and pattern use. This interface looks quite counterintuitive and it's definitely never a good idea to name a flag &lt;code&gt;&amp;lt;Action&amp;gt;or&amp;lt;Opposite&amp;gt;&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Part of the accessor code taken from:&#xA;&lt;a href=&quot;http://www.codeproject.com/KB/cs/fast_dynamic_properties.aspx&quot; rel=&quot;nofollow&quot;&gt;Fast Dynamic Property Access with C# (Comments)&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Edit:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you want more speed, you should use &lt;a href=&quot;http://www.codeproject.com/KB/cs/HyperPropertyDescriptor.aspx&quot; rel=&quot;nofollow&quot;&gt;HyperDescriptor&lt;/a&gt; instead: It writes IL directly and is really fast. In .NET 4, you need to &lt;a href=&quot;http://stackoverflow.com/questions/3105763/does-hyperdescriptor-work-when-built-in-net-4/3105883#3105883&quot;&gt;fix the security permissions&lt;/a&gt;.&lt;/p&gt;&#xA;" OwnerUserId="1534" LastEditorUserId="1534" LastEditDate="2011-02-12T11:01:08.547" LastActivityDate="2011-02-12T11:01:08.547" CommentCount="3" />
  <row Id="752" PostTypeId="2" ParentId="657" CreationDate="2011-02-11T22:49:37.517" Score="2" Body="&lt;p&gt;Some general tips&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Mind your nesting. Indent at new block-level tags always, and at line-level when it aids legibility&lt;/li&gt;&#xA;&lt;li&gt;Wrap where it makes sense: between arguments, at attributes, etc&lt;/li&gt;&#xA;&lt;li&gt;Be consistent!&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;For example, this chunk&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    &amp;lt;?php // Create and run custom loop&#xA;        $custom_posts = new WP_Query();&#xA;        $custom_posts-&amp;gt;query('post_type=page_content&amp;amp;page_sections=ThemeCL');&#xA;        while ($custom_posts-&amp;gt;have_posts()) : $custom_posts-&amp;gt;the_post();&#xA;    ?&amp;gt;  &amp;lt;div class=&quot;float-left&quot;&amp;gt;&#xA;            &amp;lt;a href=&quot;&amp;lt;?php the_permalink(); ?&amp;gt;&quot; title=&quot;&amp;lt;?php printf( esc_attr__( 'Permalink to %s', 'twentyten' ), the_title_attribute( 'echo=0' ) ); ?&amp;gt;&quot; rel=&quot;bookmark&quot;&amp;gt;&amp;lt;?php the_post_thumbnail(); ?&amp;gt;&amp;lt;/a&amp;gt;&#xA;            &amp;lt;p&amp;gt;&amp;lt;?php the_excerpt(); ?&amp;gt;&amp;lt;/p&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;    &amp;lt;?php endwhile; ?&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I would rewrite like so&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?php // Create and run custom loop&#xA;  $custom_posts = new WP_Query();&#xA;  $custom_posts-&amp;gt;query('post_type=page_content&amp;amp;page_sections=ThemeCL');&#xA;  while ($custom_posts-&amp;gt;have_posts()) : $custom_posts-&amp;gt;the_post();&#xA;?&amp;gt;&#xA;  &amp;lt;div class=&quot;float-left&quot;&amp;gt;&#xA;    &amp;lt;a href=&quot;&amp;lt;?php the_permalink(); ?&amp;gt;&quot;&#xA;       title=&quot;&amp;lt;?php printf( esc_attr__( 'Permalink to %s', 'twentyten' ), the_title_attribute( 'echo=0' ) ); ?&amp;gt;&quot;&#xA;       rel=&quot;bookmark&quot;&amp;gt;&amp;lt;?php the_post_thumbnail(); ?&amp;gt;&amp;lt;/a&amp;gt;&#xA;    &amp;lt;p&amp;gt;&#xA;      &amp;lt;?php the_excerpt(); ?&amp;gt;&#xA;    &amp;lt;/p&amp;gt;&#xA;  &amp;lt;/div&amp;gt;&#xA;&amp;lt;?php endwhile; ?&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="456" LastActivityDate="2011-02-11T22:49:37.517" CommentCount="1" />
  <row Id="753" PostTypeId="2" ParentId="746" CreationDate="2011-02-12T00:13:11.017" Score="1" Body="&lt;p&gt;I would move that conditional logic in the span tags to the view. Have your view pass the template a modified version of &lt;code&gt;tasks.1&lt;/code&gt;, where each task instead of being the original datum is now the modified version that the template could use raw. For example, instead of passing your template &lt;code&gt;t.priority&lt;/code&gt; as an integer, pass it as the actual CSS class that you'll be using. Same as &lt;code&gt;t.days_to_due_date&lt;/code&gt;. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Personally, I hate editing templates, because I haven't configured my text editor to play nice with them yet :-). As a consequence, I usually move everything out of the template and into the view that I can. Same situation with your URL's. I'm not sure if this is best practice, but I like to leave my template as clean as possible.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As for your question about &lt;code&gt;reverse()&lt;/code&gt;, I'd have to have more context to answer.&lt;/p&gt;&#xA;" OwnerUserId="1663" LastActivityDate="2011-02-12T00:13:11.017" CommentCount="0" />
  <row Id="754" PostTypeId="2" ParentId="746" CreationDate="2011-02-12T00:46:59.047" Score="5" Body="&lt;ol&gt;&#xA;&lt;li&gt;&lt;p&gt;I would suggest moving the CSS selection logic to a custom template tag or even a filter, e.g. &lt;code&gt;&amp;lt;span class=&quot;{{ t|due_date_color }}&quot;&amp;gt;{{ t.relative_due_date }}&amp;lt;/span&amp;gt;&lt;/code&gt;. After that your templates will look much cleaner and that logic would still belong to the presentation part of MVT (Model, View, Template).&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;You can split your tuple in the definition of the loop so that you don't redefine the &lt;code&gt;tasks&lt;/code&gt; variable. &lt;code&gt;{% for header, task_list in tasks %} ...&lt;/code&gt;. &lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Use reverse URLs, no question about it. You'd hate the day you have to change them otherwise :) Go even further, use URL namespaces.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;" OwnerUserId="1591" LastActivityDate="2011-02-12T00:46:59.047" CommentCount="0" />
  <row Id="755" PostTypeId="2" ParentId="746" CreationDate="2011-02-12T02:08:52.640" Score="3" Body="&lt;p&gt;I'd only add one thing to rassie's great list: while choosing which CSS class to assign to tasks that are due &quot;soon&quot; certainly belongs to the presentation layer (view or template), the fact that tasks due between 4 and 14 days from now are due &quot;soon&quot; belongs to the model. If each task here is an object, you can add &lt;code&gt;isDueSoon()&lt;/code&gt;, &lt;code&gt;isDueVerySoon()&lt;/code&gt;, and &lt;code&gt;isOverdue()&lt;/code&gt; to encapsulate this logic in one logical place.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You'll be happy you did this when you write unit tests for your task class and again when your boss asks you to build a REST API for working with tasks from a native iPhone app.&lt;/p&gt;&#xA;" OwnerUserId="1635" LastActivityDate="2011-02-12T02:08:52.640" CommentCount="0" />
  <row Id="756" PostTypeId="2" ParentId="698" CreationDate="2011-02-12T16:35:00.790" Score="1" Body="&lt;p&gt;Just to add in conversation:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;IMHO Checked Exception are included for a reason. A method with a reasonable chance of failure should throw a checked Exception. e.g. IO classes rely on IO Devices which might not available at the time and thus throw a checked exception, IOException. The benefit of declaring IOException as checked is that Java enforces providing error handling or alternative solution. This is not enforced in the case of exceptions derived from RuntimeException. IMHO this enforcement encourages coders to write robust code which is better then not having an extra throws clause.&lt;/p&gt;&#xA;" OwnerDisplayName="user1672" LastEditorUserId="1659" LastEditDate="2011-02-17T22:34:47.563" LastActivityDate="2011-02-17T22:34:47.563" CommentCount="3" />
  <row Id="757" PostTypeId="2" ParentId="744" CreationDate="2011-02-12T17:38:18.410" Score="1" Body="&lt;p&gt;I would write some helper extension methods:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public static class FilterActionHelper {&#xA;    private static Dictionary&amp;lt;string, Func&amp;lt;string, Func&amp;lt;string, bool&amp;gt;&amp;gt;&amp;gt; actions = new Dictionary&amp;lt;string, Func&amp;lt;string, Func&amp;lt;string, bool&amp;gt;&amp;gt;&amp;gt;() {&#xA;        { &quot;StartsWith&quot;, x =&amp;gt; y =&amp;gt; x.StartsWith(y) },&#xA;        { &quot;EndsWith&quot;, x =&amp;gt; y =&amp;gt; x.EndsWith(y) },&#xA;        { &quot;Contains&quot;, x =&amp;gt; y =&amp;gt; x.Contains(y) }&#xA;    };&#xA;&#xA;    private static Dictionary&amp;lt;string, Func&amp;lt;TempArticle, string&amp;gt;&amp;gt; propertySelectors = new Dictionary&amp;lt;string, Func&amp;lt;TempArticle, string&amp;gt;&amp;gt;() {&#xA;        { &quot;Description&quot;, x =&amp;gt; x.Description },&#xA;        { &quot;LongDescription&quot;, x =&amp;gt; x.LongDescription },&#xA;        { &quot;Provider&quot;, x =&amp;gt; x.Provider },&#xA;        { &quot;ProviderCode&quot;, x =&amp;gt; x.ProviderCode },&#xA;        { &quot;Publisher&quot;, x =&amp;gt; x.Publisher },&#xA;        { &quot;PublisherCode&quot;, x =&amp;gt; x.PublisherCode },&#xA;        { &quot;Custom1&quot;, x =&amp;gt; x.Custom1 },&#xA;        { &quot;Custom2&quot;, x =&amp;gt; x.Custom2 },&#xA;        { &quot;Custom3&quot;, x =&amp;gt; x.Custom3 },&#xA;    };&#xA;&#xA;    public static bool HasAction(string actionName) {&#xA;        return actions.ContainsKey(actionName);&#xA;    }&#xA;&#xA;    public static Func&amp;lt;string, bool&amp;gt; GetAction(this string str, string actionName) {&#xA;        return actions[actionName](str);&#xA;    }&#xA;&#xA;    public static bool HasProperty(string propertyName) {&#xA;        return propertySelectors.ContainsKey(propertyName);&#xA;    }&#xA;&#xA;    public static string GetProperty(this TempArticle product, string propertyName) {&#xA;        return propertySelectors[propertyName](product);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;which would allow the more succinct code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private void ApplyFilterAction(ref IQueryable&amp;lt;TempArticle&amp;gt; products, FilterAction action) {&#xA;    var actionValue = action.Value.ToLower();&#xA;    var column = action.Column;&#xA;&#xA;    if (!FilterActionHelper.HasAction(action.Action)) {&#xA;        return;&#xA;    }&#xA;&#xA;    if (!FilterActionHelper.HasProperty(column)) {&#xA;        return;&#xA;    }&#xA;&#xA;    products = from p in products&#xA;               where p.GetProperty(column).ToLower().GetAction(action.Action)(actionValue) == action.AddOrKill&#xA;               select p;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The use of dictionaries makes it easy to add new properties and actions. The extension methods then make it a lot easier to use those dictionaries in a way that reads well.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Another solution you may find easier is to make FilterAction generic:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public class FilterAction&amp;lt;T&amp;gt; {&#xA;    public string Value { get; set; }&#xA;    public Func&amp;lt;T, string&amp;gt; GetProperty { get; set; }&#xA;    public Func&amp;lt;string, string, bool&amp;gt; Action { get; set; }&#xA;    public bool AddOrKill { get; set; }&#xA;&#xA;    public bool Matches(T t) {&#xA;        var filterValue = Value.ToLower();&#xA;        var propertValue = GetProperty(t).ToLower();&#xA;        return (Action(propertyValue, filterValue)) == AddOrKill);&#xA;    }&#xA;}&#xA;&#xA;…&#xA;&#xA;FilterAction&amp;lt;TempArticle&amp;gt; filter = new FilterAction&amp;lt;TempArticle&amp;gt;();&#xA;filter.Value = &quot;foo&quot;;&#xA;filter.GetProperty = x =&amp;gt; x.Custom1;&#xA;filter.Action = x, y =&amp;gt; x.StartsWith(y);&#xA;filter.AddOrKill = false;&#xA;&#xA;var products = from p in products where filter.Matches(p) select p;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="265" LastActivityDate="2011-02-12T17:38:18.410" CommentCount="1" />
  <row Id="758" PostTypeId="2" ParentId="735" CreationDate="2011-02-12T19:41:03.763" Score="4" Body="&lt;p&gt;You should change your mindset when working with XSLT: look at it as a functional language, where you declare rules for the transformation of elements. Think about it in terms of events: when a p element is found in input, I expect this and that in the output.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;First, regarding the definition of your data. You should ask for (or create) a more formal description of the data. There are different formats available to describe the structure (grammar), &lt;a href=&quot;https://secure.wikimedia.org/wikipedia/en/wiki/Document_Type_Definition&quot; rel=&quot;nofollow&quot;&gt;DTD&lt;/a&gt; and &lt;a href=&quot;http://www.w3.org/TR/xmlschema-0/&quot; rel=&quot;nofollow&quot;&gt;XML Schema&lt;/a&gt; being the more common. There are more simple alternatives such as &lt;a href=&quot;http://relaxng.org/&quot; rel=&quot;nofollow&quot;&gt;RELAX NG&lt;/a&gt; and &lt;a href=&quot;http://www.schematron.com/&quot; rel=&quot;nofollow&quot;&gt;Schematron&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;My guess, from your stylesheet and your descriptions:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;there is always a &lt;code&gt;&amp;lt;system-index-block&amp;gt;&lt;/code&gt; at the top&lt;/li&gt;&#xA;&lt;li&gt;there is a list of &lt;code&gt;&amp;lt;story&amp;gt;&lt;/code&gt; elements in &lt;code&gt;&amp;lt;system-index-block&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;there is mixed HTML contents in &lt;code&gt;&amp;lt;story&amp;gt;&lt;/code&gt;, with &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;,&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;,&lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;,&lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt; and text allowed&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;I am not sure about the last part: is it possible to have both text and div or paragraph at the top level in a story?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;story&amp;gt;&#xA;  Text before a &amp;lt;p&amp;gt;Paragraph&amp;lt;/p&amp;gt; in between or &amp;lt;div&amp;gt;Div&amp;lt;/div&amp;gt; even after ?&#xA;&amp;lt;/story&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You should break your unique template rule into several template rules, one or several for each element. Then to direct the flow from rule to rule, do not use for-each but rather apply-templates:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:template match=&quot;system-index-block&quot;&amp;gt;&#xA;  &amp;lt;!-- Note:&#xA;       You probably need to create the basic HTML structure Here: html, head, body&#xA;  --&amp;gt;&#xA;  &amp;lt;xsl:apply-templates /&amp;gt; &amp;lt;!-- you can specify select=&quot;story&quot; but it is not required --&amp;gt;&#xA;&amp;lt;/xsl:template&amp;gt;&#xA;&#xA;&amp;lt;xsl:template match=&quot;story[p|div]&quot;&amp;gt; &amp;lt;!-- If wrapped in an element --&amp;gt;&#xA;   &amp;lt;xsl:apply-templates mode=&quot;copy&quot; /&amp;gt;&#xA;&amp;lt;/xsl:template&amp;gt;&#xA;&#xA;&amp;lt;xsl:template match=&quot;story&quot;&amp;gt; &amp;lt;!-- wrap the content in a paragraph tag --&amp;gt;&#xA;  &amp;lt;p&amp;gt;&#xA;    &amp;lt;xsl:apply-templates mode=&quot;copy&quot; /&amp;gt;&#xA;  &amp;lt;/p&amp;gt;&#xA;&amp;lt;/xsl:template&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note that I used the mode &quot;copy&quot; above: you can now create different rules for the same nodes depending on the mode, for example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:template match=&quot;text()&quot; /&amp;gt; &amp;lt;!-- ignore text in normal mode, probably whitespace --&amp;gt;&#xA;&#xA;&amp;lt;xsl:template match=&quot;text()&quot; mode=&quot;copy&quot;&amp;gt;&#xA;    &amp;lt;xsl:copy /&amp;gt;&#xA;&amp;lt;/xsl:template&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Also, you will probably get into trouble because you only declared a namespace for the xsl prefix. You typically need a prefix/namespace declaration for the input and output formats. You will then need to use the prefix in match/select expressions and in the tag names for the output, for example, with input prefix bound to your input namespace and html bound to the html namespace:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:template match=&quot;input:story&quot;&amp;gt; &amp;lt;!-- wrap the content in a paragraph tag --&amp;gt;&#xA;  &amp;lt;html:p&amp;gt;&#xA;    &amp;lt;xsl:apply-templates mode=&quot;copy&quot; /&amp;gt;&#xA;  &amp;lt;/html:p&amp;gt;&#xA;&amp;lt;/xsl:template&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;To go further, here are pointers that you will probably find useful:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&quot;http://www.xml.com/pub/a/2001/04/04/trxml/index.html&quot; rel=&quot;nofollow&quot;&gt;Namespaces and XSLT Stylesheets&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&quot;https://secure.wikimedia.org/wikipedia/en/wiki/Identity_transform&quot; rel=&quot;nofollow&quot;&gt;Identity transformation&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="185" LastActivityDate="2011-02-12T19:41:03.763" CommentCount="3" />
  <row Id="759" PostTypeId="1" AcceptedAnswerId="760" CreationDate="2011-02-13T03:37:56.223" Score="3" ViewCount="323" Body="&lt;p&gt;I need help to refactor my code. I usually had a hard time figuring out how to make my code reusable.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I have an XML file that hold the data for each Tag element. Tag element should have child nodes LastClocked, and TotalClocked. I first thought of creating Tag object and do serialization. But, I found Linq to XML is much easier. I would really appreciate if you guys can tell me what to improve for my code.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;namespace StopWatch.Models&#xA;{&#xA;    public class TagCollection&#xA;    {&#xA;        private XElement doc;&#xA;        private IEnumerable&amp;lt;XElement&amp;gt; tagElements;&#xA;&#xA;        public TagCollection()&#xA;        {&#xA;            if(File.Exists(&quot;TagsData.xml&quot;))&#xA;            {&#xA;               doc = XElement.Load(&quot;TagsData.xml&quot;);&#xA;            }&#xA;            else&#xA;            {&#xA;                //TODO: Create XML&#xA;            }&#xA;        }&#xA;&#xA;        public void Save(TimeSpan clocked, string tags)&#xA;        {&#xA;            tagElements = from t in doc.Elements(&quot;Tag&quot;)&#xA;                          where (string)t.Attribute(&quot;Name&quot;) == tags&#xA;                          select t;&#xA;&#xA;            TimeSpan lastClocked = TimeSpan.Parse((string)&#xA;                                   (from lc in tagElements.Descendants(&quot;LastClocked&quot;)&#xA;                                    select lc).First());&#xA;&#xA;            lastClocked = lastClocked.Add(clocked);&#xA;&#xA;            if (!tagElements.Any())&#xA;            {&#xA;                Insert(clocked, tags);&#xA;            }&#xA;            else&#xA;            {&#xA;                Update(clocked, lastClocked);&#xA;            }&#xA;&#xA;            doc.Save(&quot;TagsData.xml&quot;);&#xA;        }&#xA;&#xA;        private void Update(TimeSpan clocked, TimeSpan lastClocked) &#xA;        {&#xA;            foreach(XElement tagElement in tagElements)&#xA;            {&#xA;                tagElement.SetElementValue(&quot;LastClocked&quot;, clocked.ToString());&#xA;                tagElement.SetElementValue(&quot;TotalClocked&quot;, lastClocked.ToString());&#xA;            }&#xA;        }&#xA;&#xA;        private void Insert(TimeSpan clocked, string tags) &#xA;        {&#xA;            XElement newTag = new XElement(&quot;Tag&quot;,&#xA;                                    new XAttribute(&quot;Name&quot;, tags),&#xA;                                    new XElement(&quot;LastClocked&quot;, clocked.ToString()),&#xA;                                    new XElement(&quot;TotalClocked&quot;, clocked.ToString()));&#xA;&#xA;            doc.Add(newTag);&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1680" LastEditorUserId="9357" LastEditDate="2016-11-16T22:09:34.927" LastActivityDate="2016-11-16T22:09:34.927" Title="Inserting and updating time spans in XML" Tags="&lt;c#&gt;&lt;linq&gt;&lt;xml&gt;&lt;wpf&gt;" AnswerCount="1" CommentCount="1" FavoriteCount="1" />
  <row Id="760" PostTypeId="2" ParentId="759" CreationDate="2011-02-13T07:36:34.803" Score="5" Body="&lt;p&gt;Your code seems very procedural - you're worrying about implementing how things will be done before you think about what those things are and how you'd like to use them.  You don't have any properties, just methods, which I don't particularly like.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;From what I understand you want to write a reusable wrapper from some XML, that's going to fit in a consistent format.  Do you have a class that represents that object?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public TagElement&#xA;{&#xA;    private XElement tagXml&#xA;    public string Name&#xA;    public DateTime LastClocked&#xA;    public DateTime TotalClocked&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now I'd simply make each of those properties point into the private XML object get / set their values.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public TagElement(string name, DateTime initialValue)&#xA;{        &#xA;    tagXml = new XElement(&quot;Tag&quot;, &#xA;                 new XAttribute(&quot;Name&quot;, name),&#xA;                 new XElement(&quot;LastClocked&quot;, initialValue),&#xA;                 new XElement(&quot;TotalClocked&quot;, initialValue));&#xA;}&#xA;&#xA;public DateTime LastClocked&#xA;{&#xA;    get&#xA;    {&#xA;        return tagXml.Descendents(&quot;LastClocked&quot;).Single().Value;&#xA;    }&#xA;    set&#xA;    {&#xA;        tagXml.Descendents(&quot;LastClocked&quot;).Single() = value;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You can still have a &lt;code&gt;Save&lt;/code&gt; method that persists the XElement to a file.  You probably also want a collection class that wraps the individual TagElements.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public TagCollection&#xA;{&#xA;    public List&amp;lt;TagElement&amp;gt; TagElements { get; set; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;So you can then use&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var collection = new TagCollection(&quot;myFile.xml&quot;);&#xA;// constructor for TagCollection needs to parse the XML, and create TagElements&#xA;&#xA;var fooElement = collection.TagElements.Single(tag =&amp;gt; tag.Name == &quot;foo&quot;);&#xA;fooElement.LastClocked = DateTime.Now;&#xA;&#xA;collection.TagElements.ForEach(tag =&amp;gt; tag.TotalClocked = DateTime.Now);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In summary, prefer to use properties to get and set values than using methods.  Abstract away the XML so that when you're using the class you do not know or care that it is being persisted to XML.&lt;/p&gt;&#xA;" OwnerUserId="1682" LastActivityDate="2011-02-13T07:36:34.803" CommentCount="2" />
  <row Id="762" PostTypeId="1" AcceptedAnswerId="769" CreationDate="2011-02-13T21:56:47.670" Score="5" ViewCount="499" Body="&lt;p&gt;The code pretty much explains what I am doing here. Just wondering if anyone can think of a better way.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public class AttachmentQuery&#xA;{&#xA;    /// &amp;lt;summary&amp;gt;&#xA;    /// Initializes a new instance of the &amp;lt;see cref=&quot;AttachmentQuery&quot;/&amp;gt; class.&#xA;    /// &amp;lt;/summary&amp;gt;&#xA;    /// &amp;lt;param name=&quot;type&quot;&amp;gt;The type.&amp;lt;/param&amp;gt;&#xA;    /// &amp;lt;param name=&quot;status&quot;&amp;gt;The status.&amp;lt;/param&amp;gt;&#xA;    /// &amp;lt;param name=&quot;sort&quot;&amp;gt;The sort.&amp;lt;/param&amp;gt;&#xA;    /// &amp;lt;param name=&quot;order&quot;&amp;gt;The order.&amp;lt;/param&amp;gt;&#xA;    /// &amp;lt;param name=&quot;page&quot;&amp;gt;The page.&amp;lt;/param&amp;gt;&#xA;    public AttachmentQuery(string type, string status, SortAttachment sort, SortOrder order, int? page)&#xA;    {&#xA;        IAttachmentSpecification specification = null;&#xA;&#xA;        if (!string.IsNullOrEmpty(type))&#xA;        {&#xA;            specification = new AttachmentFileTypeSpecification(type);&#xA;        }&#xA;&#xA;        if (!string.IsNullOrEmpty(status))&#xA;        {&#xA;            if (specification == null)&#xA;            {&#xA;                specification = new AttachmentStatusSpecification(status.AsEnum&amp;lt;AttachmentStatus&amp;gt;());&#xA;            }&#xA;            else&#xA;            {&#xA;                var spec = new AndSpecification&amp;lt;Attachment&amp;gt;(&#xA;                    specification, &#xA;                    new AttachmentStatusSpecification(status.AsEnum&amp;lt;AttachmentStatus&amp;gt;())&#xA;                );&#xA;&#xA;                specification = spec as IAttachmentSpecification;&#xA;            }&#xA;        }&#xA;&#xA;        if (specification == null)&#xA;        {&#xA;            specification = new AttachmentSpecification();&#xA;        }&#xA;&#xA;        specification.Page = page;&#xA;        specification.Limit = Setting.AttachmentPageLimit.Value;&#xA;        specification.Sort = sort;&#xA;        specification.Order = order;&#xA;&#xA;        this.Specification = specification;&#xA;    }&#xA;&#xA;    /// &amp;lt;summary&amp;gt;&#xA;    /// Gets or sets the specification.&#xA;    /// &amp;lt;/summary&amp;gt;&#xA;    /// &amp;lt;value&amp;gt;The specification.&amp;lt;/value&amp;gt;&#xA;    public IAttachmentSpecification Specification&#xA;    {&#xA;        get;&#xA;        private set;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://github.com/Mike343/Netcoders/blob/master/Coders.Web/Controllers/Administration/Queries/AttachmentQuery.cs&quot; rel=&quot;nofollow&quot;&gt;Source&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;https://github.com/Mike343/Netcoders/blob/master/Coders.Web/Controllers/Administration/AttachmentController.cs#L60&quot; rel=&quot;nofollow&quot;&gt;How it is used&lt;/a&gt;.&lt;/p&gt;&#xA;" OwnerUserId="49" LastEditorUserId="228" LastEditDate="2011-02-17T22:34:50.900" LastActivityDate="2011-02-17T22:34:50.900" Title="Better ways to build a linq specification for querying or is this the only way?" Tags="&lt;c#&gt;&lt;linq&gt;" AnswerCount="2" CommentCount="0" />
  <row Id="763" PostTypeId="1" AcceptedAnswerId="768" CreationDate="2011-02-13T22:06:54.343" Score="8" ViewCount="10178" Body="&lt;p&gt;Below are two solutions to the FizzBuzz problem in Python. Which one of these is more &quot;Pythonic&quot; and why is it more &quot;Pythonic&quot; than the other?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Solution One:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;fizzbuzz = ''&#xA;&#xA;start = int(input(&quot;Start Value:&quot;))&#xA;end = int(input(&quot;End Value:&quot;))&#xA;&#xA;for i in range(start,end+1):&#xA;    if i%3 == 0:&#xA;        fizzbuzz += &quot;fizz&quot;&#xA;    if i%5 == 0:&#xA;        fizzbuzz += &quot;buzz&quot;&#xA;    if i%3 != 0 and i%5 != 0:&#xA;        fizzbuzz += str(i)&#xA;&#xA;    fizzbuzz += ' '&#xA;&#xA;print(fizzbuzz)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Solution Two:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;fizzbuzz = []&#xA;&#xA;start = int(input(&quot;Start Value:&quot;))&#xA;end = int(input(&quot;End Value:&quot;))&#xA;&#xA;for i in range(start,end+1):&#xA;    entry = ''&#xA;    if i%3 == 0:&#xA;        entry += &quot;fizz&quot;&#xA;    if i%5 == 0:&#xA;        entry += &quot;buzz&quot;&#xA;    if i%3 != 0 and i%5 != 0:&#xA;        entry = i&#xA;&#xA;    fizzbuzz.append(entry)&#xA;&#xA;for i in fizzbuzz:&#xA;    print(i)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="119" LastEditorUserId="22222" LastEditDate="2015-01-26T06:42:56.327" LastActivityDate="2016-06-25T11:43:05.673" Title="Two FizzBuzz solutions" Tags="&lt;python&gt;&lt;comparative-review&gt;&lt;fizzbuzz&gt;" AnswerCount="8" CommentCount="0" FavoriteCount="4" />
  <row Id="764" PostTypeId="2" ParentId="763" CreationDate="2011-02-13T22:20:15.440" Score="2" Body="&lt;p&gt;From my brief experience with Python, I would say the second is more Pythonic as it takes advantage of the Python lists and the first is just appending to strings which causes the output to be a wee bit ugly and clumped together.  Although you could eliminate an entire extra iteration by appending to a temporary string within the first for loop, printing at the end of the loop and resetting the value so that the values don't need to be stored for more than one iteration.&lt;/p&gt;&#xA;" OwnerUserId="1691" LastActivityDate="2011-02-13T22:20:15.440" CommentCount="0" />
  <row Id="765" PostTypeId="2" ParentId="763" CreationDate="2011-02-13T23:08:12.527" Score="0" Body="&lt;p&gt;There is no difference in how &quot;Pythonic&quot; those solutions are. Both are perfectly acceptable. If the fizzbuzz string gets very long, using a list is preferable, as you don't have to make a copy of the string in every iteration, but that's a very minor issue.&lt;/p&gt;&#xA;" OwnerUserId="1235" LastActivityDate="2011-02-13T23:08:12.527" CommentCount="0" />
  <row Id="766" PostTypeId="2" ParentId="763" CreationDate="2011-02-13T23:15:18.977" Score="0" Body="&lt;p&gt;Most definitely solution two.  However, you could further improve that solution by dumping the string concatenation altogether.  Remember, string concatenation is expensive.  Because strings are immutable, every time you concatenate, a new string is created.  While the garbage collector can pick up the trash later, you're still having to go through the expense of copying a string.  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Instead, I'd recommend making a format string and then inserting the items in via string formatting, then appending them to your fizzbuzz list.  &lt;/p&gt;&#xA;" OwnerDisplayName="user1693" LastActivityDate="2011-02-13T23:15:18.977" CommentCount="1" />
  <row Id="767" PostTypeId="2" ParentId="762" CreationDate="2011-02-14T00:17:59.807" Score="2" Body="&lt;p&gt;How about adding an extension method to IAttachmentSpecification, such as&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public static class AttachmentSpecificationExtensions&#xA;{&#xA;     public static IAttachmentSpecification And(this IAttachmentSpecification orig, IAttachmentSpecification spec)&#xA;     {&#xA;         if (orig is NullAttachmentSpecification))&#xA;         {&#xA;             return spec ?? orig;&#xA;         }&#xA;&#xA;         if (spec == null || spec is NullAttachmentSpecification)&#xA;         {&#xA;             return orig;&#xA;         }&#xA;&#xA;         return (IAttachmentSpecification) new AndSpecification&amp;lt;Attachment&amp;gt;(specification, orig);&#xA;     }&#xA;}&#xA;&#xA;public class NullAttachmentSpecification : AttachmentSpecification&#xA;{&#xA;} &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now you can write your AttachmentQuery constructor as&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public AttachmentQuery(string type, string status,&#xA;    SortAttachment sort, SortOrder order, int? page)&#xA;{&#xA;    var statusSpec = string.IsNullOrEmpty(status) &#xA;            ? new NullAttachmentSpecification()&#xA;            : new AttachmentStatusSpecification(status.AsEnum&amp;lt;AttachmentStatus&amp;gt;())&#xA;    var typeSpec = string.IsNullOrEmpty(type) &#xA;            ? new NullAttachmentSpecification()&#xA;            : new AttachmentFileTypeSpecification(type)&#xA;&#xA;    Specification = statusSpec.And(typeSpec);&#xA;&#xA;    Specification.Page = page;&#xA;    Specification.Limit = Setting.AttachmentPageLimit.Value;&#xA;    Specification.Sort = sort;&#xA;    Specification.Order = order;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It would seem more obvious to me what the intent was here. Plus it would seem more extensible if you add other types of &lt;code&gt;AttachmentSpecification&lt;/code&gt; later.&lt;/p&gt;&#xA;" OwnerUserId="1416" LastEditorUserId="1416" LastEditDate="2011-02-14T02:53:16.760" LastActivityDate="2011-02-14T02:53:16.760" CommentCount="0" />
  <row Id="768" PostTypeId="2" ParentId="763" CreationDate="2011-02-14T02:11:32.663" Score="15" Body="&lt;p&gt;As has already been pointed out, creating a list is preferable as it avoids the concatenation of large strings. However neither of your solutions is the most pythonic solution possible:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Whenever you find yourself appending to a list inside a for-loop, it's a good idea to consider whether you could use a list comprehension instead. List comprehensions aren't only more pythonic, they're also usually faster.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In this case the body of the loop is a bit big to fit into a list comprehension, but that's easily fixed by refactoring it into its own function, which is almost always a good idea software design-wise. So your code becomes:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def int_to_fizzbuzz(i):&#xA;    entry = ''&#xA;    if i%3 == 0:&#xA;        entry += &quot;fizz&quot;&#xA;    if i%5 == 0:&#xA;        entry += &quot;buzz&quot;&#xA;    if i%3 != 0 and i%5 != 0:&#xA;        entry = i&#xA;    return entry&#xA;&#xA;fizzbuzz = [int_to_fizzbuzz(i) for i in range(start, end+1)]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;However, while we're at it we could just put the whole fizzbuzz logic into a function as well. The function can take &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; as its argument and return the list. This way the IO-logic, living outside the function, is completely separated from the fizzbuzz logic - also almost always a good idea design-wise.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And once we did that, we can put the IO code into a &lt;code&gt;if __name__ == &quot;__main__&quot;:&lt;/code&gt; block. This way your code can be run either as a script on the command line, which will execute the IO code, or loaded as a library from another python file without executing the IO code. So if you should ever feel the need to write a GUI or web interface for fizzbuzz, you can just load your fizzbuzz function from the file without changing a thing. Reusability for the win!&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def fizzbuzz(start, end):&#xA;    def int_to_fizzbuzz(i):&#xA;        entry = ''&#xA;        if i%3 == 0:&#xA;            entry += &quot;fizz&quot;&#xA;        if i%5 == 0:&#xA;            entry += &quot;buzz&quot;&#xA;        if i%3 != 0 and i%5 != 0:&#xA;            entry = i&#xA;        return entry&#xA;&#xA;    return [int_to_fizzbuzz(i) for i in range(start, end+1)]&#xA;&#xA;if __name__ == &quot;__main__&quot;:&#xA;    start = int(input(&quot;Start Value:&quot;))&#xA;    end = int(input(&quot;End Value:&quot;))&#xA;    for i in fizzbuzz(start, end):&#xA;        print(i)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;(Note that I've made &lt;code&gt;int_to_fizzbuzz&lt;/code&gt; an inner function here, as there's no reason you'd want to call it outside of the &lt;code&gt;fizzbuzz&lt;/code&gt; function.)&lt;/p&gt;&#xA;" OwnerUserId="128" LastEditorUserId="128" LastEditDate="2012-09-15T17:55:04.333" LastActivityDate="2012-09-15T17:55:04.333" CommentCount="3" />
  <row Id="769" PostTypeId="2" ParentId="762" CreationDate="2011-02-14T10:24:37.447" Score="3" Body="&lt;p&gt;I would definitely write it differently but exact result depends on whether your &lt;code&gt;AndSpecification&lt;/code&gt; supports only two parameters or it can accept &lt;code&gt;IEnumerable&lt;/code&gt; of attachments. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;If it has two parameters and you expect to nest those &lt;code&gt;AndSpecifications&lt;/code&gt; if you will have more specs to compose then I would write something like this:  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var typeSpecification = string.IsNullOrEmpty(type) ? null : new AttachmentFileTypeSpecification(type);&#xA;var statusSpecification = string.IsNullOrEmpty(status) ? null : new AttachmentStatusSpecification(status.AsEnum&amp;lt;AttachmentStatus&amp;gt;());&#xA;var specificationsToCompose = new IAttachmentSpecification[] {typeSpecification, statusSpecification};&#xA;&#xA;var composedSpecification = specificationsToCompose&#xA;                     .Aggregate((IAttachmentSpecification) null, (accumulator, currentSpec) =&amp;gt;&#xA;                         {&#xA;                             if (accumulator != null &amp;amp;&amp;amp; currentSpec != null) return new AndSpecification&amp;lt;Attachment&amp;gt;(accumulator, currentSpec);&#xA;                             return accumulator ?? currentSpec;&#xA;                         })&#xA;                      ?? new AttachmentSpecification();&#xA;&#xA;...&#xA;&#xA;this.Specification = composedSpecification;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="645" LastActivityDate="2011-02-14T10:24:37.447" CommentCount="1" />
  <row Id="770" PostTypeId="2" ParentId="763" CreationDate="2011-02-14T11:24:12.343" Score="4" Body="&lt;p&gt;I have read a good solution with decorator, and I think it is a pythonic way to achieve a FizzBuzz solution:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;@fizzbuzzness( (3, &quot;fizz&quot;), (5, &quot;buzz&quot;) )&#xA;def f(n): return n&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Generators are also a good pythonic way to get a list of numbers.&lt;/p&gt;&#xA;" OwnerUserId="1703" LastEditorUserId="22222" LastEditDate="2015-01-26T06:43:52.953" LastActivityDate="2015-01-26T06:43:52.953" CommentCount="0" />
  <row Id="771" PostTypeId="2" ParentId="687" CreationDate="2011-02-14T13:03:40.437" Score="1" Body="&lt;p&gt;I would suggest to take a different approach. It is complicated to get a callback for the complete loading of a CSS stylesheet loaded dynamically: see this Stack Overflow question for reference:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/3078584/link-element-onload&quot;&gt;Is there anyway to listen to the onload event for a  element?&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Do not use JavaScript to set the content position: it is part of styling and should be done in CSS instead. Isn't the role of your CSS skins to modify the appearance of the page?&lt;/p&gt;&#xA;" OwnerUserId="185" LastActivityDate="2011-02-14T13:03:40.437" CommentCount="1" />
  <row Id="772" PostTypeId="1" AcceptedAnswerId="773" CreationDate="2011-02-14T15:41:32.040" Score="9" ViewCount="34874" Body="&lt;p&gt;Often I generate long lines of code such as the following...&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;shippedItems.AddRange(OrderItem.Fetch(market: this.MARKET, shipConfirmState: ORDERITEMSHIPCONFIRMSTATE.NONE, orderPlacedAfter: serverTime.AddDays(-7), orderPlacedBefore: serverTime.AddHours(-85)));&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;... which adds the results of a method call to an existing list.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Adding white space to this line could improve readability. At one point in time or another have rationalized almost every possible behavior between:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Leave everything on a single line and let the editor wrap where it feels is best.&lt;/li&gt;&#xA;&lt;li&gt;Put even shippedItems.AddRange( on a line by itself.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;While over time I feel that the clarity and readability of the code that I write has improved -- and lets hope for reasons other then white space -- I have never come to peace with how to break long lines.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I will up vote any answer that does NOT include as the solution:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;shorter variable names.&lt;/li&gt;&#xA;&lt;li&gt;disregarding named parameters (at least for this example).&lt;/li&gt;&#xA;&lt;li&gt;creation of variables only used once.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="805" LastActivityDate="2011-02-21T11:22:36.933" Title="How to break up long lines of code. (Example Line: Results of method call added to list.)" Tags="&lt;c#&gt;" AnswerCount="7" CommentCount="3" FavoriteCount="2" />
  <row Id="773" PostTypeId="2" ParentId="772" CreationDate="2011-02-14T15:44:55.860" Score="22" Body="&lt;p&gt;I would break it up something like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;shippedItems.AddRange(&#xA;    OrderItem.Fetch(market: this.MARKET,&#xA;                    shipConfirmState: ORDERITEMSHIPCONFIRMSTATE.NONE,&#xA;                    orderPlacedAfter: serverTime.AddDays(-7),&#xA;                    orderPlacedBefore: serverTime.AddHours(-85)));&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Depending on previous indentation, some lines might flow over the &quot;max line length&quot;, but I think that characters per line is more of a suggestion and there are good times to break that rule because breaking it leads to code that is more readable than code that doesn't.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Rules that I find helpful:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;New line after an open paren.&lt;/li&gt;&#xA;&lt;li&gt;Line breaks after commas.&lt;/li&gt;&#xA;&lt;li&gt;Indent the inner method calls.&lt;/li&gt;&#xA;&lt;li&gt;Line up parameters to a method that are on new lines.&lt;/li&gt;&#xA;&lt;li&gt;Break &quot;max line length&quot; rules if it means the code is more readable.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="119" LastActivityDate="2011-02-14T15:44:55.860" CommentCount="1" />
  <row Id="774" PostTypeId="2" ParentId="772" CreationDate="2011-02-14T16:09:08.317" Score="12" Body="&lt;p&gt;As a follow up to @Thomas Owens, another rule I personally like to follow is:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Either put all parameters for a method on the same line, or put each parameter on its own line.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;So I would write the code as follows.  I like this because it makes reading the parameters more consistent, and doesn't indent them quite as far.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;shippedItems.AddRange(&#xA;    OrderItem.Fetch(&#xA;        market: this.MARKET,&#xA;        shipConfirmState: ORDERITEMSHIPCONFIRMSTATE.NONE,&#xA;        orderPlacedAfter: serverTime.AddDays(-7),&#xA;        orderPlacedBefore: serverTime.AddHours(-85)));&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1142" LastActivityDate="2011-02-14T16:09:08.317" CommentCount="4" />
  <row Id="775" PostTypeId="2" ParentId="772" CreationDate="2011-02-14T16:09:19.673" Score="2" Body="&lt;p&gt;This is what I would do:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;shippedItems.AddRange(&#xA;   OrderItem.Fetch(market: this.MARKET,&#xA;                   shipConfirmState: ORDERITEMSHIPCONFIRMSTATE.NONE,&#xA;                   orderPlacedAfter: serverTime.AddDays(-7),&#xA;                   orderPlacedBefore: serverTime.AddHours(-85))&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I feel that just as with brackets (&lt;code&gt;{}&lt;/code&gt;) the closing parenthesis should be on its own line when a method call spans multiple lines. It seems more consistent to me.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Alternatively, you could line up the &lt;code&gt;:&lt;/code&gt;'s:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;market:           this.MARKET,&#xA;shipConfirmState: ORDERITEMSHIPCONFIRMSTATE.NONE&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;but that it difficult to maintain.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Another option:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;shippedItems.AddRange(OrderItem.Fetch(market: this.MARKET,&#xA;                                      shipConfirmState: ORDERITEMSHIPCONFIRMSTATE.NONE,&#xA;                                      orderPlacedAfter: serverTime.AddDays(-7),&#xA;                                      orderPlacedBefore: serverTime.AddHours(-85)));&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;That uses fewer &lt;em&gt;lines&lt;/em&gt;, but is longer horizontally. Also, at first glance it looks like the arguments are to &lt;code&gt;AddRange&lt;/code&gt;, not &lt;code&gt;Fetch&lt;/code&gt;.&lt;/p&gt;&#xA;" OwnerUserId="110" LastEditorUserId="285" LastEditDate="2011-02-20T21:18:03.543" LastActivityDate="2011-02-20T21:18:03.543" CommentCount="4" />
  <row Id="776" PostTypeId="1" AcceptedAnswerId="787" CreationDate="2011-02-14T16:55:21.320" Score="8" ViewCount="567" Body="&lt;p&gt;I've created and I manage a point of sale web application built in PHP which has thus far followed no clear guidelines or methodology for development; it's operation is completely procedural. In turn, because the department that's using it requests new and different features like it's a Las Vegas buffet, the software has become a mess which I'm terrified of (don't look it in the eyes). Thankfully, I'm the only developer and so no one else must feel the wrath of the beast I've created.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I've always had a hard time wrapping my head around OOP, but I think I'm finally beginning to understand the whole point behind encapsulating methods, protecting fields, and class inheritance. This brings me to my question: Given the object scheme posted below, am I doing this right? It works like it should and doesn't return any errors, but in terms of object design, I feel like a baby deer with wobbly legs, uncertain of the world around me.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To be a little more specific, should I have a separate class that encapsulates MySQL parameters - and where should it be included/inherited if many child classes, perhaps even on separate server requests, will need it?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Should these two classes be one? I thought to separate them for sake of file length - Is excessive file size a good indicator of when a class might need to be broken up?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Abstract, private, protected - I understand how this works in literal behavior, but in regard to use, I'm just swinging in the dark. Anyone care to shed a light on what I've done and whether it makes sense? I think that is the summation of my fears and concerns. Here is the code in question - Your replies will help guide my redesign/refactoring of everything I've spent the last 6 months on.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;filterReports.class.php&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;date_default_timezone_set('America/Chicago'); // For use by 'date()' and 'strtotime()'&#xA;&#xA;/*&#xA;*   First, we will create our appropriate file names for the dates in question,&#xA;*   then we will determine if today is a day to run said reports. If today is in fact&#xA;*   a fine day to create a report, we should then check to see if the desired&#xA;*   report has already been created. If it has not, we will create and save it.&#xA;*/&#xA;&#xA;abstract class filterReports&#xA;{&#xA;&#xA;    protected $reportFilenames = array(); // Store all file names in array, because it's fun&#xA;    protected $reportDirs = array(&#xA;        'daily-orders' =&amp;gt; 'reports/daily/orders/',&#xA;        'weekly-orders' =&amp;gt; 'reports/weekly/orders/',&#xA;        'monthly-orders' =&amp;gt; 'reports/monthly/orders/',&#xA;        'daily-volume' =&amp;gt; 'reports/daily/volume/',&#xA;        'weekly-volume' =&amp;gt; 'reports/weekly/volume/',&#xA;        'monthly-volume' =&amp;gt; 'reports/monthly/volume/',&#xA;    ); // Folders where we plan to store these reports&#xA;&#xA;    protected function createFilenames()&#xA;    {&#xA;&#xA;        // Comprehensive Order Data&#xA;        $this-&amp;gt;reportFilenames['daily-orders']      = 'store-report-'&#xA;                                                    . date('Ymd', strtotime('-1 day'))&#xA;                                                    . '.csv'; // Yesterday's Report&#xA;        $this-&amp;gt;reportFilenames['weekly-orders']     = 'store-report-'&#xA;                                                    . date('Ymd', strtotime('-8 days'))&#xA;                                                    . '-'&#xA;                                                    . date('Ymd', strtotime('-1 day'))&#xA;                                                    . '.csv'; // Last 7 Days&#xA;        $this-&amp;gt;reportFilenames['monthly-orders']    = 'store-report-'&#xA;                                                    . date('Ymd', strtotime('first day of last month'))&#xA;                                                    . '-'&#xA;                                                    . date('Ymd', strtotime('last day of last month'))&#xA;                                                    . '.csv'; // Last Month&#xA;&#xA;        // General Product Volume Data&#xA;        $this-&amp;gt;reportFilenames['daily-volume']      = 'store-volume-'&#xA;                                                    . date('Ymd', strtotime('-1 day'))&#xA;                                                    . '.csv'; // Yesterday's Report&#xA;        $this-&amp;gt;reportFilenames['weekly-volume']     = 'store-volume-'&#xA;                                                    . date('Ymd', strtotime('-8 days'))&#xA;                                                    . '-'&#xA;                                                    . date('Ymd', strtotime('-1 day'))&#xA;                                                    . '.csv'; // Last 7 Days&#xA;        $this-&amp;gt;reportFilenames['monthly-volume']    = 'store-volume-'&#xA;                                                    . date('Ymd', strtotime('first day of last month'))&#xA;                                                    . '-'&#xA;                                                    . date('Ymd', strtotime('last day of last month'))&#xA;                                                    . '.csv'; // Last Month&#xA;&#xA;    }&#xA;&#xA;    protected $reportsToCreate = array();   // Based on what day it is, a different report may need to be created&#xA;&#xA;    protected function chooseReports()&#xA;    {&#xA;&#xA;        $this-&amp;gt;reportsToCreate['daily-orders'] = TRUE; // Because 'every day' occurs every day.&#xA;        $this-&amp;gt;reportsToCreate['daily-volume'] = TRUE;&#xA;&#xA;        if (date('N', time()) == '1') { // If today is Monday, create weekly report&#xA;            $this-&amp;gt;reportsToCreate['weekly-orders'] = TRUE;&#xA;            $this-&amp;gt;reportsToCreate['weekly-volume'] = TRUE;&#xA;        } else {&#xA;            $this-&amp;gt;reportsToCreate['weekly-orders'] = FALSE;&#xA;            $this-&amp;gt;reportsToCreate['weekly-volume'] = FALSE;&#xA;        }&#xA;&#xA;        if (date('j', time()) == '1') { // If today is the first day of the month, create monthly report&#xA;            $this-&amp;gt;reportsToCreate['monthly-orders'] = TRUE;&#xA;            $this-&amp;gt;reportsToCreate['monthly-volume'] = TRUE;&#xA;        } else {&#xA;            $this-&amp;gt;reportsToCreate['monthly-orders'] = FALSE;&#xA;            $this-&amp;gt;reportsToCreate['monthly-volume'] = FALSE;&#xA;        }&#xA;&#xA;    }&#xA;&#xA;    protected $reportsExist = array(); // Now let's see which reports have already been created&#xA;&#xA;    protected function searchReports()&#xA;    {&#xA;&#xA;        foreach ($this-&amp;gt;reportsToCreate as $key =&amp;gt; $val) {&#xA;&#xA;            if ($val != FALSE) {                &#xA;                if (!file_exists($this-&amp;gt;reportDirs[$key] . $this-&amp;gt;reportFilenames[$key])) {&#xA;                    $this-&amp;gt;reportsExist[$key] = FALSE;&#xA;                } else {&#xA;                    $this-&amp;gt;reportsExist[$key] = TRUE;&#xA;                }&#xA;            }           &#xA;&#xA;        }&#xA;&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;manageReports.class.php&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;include('filterReports.class.php');&#xA;&#xA;/*&#xA;*   As an extension of the previous class 'filterReports', if a desired report has&#xA;*   not been found, we will create and save it.&#xA;*/&#xA;&#xA;class manageReports extends filterReports&#xA;{&#xA;&#xA;    public $newReport;&#xA;&#xA;    private $dbConfig = array();&#xA;    private $con;   &#xA;&#xA;    private function dbParams() // This should all probably go somewhere else, but I haven't decided where just yet&#xA;    {&#xA;&#xA;        $this-&amp;gt;dbConfig = array(&#xA;            'host' =&amp;gt; 'hostname',&#xA;            'user' =&amp;gt; 'username',&#xA;            'pass' =&amp;gt; 'password',&#xA;            'name' =&amp;gt; 'database',&#xA;        );&#xA;        $this-&amp;gt;con = mysql_connect(&#xA;            $this-&amp;gt;dbConfig['host'],&#xA;            $this-&amp;gt;dbConfig['user'],&#xA;            $this-&amp;gt;dbConfig['pass']&#xA;        ) or die('MySQL Error: ' . mysql_errno() . ' - ' . mysql_error());&#xA;&#xA;    }&#xA;&#xA;    private function createDailyOrdersReport() // Collect data and build the report body&#xA;    {&#xA;&#xA;        // Do things to create $dataHeading and $dataContent strings&#xA;        $this-&amp;gt;newReport = $dataHeading . $dataContent;&#xA;&#xA;    }&#xA;&#xA;    private function createDailyVolumeReport()&#xA;    {&#xA;        $this-&amp;gt;newReport = $dataHeading . $dataContent;&#xA;    }&#xA;&#xA;    private function createWeeklyOrdersReport()&#xA;    {&#xA;        $this-&amp;gt;newReport = $dataHeading . $dataContent;&#xA;    }&#xA;&#xA;    private function createWeeklyVolumeReport()&#xA;    {&#xA;        $this-&amp;gt;newReport = $dataHeading . $dataContent;&#xA;    }&#xA;&#xA;    private function createMonthlyOrdersReport()&#xA;    {&#xA;        $this-&amp;gt;newReport = $dataHeading . $dataContent;&#xA;    }&#xA;&#xA;    private function createMonthlyVolumeReport()&#xA;    {&#xA;        $this-&amp;gt;newReport = $dataHeading . $dataContent;&#xA;    }&#xA;&#xA;    private function writeReport($key)&#xA;    {&#xA;&#xA;        // Save the report to its appropriate folder&#xA;        $writeReportName = $this-&amp;gt;reportDirs[$key] . $this-&amp;gt;reportFilenames[$key]; // I don't know why this works, seems to me to be out of scope for these array fields&#xA;        $writeReportOpen = fopen($writeReportName, 'w');&#xA;        fwrite($writeReportOpen, $this-&amp;gt;newReport) or die('Unable to write file: ' . $writeReportName);&#xA;        fclose($writeReportOpen);&#xA;&#xA;    }&#xA;&#xA;    public function createReports() // Finally, resolve which reports should be created - then create them.&#xA;    {&#xA;&#xA;        parent::createFilenames();  // Create the report file names&#xA;        parent::chooseReports();    // Decide whether a report should be run&#xA;        parent::searchReports();    // Find out if the report exists already&#xA;&#xA;        foreach ($this-&amp;gt;reportsExist as $key =&amp;gt; $val) { // Any reports that should be created today, T or F for 'exists'&#xA;            if ($val != TRUE) {&#xA;                if ($key = 'daily-orders') {&#xA;                    $this-&amp;gt;createDailyOrdersReport();&#xA;                    $this-&amp;gt;writeReport($key);&#xA;                }&#xA;                if ($key = 'daily-volume') {&#xA;                    $this-&amp;gt;createDailyVolumeReport();&#xA;                    $this-&amp;gt;writeReport($key);&#xA;                }&#xA;                if ($key = 'weekly-orders') {&#xA;                    $this-&amp;gt;createWeeklyOrdersReport();&#xA;                    $this-&amp;gt;writeReport($key);&#xA;                }&#xA;                if ($key = 'weekly-volume') {&#xA;                    $this-&amp;gt;createWeeklyVolumeReport();&#xA;                    $this-&amp;gt;writeReport($key);&#xA;                }&#xA;                if ($key = 'monthly-orders') {&#xA;                    $this-&amp;gt;createMonthlyOrdersReport();&#xA;                    $this-&amp;gt;writeReport($key);&#xA;                }&#xA;                if ($key = 'monthly-volume') {&#xA;                    $this-&amp;gt;createMonthlyVolumeReport();&#xA;                    $this-&amp;gt;writeReport($key);&#xA;                }&#xA;            }&#xA;        }&#xA;&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Finally, I do this to make it go.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;include('manageReports.class.php');&#xA;&#xA;$initReports = new manageReports;&#xA;$initReports-&amp;gt;createReports();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I preemptively appreciate any and all assistance you can provide as it will undoubtedly make me less bogus of a web developer.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt; Another question I just thought of in after-thought; Should I even bother declaring my fields and methods in &lt;code&gt;filterReports&lt;/code&gt; as &lt;code&gt;protected&lt;/code&gt;, seeing as though this class cannot be instantiated in the first place?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt; I have made some revisions to my code based on responses. For now, forget about the above two classes - Here is my new code. The first class instantiates each of my report generating sub-classes and executes a public function contained in each of them. The second class is a single report generation class.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;manageReports.class.php&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;include('store/library/reports/dailyOrdersReport.class.php');&#xA;&#xA;/*&#xA;* Having included the desired reporting classes,&#xA;* we now need a uniform process for access and&#xA;* execution of these classes.&#xA;*/&#xA;&#xA;class manageReports&#xA;{&#xA;&#xA;    private $reports = array();&#xA;&#xA;    public function __construct()&#xA;    {&#xA;&#xA;        $this-&amp;gt;createReports();&#xA;&#xA;    }&#xA;&#xA;    private function createReports()&#xA;    {&#xA;&#xA;        $this-&amp;gt;createReport('dailyOrdersReport');&#xA;&#xA;    }&#xA;&#xA;    private function createReport($class)&#xA;    {&#xA;&#xA;        $this-&amp;gt;reports[] = new $class;&#xA;&#xA;    }&#xA;&#xA;    public function go()&#xA;    {&#xA;&#xA;        foreach ($this-&amp;gt;reports as $report) {&#xA;            $report-&amp;gt;execReport();&#xA;        }&#xA;&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;dailyOrdersReport.class.php&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;include('store/library/dbConfig.class.php'); // May need these parameters for dependent methods&#xA;&#xA;/*&#xA;* Validates the need for specified report creation,&#xA;* and if true - does so.&#xA;*/&#xA;&#xA;class dailyOrdersReport extends dbConfig&#xA;{&#xA;&#xA;    private $newReport; // Variable to store report data&#xA;&#xA;    private $reportPath;&#xA;    private $reportName;&#xA;&#xA;    private $reportTestResult = FALSE;&#xA;&#xA;    public function __construct() // Preprocess validation answers, &quot;Should we create this report?&quot;&#xA;    {&#xA;&#xA;        parent::__construct(); // MySQL Parameters&#xA;&#xA;        $this-&amp;gt;reportPath   = 'store/reports/daily/orders/';&#xA;        $this-&amp;gt;reportName   = 'store-orders_'&#xA;                            . date('Ymd', strtotime('-1 day'))&#xA;                            . '.csv';&#xA;        $this-&amp;gt;reportTest();&#xA;&#xA;    }&#xA;&#xA;    private function reportTest() // We don't need to test against the date for this report, just if it's already been created&#xA;    {&#xA;&#xA;        if (!file_exists($this-&amp;gt;reportPath . $this-&amp;gt;reportName)) {&#xA;            $this-&amp;gt;reportTestResult = TRUE;&#xA;        } else {&#xA;            return;&#xA;        }&#xA;&#xA;    }&#xA;&#xA;    private function createReport()&#xA;    {&#xA;&#xA;        // About 100 lines of csv report generating madness&#xA;        $this-&amp;gt;newReport = $dataHeading . $dataContent;&#xA;&#xA;    }&#xA;&#xA;    private function writeReport()&#xA;    {&#xA;&#xA;        // Save the report to its appropriate folder&#xA;        $writeReportName = $this-&amp;gt;reportPath . $this-&amp;gt;reportName;&#xA;        $writeReportOpen = fopen($writeReportName, 'w');&#xA;        fwrite($writeReportOpen, $this-&amp;gt;newReport) or die('Unable to write file: ' . $writeReportName);&#xA;        fclose($writeReportOpen);&#xA;&#xA;    }&#xA;&#xA;    public function execReport()&#xA;    {&#xA;&#xA;        if ($this-&amp;gt;reportTestResult) { // Evaluates to 'true' if report aught be generated and saved to file&#xA;            $this-&amp;gt;createReport();&#xA;            $this-&amp;gt;writeReport();&#xA;        } else {&#xA;            return;&#xA;        }&#xA;&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Once again, the trigger.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;error_reporting(E_ALL);&#xA;&#xA;date_default_timezone_set('America/Chicago'); // For use by 'date()' and 'strtotime()'&#xA;&#xA;include('store/library/manageReports.class.php');&#xA;&#xA;$manageReports = new manageReports;&#xA;$manageReports-&amp;gt;go();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Is this perfect yet, or are there still miles to go before I sleep?&lt;/p&gt;&#xA;" OwnerUserId="1706" LastEditorUserId="1706" LastEditDate="2011-02-15T19:45:51.690" LastActivityDate="2011-02-15T19:45:51.690" Title="Object Paradigm for PHP, Practice in Design" Tags="&lt;php&gt;&lt;mysql&gt;&lt;classes&gt;&lt;oop&gt;" AnswerCount="2" CommentCount="2" FavoriteCount="2" />
  <row Id="779" PostTypeId="5" CreationDate="2011-02-14T19:00:02.587" Score="0" Body="&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/tags/c%2b%2b/info&quot;&gt;From the C++ tag wiki on Stack Overflow&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;C++ is a statically-typed, free-form, (usually) compiled, multi-paradigm, intermediate-level, general-purpose programming language not to be confused with C. It was developed in the early 1980's by Bjarne Stroustrup as a set of extensions to the C programming language. Building on C, &lt;a href=&quot;http://en.wikipedia.org/wiki/C++&quot; rel=&quot;nofollow&quot;&gt;C++&lt;/a&gt; improved type-safety and added support for automatic resource management, object-orientation, generic programming, and exception handling, among other features.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;New to C++?&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Whether you are new to programming or are coming to C++ from another programming language, it is highly recommended to have a good book from which to learn the language.  Stack Overflow keeps a detailed &lt;a href=&quot;http://stackoverflow.com/q/388242&quot;&gt;list of books&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you are looking for a good compiler, &lt;a href=&quot;http://gcc.gnu.org/&quot; rel=&quot;nofollow&quot;&gt;g++&lt;/a&gt; is the most commonly used compiler on Linux and other platforms, &lt;a href=&quot;http://clang.llvm.org/&quot; rel=&quot;nofollow&quot;&gt;clang&lt;/a&gt; is the official compiler on Mac and FreeBSD, and Microsoft &lt;a href=&quot;http://msdn.microsoft.com/en-us/vstudio/hh386302&quot; rel=&quot;nofollow&quot;&gt;Visual C++&lt;/a&gt; is the most commonly used on Windows.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Online compilers&lt;/h3&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&quot;http://coliru.stacked-crooked.com/&quot; rel=&quot;nofollow&quot;&gt;Coliru&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&quot;http://liveworkspace.org/&quot; rel=&quot;nofollow&quot;&gt;Live Workspace&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&quot;http://ideone.com/&quot; rel=&quot;nofollow&quot;&gt;IdeOne&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&quot;http://codepad.org/&quot; rel=&quot;nofollow&quot;&gt;CodePad&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&quot;http://rextester.com/runcode&quot; rel=&quot;nofollow&quot;&gt;rextester&lt;/a&gt; (Can also compile with MSVC)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&quot;http://ellcc.org/demo/&quot; rel=&quot;nofollow&quot;&gt;ELLCC&lt;/a&gt; (LLVM and more, can output assembly)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;h3&gt;External FAQs&lt;/h3&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&quot;http://www.parashift.com/c++-faq-lite/&quot; rel=&quot;nofollow&quot;&gt;C++ FAQ&lt;/a&gt;: formerly C++ FAQ Lite&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&quot;http://womble.decadent.org.uk/c++/template-faq.html&quot; rel=&quot;nofollow&quot;&gt;C++ Templates FAQ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&quot;http://www.stroustrup.com/bs_faq2.html&quot; rel=&quot;nofollow&quot;&gt;Bjarne Stroustrup's C++ Style and Technique FAQ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;h3&gt;Other External Resources&lt;/h3&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&quot;http://www.isocpp.org/&quot; rel=&quot;nofollow&quot;&gt;ISO C++ website&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&quot;http://en.cppreference.com/w/cpp&quot; rel=&quot;nofollow&quot;&gt;C++ Reference&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/&quot; rel=&quot;nofollow&quot;&gt;ISO's C++ Standards Committee's Papers&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&quot;http://www.gotw.ca/gotw/&quot; rel=&quot;nofollow&quot;&gt;Guru of the Week&lt;/a&gt;: article series on high-quality, exception-safe C++ code&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&quot;http://herbsutter.com/gotw/&quot; rel=&quot;nofollow&quot;&gt;Revised Guru of the Week (for C++14)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;SGI's &lt;a href=&quot;http://www.sgi.com/tech/stl/&quot; rel=&quot;nofollow&quot;&gt;Standard Template Library Programmer's Guide&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&quot;http://en.wikibooks.org/wiki/More_C%2B%2B_Idioms&quot; rel=&quot;nofollow&quot;&gt;More C++ Idioms&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&quot;http://www.boost.org/&quot; rel=&quot;nofollow&quot;&gt;Boost C++ Libraries&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/q/81656/54262&quot;&gt;Where do I find the current C or C++ standard documents?&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&quot;http://skillcrush.com/2012/05/30/c-c-c-and-objective-c/&quot; rel=&quot;nofollow&quot;&gt;C, C++, &amp;amp; Objective C&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="-1" LastEditorUserId="34073" LastEditDate="2015-07-01T01:30:26.450" LastActivityDate="2015-07-01T01:30:26.450" CommentCount="0" />
  <row Id="780" PostTypeId="4" CreationDate="2011-02-14T19:00:02.587" Score="0" Body="C++ is a statically typed, free-form, multi-paradigm, compiled, general-purpose programming language.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;" OwnerUserId="13874" LastEditorUserId="507" LastEditorDisplayName="anon" LastEditDate="2013-08-04T16:02:23.263" LastActivityDate="2013-08-04T16:02:23.263" CommentCount="0" />
  <row Id="781" PostTypeId="2" ParentId="776" CreationDate="2011-02-14T19:14:57.893" Score="0" Body="&lt;p&gt;The first comment is that you have six functions in &lt;code&gt;manageReports&lt;/code&gt; which are identical, which each call a seventh one, &lt;code&gt;createReports&lt;/code&gt;. While I understand that you mean to have logical function naming, given that you have all the logic as to when each program should be made located in the &lt;code&gt;chooseReports&lt;/code&gt; and &lt;code&gt;createReports&lt;/code&gt; function, you might as well leave off all the unnecessary ones.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For a more general answer, it doesn't seem like these two classes need to be separate. Class length isn't the main thing to consider here; you want to group things intelligently. Broadly speaking, you subclass only when you're making a more specific instance of the superclass. In your case, if you find that different types of reports require different functionality, could subclass different types of reports.&lt;/p&gt;&#xA;" OwnerUserId="192" LastActivityDate="2011-02-14T19:14:57.893" CommentCount="3" />
  <row Id="784" PostTypeId="1" AcceptedAnswerId="788" CreationDate="2011-02-15T00:04:18.437" Score="6" ViewCount="1230" Body="&lt;p&gt;I have a parser for CNF formulas in &lt;a href=&quot;http://logic.pdmi.ras.ru/~basolver/dimacs.html&quot; rel=&quot;nofollow&quot;&gt;Dimacs format&lt;/a&gt;, which is very slow. Any suggestion on how to improve its speed? I did some profiling and I might have to replace &lt;code&gt;Scanner&lt;/code&gt;. Is there anything faster?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A possible input for the parser is:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;pre&gt;&lt;code&gt;c A sample .cnf file.&#xA;p cnf 3 2&#xA;1 -3 0&#xA;2 3 -1 0&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;The code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/**&#xA; * Parses a stream for a CNF instance.                                                                  &#xA; *&#xA; * @param source input stream                                                                           &#xA; * @return read skeleton&#xA; * @throws ParseException if stream contains an invalid instance                                        &#xA; */&#xA;private static Skeleton parseStream(final InputStream source)                                           &#xA;    throws IOException, ParseException {                                                                &#xA;  Scanner scanner = new Scanner(source);                                                                &#xA;&#xA;  // Skip comments&#xA;  try {                                                                                                 &#xA;    String token = scanner.next();                                                                      &#xA;    while (token.equals(&quot;c&quot;)) {                                                                         &#xA;      scanner.nextLine();&#xA;      token = scanner.next();                                                                           &#xA;    }&#xA;    if (!token.equals(&quot;p&quot;)) {&#xA;      throw new ParseException(                                                                         &#xA;          &quot;Excepted 'p', but '&quot; + token + &quot;' was found&quot;);                                               &#xA;    }&#xA;  } catch (NoSuchElementException e) {&#xA;    throw new ParseException(&quot;Header not found&quot;);                                                       &#xA;  }&#xA;&#xA;  // Reads header&#xA;  int numVariables, numClauses;                                                                         &#xA;  try {&#xA;    String cnf = scanner.next();                                                                        &#xA;    if (!cnf.equals(&quot;cnf&quot;)) {                                                                           &#xA;      throw new ParseException(                                                                         &#xA;          &quot;Expected 'cnf', but '&quot; + cnf + &quot;' was found&quot;);                                               &#xA;    }&#xA;    numVariables = scanner.nextInt();                                                                   &#xA;    numClauses = scanner.nextInt();&#xA;  } catch (NoSuchElementException e) {&#xA;    throw new ParseException(&quot;Incomplete header&quot;);                                                      &#xA;  }&#xA;  logger.debug(&quot;p cnf &quot; + numVariables + &quot; &quot; + numClauses);                                             &#xA;&#xA;  // Reads clauses&#xA;  Skeleton skeleton = new Skeleton(numVariables);&#xA;  try {&#xA;    while (numClauses &amp;gt; 0) {&#xA;      int literal = scanner.nextInt();&#xA;      skeleton.cnf.add(literal);&#xA;      if (literal == 0) {&#xA;        numClauses--;&#xA;      }&#xA;    }&#xA;  } catch (NoSuchElementException e) {&#xA;    throw new ParseException(&#xA;        &quot;Incomplete problem: &quot; + numClauses + &quot; clauses are missing&quot;);&#xA;  }&#xA;&#xA;  return skeleton;                                                                                      &#xA;}                                                                                                       &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1201" LastEditorUserId="22222" LastEditDate="2015-09-29T19:46:12.583" LastActivityDate="2015-09-29T19:46:12.583" Title="Parser for CNF formulas" Tags="&lt;java&gt;&lt;parsing&gt;" AnswerCount="1" CommentCount="2" FavoriteCount="2" />
  <row Id="785" PostTypeId="2" ParentId="772" CreationDate="2011-02-15T00:24:42.460" Score="8" Body="&lt;p&gt;Interesting to see the range of responses. I would tend towards a different answer from any of those so far:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;shippedItems.AddRange(OrderItem.Fetch(&#xA;    market: this.MARKET,&#xA;    shipConfirmState: ORDERITEMSHIPCONFIRMSTATE.NONE,&#xA;    orderPlacedAfter: serverTime.AddDays(-7),&#xA;    orderPlacedBefore: serverTime.AddHours(-85)&#xA;));&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This to me reads more intuitively as &quot;add the fetched order items to shippedItems, using the following block of arguments to fetch&quot;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;One piece of advice from someone who has been through the same dilemma for a while now: don't try to put rules on it. Take each example on its own merit and try to write it in the way that you would want it to be written if you were someone else trying to figure out what it does.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Sometimes&lt;/strong&gt; it is a good idea to have a use-once variable to make something more readable. For example, if AddRange above had a second argument, where would you put it? Even this simple case reads badly&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;shippedItems.AddRange(&#xA;    OrderItem.Fetch(&#xA;        market: this.MARKET,&#xA;        shipConfirmState: ORDERITEMSHIPCONFIRMSTATE.NONE,&#xA;        orderPlacedAfter: serverTime.AddDays(-7),&#xA;        orderPlacedBefore: serverTime.AddHours(-85)&#xA;    ),&#xA;    2&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;However, this reads just fine&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var orderItems = OrderItem.Fetch(&#xA;    market: this.MARKET,&#xA;    shipConfirmState: ORDERITEMSHIPCONFIRMSTATE.NONE,&#xA;    orderPlacedAfter: serverTime.AddDays(-7),&#xA;    orderPlacedBefore: serverTime.AddHours(-85)&#xA;);&#xA;shippedItems.AddRange(orderItems, 2);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Each case on its own merit.&lt;/p&gt;&#xA;" OwnerUserId="1416" LastEditorUserId="1416" LastEditDate="2011-02-15T01:21:36.507" LastActivityDate="2011-02-15T01:21:36.507" CommentCount="1" />
  <row Id="787" PostTypeId="2" ParentId="776" CreationDate="2011-02-15T05:56:19.753" Score="7" Body="&lt;p&gt;When I see a bunch of repeated &lt;code&gt;if&lt;/code&gt; tests of a value against several constants, I think &quot;make these classes.&quot; You have a &lt;code&gt;Report&lt;/code&gt; base class screaming to get out with one subclass per report type. If you think of each report in a general way, you'll start to see what operations it needs to support:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Decide if it should be run given the date&lt;/li&gt;&#xA;&lt;li&gt;Check if it exists on disk&lt;/li&gt;&#xA;&lt;li&gt;Generate its file name and title&lt;/li&gt;&#xA;&lt;li&gt;Extract the data from MySQL into a text block&lt;/li&gt;&#xA;&lt;li&gt;Write itself to disk&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Here are the above requirements in an abstract base class, one designed to be extended by subclasses to fill out the specifics.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;abstract class AbstractReport {&#xA;    private $directory;&#xA;    private $date;&#xA;&#xA;    public function __construct($directory, $date) {&#xA;        $this-&amp;gt;directory = 'reports/' . $directory;&#xA;        $this-&amp;gt;date = $date;&#xA;    }&#xA;&#xA;    public abstract function getTitle() ;&#xA;    public abstract function getFileName() ;&#xA;    public abstract function isNeeded() ;&#xA;&#xA;    public function hasBeenRun() {&#xA;        return file_exists($this-&amp;gt;key . $this-&amp;gt;getFileName();&#xA;    }&#xA;&#xA;    public function runIfNeeded() {&#xA;        if ($this-&amp;gt;isNeeded() &amp;amp;&amp;amp; !$this-&amp;gt;hasBeenRun()) {&#xA;            $this-&amp;gt;run();&#xA;        }&#xA;    }&#xA;&#xA;    public function run() {&#xA;        $this-&amp;gt;connectToDatabase();&#xA;        file_put_contents($this-&amp;gt;getTitle(), $this-&amp;gt;buildReport());&#xA;    }&#xA;&#xA;    protected function connectToDatabase() {&#xA;        // ... mysql_connect() ...&#xA;    }&#xA;&#xA;    protected abstract function buildReport() ;&#xA;&#xA;    protected function formatDate($offset, $format='Ymd') {&#xA;        return date($format, strtotime($offset, $this-&amp;gt;date));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Here is an example subclass for one of the reports.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class DailyOrdersReport extends AbstractReport {&#xA;    public function __construct($date) {&#xA;        parent::__construct('daily/orders/', $date);&#xA;    }&#xA;&#xA;    public function getTitle() {&#xA;        return 'Daily Orders';&#xA;    }&#xA;&#xA;    public function getFileName() {&#xA;        return 'store-report-' . $this-&amp;gt;formatDate('-1 day');&#xA;    }&#xA;&#xA;    public function isNeeded() {&#xA;        return true;  // or use $this-&amp;gt;date to make determination&#xA;    }&#xA;&#xA;    protected abstract function buildReport() {&#xA;        // ... pull data from database and return formatted text ...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Hopefully this gives you a start on some OOness. :) I highly recommend the book Clean Code as it's a great help as you work to answer these questions for yourself.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt; As you write the report classes, you may find that all orders reports share some functionality in common that volume reports don't and vice versa. If it's significant you may want to create more abstract classes &lt;code&gt;AbstractOrdersReport&lt;/code&gt; and &lt;code&gt;AbstractVolumeReport&lt;/code&gt;. If the only difference between the time frames is the dates passed to the database queries, you could gain a lot from this.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Of course what's missing now is a way to run the reports! The following is more procedural than OO, but it could be driven by a file or something similar.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class ReportManager {&#xA;    private $reports = array();&#xA;&#xA;    public function __construct($date) {&#xA;        $this-&amp;gt;date = $date;&#xA;        $this-&amp;gt;createReports();&#xA;    }&#xA;&#xA;    public function createReports() {&#xA;        // could read these from disk or a table&#xA;        $this-&amp;gt;createReport('DailyOrders');&#xA;        $this-&amp;gt;createReport('DailyVolume');&#xA;        $this-&amp;gt;createReport('WeeklyOrders');&#xA;        $this-&amp;gt;createReport('WeeklyVolumn');&#xA;        $this-&amp;gt;createReport('MonthlyOrders');&#xA;        $this-&amp;gt;createReport('MonthlyVolumn');&#xA;    }&#xA;&#xA;    protected function createReport($class) {&#xA;        $this-&amp;gt;reports[] = new $class($this-&amp;gt;date);&#xA;    }&#xA;&#xA;    public function runIfNeeded() {&#xA;        foreach ($this-&amp;gt;reports as $report) {&#xA;            $report-&amp;gt;runIfNeeded();&#xA;        }&#xA;    }&#xA;&#xA;    public function run() {&#xA;        foreach ($this-&amp;gt;reports as $report) {&#xA;            $report-&amp;gt;run();&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;// ... and to kick it off ...&#xA;&#xA;$date = time();&#xA;$manager = new ReportManager();&#xA;$manager-&amp;gt;runIfNeeded();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1635" LastEditorUserId="1635" LastEditDate="2011-02-15T06:28:58.900" LastActivityDate="2011-02-15T06:28:58.900" CommentCount="5" />
  <row Id="788" PostTypeId="2" ParentId="784" CreationDate="2011-02-15T07:29:39.263" Score="6" Body="&lt;p&gt;Use a &lt;a href=&quot;http://download.oracle.com/javase/1.4.2/docs/api/java/io/BufferedInputStream.html&quot;&gt;&lt;code&gt;BufferedInputStream&lt;/code&gt;&lt;/a&gt; to speed up the disk access. If that's not enough, you can read the file line-by-line and use &lt;a href=&quot;http://download.oracle.com/javase/1.4.2/docs/api/java/lang/String.html#split%28java.lang.String%29&quot;&gt;&lt;code&gt;split()&lt;/code&gt;&lt;/a&gt; to break it into individual numbers.&lt;/p&gt;&#xA;" OwnerUserId="1635" LastActivityDate="2011-02-15T07:29:39.263" CommentCount="1" />
  <row Id="789" PostTypeId="2" ParentId="617" CreationDate="2011-02-15T11:42:11.893" Score="0" Body="&lt;p&gt;The answer that I was looking for, was very straight forward.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;All was required was to put JQuery in synchronis mode by placing using&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$.ajaxSetup({async:false});&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;and then doing the ajax calls using $.post(&quot;...&lt;/p&gt;&#xA;&#xA;&lt;p&gt;then just turning it on again&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$.ajaxSetup({async:true});&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1450" LastActivityDate="2011-02-15T11:42:11.893" CommentCount="1" />
  <row Id="790" PostTypeId="1" AcceptedAnswerId="799" CreationDate="2011-02-15T15:29:26.360" Score="15" ViewCount="10030" Body="&lt;p&gt;The following is like the Unix &quot;tail&quot; program. It was assigned as an exercise in Chapter 5 of Kernighan &amp;amp; Ritchie's &lt;em&gt;The C Programming Language&lt;/em&gt;. Because I've only read through most of Chapter 5, I'm still unfamiliar with certain topics, such as malloc(), which may have been more appropriate to use, I don't know.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I've done a little bit of programming before, but not enough to consider myself very experienced, so any kind of advice is welcome. : )&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;&#xA;#include &amp;lt;stdlib.h&amp;gt;&#xA;&#xA;#define DEFLINES 10&#xA;#define MAXBUFF  20000&#xA;&#xA;int findTail(char *lines[][2], int nlines, char buff[], int maxbuff);&#xA;&#xA;/* main() processes optional cli argument '-n', where n is a number of lines.&#xA; * The default is 10.  findTail finds the last n lines from the input so that&#xA; * they can be printed. */&#xA;&#xA;main(int argc, char *argv[])&#xA;{&#xA;  int nlines; char *endptr;&#xA;&#xA;  endptr = NULL;&#xA;  nlines = DEFLINES;&#xA;  if (argc &amp;gt; 2) {&#xA;    printf(&quot;error: too many arguments.\n&quot;);&#xA;    return EXIT_FAILURE;&#xA;  }&#xA;  else if (argc == 2) {&#xA;    if (*argv[1] == '-') {&#xA;      nlines = strtol(argv[1] + 1, &amp;amp;endptr, 10);&#xA;      if (*endptr != '\0') {&#xA;        printf(&quot;error: not a number of lines: %s\n&quot;, argv[1] + 1);&#xA;        return EXIT_FAILURE;&#xA;      }&#xA;    }&#xA;    else {&#xA;      printf(&quot;error: malformed argument: %s\n&quot;, argv[1]);&#xA;      return EXIT_FAILURE;&#xA;    }&#xA;  }&#xA;&#xA;  int i;&#xA;  char *lines[nlines][2], buff[MAXBUFF];&#xA;&#xA;  findTail(lines, nlines, buff, MAXBUFF);&#xA;  for (i=0; i &amp;lt; nlines; ++i) {&#xA;    if (lines[i][0] != NULL)&#xA;      printf(lines[i][0]);&#xA;    if (lines[i][1] != NULL)&#xA;      printf(lines[i][1]);&#xA;  }&#xA;}&#xA;&#xA;#define TRUE     1&#xA;#define FALSE    0&#xA;&#xA;void shift(char *lines[][2], int nlines);&#xA;void testForRoom(char *lines[][2], int index, char *buffp);&#xA;&#xA;/* findTail stores characters from stdin in the buffer 'buff'. When it finds&#xA; * the end of a line, it stores the pointer for the beginning of that line in&#xA; * 'lines'. once nlines have been found, pointers to previous lines are shifted&#xA; * off of the end of 'lines'. If there is space at the start of 'buff' not&#xA; * pointed to by 'lines', then the end of a line that hits the end of the&#xA; * buffer can continue its storage at the beginning of the buffer. This makes&#xA; * the best use of a fixed-sized buffer for long input. */&#xA;&#xA;int findTail(char *lines[][2], int nlines, char buff[], int maxbuff)&#xA;{&#xA;  char *buffp, *linestart;&#xA;  int i, c, wrap, nfound;&#xA;&#xA;  for (i=0; i &amp;lt; nlines; ++i) {&#xA;    lines[i][0] = NULL; // [0] for storing line, or beginning of wrapped line&#xA;    lines[i][1] = NULL; // [1] for storing second half of a wrapped line&#xA;  }&#xA;&#xA;  nfound = 0;&#xA;  wrap = FALSE;&#xA;  linestart = buffp = buff;&#xA;  while ((c=getchar()) != EOF) {&#xA;    if (buffp == linestart &amp;amp;&amp;amp; wrap == FALSE) {&#xA;      if (nfound &amp;lt; nlines)&#xA;        ++nfound;&#xA;      shift(lines, nlines);&#xA;    }&#xA;&#xA;    if (buffp - buff == maxbuff - 1) {&#xA;      *buffp = '\0';&#xA;      lines[nlines - 1][0] = linestart;&#xA;      wrap = TRUE;&#xA;      linestart = buffp = buff;&#xA;    }&#xA;&#xA;    testForRoom(lines, nlines - nfound, buffp);&#xA;&#xA;    *buffp++ = c;&#xA;    if (c == '\n') {&#xA;      *buffp++ = '\0';&#xA;      lines[nlines - 1][wrap] = linestart;&#xA;      wrap = FALSE;&#xA;      if (buffp - buff &amp;gt;= maxbuff - 1)&#xA;        buffp = buff;&#xA;      linestart = buffp;&#xA;    }&#xA;&#xA;  }&#xA;  // this is in case the input ended without a newline.&#xA;  if (c == EOF &amp;amp;&amp;amp; buffp != buff &amp;amp;&amp;amp; buffp[-1] != '\0') {&#xA;    testForRoom(lines, nlines - nfound, buffp);&#xA;    *buffp = '\0';&#xA;    lines[nlines - 1][wrap] = linestart;&#xA;  }&#xA;&#xA;}&#xA;&#xA;/* shift is used upon finding a character that starts a new line. It shifts&#xA; * line pointers in the pointer array to the left, making room for new line&#xA; * pointer(s) and forgetting the pointer(s) for the oldest line in memory. */&#xA;&#xA;void shift(char *lines[][2], int nlines)&#xA;{&#xA;  int i;&#xA;  for (i=0; i &amp;lt; nlines - 1; ++i) {&#xA;    lines[i][0] = lines[i + 1][0];&#xA;    lines[i][1] = lines[i + 1][1];&#xA;  }&#xA;  lines[nlines - 1][0] = NULL;&#xA;  lines[nlines - 1][1] = NULL;&#xA;}&#xA;&#xA;/* testForRoom tests to see if the location for (or the location following the)&#xA; * next character that would be placed in the buffer is pointed to by a line in&#xA; * the lines pointer array. */&#xA;&#xA;void testForRoom(char *lines[][2], int index, char *buffp) {&#xA;  if (buffp == lines[index][0]&#xA;      || buffp + 1 == lines[index][0]) {&#xA;    printf(&quot;error: not enough room in buffer.\n&quot;);&#xA;    exit(EXIT_FAILURE);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="902" LastEditorUserId="49350" LastEditDate="2016-03-01T11:28:32.840" LastActivityDate="2016-03-01T11:28:32.840" Title="Simple C Implementation for Unix &quot;tail&quot; Command" Tags="&lt;beginner&gt;&lt;c&gt;" AnswerCount="4" CommentCount="0" FavoriteCount="4" />
  <row Id="791" PostTypeId="2" ParentId="790" CreationDate="2011-02-15T17:22:05.100" Score="3" Body="&lt;p&gt;Interesting design.  Performance could probably be improved by allocating a couple of large buffers, and reading large blocks of input alternately into the two buffers until EOF is encountered.  At that point, count backward through the two blocks until the proper number of newlines have been found, and then print everything from there to the end.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If the input happens to be a disk file, one could seek to a spot near the end and count the number of newlines from that point on; if there aren't enough, seek back some distance and count the number of newlines between that point to the previous seek point.  This would allow &quot;tail&quot; to operate efficiently even if the input is a multi-gigabyte disk file.&lt;/p&gt;&#xA;" OwnerUserId="1078" LastActivityDate="2011-02-15T17:22:05.100" CommentCount="11" />
  <row Id="794" PostTypeId="1" AcceptedAnswerId="795" CreationDate="2011-02-15T22:37:23.323" Score="6" ViewCount="475" Body="&lt;p&gt;I had a question about using the modulus operator in Python and whether I have used it in a understandable way. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is how I've written the script:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#sum numbers 1 to 200 except mults of 4 or 7&#xA;def main():&#xA;    sum = 0&#xA;    for x in range(200+1):&#xA;        if (x % 4 and x % 7): #is this bad???&#xA;            sum = sum + x&#xA;    print sum&#xA;&#xA;&#xA;if __name__ == '__main__':&#xA;    main()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;So my questions are:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Should I spell out the modulo more clearly? ie &lt;code&gt;if x % 4 != 0 and x % 7 != 0&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Should I be approaching this in a very different way? &lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="1738" LastEditorUserId="2798" LastEditDate="2011-10-27T14:50:07.533" LastActivityDate="2013-09-14T17:49:52.720" Title="Print sum of numbers 1 to 200 except mults of 4 or 7 in Python" Tags="&lt;python&gt;" AnswerCount="4" CommentCount="9" FavoriteCount="0" />
  <row Id="795" PostTypeId="2" ParentId="794" CreationDate="2011-02-15T23:09:40.267" Score="7" Body="&lt;p&gt;I think your use of &lt;code&gt;%&lt;/code&gt; is fine, but that could be simplified to:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def main():&#xA;    print sum([i for i in range(201) if i % 4 and i % 7])&#xA;&#xA;if __name__ == '__main__':&#xA;    main()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Edit:&lt;/em&gt; Since I had a bug in there, that's a pretty clear indication that the &lt;code&gt;%&lt;/code&gt; is a tripwire. Instead, I'd probably do:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def divisible(numerator, denominator):&#xA;    return numerator % denominator == 0&#xA;&#xA;def main():&#xA;    print sum(i for i in range(201) if not(divisible(i, 4) or divisible(i, 7)))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="816" LastEditorUserId="816" LastEditDate="2011-02-16T06:56:07.897" LastActivityDate="2011-02-16T06:56:07.897" CommentCount="8" />
  <row Id="799" PostTypeId="2" ParentId="790" CreationDate="2011-02-16T03:14:19.667" Score="12" Body="&lt;p&gt;You are using some C99 features, such as declaring variables part way through a block of code and VLAs, but not obeying some C99 constraints, such as ensuring that the &lt;code&gt;main()&lt;/code&gt; function has an explicit return type of &lt;code&gt;int&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Because you're using C99, you are allowed to leave off the &lt;code&gt;return(0);&lt;/code&gt; (or &lt;code&gt;return 0;&lt;/code&gt;) from the end of &lt;code&gt;main()&lt;/code&gt;.  I think that was one of the less good decisions in C++ that was then echoed in C, and don't take that liberty myself; but I can't criticize your code when the standard allows it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It might be better to use &lt;code&gt;enum&lt;/code&gt; instead of &lt;code&gt;#define&lt;/code&gt; for the constants; &lt;code&gt;enum&lt;/code&gt; makes debugging easier because the values are in the symbol table, whereas &lt;code&gt;#define&lt;/code&gt; constants are typically not.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;enum { DEFLINES =    10 };&#xA;enum { MAXBUFF  = 20000 };&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Your design only reads from standard input.  That's not bad, though it is lightly limiting.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Your code includes:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;printf(lines[i][0]);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This is a very dangerous way to use &lt;code&gt;printf()&lt;/code&gt; - it is the ultimate format string vulnerability.  The trouble is that if my input to you contains:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;%s%n%13$s&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;then &lt;code&gt;printf()&lt;/code&gt; is going to be reading and writing values on the stack which you didn't put there, which leads to great unhappiness.  At minimum, use:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;printf(&quot;%s&quot;, lines[i][0]);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Alternatively, use:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;fputs(lines[i][0], stdout);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;(Do not use &lt;code&gt;puts()&lt;/code&gt; because it adds newlines to the end of your data - unless you remove the newlines from the input.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;When I compile your code using my default options, I get two warnings about the &lt;code&gt;printf()&lt;/code&gt; - confirmation of what I'd already observed - plus a warning that &lt;code&gt;findTail()&lt;/code&gt; does not return a value even though it is declared to return an &lt;code&gt;int&lt;/code&gt;.  That's best fixed by making it into a &lt;code&gt;void&lt;/code&gt; function.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/usr/bin/gcc -g -std=c99 -Wall -Wextra -Wmissing-prototypes \&#xA;      -Wstrict-prototypes  cr.c -o cr&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;That's a pretty stringent set of warning options, and your code is good to generate just those three.  I wish all the code I dealt with was as clean.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;When I run the program on its own source code, it works fine.  When I run it with:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$ perl -e 'for $i (1..12) { print &quot;A&quot; x 2047, &quot;\n&quot;; }' | ./cr&#xA;error: not enough room in buffer.&#xA;$&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;That's OK - you did say you weren't using &lt;code&gt;malloc()&lt;/code&gt; to do dynamic memory allocation.  As a general guideline, though, your error messages should include the name of the program, as found in &lt;code&gt;argv[0]&lt;/code&gt;, so that if there are multiple processes in a pipeline, for instance, you can tell which of the processes generated the error.  I do this by using a function call &lt;code&gt;err_setarg0(argv[0]);&lt;/code&gt; at the start of &lt;code&gt;main()&lt;/code&gt;.  This records the program name for use in subsequent error messages.  I then use function calls such as &lt;code&gt;err_error(&quot;error: not enough room in the buffer\n&quot;);&lt;/code&gt; to report the messages.  A minimal implementation of these two functions is:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;&#xA;#include &amp;lt;stdarg.h&amp;gt;&#xA;&#xA;static const char *err_arg0 = &quot;unknown&quot;;&#xA;&#xA;void err_setarg0(const char *arg0)&#xA;{&#xA;    err_arg0 = arg0;&#xA;}&#xA;&#xA;void err_error(const char *fmt, ...)&#xA;{&#xA;    va_list args;&#xA;    fprintf(stderr, &quot;%s: &quot;, err_arg0);&#xA;    va_start(args, fmt);&#xA;    vfprintf(stderr, fmt, args);&#xA;    va_end(args);&#xA;    exit(1);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I have a fairly complex file with many variations on this theme that provides simple-to-use error reporting, including variations reporting on the system error (via &lt;code&gt;errno&lt;/code&gt;) and including time stamps and process ID and ... all selectable based on program design.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Closer scrutiny shows that at any one time, at most one line will be wrapped - it means that the line starts just before the end of the buffer and has to wrap around to the start of the buffer.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Overall, a pretty good program.  Well done (and I don't say that lightly).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'm not sure how easily it will adapt to handle dynamic memory allocation - my suspicion is that you will end up with a rather different scheme for managing memory.  This would remove the issues with lots of very long lines at the end of the file overflowing your buffer.  Depending on your platform, you might be able to use the POSIX &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/getdelim.html&quot;&gt;&lt;code&gt;getline()&lt;/code&gt;&lt;/a&gt; function which will allocate memory for you as it reads lines.  Or you might decide to write an emulation of that code.  You then only need a simple circular buffer of character pointers to keep the last N lines, and you discard the old one (with &lt;code&gt;free()&lt;/code&gt;) before storing the next line.&lt;/p&gt;&#xA;" OwnerUserId="1160" LastActivityDate="2011-02-16T03:14:19.667" CommentCount="2" />
  <row Id="800" PostTypeId="1" AcceptedAnswerId="801" CreationDate="2011-02-16T08:07:25.013" Score="5" ViewCount="652" Body="&lt;p&gt;Is there a way to do this using parameters so the value is automatically converted to whatever datatype the keyfield has in the datatable?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This code should be reusable for future bulk update applications hence the constant and the check on multiple datatypes.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private const string DBKEYFIELDNAME = &quot;CustomerNr&quot;;&#xA;&#xA;...    &#xA;for (int i = 1; i &amp;lt;= csvLines.Length - 1; i++) // i=1 =&amp;gt; skip header line&#xA;{&#xA;    string[] csvFieldsArray = csvLines[i].Split(';');&#xA;    int indexKeyField = csvHeaders.IndexOf(CSVKEYFIELDNAME.ToLower());&#xA;&#xA;    object csvKeyValue = csvFieldsArray[indexKeyField];&#xA;&#xA;    // ... some more code here that is not relevant&#xA;&#xA;    // Find the matching row for our csv keyfield value&#xA;    Type keyType = parameters.DataTableOriginal.Columns[DBKEYFIELDNAME].DataType;&#xA;    DataRow[] rowsOriginal = null;&#xA;    if (keyType.IsAssignableFrom(typeof(string)))&#xA;        rowsOriginal = parameters.DataTableOriginal.Select(DBKEYFIELDNAME + &quot;='&quot; + csvKeyValue.ToString() + &quot;'&quot;);&#xA;    else if (keyType.IsAssignableFrom(typeof(Int16)) || keyType.IsAssignableFrom(typeof(Int32)) || keyType.IsAssignableFrom(typeof(Int64)) || keyType.IsAssignableFrom(typeof(bool)))&#xA;        rowsOriginal = parameters.DataTableOriginal.Select(DBKEYFIELDNAME + &quot;=&quot; + csvKeyValue);&#xA;&#xA;    if (rowsOriginal != null &amp;amp;&amp;amp; rowsOriginal.Length == 1)&#xA;    {&#xA;        // Do some processing of the row here&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="57" LastEditorUserId="22222" LastEditDate="2015-04-20T12:37:48.423" LastActivityDate="2015-04-20T12:37:48.423" Title="Strongly-typed reading values from CSV DataTable" Tags="&lt;c#&gt;&lt;csv&gt;" AnswerCount="6" CommentCount="6" />
  <row Id="801" PostTypeId="2" ParentId="800" CreationDate="2011-02-16T09:29:46.640" Score="6" Body="&lt;p&gt;A few comments:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;This method does way too much.  It is difficult to understand and will be difficult to debug and maintain.  Break it down into smaller methods that each have a single responsibility.&lt;/li&gt;&#xA;&lt;li&gt;Use curly braces after your if and else statements.  This improves readability of the code and makes it less likely for other code to sneak in there in the future.&lt;/li&gt;&#xA;&lt;li&gt;Can't your else statement just be a plain else with no if after it?  It seems like you want to put quotes around a string, and use the plain value for everything else.  Are there other requirements here?&lt;/li&gt;&#xA;&lt;li&gt;The type of csvKeyValue could just be string, since it's pulling a value out of a string[]&lt;/li&gt;&#xA;&lt;li&gt;No need for the call to .ToString() in your if branch&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;I would try to write the call to &lt;code&gt;parameters.DataTableOriginal.Select&lt;/code&gt; only once.  Consider using your if/else to set a &lt;code&gt;delimeter&lt;/code&gt; variable to either &lt;code&gt;string.Empty&lt;/code&gt; or &lt;code&gt;'&lt;/code&gt;, then write your query once like so:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;DataRow[] rowsOriginal = parameters.DataTableOriginal.Select(&#xA;    DBSLEUTELVELDNAAM + &quot;=&quot; + delimeter + csvKeyValue + delimeter);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="1142" LastEditorUserId="150" LastEditDate="2011-02-17T22:34:52.757" LastActivityDate="2011-02-17T22:34:52.757" CommentCount="1" />
  <row Id="802" PostTypeId="1" AcceptedAnswerId="925" CreationDate="2011-02-16T14:35:29.563" Score="7" ViewCount="672" Body="&lt;p&gt;I have some small applications that I want to secure.  I've been using the following setup that &lt;em&gt;I think&lt;/em&gt; is fairly safe, but I've never been able to set my mind at ease that it really is. Could you give me some reviews on the security of this?  It doesn't need super-security like credit card data, but I suppose secure is secure.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Cookie-based Sessions. User table is:  &lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Username field (cleartext)  &lt;/li&gt;&#xA;&lt;li&gt;Random/unique salt field (created with &lt;code&gt;mt_rand()&lt;/code&gt; at signup  &lt;/li&gt;&#xA;&lt;li&gt;Password field (SHA256 hash)&lt;/li&gt;&#xA;&lt;li&gt;(among other stuff)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Login method takes username, looks for the DB row, gets the salt, adds it to the end of the posted password, calcs a SHA256 hash for that string, and compares that to the password field in the DB.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;auth.php include at beginning of app&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?php&#xA;session_start();&#xA;if(!isset($_GET['logout']) &amp;amp;&amp;amp; isset($_SESSION['user']) &amp;amp;&amp;amp; $_SESSION['ipadd'] == $_SERVER['REMOTE_ADDR']) {&#xA;    // currently logged in&#xA;        // setup data &#xA;    require_once('lib/functions.php');&#xA;    $db = new ezSQL_sqlite('./','main.db');&#xA;    $user = new user($db,$_SESSION['user']);&#xA;    return;&#xA;&#xA;}&#xA;&#xA;&#xA;// build login form&#xA;&#xA;$head = '&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Please login&amp;lt;/title&amp;gt;&#xA;&amp;lt;style type=&quot;text/css&quot;&amp;gt;h2 { margin-top: 75px; margin-left: 100px; }&amp;lt;/style&amp;gt;&#xA;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;';&#xA;&#xA;$form = '&amp;lt;form method=&quot;post&quot; action=&quot;'.$_SERVER['PHP_SELF'].'&quot; id=&quot;userLogin&quot;&amp;gt;&#xA;    &amp;lt;table&amp;gt;&amp;lt;tr&amp;gt;&#xA;    &amp;lt;td&amp;gt;UserName:&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;input type=&quot;text&quot; name=&quot;username&quot; value=&quot;'.$_POST['username'].'&quot;&amp;gt;&amp;lt;/td&amp;gt;&#xA;    &amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;&#xA;    &amp;lt;td&amp;gt;Password:&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;input type=&quot;password&quot; name=&quot;pass&quot; /&amp;gt;&amp;lt;/td&amp;gt;&#xA;    &amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;&#xA;    &amp;lt;td&amp;gt;Remember me on this computer&amp;lt;/td&amp;gt;&#xA;    &amp;lt;td&amp;gt;&amp;lt;input type=&quot;checkbox&quot; name=&quot;remember&quot; value=&quot;1&quot; /&amp;gt;&amp;lt;/td&amp;gt;&#xA;    &amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;&#xA;    &amp;lt;td&amp;gt;&amp;amp;nbsp;&amp;lt;/td&amp;gt;&#xA;    &amp;lt;td&amp;gt;&amp;lt;input type=&quot;hidden&quot; name=&quot;loggingin&quot; value=&quot;true&quot; /&amp;gt;&#xA;    &amp;lt;input type=&quot;submit&quot; value=&quot;login&quot; /&amp;gt;&#xA;    &amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/table&amp;gt;&#xA;    &amp;lt;/form&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;';&#xA;&#xA;$msg[1] = '&amp;lt;h2&amp;gt;You\'ve logged out.&amp;lt;/h2&amp;gt;';&#xA;$msg[3] = '&amp;lt;h2&amp;gt;That username and password didn\'t match anything on record.&amp;lt;/h2&amp;gt;';&#xA;$msg[4] = '&amp;lt;h2&amp;gt;You must login to use this application&amp;lt;/h2&amp;gt;';&#xA;&#xA;&#xA;// used logout button&#xA;if($_GET['logout'] == 'true') {&#xA;    setcookie('SaveMe','',time()-3600);&#xA;    session_unset();&#xA;    die($head.$msg[1].$form);&#xA;&#xA;&#xA;// trying to login from form or returning with 'save me' cookie&#xA;} elseif ($_POST['loggingin'] == 'true' || isset($_COOKIE['SaveMe'])) {&#xA;&#xA;    require_once('lib/functions.php');&#xA;    $db = new ezSQL_sqlite('./','main.db');&#xA;$loginName = (isset($_POST['username'])) ? $_POST['username'] : $_COOKIE['worshipSaveMe'];&#xA;&#xA;    // ADDED: escaping of posted/cookie data;&#xA;$loginName = mysql_real_escape_string($loginName);&#xA;&#xA;&#xA;        // try to create new user object, error on fail&#xA;    try {&#xA;        $user = new user($db,$_POST['username']);&#xA;    } catch (Exception $e) {&#xA;        die($head.'&amp;lt;h2&amp;gt;'.$e-&amp;gt;getMessage().'&amp;lt;/h2&amp;gt;'.$form);&#xA;    }&#xA;&#xA;&#xA;        // try to login with user object, die on fail&#xA;    if( ! $user-&amp;gt;login($_POST['pass'])) &#xA;        die($head.$msg[3].$form);&#xA;    else {&#xA;                // if remember me box was checked&#xA;        if($_POST['remember'] == 1)&#xA;            setcookie('worshipSaveMe',$_POST['username'],time()+60*60*24*365); &#xA;        return;&#xA;    }&#xA;&#xA;// no post data, no save me cookie, just got here&#xA;} else { &#xA;    die($head.$msg[4].$form);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;And the relevant part of the user class:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class user&#xA;{&#xA;    private $username;&#xA;    protected $ID;&#xA;    private $created;&#xA;    private $salt;&#xA;    private $password;&#xA;    private $db;&#xA;&#xA;    function __construct ( ezSQL_sqlite $db, $postedUsername ) {&#xA;&#xA;        if( !$user = $db-&amp;gt;get_row(&quot;SELECT * FROM users WHERE uname = '$postedUsername';&quot;))&#xA;            throw new Exception ('That username didn\'t match anything on record.');&#xA;        else {&#xA;            $this-&amp;gt;db = $db;&#xA;            $this-&amp;gt;username = $postedUsername;&#xA;            $this-&amp;gt;ID = $user-&amp;gt;user_id;&#xA;            $this-&amp;gt;created = date('Y-m-d',$user-&amp;gt;createdDate);&#xA;            $this-&amp;gt;salt = $user-&amp;gt;salt;&#xA;            $this-&amp;gt;password = $user-&amp;gt;pword;&#xA;        }&#xA;&#xA;    }&#xA;&#xA;    /** check password for match&#xA;     * @param user input from a posted form&#xA;     * @return boolean &#xA;     */&#xA;    private function verifyPassword($postedPass) {&#xA;&#xA;        $pHash = hash('sha256',$postedPass . $this-&amp;gt;salt);&#xA;&#xA;        if($this-&amp;gt;password != $pHash)&#xA;            return FALSE;&#xA;        else&#xA;            return TRUE;&#xA;    }&#xA;&#xA;    /** This relies on cookie based sessions, and so &#xA;     * must be called before any output to browser.&#xA;     * @return bool&#xA;     */&#xA;    public function login($postedPassword) {&#xA;        if( ! $this-&amp;gt;verifyPassword($postedPassword) ) {&#xA;            return FALSE;&#xA;        } else {&#xA;            if( isset( $_COOKIE[&quot;PHPSESSID&quot;] )) { //be sure session was initialized&#xA;                $_SESSION['user'] = $this-&amp;gt;username;&#xA;                $_SESSION['ipadd'] = $_SERVER['REMOTE_ADDR'];&#xA;                return TRUE;&#xA;            } else {&#xA;                die('Session must be initialized before calling login method.');&#xA;            }&#xA;&#xA;        }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1750" LastEditorUserId="9357" LastEditDate="2016-01-05T06:37:52.943" LastActivityDate="2016-12-01T03:57:18.870" Title="Securely handling a password protected application" Tags="&lt;php&gt;&lt;mysql&gt;&lt;security&gt;&lt;authentication&gt;&lt;session&gt;" AnswerCount="5" CommentCount="3" />
  <row Id="803" PostTypeId="1" CreationDate="2011-02-16T14:43:54.687" Score="11" ViewCount="2717" Body="&lt;p&gt;Here's a method I made that's supposed to print out multiples of any numbers up to any quantity:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def DisplayMultiples(multiplesOf, count)&#xA;  i = multiplesOf&#xA;  while i &amp;lt;= count&#xA;    if i % multiplesOf == 0&#xA;      puts i&#xA;    end&#xA;    i += 1&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Any suggestions on how to improve the code to something more fitting to the Ruby style? I'm coming from a C# background so I'd like to switch things up a bit. &lt;/p&gt;&#xA;" OwnerDisplayName="Sergio Tapia" LastEditorUserId="22222" LastEditDate="2016-11-08T00:07:02.863" LastActivityDate="2016-11-08T00:07:02.863" Title="Displaying the multiples of a given number" Tags="&lt;beginner&gt;&lt;ruby&gt;" AnswerCount="4" CommentCount="0" FavoriteCount="3" />
  <row Id="805" PostTypeId="2" ParentId="803" CreationDate="2011-02-16T15:33:33.990" Score="32" Body="&lt;p&gt;One important note regarding naming in ruby:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The &lt;strong&gt;syntax&lt;/strong&gt; in ruby is that constants (including class and module names) have to start with capital letters and local variables have to start with lower case letters. Instance, class and global variables must start with their respective sigil followed by a letter in any case. Method names must start with a letter in any case, but if they start with a capital letters, they must be called with &lt;code&gt;()&lt;/code&gt; when there are no arguments.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The naming &lt;strong&gt;convention&lt;/strong&gt; in ruby is to use snake_case for method names and variables, PascalCase for class and module names and ALL_CAPS for constants other than class and module names.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For method names the convention is to use &lt;code&gt;snake_case&lt;/code&gt; for all methods except &quot;constructor&quot;-style functions (e.g. &lt;code&gt;Integer()&lt;/code&gt;, &lt;code&gt;Array()&lt;/code&gt;, &lt;code&gt;Hash()&lt;/code&gt;) where the name of the function is the same as that of the constructed class.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Generally using PascalCase for method names is a bad idea because:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;It's against convention and will make people think it's a constructor-style function&lt;/li&gt;&#xA;&lt;li&gt;If you define a method without arguments, you'll trip yourself up because you'll try to call it as &lt;code&gt;MyMethod&lt;/code&gt; instead of &lt;code&gt;MyMethod()&lt;/code&gt; which does not work if the method name starts with a capital letter.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;General notes on your code:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Using a while loop is usually unidiomatic ruby. Using a while loop to iterate from one number to another number with a constant step-size is always unidiomatic ruby. If the step-size is 1, you can just use &lt;code&gt;each&lt;/code&gt; on a range and if it is something else you can use &lt;code&gt;step&lt;/code&gt;. So your code would just be written as:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def display_multples(multiples_of, count)&#xA;  (multiples_of .. count).each do |i|&#xA;    if i % multiples_of == 0&#xA;      puts i&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Now as pdr points out, this is not the optimal algorithm to do this. Instead of iterating between all integers between &lt;code&gt;multiples_of&lt;/code&gt; and &lt;code&gt;count&lt;/code&gt; and printing those which are divisible by &lt;code&gt;multiples_of&lt;/code&gt;, you can just iterate between the numbers between &lt;code&gt;multiples_of&lt;/code&gt; and &lt;code&gt;count&lt;/code&gt; with a step size of &lt;code&gt;multiples_of&lt;/code&gt;, i.e. only iterate over the multiples of &lt;code&gt;multiples_of&lt;/code&gt;. However his code contains an unnecessary &lt;code&gt;each&lt;/code&gt; (which will also make the code not work on ruby 1.8.6, though that's thankfully becoming less of an issue these days). So the code should just be:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def display_multiples(multiples_of, count)&#xA;  (multiplesOf..count).step(multiples_of) do |i|&#xA;    puts i&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;However this code still contains one major, non-ruby-specific design-smell: You're mixing the logic to generate the multiples with the code printing it. Generally IO and logic should be separated as much as possible. So what you should do is define a method &lt;code&gt;multiples&lt;/code&gt; which generates the multiples and a method &lt;code&gt;print_multiples&lt;/code&gt; which prints them.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In ruby the best way to write a method which generates a sequence of values is to write an &quot;iterator method&quot;, i.e. a method which yields the elements. That would look like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def multiples(multiples_of, count)&#xA;  (multiples_of .. count).step(multiples_of) do |i|&#xA;    yield i&#xA;  end&#xA;end&#xA;&#xA;def print_multiples(multiples_of, count)&#xA;  multiples(multiples_of, count) do |i|&#xA;    puts i&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You can also define multiples as:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def multiples(multiples_of, count, &amp;amp;blk)&#xA;  (multiples_of .. count).step(multiples_of, &amp;amp;blk)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In 1.8.7+ this also has the benefit of returning an Enumerator if no block is given. so if you don't just want to print it, you can also use Enumerable methods like &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;select&lt;/code&gt; etc. on it.&lt;/p&gt;&#xA;" OwnerUserId="128" LastEditorUserId="128" LastEditDate="2011-03-13T00:29:58.880" LastActivityDate="2011-03-13T00:29:58.880" CommentCount="2" />
  <row Id="806" PostTypeId="2" ParentId="800" CreationDate="2011-02-16T16:03:21.327" Score="3" Body="&lt;p&gt;Yup, that method does definitely need breaking down into smaller pieces.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You may like to use an iterator method to loop through the lines. Something along the lines of :&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;IEnumerable&amp;lt;string&amp;gt; EachCSVKey(string[] csvLines)&#xA;{&#xA;    int indexKeyField = csvHeaders.IndexOf(CSVKEYFIELDNAME.ToLower());&#xA;&#xA;    for (int i = 1; i &amp;lt;= csvLines.Length - 1; i++) // i=1 =&amp;gt; skip header line&#xA;    {&#xA;        string[] csvFieldsArray = csvLines[i].Split(';');&#xA;        yield return csvFieldsArray[indexKeyField];&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then in your method :&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;foreach ( var csvKeyValue in EachCSVKey ( csvLines) )&#xA;{ &#xA;  ...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I find (in my opinion) that this makes the intent clearer.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Note also you should get the indexKeyField value outside of the loop. This value won't change, and so it is unnecessary to keep getting it.&lt;/p&gt;&#xA;" OwnerUserId="1756" LastActivityDate="2011-02-16T16:03:21.327" CommentCount="2" />
  <row Id="807" PostTypeId="2" ParentId="772" CreationDate="2011-02-16T16:23:34.163" Score="3" Body="&lt;p&gt;This may be a sign you need to factor out the Fetch into a new method:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;....&#xA;shippedItems.AddRange( LastWeeksMarketItems() );&#xA;....&#xA;&#xA;private OrderItems LastWeeksMarketItems ()&#xA;{&#xA;    return OrderItem.Fetch(market: this.MARKET,   &#xA;                           shipConfirmState: ORDERITEMSHIPCONFIRMSTATE.NONE,    &#xA;                           orderPlacedAfter: serverTime.AddDays(-7), &#xA;                           orderPlacedBefore: serverTime.AddHours(-85));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The method name gives you further clarity about what it is you are trying to add.&lt;/p&gt;&#xA;" OwnerUserId="1756" LastActivityDate="2011-02-16T16:23:34.163" CommentCount="7" />
  <row Id="808" PostTypeId="1" AcceptedAnswerId="811" CreationDate="2011-02-16T16:49:59.310" Score="12" ViewCount="393" Body="&lt;p&gt;The below is \$O(n^3)\$. I'm sure there is a way to improve this..&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;//vector&amp;lt;string&amp;gt; flight_path; given as parameter&#xA;//vector&amp;lt;int&amp;gt; flight_number; need to fill&#xA;//vector&amp;lt;segment&amp;gt; flight_segments; known, contains segments (dep, arr, flightnum)&#xA;&#xA;//Purpose of the function is to take in a flight_path and give back a list of&#xA;// flight numbers for each segment&#xA;//&#xA;// Input: New York, London, Kolkata&#xA;// Output: 101 201 301, 102 939&#xA;&#xA;vector&amp;lt;string&amp;gt; get_flight_numbers (vector&amp;lt;string&amp;gt; flight_path) {&#xA;&#xA;    vector&amp;lt;int&amp;gt; flight_number;&#xA;&#xA;    for (int i = 0; i &amp;lt; flight_path.size() - 1; i++) {&#xA;&#xA;        string dep = flight_path.at(i);&#xA;        string arr = flight_path.at(i+1);&#xA;&#xA;        for (int j = 0; j &amp;lt; flight_segments.size(); j ++) {&#xA;            if (flight_segments.at(j).departure == dep &amp;amp;&amp;amp; flight_segments.at(j).arrival == arr) {&#xA;                for (int k = 0; k &amp;lt; flight_segments.at(j).segment_numbers.size(); k++) {&#xA;                    flight_numbers.push_back(atoi(flight_segments.at(j).segment_numbers.at(k).c_str()));&#xA;                }&#xA;            }&#xA;        }&#xA;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="105" LastEditorUserId="22222" LastEditDate="2014-06-15T06:09:57.557" LastActivityDate="2014-06-15T06:12:28.373" Title="Retrieving list of flight numbers from flight path" Tags="&lt;c++&gt;&lt;optimization&gt;" AnswerCount="2" CommentCount="2" FavoriteCount="1" />
  <row Id="809" PostTypeId="2" ParentId="802" CreationDate="2011-02-16T17:00:21.937" Score="0" Body="&lt;p&gt;Assuming that you also have user authenticated application behavior check against the open session before it executes, your security process appears reasonably solid. I would personally feel a little uncomfortable storing my salt in the user's cookie - though excluding it in your setup may prove problematic if each user has a unique string. From your description, it sounds like you are already retrieving the user's salt from the db during authentication and not from the cookie. Lastly, your variable &lt;code&gt;$postedUsername&lt;/code&gt; kinda has me worried. You are escaping or removing unsafe (for MySQL) characters before your query, aren't you?&lt;/p&gt;&#xA;" OwnerUserId="1706" LastActivityDate="2011-02-16T17:00:21.937" CommentCount="2" />
  <row Id="810" PostTypeId="1" CreationDate="2011-02-16T17:48:55.890" Score="8" ViewCount="1208" Body="&lt;p&gt;I am primarily a Python programmer and have finally ditched the IDE in favour of vim and I will admit, I am loving it !&lt;/p&gt;&#xA;&#xA;&lt;p&gt;My &lt;code&gt;vimrc&lt;/code&gt; file looks like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;autocmd BufRead,BufNewFile *.py syntax on&#xA;autocmd BufRead,BufNewFile *.py set ai&#xA;autocmd BufRead *.py set smartindent cinwords=if,elif,else,for,while,with,try,except,finally,def,class&#xA;set tabstop=4&#xA;set expandtab&#xA;set shiftwidth=4&#xA;filetype indent on&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Any changes I should make to make my Python vim experience more pleasant? &lt;/p&gt;&#xA;" OwnerDisplayName="user1761" LastActivityDate="2011-02-16T19:21:28.523" Title="Review the vimrc for a Python programmer" Tags="&lt;python&gt;" AnswerCount="1" CommentCount="1" FavoriteCount="5" ClosedDate="2011-02-23T06:25:17.193" />
  <row Id="811" PostTypeId="2" ParentId="808" CreationDate="2011-02-16T19:09:54.137" Score="8" Body="&lt;p&gt;If I understand this, you have a directed graph that consists of a series of flight segments. You are given a series of flight segments, say, A -&gt; B -&gt; C, that makes up a flight path.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In addition, you have a group of flight numbers. The flight numbers correspond to paths. Flight number 1 will be tagged as [A,B,1], for example. Time is not an issue, all flights are assumed to be available at all times.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Can you, in less than \$O(n^3)\$ time, figure out what flight numbers can take you from one segment to the next?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Well, on approach might be to go through the array exactly once in order to separate out all the flights that depart from your first departure gate, your second departure gate, and so forth. That's order n.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Then go through each of those lists (once) and remove all the flights that don't have the right destination gate. That's order n again. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;At that point, you're pretty much done. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;So think your big mistake here is going through your big loop (the flights) INSIDE your little loop (your flight path). You'd be much better off going through the small loop inside the big loop and breaking if you find a match. This loop only nests once, also, instead of twice. If you really really wanted to, you could check each departure as you find it to see if it matches an arrival.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In psuedo-code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for (i in each flight) do&#xA;    for (j in each pathpoint except the last one) do&#xA;        if flight[i][departure][i] == pathpoint[j] then&#xA;            if flight[j][arrival] == pathpoint[j+1]&#xA;                put flight in the good flights vector&#xA;            end if&#xA;        end if&#xA;    end for&#xA;end for&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;That's \$O(n*m)\$, where \$m\$ is the length of the path and n is the number of flights. This should be, in any reasonable world, \$O(n)\$.&lt;/p&gt;&#xA;" OwnerUserId="1764" LastEditorUserId="22222" LastEditDate="2014-06-15T06:12:28.373" LastActivityDate="2014-06-15T06:12:28.373" CommentCount="3" />
  <row Id="812" PostTypeId="1" AcceptedAnswerId="817" CreationDate="2011-02-16T19:08:41.697" Score="8" ViewCount="1907" Body="&lt;p&gt;I have a function that takes a column title, and a response.body from a urllib GET (I already know the body contains text/csv), and iterates through the data to build a list of values to be returned. My question to the gurus here: have I written this in the cleanest, most efficient way possible? Can you suggest any improvements?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def _get_values_from_csv(self, column_title, response_body):&#xA;    &quot;&quot;&quot;retrieves specified values found in the csv body returned from GET&#xA;    @requires: csv&#xA;    @param column_title: the name of the column for which we'll build a list of return values.&#xA;    @param response_body: the raw GET output, which should contain the csv data&#xA;    @return: list of elements from the column specified.&#xA;    @note: the return values have duplicates removed. This could pose a problem, if you are looking for duplicates.&#xA;    I'm not sure how to deal with that issue.&quot;&quot;&quot;&#xA;    dicts = [row for row in csv.DictReader(response_body.split(&quot;\r\n&quot;))]&#xA;    results = {}&#xA;    for dic in dicts:&#xA;        for k, v in dic.iteritems():&#xA;            try:&#xA;                results[k] = results[k] + [v] #adds elements as list+list&#xA;            except: #first time through the iteritems loop.&#xA;                results[k] = [v]&#xA;&#xA;    #one potential problem with this technique: handling duplicate rows&#xA;    #not sure what to do about it.&#xA;    return_list = list(set(results[column_title]))&#xA;    return_list.sort()&#xA;    return return_list&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1768" OwnerDisplayName="Greg Gauthier" LastEditorUserId="22222" LastEditDate="2015-01-28T06:22:11.383" LastActivityDate="2015-01-28T06:22:11.383" Title="Getting lists of values from a CSV" Tags="&lt;python&gt;&lt;csv&gt;" AnswerCount="2" CommentCount="1" />
  <row Id="814" PostTypeId="2" ParentId="812" CreationDate="2011-02-16T19:19:04.433" Score="0" Body="&lt;p&gt;My suggestions:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def _get_values_from_csv(self, column_title, response_body):&#xA;    # collect results in a set to eliminate duplicates&#xA;    results = set()&#xA;&#xA;    # iterate the DictReader directly&#xA;    for dic in csv.DictReader(response_body.split(&quot;\r\n&quot;)):&#xA;        # only add the single column we are interested in&#xA;        results.add(dic[column_title])&#xA;&#xA;    # turn the set into a list and sort it&#xA;    return_list = list(results)&#xA;    return_list.sort()&#xA;    return return_list&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1530" OwnerDisplayName="shang" LastActivityDate="2011-02-16T19:19:04.433" CommentCount="0" />
  <row Id="816" PostTypeId="2" ParentId="810" CreationDate="2011-02-16T19:21:28.523" Score="5" Body="&lt;p&gt;I like to add the following:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&quot; Allow easy use of hidden buffers.&#xA;&quot; This allows you to move away from a buffer without saving&#xA;set hidden&#xA;&#xA;&quot; Turn search highlighting on&#xA;set hlsearch&#xA;&#xA;&quot; Turn on spelling&#xA;&quot; This auto spell checks comments not code (so very cool)&#xA;set spell&#xA;&#xA;&quot; tabstop:          Width of tab character&#xA;&quot; expandtab:        When on uses space instead of tabs&#xA;&quot; softtabstop:      Fine tunes the amount of white space to be added&#xA;&quot; shiftwidth        Determines the amount of whitespace to add in normal mode&#xA;set tabstop     =4&#xA;set softtabstop =4&#xA;set shiftwidth  =4&#xA;set expandtab&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="507" LastActivityDate="2011-02-16T19:21:28.523" CommentCount="3" />
  <row Id="817" PostTypeId="2" ParentId="812" CreationDate="2011-02-16T19:24:29.407" Score="7" Body="&lt;p&gt;Here's a shorter function that does the same thing. It doesn't create lists for the columns you're not interested in.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def _get_values_from_csv(self, column_title, response_body):&#xA;    dicts = csv.DictReader(response_body.split(&quot;\r\n&quot;))&#xA;    return sorted(set(d[column_title] for d in dicts))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1766" LastEditorUserId="1766" LastEditDate="2011-02-17T08:11:06.000" LastActivityDate="2011-02-17T08:11:06.000" CommentCount="3" />
  <row Id="819" PostTypeId="1" CreationDate="2011-02-16T21:07:12.450" Score="2" ViewCount="500" Body="&lt;p&gt;I was playing around with LINQ and I came up with the following idea for composing locks taking advantage of C# Monadic syntax. It seems too simple, so I thought let me post it on StackExchange and see if anyone can quickly spot any major problems with this approach.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you comment the lock inside the atomic implementation you'll see the accounts getting corrupted.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This idea is about being able to compose operations on the accounts without explicit locking.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;using System;&#xA;using System.Collections.Generic;&#xA;using System.Linq;&#xA;&#xA;namespace AtomicLinq&#xA;{&#xA;    public static class AccountCombinators&#xA;    {&#xA;        public static IAtomic&amp;lt;Unit&amp;gt; TransferAndReverse(this Account accA, &#xA;                                                      Account accB, &#xA;                                                      double amount)&#xA;        {&#xA;            return from a in accA.TransferTo(accB, amount)&#xA;                   from b in accB.TransferTo(accA, amount)&#xA;                   select new Unit();&#xA;        }&#xA;&#xA;        public static IAtomic&amp;lt;Unit&amp;gt; TransferTo(this Account accA, &#xA;                                              Account accB, &#xA;                                              double amount)&#xA;        {&#xA;            return from a in accA.Withdraw(amount)&#xA;                   from b in accB.Deposit(amount)&#xA;                   select new Unit();&#xA;        }&#xA;&#xA;        public static IAtomic&amp;lt;double&amp;gt; Withdraw(this Account acc, double amount)&#xA;        {&#xA;            return Atomic.Create(() =&amp;gt; acc.Amount -= amount);&#xA;        }&#xA;&#xA;        public static IAtomic&amp;lt;double&amp;gt; Deposit(this Account acc, double amount)&#xA;        {&#xA;            return Atomic.Create(() =&amp;gt; acc.Amount += amount);&#xA;        }&#xA;    }&#xA;&#xA;    static class Program&#xA;    {&#xA;        static void Main(string[] args)&#xA;        {&#xA;            var accA = new Account(&quot;John&quot;) { Amount = 100.0 };&#xA;            var accB = new Account(&quot;Mark&quot;) { Amount = 200.0 };&#xA;&#xA;            var syncObject = new object();&#xA;            Enumerable.Range(1, 100000).AsParallel().Select(_ =&amp;gt; accA.TransferAndReverse(accB, 100).Execute(syncObject)).Run();&#xA;&#xA;            Console.WriteLine(&quot;{0} {1}&quot;, accA, accA.Amount);&#xA;            Console.WriteLine(&quot;{0} {1}&quot;, accB, accB.Amount);&#xA;&#xA;            Console.ReadLine();&#xA;        }        &#xA;    }    &#xA;&#xA;    public class Account&#xA;    {&#xA;        public double Amount { get; set; }&#xA;        private readonly string _name;&#xA;&#xA;        public Account(string name)&#xA;        {&#xA;            _name = name;&#xA;        }&#xA;&#xA;        public override string ToString()&#xA;        {&#xA;            return _name;&#xA;        }&#xA;    }&#xA;&#xA;    #region Atomic Implementation&#xA;&#xA;    public interface IAtomic&amp;lt;T&amp;gt;&#xA;    {&#xA;        T Execute(object sync);&#xA;    }&#xA;&#xA;    public static class Atomic&#xA;    {&#xA;        public static IAtomic&amp;lt;T&amp;gt; Create&amp;lt;T&amp;gt;(Func&amp;lt;object, T&amp;gt; f)&#xA;        {&#xA;            return new AnonymousAtomic&amp;lt;T&amp;gt;(f);&#xA;        }&#xA;&#xA;        public static IAtomic&amp;lt;T&amp;gt; Create&amp;lt;T&amp;gt;(Func&amp;lt;T&amp;gt; f)&#xA;        {&#xA;            return Create(_ =&amp;gt; f());&#xA;        }&#xA;&#xA;        public static IAtomic&amp;lt;T&amp;gt; Aggregate&amp;lt;T&amp;gt;(this IEnumerable&amp;lt;IAtomic&amp;lt;T&amp;gt;&amp;gt; xs)&#xA;        {&#xA;            return xs.Aggregate((x, y) =&amp;gt; from a in x&#xA;                                          from b in y&#xA;                                          select b);&#xA;        }&#xA;&#xA;        public static IAtomic&amp;lt;K&amp;gt; SelectMany&amp;lt;T, V, K&amp;gt;(this IAtomic&amp;lt;T&amp;gt; m, Func&amp;lt;T, IAtomic&amp;lt;V&amp;gt;&amp;gt; f, Func&amp;lt;T, V, K&amp;gt; p)&#xA;        {&#xA;            return Create(sync =&amp;gt;&#xA;                              {&#xA;                                  var t = m.Execute(sync);&#xA;                                  var x = f(t);&#xA;                                  return p(t, x.Execute(sync));&#xA;                              });&#xA;        }&#xA;    }&#xA;&#xA;    public class AnonymousAtomic&amp;lt;T&amp;gt; : IAtomic&amp;lt;T&amp;gt;&#xA;    {&#xA;        private readonly Func&amp;lt;object, T&amp;gt; _func;&#xA;&#xA;        public AnonymousAtomic(Func&amp;lt;object, T&amp;gt; func)&#xA;        {&#xA;            _func = func;&#xA;        }&#xA;&#xA;        public T Execute(object sync)&#xA;        {&#xA;            lock (sync)  // Try to comment this lock you'll see that the accounts get corrupted&#xA;                return _func(sync);&#xA;        }&#xA;    }&#xA;&#xA;    #endregion Atomic Implementation   &#xA;}&#xA;&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerDisplayName="user1771" LastEditorDisplayName="user1771" LastEditDate="2011-02-17T07:11:13.353" LastActivityDate="2011-02-18T22:14:48.823" Title="Composable Locks using LINQ. Can anyone see any problem with this ?" Tags="&lt;c#&gt;&lt;linq&gt;&lt;multithreading&gt;&lt;locking&gt;" AnswerCount="2" CommentCount="0" FavoriteCount="1" />
  <row Id="821" PostTypeId="2" ParentId="794" CreationDate="2011-02-17T05:07:10.877" Score="1" Body="&lt;p&gt;My program is the shortest possible:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;print 12942&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Use the formula of inclusion/exclusion.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There should be &lt;code&gt;200-(200/4)-(200/7)+(200/28) (Using integer division) = 200-50-28+7 = 129&lt;/code&gt; terms in the sum.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The sum must be &lt;code&gt;s(200) - 4*s(200/4) - 7*s(200/7) + 28*s(200/28) where s(n) = sum from 1 till n = n*(n+1)/2&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This evaluates to &lt;code&gt;0.5* (200*201 - 4*50*51 - 7*28*29 + 28*7*8) = 0.5*(40200 - 10200 - 5684 + 1568) = **12942**&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Why write a program if you can use math?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;(I'll admit I used a calculator to multiply and add the numbers)&lt;/p&gt;&#xA;" OwnerUserId="1492" LastEditorDisplayName="user29649" LastEditDate="2013-09-14T07:03:40.107" LastActivityDate="2013-09-14T07:03:40.107" CommentCount="6" />
  <row Id="822" PostTypeId="2" ParentId="790" CreationDate="2011-02-17T05:50:17.237" Score="5" Body="&lt;p&gt;Since you're using C99, you may be interested in the &lt;code&gt;&amp;lt;stdbool.h&amp;gt;&lt;/code&gt; header, this includes three macro definitions, similar to ones you've already defined. This header has at least the following macro definitions on any conforming implementation:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#define bool _Bool&#xA;#define true 1&#xA;#define false 0&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In C99, &lt;code&gt;_Bool&lt;/code&gt; is a native Boolean data type, it contains only 0, or 1. When converting any scalar type to &lt;code&gt;_Bool&lt;/code&gt;, it will convert to 0 if the scalar type is equal to 0, otherwise it will convert to 1.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also, in C99, the &amp;ldquo;implicit &lt;code&gt;int&lt;/code&gt;&amp;rdquo; has been removed, so you &lt;em&gt;must&lt;/em&gt; give every function a return type, even &lt;code&gt;main&lt;/code&gt;. In older C, functions without an explicit return type would &amp;ldquo;default&amp;rdquo; to &lt;code&gt;int&lt;/code&gt; type (as would arguments, I think).&lt;/p&gt;&#xA;" OwnerUserId="1328" LastActivityDate="2011-02-17T05:50:17.237" CommentCount="1" />
  <row Id="823" PostTypeId="1" AcceptedAnswerId="825" CreationDate="2011-02-17T08:12:40.473" Score="4" ViewCount="1017" Body="&lt;p&gt;I have created a small server program that encrypts text using a named pipe:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#define UNICODE&#xA;#define WIN32_WINNT 0x0500&#xA;#include &amp;lt;stdio.h&amp;gt;&#xA;#include &amp;lt;windows.h&amp;gt;&#xA;#include &amp;lt;signal.h&amp;gt;&#xA;&#xA;&#xA;&#xA;HANDLE hPipe;&#xA;DWORD WINAPI ServerProc(LPVOID lpVoid)&#xA;{&#xA;&#xA;&#xA;    hPipe = CreateNamedPipe(L&quot;\\\\.\\pipe\\testpipe&quot;, PIPE_ACCESS_DUPLEX, PIPE_TYPE_BYTE | PIPE_READMODE_BYTE |PIPE_WAIT, 1, 256, 256, 0, NULL);&#xA;    if(!hPipe)&#xA;        return wprintf(L&quot;ERROR : Cannot create pipe.\n&quot;);&#xA;&#xA;    while(ConnectNamedPipe(hPipe, NULL))&#xA;    {&#xA;        WCHAR szText[80] = {0};&#xA;        DWORD dwSize;&#xA;        INT i;&#xA;&#xA;        ReadFile(hPipe, szText, 158, &amp;amp;dwSize, NULL);&#xA;&#xA;        for(i = 0; i &amp;lt; dwSize; i++)&#xA;            szText[i] ^= '#';&#xA;&#xA;        WriteFile(hPipe, szText, 158, &amp;amp;dwSize, NULL);&#xA;        FlushFileBuffers(hPipe);&#xA;            DisconnectNamedPipe(hPipe);&#xA;    }&#xA;&#xA;    CloseHandle(hPipe);&#xA;&#xA;    return 0;&#xA;}&#xA;&#xA;void SignalHandler(int signal)&#xA;{&#xA;    DisconnectNamedPipe(hPipe);&#xA;    CloseHandle(hPipe);&#xA;    printf(&quot;Application closing...\n&quot;);&#xA;    exit(0);&#xA;}&#xA;&#xA;&#xA;int wmain(void)&#xA;{&#xA;    HANDLE hThread;&#xA;&#xA;    signal(SIGINT, SignalHandler);  &#xA;&#xA;    hThread = CreateThread(NULL, 0, ServerProc, NULL, 0, NULL);&#xA;&#xA;    WaitForSingleObject(hThread, INFINITE);&#xA;&#xA;    CloseHandle(hThread);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In this code I have created a &lt;code&gt;hPipe&lt;/code&gt; handle as global because my program thread and the signal handler both need the handle.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Is this a correct way to handle signals?&lt;/p&gt;&#xA;" OwnerUserId="1704" LastEditorUserId="9357" LastEditDate="2014-12-21T13:43:38.797" LastActivityDate="2014-12-21T13:43:38.797" Title="Handling SIGINT signal for a server program" Tags="&lt;c&gt;&lt;file-system&gt;&lt;windows&gt;&lt;server&gt;&lt;signal-handling&gt;" AnswerCount="1" CommentCount="0" FavoriteCount="1" />
  <row Id="824" PostTypeId="1" AcceptedAnswerId="859" CreationDate="2011-02-17T09:30:50.847" Score="8" ViewCount="2869" Body="&lt;p&gt;I am looking for any possible improvements on this tagging widget.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I ask for special attention to be paid to my &lt;em&gt;blur&lt;/em&gt; handler in the event of a autocomplete option being specified but any optimizations or critiques are welcome.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;Demo:     &lt;a href=&quot;http://webspirited.com/tagit&quot;&gt;http://webspirited.com/tagit&lt;/a&gt;  &#xA;Js File:  &lt;a href=&quot;http://webspirited.com/tagit/js/tagit.js&quot;&gt;http://webspirited.com/tagit/js/tagit.js&lt;/a&gt;&#xA;Css File: &lt;a href=&quot;http://webspirited.com/tagit/css/tagit.css&quot;&gt;http://webspirited.com/tagit/css/tagit.css&lt;/a&gt; &#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Code: &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(function($) {&#xA;    $.widget(&quot;ui.tagit&quot;, {&#xA;&#xA;        // default options&#xA;        options: {&#xA;            tagSource:   [],&#xA;            triggerKeys: ['enter', 'space', 'comma', 'tab'],&#xA;            initialTags: [],&#xA;            minLength:   1&#xA;        },&#xA;&#xA;        _keys: {&#xA;            backspace: 8,&#xA;            enter:     13,&#xA;            space:     32,&#xA;            comma:     44,&#xA;            tab:       9&#xA;        },&#xA;&#xA;        //initialization function&#xA;        _create: function() {&#xA;&#xA;            var self = this;&#xA;            this.tagsArray = [];&#xA;&#xA;            //store reference to the ul&#xA;            this.element = this.element;&#xA;&#xA;            //add class &quot;tagit&quot; for theming&#xA;            this.element.addClass(&quot;tagit&quot;);&#xA;&#xA;            //add any initial tags added through html to the array&#xA;            this.element.children('li').each(function() {&#xA;                self.options.initialTags.push($(this).text());&#xA;            });&#xA;&#xA;            //add the html input&#xA;            this.element.html('&amp;lt;li class=&quot;tagit-new&quot;&amp;gt;&amp;lt;input class=&quot;tagit-input&quot; type=&quot;text&quot; /&amp;gt;&amp;lt;/li&amp;gt;');&#xA;&#xA;            this.input = this.element.find(&quot;.tagit-input&quot;);&#xA;&#xA;            //setup click handler&#xA;            $(this.element).click(function(e) {&#xA;                if (e.target.tagName == 'A') {&#xA;                    // Removes a tag when the little 'x' is clicked.&#xA;                    $(e.target).parent().remove();&#xA;                    self._popTag();&#xA;                }&#xA;                else {&#xA;                    self.input.focus();&#xA;                }&#xA;            });&#xA;&#xA;            //setup autcomplete handler&#xA;            this.options.appendTo = this.element;&#xA;            this.options.source = this.options.tagSource;&#xA;            this.options.select = function(event, ui) {&#xA;                self._removeTag();&#xA;                self._addTag(ui.item.value);&#xA;                return false;&#xA;            }&#xA;            this.input.autocomplete(this.options);&#xA;&#xA;            //setup keydown handler&#xA;            this.input.keydown(function(e) {&#xA;                var lastLi = self.element.children(&quot;.tagit-choice:last&quot;);&#xA;                if (e.which == self._keys.backspace)&#xA;                    return self._backspace(lastLi);&#xA;&#xA;                if (self._isInitKey(e.which)) {&#xA;                    e.preventDefault();&#xA;                    if ($(this).val().length &amp;gt;= self.options.minLength)&#xA;                        self._addTag($(this).val());&#xA;                }&#xA;&#xA;                if (lastLi.hasClass('selected'))&#xA;                    lastLi.removeClass('selected');&#xA;&#xA;                self.lastKey = e.which;&#xA;            });&#xA;&#xA;            //setup blur handler&#xA;            this.input.blur(function(e) {&#xA;                self._addTag($(this).val());&#xA;                $(this).val('');&#xA;                return false;&#xA;            });&#xA;&#xA;            //define missing trim function for strings&#xA;            String.prototype.trim = function() {&#xA;                return this.replace(/^\s+|\s+$/g, &quot;&quot;);&#xA;            };&#xA;&#xA;            this._initialTags();&#xA;&#xA;        },&#xA;        _popTag: function() {&#xA;            return this.tagsArray.pop();&#xA;        }&#xA;        ,&#xA;&#xA;        _addTag: function(value) {&#xA;            this.input.val(&quot;&quot;);&#xA;            value = value.replace(/,+$/, &quot;&quot;);&#xA;            value = value.trim();&#xA;            if (value == &quot;&quot; || this._exists(value))&#xA;                return false;&#xA;&#xA;            var tag = &quot;&quot;;&#xA;            tag = '&amp;lt;li class=&quot;tagit-choice&quot;&amp;gt;' + value + '&amp;lt;a class=&quot;tagit-close&quot;&amp;gt;x&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;';&#xA;            $(tag).insertBefore(this.input.parent());&#xA;            this.input.val(&quot;&quot;);&#xA;            this.tagsArray.push(value);&#xA;        }&#xA;        ,&#xA;&#xA;        _exists: function(value) {&#xA;            if (this.tagsArray.length == 0 || $.inArray(value, this.tagsArray) == -1)&#xA;                return false;&#xA;            return true;&#xA;        }&#xA;        ,&#xA;&#xA;        _isInitKey : function(keyCode) {&#xA;            var keyName = &quot;&quot;;&#xA;            for (var key in this._keys)&#xA;                if (this._keys[key] == keyCode)&#xA;                    keyName = key&#xA;&#xA;            if ($.inArray(keyName, this.options.triggerKeys) != -1)&#xA;                return true;&#xA;            return false;&#xA;        }&#xA;        ,&#xA;&#xA;        _removeTag: function() {&#xA;            this._popTag();&#xA;            this.element.children(&quot;.tagit-choice:last&quot;).remove();&#xA;        }&#xA;        ,&#xA;&#xA;        _backspace: function(li) {&#xA;            if (this.input.val() == &quot;&quot;) {&#xA;                // When backspace is pressed, the last tag is deleted.&#xA;                if (this.lastKey == this._keys.backspace) {&#xA;                    this._popTag();&#xA;                    li.remove();&#xA;                    this.lastKey = null;&#xA;                } else {&#xA;                    li.addClass('selected');&#xA;                    this.lastKey = this._keys.backspace;&#xA;                }&#xA;            }&#xA;            return true;&#xA;        }&#xA;        ,&#xA;&#xA;        _initialTags: function() {&#xA;            if (this.options.initialTags.length != 0) {&#xA;                for (var i in this.options.initialTags)&#xA;                    if (!this._exists(this.options.initialTags[i]))&#xA;                        this._addTag(this.options.initialTags[i]);&#xA;            }&#xA;        }&#xA;        ,&#xA;&#xA;        tags: function() {&#xA;            return this.tagsArray;&#xA;        }&#xA;        ,&#xA;&#xA;        destroy: function() {&#xA;            $.Widget.prototype.destroy.apply(this, arguments); // default destroy&#xA;            this.tagsArray = [];&#xA;        }&#xA;&#xA;    });&#xA;})(jQuery);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="92" LastEditorUserId="92" LastEditDate="2011-02-17T10:07:25.653" LastActivityDate="2011-02-19T18:47:52.643" Title="Looking for improvements on my jQuery-UI tagging widget" Tags="&lt;javascript&gt;&lt;optimization&gt;&lt;jquery&gt;&lt;jquery-ui&gt;" AnswerCount="1" CommentCount="1" FavoriteCount="3" />
  <row Id="825" PostTypeId="2" ParentId="823" CreationDate="2011-02-17T15:43:37.307" Score="3" Body="&lt;p&gt;It depends on what you want the server to do when an interrupt is sent.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you really want the program to stop when it is sent an interrupt, even though it is a service (Windows) or daemon (Unix), then what you did works.  If, however, the program was run with settings to ignore interrupts, your code overrides that.  The canonical sequence for setting a signal handler (for signal number &lt;code&gt;signum&lt;/code&gt;) is:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if (signal(signum, SIG_IGN) != SIG_IGN)&#xA;    signal(signum, sighandler);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If the program was ignoring the signal, it continues to do so.  Otherwise, it sets its own handler to handle the signal.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;On Unix, you usually use SIGTERM to do a controlled stop of a program, and for daemons, you typically use SIGHUP to indicate that the daemon should revisit its configuration.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also, in the POSIX world, it is generally recommended to use &lt;code&gt;sigaction()&lt;/code&gt; rather than &lt;code&gt;signal()&lt;/code&gt; because it gives different and better guarantees about what happens.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If your program needed to continue after receiving the signal, you would have to reset the signal handler in the signal handler - and there's a small window of vulnerability which means that if two signals are sent fast enough, the program stops despite your handler.  Using &lt;code&gt;sigaction()&lt;/code&gt; avoids this timing vulnerability.&lt;/p&gt;&#xA;" OwnerUserId="1160" LastEditorUserId="1160" LastEditDate="2011-02-18T02:33:16.967" LastActivityDate="2011-02-18T02:33:16.967" CommentCount="1" />
  <row Id="826" PostTypeId="2" ParentId="803" CreationDate="2011-02-17T17:08:16.813" Score="7" Body="&lt;p&gt;This is not actually an answer to your question, but since you mentioned that you come from C# to Ruby, I just wanted to point out that the idiomatic Ruby solution that @sepp2k presented is pretty much indentical to what an idiomatic C# solution would have looked like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class Multiples : IEnumerable&amp;lt;int&amp;gt;&#xA;{&#xA;    private readonly int _multiplesOf;&#xA;    private readonly int _limit;&#xA;&#xA;    public static Multiples Of(int multiplesOf = 1, int limit = int.MaxValue)&#xA;    {&#xA;        return new Multiples(multiplesOf, limit);&#xA;    }&#xA;&#xA;    Multiples(int multiplesOf = 1, int limit = int.MaxValue)&#xA;    {&#xA;        _multiplesOf = multiplesOf;&#xA;        _limit = limit;&#xA;    }&#xA;&#xA;    public IEnumerator&amp;lt;int&amp;gt; GetEnumerator()&#xA;    {&#xA;        var i = 0;&#xA;        while ((i += _multiplesOf) &amp;lt;= _limit) yield return i;&#xA;    }&#xA;&#xA;    IEnumerator IEnumerable.GetEnumerator()&#xA;    {&#xA;        return GetEnumerator();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It might not be immediately obvious that those two examples are the same, but they mostly are. The main difference is that .NET's libraries are much weaker than Ruby's, so we had to implement some stuff manually that was provided for us by the Ruby libraries.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You would use both versions pretty much the same way:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// C#&#xA;foreach (var n in Multiples.Of(7, 50)) Console.WriteLine(n);&#xA;Multiples.Of(7, 50).ToList().ForEach(Console.WriteLine);&#xA;Console.WriteLine(Multiples.Of(7, 50).ToArray());&#xA;&#xA;# Ruby&#xA;multiples(7, 50) {|n| puts n }&#xA;multiples(7, 50, &amp;amp;method(:puts))&#xA;puts *multiples(7, 50)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In fact, the C# version I presented here is slightly more powerful, since it allows the &lt;em&gt;client&lt;/em&gt; to choose the termination condition more freely. For example, what if I don't want the multiples of 7 below 50, but rather the first 50 multiples? Easy:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Multiples.Of(7).Take(50)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Implementing this for the Ruby version is left as an exercise to the reader :-)&lt;/p&gt;&#xA;" OwnerUserId="1581" LastEditorUserId="1581" LastEditDate="2011-02-17T17:18:12.437" LastActivityDate="2011-02-17T17:18:12.437" CommentCount="1" />
  <row Id="827" PostTypeId="1" CreationDate="2011-02-17T18:18:47.860" Score="8" ViewCount="1251" Body="&lt;p&gt;I was writing a piece of code (a custom &lt;code&gt;EntityProcessor&lt;/code&gt; for Solr, but that isn't too relevant) designed to break lines of input based on a string delimiter (&lt;code&gt;toMatch&lt;/code&gt; below).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Characters are read from a stream and then passed to &lt;code&gt;addChar&lt;/code&gt;.&lt;br&gt;&#xA;The assumption is that each character comes in a stream and look-ahead isn't allowed - the break needs to happen after the last character of a match is passed in.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I wrote two implementations below &lt;code&gt;addChar&lt;/code&gt; and &lt;code&gt;addChar2&lt;/code&gt;.&lt;br&gt;&#xA;The first is a simple, dumb, keep a buffer and compare it each iteration, the second is a simple state machine and the latter is slightly faster.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import java.util.Iterator;&#xA;import java.util.LinkedList;&#xA;&#xA;public class CharStreamMatcher {&#xA;    protected char[] toMatch = null;&#xA;&#xA;&#xA;    public MagicCharStreamMatcher(char[] match){&#xA;        toMatch = match;&#xA;        for(int i=0;i&amp;lt;match.length;i++) li.add((char)0);&#xA;    }&#xA;&#xA;    public void clear(){&#xA;        correspondences.clear();&#xA;    }&#xA;&#xA;    LinkedList&amp;lt;Character&amp;gt; li = new LinkedList&amp;lt;Character&amp;gt;();&#xA;    public boolean addChar2(char c){&#xA;        li.addLast(c);&#xA;        li.removeFirst();&#xA;        int i=0;&#xA;        for(Character ch : li){&#xA;            if(ch.charValue() != toMatch[i++])&#xA;                return false;&#xA;        }&#xA;        return true;&#xA;    }&#xA;&#xA;&#xA;    private class MutableInteger{&#xA;        public int i;&#xA;        public MutableInteger(int i){&#xA;            this.i = i;&#xA;        }&#xA;    }&#xA;&#xA;    LinkedList&amp;lt;MutableInteger&amp;gt; correspondences = new LinkedList&amp;lt;MutableInteger&amp;gt;();&#xA;    public boolean addChar(char c){&#xA;        boolean result = false; &#xA;&#xA;        if(c == toMatch[0])&#xA;            correspondences.add(new MutableInteger(-1));&#xA;&#xA;        Iterator&amp;lt;MutableInteger&amp;gt; it = correspondences.iterator();&#xA;        while(it.hasNext()){&#xA;            MutableInteger mi = it.next();&#xA;            mi.i++;&#xA;&#xA;            // check the match&#xA;            if(c != toMatch[mi.i]){&#xA;                it.remove();&#xA;            }&#xA;            // are we done? &#xA;            else if(mi.i == toMatch.length-1){&#xA;                result = true;&#xA;                it.remove();&#xA;            }&#xA;        }&#xA;&#xA;        return result;&#xA;    }   &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1788" LastEditorUserId="62429" LastEditDate="2015-12-14T03:45:29.533" LastActivityDate="2015-12-14T03:45:29.533" Title="Implementing a fast 'split' function on a stream of characters in Java" Tags="&lt;java&gt;&lt;stream&gt;" AnswerCount="1" CommentCount="3" FavoriteCount="2" />
  <row Id="828" PostTypeId="1" AcceptedAnswerId="18565" CreationDate="2011-02-17T21:01:51.293" Score="32" ViewCount="5613" Body="&lt;p&gt;In my spare time I decided to write a program that would systematically identify prime numbers from 2 to 18,446,744,073,709,551,615.  This is for fun and learning, as I know it will take too long to actually ever reach the upward value, but I'm using this to explore parallel processing.  I know this is not a traditional question but I very much would like the critique of my peers.  I know this can been torn apart, so please do, but if you do, do so constructively.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The program is designed to run until the user hits the &lt;kbd&gt;esc&lt;/kbd&gt; key; at which time it will generate a file with all of the prime numbers discovered.  The path to this file needs to be configured to a value for your directory structure.  When I restart the program it will accept, as an argument, a primes text file, reading it in and starting from where it left off.  The parallel processing portion and implementing the sieve for finding primes is what I was interested in woodshedding.  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;using System;&#xA;using System.Collections.Generic;&#xA;using System.Linq;&#xA;using System.Text;&#xA;using System.IO;&#xA;using System.Threading.Tasks;&#xA;&#xA;namespace Prime&#xA;{&#xA;    public class Program&#xA;    {&#xA;        public static void Main(string[] args)&#xA;        {&#xA;            List&amp;lt;UInt64&amp;gt; primes = new List&amp;lt;UInt64&amp;gt;();&#xA;            primes.Add(2);&#xA;            UInt64 numberToCheck = 3;&#xA;&#xA;            if (args.Count() &amp;gt; 0)&#xA;            {&#xA;                numberToCheck = ReadPrimesToList(args[0].ToString(), out primes) +2;&#xA;            }&#xA;&#xA;            try&#xA;            {&#xA;                bool quit = false;&#xA;                Console.WriteLine(&quot;Prime Number Search&quot;);&#xA;&#xA;                while (!quit)&#xA;                {&#xA;                    if (Console.KeyAvailable)&#xA;                        quit = Console.ReadKey().Key == ConsoleKey.Escape;&#xA;&#xA;                    Console.Write(&quot;Processing: &quot; + numberToCheck);&#xA;&#xA;                    if (CheckForPrime(numberToCheck, primes))&#xA;                    {&#xA;                        primes.Add(numberToCheck);&#xA;                        Console.WriteLine(&quot; Prime Found!&quot;);&#xA;                    }&#xA;                    else&#xA;                        Console.WriteLine(&quot; Not Prime :(&quot;);&#xA;&#xA;                    if (numberToCheck &amp;lt; UInt64.MaxValue)&#xA;                        numberToCheck+=2;&#xA;                    else&#xA;                        break;&#xA;                }&#xA;&#xA;                Console.WriteLine(&quot;Exiting&quot;);&#xA;                WritePrimesToFile(primes);&#xA;                Console.WriteLine(&quot;&amp;lt; Press Any Key To Exit &amp;gt;&quot;);&#xA;                Console.ReadKey();&#xA;            }&#xA;            catch&#xA;            {&#xA;                if (primes.Count &amp;gt; 0)&#xA;                    WritePrimesToFile(primes);&#xA;            }&#xA;        }&#xA;&#xA;        private static UInt64 ReadPrimesToList(string fileName, out List&amp;lt;UInt64&amp;gt; primes)&#xA;        {&#xA;            primes = new List&amp;lt;UInt64&amp;gt;();&#xA;            FileInfo file = new FileInfo(fileName);&#xA;            StreamReader reader = new StreamReader(file.OpenRead());&#xA;&#xA;            String lineIn = String.Empty;&#xA;            while (!reader.EndOfStream)&#xA;            {&#xA;                lineIn = reader.ReadLine();&#xA;                String[] numberStrings = lineIn.Split(new char[] {' '}, StringSplitOptions.RemoveEmptyEntries);&#xA;                foreach (String numberString in numberStrings)&#xA;                {&#xA;                    primes.Add(UInt64.Parse(numberString));&#xA;                }&#xA;            }&#xA;&#xA;            return primes[primes.Count() - 1];&#xA;        }&#xA;&#xA;        private static void WritePrimesToFile(List&amp;lt;UInt64&amp;gt; primes)&#xA;        {&#xA;            String dateAndTime = DateTime.Now.ToString(&quot;yyyyMMddhhmm&quot;);&#xA;            String fileName = String.Format(@&quot;&amp;lt;substitute your path here&amp;gt;\primes [{0}].txt&quot;, dateAndTime);&#xA;            FileInfo file = new FileInfo(fileName);&#xA;            using (StreamWriter writer = file.CreateText())&#xA;            {&#xA;                int maxLength = primes[primes.Count - 1].ToString().Length;&#xA;&#xA;                String line = String.Empty;&#xA;                const int maxColumn = 16;&#xA;                int column = 0;&#xA;&#xA;&#xA;                foreach (UInt64 number in primes)&#xA;                {&#xA;                    string numberString = number.ToString();&#xA;                    int numberLength = numberString.Length;&#xA;&#xA;                    line += numberString.PadLeft(maxLength, ' ') + ((column &amp;lt; (maxColumn-1)) ? &quot; &quot; : String.Empty);&#xA;&#xA;                    column++;&#xA;&#xA;                    if (column == maxColumn)&#xA;                    {&#xA;                        writer.WriteLine(line);&#xA;                        line = string.Empty;&#xA;                        column = 0;&#xA;                    }&#xA;                }&#xA;&#xA;                if (line.Length &amp;gt; 0)&#xA;                    writer.WriteLine(line);&#xA;&#xA;                writer.Flush();&#xA;                writer.Close();&#xA;            }&#xA;        }&#xA;&#xA;        private static bool CheckForPrime(UInt64 numberToCheck, List&amp;lt;UInt64&amp;gt; primes)&#xA;        {&#xA;            if ((numberToCheck % 2) == 0)&#xA;                return false;&#xA;&#xA;            UInt64 halfway = (UInt64)(Math.Ceiling((float)numberToCheck / 2F));&#xA;&#xA;            bool isprime = false;&#xA;            UInt64 factor = 0;&#xA;&#xA;            Parallel.ForEach&amp;lt;UInt64&amp;gt;(primes, (prime, loopState) =&amp;gt;&#xA;            {&#xA;                if (prime &amp;gt; halfway)&#xA;                {&#xA;                    isprime = true;&#xA;                    loopState.Stop();&#xA;                }&#xA;&#xA;                if ((numberToCheck % prime) == 0)&#xA;                {&#xA;                    factor = prime;&#xA;                    isprime = false;&#xA;                    loopState.Stop();&#xA;                }&#xA;            });&#xA;&#xA;            return (isprime &amp;amp;&amp;amp; factor == 0);&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1793" OwnerDisplayName="clichekiller" LastEditorUserId="22222" LastEditDate="2014-10-15T06:35:08.167" LastActivityDate="2014-10-15T07:52:05.093" Title="Calculation of prime numbers making use of Parallel.ForEach" Tags="&lt;c#&gt;&lt;primes&gt;" AnswerCount="6" CommentCount="0" FavoriteCount="4" />
  <row Id="829" PostTypeId="2" ParentId="828" CreationDate="2011-02-17T21:17:16.850" Score="2" Body="&lt;p&gt;Hmmmm... To speed it up, I'd look into alternate Prime Number tests, like &lt;a href=&quot;http://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test&quot; rel=&quot;nofollow&quot;&gt;Miller Rabin Test&lt;/a&gt; or &lt;a href=&quot;http://en.wikipedia.org/wiki/AKS_primality_test&quot; rel=&quot;nofollow&quot;&gt;AKS Test&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here is a sample of code for the Miller Rabin algorithm written in C#.  Maybe it can be parallelized and work faster than the method you currently have?&lt;/p&gt;&#xA;" OwnerUserId="1794" LastActivityDate="2011-02-17T21:17:16.850" CommentCount="1" />
  <row Id="830" PostTypeId="1" AcceptedAnswerId="831" CreationDate="2011-02-17T21:19:39.140" Score="12" ViewCount="1024" Body="&lt;p&gt;The general idea of the code is that I have a &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt; icon (&lt;code&gt;&quot;.trigger&quot;&lt;/code&gt;) that is click-able and will expand or collapse the content (&lt;code&gt;&quot;.cont&quot;&lt;/code&gt;) directly following it (there are many of there expand/collapse pairs).  I also have a &lt;code&gt;span&lt;/code&gt;(&lt;code&gt;&quot;#expandAll&quot;&lt;/code&gt;) that, when clicked, will expand or collapse every block.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Please review my first usage of jQuery and help me put my head into a more jQuery state.  Where can the code be improved?  Are there any problems with it?  Is there a better way to do it?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;(To be perfectly honest, I have no idea what the &lt;code&gt;$()&lt;/code&gt; function &lt;em&gt;really&lt;/em&gt; does.)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var expandAll = function () {&#xA;    $(&quot;.cont&quot;).removeClass(&quot;hid&quot;);&#xA;    $(&quot;#expandAll&quot;).html(&quot;Colapse All&quot;);&#xA;    $(&quot;#expandAll&quot;).unbind(&quot;click&quot;, expandAll);&#xA;    $(&quot;.trigger&quot;).html(&quot;-&quot;);&#xA;    $(&quot;#expandAll&quot;).click(colapseAll);&#xA;}&#xA;var colapseAll = function () {&#xA;    $(&quot;.cont&quot;).addClass(&quot;hid&quot;);&#xA;    $(&quot;#expandAll&quot;).html(&quot;Expand All&quot;);&#xA;    $(&quot;#expandAll&quot;).unbind(&quot;click&quot;, colapseAll);&#xA;    $(&quot;.trigger&quot;).html(&quot;+&quot;);&#xA;    $(&quot;#expandAll&quot;).click(expandAll);&#xA;}&#xA;$(document).ready(function () {&#xA;    $(&quot;.trigger&quot;).click(function (event) {&#xA;        $this = $(this);&#xA;        $this.html($this.text() == '+' ? '-' : '+');&#xA;        $($this.nextAll(&quot;.cont&quot;).get(0)).toggleClass(&quot;hid&quot;);&#xA;    });&#xA;    $(&quot;#expandAll&quot;).click(expandAll);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Please let me know if you need more/less info.&lt;/p&gt;&#xA;" OwnerUserId="342" LastEditorUserId="22222" LastEditDate="2014-03-12T19:46:52.747" LastActivityDate="2014-03-12T19:46:52.747" Title="Clickable icon for expanding/collapsing content" Tags="&lt;javascript&gt;&lt;jquery&gt;&lt;beginner&gt;" AnswerCount="2" CommentCount="5" FavoriteCount="3" />
  <row Id="831" PostTypeId="2" ParentId="830" CreationDate="2011-02-17T21:45:53.470" Score="13" Body="&lt;p&gt;I've refactored your code and added comments to explain certain things.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// We can shorten this from document.ready(...) to $(...) &#xA;// Internally, jQuery will add the passed in function to a list&#xA;// of handlers that will be invoked when the document is ready.&#xA;$(function() {&#xA;    // Since the $ function will query the document with the &#xA;    // specified selector we want to cache these.&#xA;    // Doing this from within the ready callback allows us &#xA;    // to keep these references hidden.&#xA;    // I've also added the 2 function variables to keep them&#xA;    // hidden as well.&#xA;    var expandAll, colapseAll,&#xA;        expandAllElement = $(&quot;#expandAll&quot;),&#xA;        contElements = $(&quot;.cont&quot;),&#xA;        triggerElements = $(&quot;.trigger&quot;);&#xA;&#xA;    expandAll = function() {&#xA;        contElements.removeClass(&quot;hid&quot;);&#xA;        triggerElements.html(&quot;-&quot;);&#xA;        // Notice how we can chain these calls together?&#xA;        // jQuery was designed with a fluent interface.&#xA;        expandAllElement.html(&quot;Colapse All&quot;).one(&quot;click&quot;, colapseAll);&#xA;    };&#xA;&#xA;    colapseAll = function() {&#xA;        contElements.addClass(&quot;hid&quot;);&#xA;        triggerElements.html(&quot;+&quot;);&#xA;        expandAllElement.html(&quot;Expand All&quot;).one(&quot;click&quot;, expandAll);&#xA;    };&#xA;&#xA;    triggerElements.click(function(event) {&#xA;        // Always define a variable so the 'name' &#xA;        // is not defined in the global object,&#xA;        var $this = $(this);&#xA;        $this.html($this.text() == '+' ? '-' : '+');&#xA;        $($this.nextAll(&quot;.cont&quot;).get(0)).toggleClass(&quot;hid&quot;);&#xA;    });&#xA;&#xA;    // Using the one function allows you to skip &#xA;    // unbinding the event handler for each click.&#xA;    expandAllElement.one(&quot;click&quot;, expandAll);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1795" LastEditorUserId="1795" LastEditDate="2011-02-17T22:39:25.500" LastActivityDate="2011-02-17T22:39:25.500" CommentCount="9" />
  <row Id="832" PostTypeId="2" ParentId="819" CreationDate="2011-02-17T23:53:35.200" Score="0" Body="&lt;p&gt;I'm trying to compile your code:  &lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;What kind of class is Unit? Do I need to reference an additional assembly?&lt;/li&gt;&#xA;&lt;li&gt;Run at the end of &lt;code&gt;Enumerable.Range(1, 100000).AsParallel().Select(_ =&amp;gt; accA.TransferAndReverse(accB, 100).Execute(syncObject)).Run();&lt;/code&gt; seems to be unnecessary.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="1748" LastActivityDate="2011-02-17T23:53:35.200" CommentCount="1" />
  <row Id="833" PostTypeId="2" ParentId="800" CreationDate="2011-02-18T01:07:58.557" Score="2" Body="&lt;p&gt;Just one small comment in addition to those provided by Saeed and Mongus, you have defined a constant called &lt;code&gt;CSVKEYFIELDNAME&lt;/code&gt; but in the only place it is (shown to be) used, you call ToLower() on it. Should the constant be provided as lower case to begin with, or should you be doing a case insensitive search?&lt;/p&gt;&#xA;" OwnerUserId="1432" LastActivityDate="2011-02-18T01:07:58.557" CommentCount="3" />
  <row Id="834" PostTypeId="1" AcceptedAnswerId="844" CreationDate="2011-02-18T02:52:08.510" Score="9" ViewCount="320" Body="&lt;p&gt;I'm trying to apply &lt;code&gt;string.strip()&lt;/code&gt; to all the leafs that are strings in a multidimensional collection, but my Python is a bit rusty (to say the least). The following is the best I've come up with, but I suspect there's a much better way to do it.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def strip_spaces( item ):&#xA;    if hasattr( item, &quot;__iter__&quot; ):&#xA;        if isinstance( item, list ):&#xA;            return [strip_spaces( value ) for value in item]&#xA;        elif isinstance( item, dict ):&#xA;            return dict([(value,strip_spaces(value)) for value in item])&#xA;        elif isinstance( item, tuple ):&#xA;            return tuple([ strip_spaces( value ) for value in item ])&#xA;    elif isinstance( item, str ) or isinstance( item, unicode ):&#xA;        item = item.strip()&#xA;    return item&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1779" LastEditorUserId="22222" LastEditDate="2014-12-19T22:00:08.357" LastActivityDate="2014-12-19T22:00:08.357" Title="Traversing a multidimensional structure and applying strip() to all strings" Tags="&lt;python&gt;&lt;strings&gt;" AnswerCount="2" CommentCount="0" FavoriteCount="2" />
  <row Id="836" PostTypeId="1" CreationDate="2011-02-18T12:17:19.520" Score="4" ViewCount="1698" Body="&lt;p&gt;I have an extension method that does this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public static IEnumerable&amp;lt;T&amp;gt; ToIEnumerable&amp;lt;T&amp;gt;(this T source) where T : new()&#xA;{&#xA;    return new[] { source };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I need to be able to convert any object to an &lt;code&gt;IEnumerable&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example when I use the .NET &lt;code&gt;Except&lt;/code&gt; method:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public static IEnumerable&amp;lt;TSource&amp;gt; Except&amp;lt;TSource&amp;gt;(this IEnumerable&amp;lt;TSource&amp;gt; first)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I can call &lt;code&gt;Except&lt;/code&gt; by doing the following:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;return objects.Except(this.ToIEnumerable());&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Is &lt;code&gt;ToIEnumerable&amp;lt;T&amp;gt;&lt;/code&gt; good practice or should I solve the problem in differently?&lt;/strong&gt;&lt;/p&gt;&#xA;" OwnerUserId="1767" LastEditorUserId="22222" LastEditDate="2014-07-17T16:15:42.473" LastActivityDate="2014-07-17T16:41:49.497" Title="Is ToIEnumerable&lt;T&gt; good practice?" Tags="&lt;c#&gt;&lt;linq&gt;&lt;ienumerable&gt;" AnswerCount="3" CommentCount="4" />
  <row Id="837" PostTypeId="1" CreationDate="2011-02-18T12:51:36.253" Score="4" ViewCount="248" Body="&lt;p&gt;I think there are some confusing and weird indentation problems in this WordPress file (single.php). Any suggestions on improving indentation and readability?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?php&#xA;/**&#xA; * The Template for displaying all single posts.&#xA; *&#xA; * @package WordPress&#xA; * @subpackage Starkers&#xA; * @since Starkers 3.0&#xA; */&#xA;&#xA;get_header(); ?&amp;gt;&#xA;&#xA;&amp;lt;?php get_sidebar(); ?&amp;gt;&#xA;&#xA;&amp;lt;div id=&quot;content&quot;&amp;gt;&#xA;    &amp;lt;?php // Set and display custom field&#xA;        $intro_image = get_post_meta($post-&amp;gt;ID, 'Intro Image', true); ?&amp;gt;&#xA;        &amp;lt;div class=&quot;block-1&quot;&amp;gt;&#xA;            &amp;lt;img src=&quot;&amp;lt;?php echo $intro_image; ?&amp;gt;&quot; alt=&quot;&quot; /&amp;gt;&#xA;        &amp;lt;/div&amp;gt; &amp;lt;?php&#xA;    ?&amp;gt;&#xA;&#xA;    &amp;lt;?php // Start The Loop&#xA;        if ( have_posts() ) while ( have_posts() ) : the_post();&#xA;    ?&amp;gt;  &amp;lt;div class=&quot;block-2 padding-top no-overlay&quot;&amp;gt;&#xA;            &amp;lt;?php the_content(); ?&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&amp;lt;!-- .entry-content --&amp;gt;&#xA;    &amp;lt;?php endwhile; // end of the loop. ?&amp;gt;&#xA;&#xA;    &amp;lt;?php //  Display previous and next posts thumbnails ?&amp;gt;&#xA;        &amp;lt;div class=&quot;block-2 border-top&quot;&amp;gt;&#xA;        &amp;lt;?php // Set and display custom field&#xA;            $mainbar_left_title = get_post_meta($post-&amp;gt;ID, 'Mainbar Left Title', true);&#xA;            $mainbar_left_image = get_post_meta($post-&amp;gt;ID, 'Mainbar Left Image', true); ?&amp;gt;&#xA;            &amp;lt;div class=&quot;float-left&quot;&amp;gt;&#xA;                &amp;lt;h2&amp;gt;&amp;lt;?php echo $mainbar_left_title; ?&amp;gt;&amp;lt;/h2&amp;gt;&#xA;                &amp;lt;img src=&quot;&amp;lt;?php echo $mainbar_left_image ?&amp;gt;&quot; alt=&quot;&quot; /&amp;gt;&#xA;            &amp;lt;/div&amp;gt; &amp;lt;?php&#xA;        ?&amp;gt;&#xA;&#xA;        &amp;lt;?php // Set and display custom field&#xA;            $mainbar_right_title = get_post_meta($post-&amp;gt;ID, 'Mainbar Right Title', true);&#xA;            $mainbar_right_image = get_post_meta($post-&amp;gt;ID, 'Mainbar Right Image', true); ?&amp;gt;&#xA;            &amp;lt;div class=&quot;float-right&quot;&amp;gt;&#xA;                &amp;lt;h2&amp;gt;&amp;lt;?php echo $mainbar_right_title; ?&amp;gt;&amp;lt;/h2&amp;gt;&#xA;                &amp;lt;img src=&quot;&amp;lt;?php echo $mainbar_right_image ?&amp;gt;&quot; alt=&quot;&quot; /&amp;gt;&#xA;            &amp;lt;/div&amp;gt; &amp;lt;?php&#xA;        ?&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;&#xA;    &amp;lt;?php // Set and display custom field&#xA;        $mainbar_right_title = get_post_meta($post-&amp;gt;ID, 'Mainbar Right Title', true);&#xA;        $mainbar_right_image = get_post_meta($post-&amp;gt;ID, 'Mainbar Right Image', true); ?&amp;gt;&#xA;        &amp;lt;div class=&quot;block-3 border-top&quot;&amp;gt;&#xA;            &amp;lt;h2&amp;gt;&amp;lt;?php echo $mainbar_right_title; ?&amp;gt;&amp;lt;/h2&amp;gt;&#xA;            &amp;lt;img src=&quot;&amp;lt;?php echo $mainbar_right_image ?&amp;gt;&quot; alt=&quot;&quot; /&amp;gt;&#xA;        &amp;lt;/div&amp;gt; &amp;lt;?php&#xA;    ?&amp;gt;&#xA;&#xA;    &amp;lt;?php // Start The Loop&#xA;        if ( have_posts() ) while ( have_posts() ) : the_post();&#xA;    ?&amp;gt;  &amp;lt;div class=&quot;block-4 border-top&quot;&amp;gt;&#xA;            &amp;lt;?php the_content(); ?&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&amp;lt;!-- .entry-content --&amp;gt;&#xA;    &amp;lt;?php endwhile; // end of the loop. ?&amp;gt;&#xA;&#xA;    &amp;lt;?php get_sidebar('secondary'); ?&amp;gt;&#xA;&amp;lt;/div&amp;gt;&amp;lt;!-- #content --&amp;gt;&#xA;&#xA;&amp;lt;?php get_footer(); ?&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1035" LastEditorUserId="22222" LastEditDate="2016-01-12T15:42:05.827" LastActivityDate="2016-01-12T15:42:05.827" Title="Displaying all single posts" Tags="&lt;php&gt;&lt;wordpress&gt;" AnswerCount="2" CommentCount="0" />
  <row Id="839" PostTypeId="2" ParentId="836" CreationDate="2011-02-18T13:38:20.360" Score="3" Body="&lt;p&gt;I don't see why not.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you wanted to be 'monadically pure', you could call it &lt;code&gt;Return&lt;/code&gt; (because in monads, the function which performs &lt;code&gt;'a -&amp;gt; M 'a&lt;/code&gt; is called &lt;code&gt;return&lt;/code&gt;).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;(See &lt;a href=&quot;http://stackoverflow.com/questions/1577822/passing-a-single-item-as-ienumerablet&quot;&gt;this question&lt;/a&gt;: &lt;code&gt;FromSingleItem&lt;/code&gt;, or &lt;code&gt;AsEnumerable&lt;/code&gt; - someone there also suggested using the existing &lt;code&gt;Enumerable.Repeat(T item, int count)&lt;/code&gt;)&lt;/p&gt;&#xA;" OwnerUserId="1585" LastActivityDate="2011-02-18T13:38:20.360" CommentCount="1" />
  <row Id="840" PostTypeId="2" ParentId="837" CreationDate="2011-02-18T14:06:29.280" Score="2" Body="&lt;pre&gt;&lt;code&gt;&amp;lt;?php // Start The Loop&#xA;   if ( have_posts() ) while ( have_posts() ) : the_post();&#xA;?&amp;gt;  &amp;lt;div class=&quot;block-2 padding-top no-overlay&quot;&amp;gt;&#xA;        &amp;lt;?php the_content(); ?&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&amp;lt;!-- .entry-content --&amp;gt;&#xA;&amp;lt;?php endwhile; // end of the loop. ?&amp;gt; &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;That could become:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?php // Start The Loop&#xA;   if (have_posts()) {&#xA;      while (have_posts()) : the_post(); ?&amp;gt;&#xA;         &amp;lt;div class=&quot;block-2 padding-top no-overlay&quot;&amp;gt;&#xA;            &amp;lt;?php the_content(); ?&amp;gt;&#xA;         &amp;lt;/div&amp;gt;&amp;lt;!-- .entry-content --&amp;gt;&#xA;      &amp;lt;?php endwhile; // end of the loop.&#xA;   } ?&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Still a bit confusing, but I'll keep thinking about it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Another idea, that uses more &lt;code&gt;&amp;lt;?php&amp;gt;&lt;/code&gt; tags:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?php if (have_posts()) { // Start the loop ?&amp;gt;&#xA;   &amp;lt;? while (have_posts()) : the_post(); ?&amp;gt;&#xA;      &amp;lt;div class=&quot;block-2 padding-top no-overlay&quot;&amp;gt;&#xA;         &amp;lt;?php the_content(); ?&amp;gt;&#xA;      &amp;lt;/div&amp;gt;&amp;lt;!-- .entry-content --&amp;gt;&#xA;   &amp;lt;?php endwhile; // end of the loop. ?&amp;gt;&#xA;&amp;lt;?php } ?&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Another section change:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?php // Set and display custom field&#xA;   $mainbar_right_title = get_post_meta($post-&amp;gt;ID, 'Mainbar Right Title', true);&#xA;   $mainbar_right_image = get_post_meta($post-&amp;gt;ID, 'Mainbar Right Image', true);&#xA;?&amp;gt;&#xA;&amp;lt;div class=&quot;float-right&quot;&amp;gt;&#xA;   &amp;lt;h2&amp;gt;&amp;lt;?php echo $mainbar_right_title; ?&amp;gt;&amp;lt;/h2&amp;gt;&#xA;   &amp;lt;img src=&quot;&amp;lt;?php echo $mainbar_right_image ?&amp;gt;&quot; alt=&quot;&quot; /&amp;gt;&#xA;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;There's a seemingly useless &lt;code&gt;&amp;lt;?php \n ?&amp;gt;&lt;/code&gt; sitting there. It looks like the idea was to close a code block, but it doesn't do anything. I removed that and changed the indentation so it didn't look like a block.&lt;/p&gt;&#xA;" OwnerUserId="110" LastEditorUserId="110" LastEditDate="2011-02-18T14:22:50.790" LastActivityDate="2011-02-18T14:22:50.790" CommentCount="4" />
  <row Id="841" PostTypeId="2" ParentId="836" CreationDate="2011-02-18T16:44:28.403" Score="7" Body="&lt;p&gt;While I don't see why &lt;code&gt;ToIEnumerable&lt;/code&gt; is bad practice, in this specific case I think it is. You're comparing with only one object; why not just attach a where clause on to things? I.e.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;return objects.Where((other) =&amp;gt; other != this);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;or possibly &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;return objects.Where((other) =&amp;gt; !Object.ReferenceEquals(other, this));&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Not only will this perform better than Except here, but it's easier to understand, and avoids the entire ToIEnumerable thing entirely.&lt;/p&gt;&#xA;" OwnerUserId="22" LastActivityDate="2011-02-18T16:44:28.403" CommentCount="1" />
  <row Id="843" PostTypeId="2" ParentId="834" CreationDate="2011-02-18T19:44:12.957" Score="4" Body="&lt;pre&gt;&lt;code&gt;elif isinstance( item, dict ):&#xA;    return dict([(value,strip_spaces(value)) for value in item])&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This will transform &lt;code&gt;{ '  a  ': '  b  ' }&lt;/code&gt; into &lt;code&gt;{'  a  ': 'a' }&lt;/code&gt;, which I suspect is not what you want. How about:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    return dict([(key, strip_spaces(value)) for key, value in item.items()])&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1814" LastActivityDate="2011-02-18T19:44:12.957" CommentCount="0" />
  <row Id="844" PostTypeId="2" ParentId="834" CreationDate="2011-02-18T21:49:51.253" Score="3" Body="&lt;p&gt;I don't understand why you are checking for an &lt;code&gt;__iter__&lt;/code&gt; attribute, as you don't seem to use it. However I would recommend a couple of changes:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Use Abstract Base Classes in the &lt;code&gt;collections&lt;/code&gt; module to test duck types, such as &quot;Iterable&quot;&lt;/li&gt;&#xA;&lt;li&gt;Use &lt;code&gt;types.StringTypes&lt;/code&gt; to detect string types&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import collections&#xA;import types&#xA;&#xA;def strip_spaces( item ):&#xA;    if isinstance( item, types.StringTypes ):&#xA;        return item.strip()&#xA;&#xA;    if isinstance( item, collections.Iterable ):&#xA;        if isinstance( item, list ):&#xA;            return [ strip_spaces( value ) for value in item ]&#xA;&#xA;        elif isinstance( item, dict ):&#xA;            return dict([ ((strip_spaces(key), strip_spaces(value)) \&#xA;                                    for key, value in item.iteritems() ])&#xA;&#xA;        elif isinstance( item, tuple ):&#xA;            return tuple( [ strip_spaces( value ) for value in item ] )&#xA;&#xA;    return item&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1819" LastActivityDate="2011-02-18T21:49:51.253" CommentCount="0" />
  <row Id="845" PostTypeId="2" ParentId="568" CreationDate="2011-02-18T22:13:25.407" Score="1" Body="&lt;p&gt;sepp2k's critique is incorrect - &lt;code&gt;assoc&lt;/code&gt; on a vector takes &lt;code&gt;O(log n)&lt;/code&gt; time not &lt;code&gt;O(n)&lt;/code&gt; time because Clojure uses persistent vectors. You should avoid using &lt;code&gt;assoc!&lt;/code&gt; because it is Clojure style to avoid needless destructive behavior.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For more on persistent vectors see:&#xA;&lt;a href=&quot;http://blog.higher-order.net/2009/02/01/understanding-clojures-persistentvector-implementation/&quot; rel=&quot;nofollow&quot;&gt;http://blog.higher-order.net/2009/02/01/understanding-clojures-persistentvector-implementation/&lt;/a&gt;&lt;/p&gt;&#xA;" OwnerDisplayName="user1820" LastActivityDate="2011-02-18T22:13:25.407" CommentCount="1" />
  <row Id="846" PostTypeId="2" ParentId="819" CreationDate="2011-02-18T22:14:48.823" Score="1" Body="&lt;p&gt;The disadvantage I see in your design is that you have decoupled the lock from the actual objects that should not be changed by another thread during the critical section.&lt;br&gt;&#xA;In your case only the two accounts of a transaction should be locked but you created a global lock &lt;code&gt;syncObject&lt;/code&gt; that practically turns your parallel execution into a serial one. In other word if you had an &lt;code&gt;accC&lt;/code&gt; and &lt;code&gt;accD&lt;/code&gt; in Main you could not do a transfer between &lt;code&gt;accC&lt;/code&gt; and &lt;code&gt;accD&lt;/code&gt; in parallel with a transfer between &lt;code&gt;accA&lt;/code&gt; and &lt;code&gt;accB&lt;/code&gt;.&lt;br&gt;&#xA;You might be able to hack this by creating a series of lock objects and pass them somehow one-by-one in the proper order to &lt;code&gt;Execute&lt;/code&gt; but if the call to the paralell execution is made from a much higher abstraction level then the manipulated objects are on you probably won't be able to pass the proper lock objects to &lt;code&gt;Execute&lt;/code&gt;. Your only option would be to use a global lock for that &lt;code&gt;AsParallel()&lt;/code&gt; &quot;session&quot; and that would defeat the purpose of using it.&lt;/p&gt;&#xA;" OwnerUserId="1748" LastActivityDate="2011-02-18T22:14:48.823" CommentCount="0" />
  <row Id="847" PostTypeId="2" ParentId="800" CreationDate="2011-02-18T23:02:15.850" Score="0" Body="&lt;blockquote&gt;&#xA;  &lt;p&gt;Is there a way to do this using&#xA;  parameters so the value is&#xA;  automatically converted to whatever&#xA;  datatype the keyfield has in the&#xA;  datatable?&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;You could use something like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;object csvKeyValue = Convert.ChangeType(csvKeyValue, keyType);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;to convert a string to the type of the datatable column.&lt;/p&gt;&#xA;" OwnerUserId="1748" LastActivityDate="2011-02-18T23:02:15.850" CommentCount="0" />
  <row Id="849" PostTypeId="2" ParentId="800" CreationDate="2011-02-19T03:26:28.317" Score="5" Body="&lt;p&gt;I noticed this code: &lt;code&gt;parameters.DataTableOriginal.Select(DBKEYFIELDNAME + &quot;='&quot; + csvKeyValue.ToString() + &quot;'&quot;)&lt;/code&gt;. Just putting quotes around an user-input screams &lt;strong&gt;SQL Injection&lt;/strong&gt; to me.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The problem is that your code assumes that &lt;code&gt;csvKeyValue&lt;/code&gt; has no quotes in it. That assumption is never checked anywhere, while csvKeyValue is read from an external file so cannot be trusted.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Suppose the csvKeyValue equals &quot;a' or TRUE or 'x' ='x&quot;. Do you really want to execute that select?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Although I cannot judge whether this is a real danger, I thought I should mention it.&lt;/p&gt;&#xA;" OwnerUserId="1492" LastActivityDate="2011-02-19T03:26:28.317" CommentCount="0" />
  <row Id="850" PostTypeId="1" CreationDate="2011-02-19T10:18:26.970" Score="15" ViewCount="1547" Body="&lt;p&gt;I'm new to Java and find it hard to grasp the concept of objects. I wrote a simple guessing game to practice the concept of OO programming but I am not sure if I am doing it correctly. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;The objective of the game is to guess a number from 0-9 with 3 players and the first player who guesses it correctly will win the game.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Player&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public class Player {&#xA;&#xA;    private String playerName;&#xA;    private int number;&#xA;&#xA;    public int getNumber() {&#xA;        return number;&#xA;    }&#xA;&#xA;    public String getPlayerName() {&#xA;        return playerName;&#xA;    }&#xA;&#xA;    public void setPlayerName(String playerName) {&#xA;        this.playerName = playerName;&#xA;    }&#xA;&#xA;    public void guessNumber(){&#xA;        number = Integer.parseInt(JOptionPane.showInputDialog(playerName &#xA;            + &quot;'s Turn\nGuess the Number&quot;));&#xA;        JOptionPane.showMessageDialog(null, playerName+ &quot;'s GUESS is &quot; + number);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;GuessGame&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public class GuessGame {&#xA;&#xA;    private int numberToGuess;&#xA;    private Player p1;&#xA;    private Player p2;&#xA;    private Player p3;&#xA;&#xA;    public void startGame(){&#xA;        numberToGuess = (int) (Math.random()*10);&#xA;        p1 = new Player();&#xA;        p2 = new Player();&#xA;        p3 = new Player();&#xA;&#xA;        p1.setPlayerName(JOptionPane.showInputDialog(&quot;Enter Player 1 Name: &quot;));&#xA;        p2.setPlayerName(JOptionPane.showInputDialog(&quot;Enter Player 2 Name: &quot;));&#xA;        p3.setPlayerName(JOptionPane.showInputDialog(&quot;Enter Player 3 Name: &quot;));&#xA;&#xA;        int flagWinner = 0;&#xA;        while(0==flagWinner){&#xA;            p1.guessNumber();&#xA;            if (p1.getNumber()==numberToGuess){&#xA;                flagWinner = 1;&#xA;                break;&#xA;            }&#xA;            JOptionPane.showMessageDialog(null, p1.getPlayerName()&#xA;                + &quot;'s Guess is Wrong!&quot;);&#xA;            p2.guessNumber();&#xA;            if (p2.getNumber()==numberToGuess){&#xA;                flagWinner = 2;&#xA;                break;&#xA;            }&#xA;            JOptionPane.showMessageDialog(null, p2.getPlayerName()&#xA;                + &quot;'s Guess is Wrong!&quot;);&#xA;            p3.guessNumber();&#xA;            if (p3.getNumber()==numberToGuess){&#xA;                flagWinner = 3;&#xA;                break;&#xA;            }&#xA;            JOptionPane.showMessageDialog(null, p3.getPlayerName()&#xA;                + &quot;'s Guess is Wrong!&quot;);&#xA;        }&#xA;        if (1 == flagWinner){&#xA;            JOptionPane.showMessageDialog(null,p1.getPlayerName()+ &quot; Wins!&quot;);&#xA;        } else if (2 == flagWinner){&#xA;            JOptionPane.showMessageDialog(null,p2.getPlayerName()+ &quot; Wins!&quot;);&#xA;        } else JOptionPane.showMessageDialog(null,p3.getPlayerName()+ &quot; Wins!&quot;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And I have a &lt;code&gt;gameLauncher&lt;/code&gt; where I have the &lt;code&gt;main()&lt;/code&gt; method which creates the game.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Am I doing it correctly especially in the &lt;code&gt;Player&lt;/code&gt; class where I created a method &lt;code&gt;guessNumber()&lt;/code&gt; instead of setter &lt;code&gt;setNumber(int number)&lt;/code&gt;? &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Am I violating any object-oriented concepts in my code? &lt;/p&gt;&#xA;&#xA;&lt;p&gt;How can I improve my code?&lt;/p&gt;&#xA;" OwnerDisplayName="user1827" LastEditorUserId="22222" LastEditDate="2013-12-26T03:14:20.797" LastActivityDate="2013-12-26T03:14:20.797" Title="Guessing game - am I using the concept of objects in Java properly?" Tags="&lt;java&gt;&lt;oop&gt;&lt;game&gt;&lt;swing&gt;" AnswerCount="2" CommentCount="0" FavoriteCount="1" />
  <row Id="851" PostTypeId="2" ParentId="850" CreationDate="2011-02-19T10:59:26.037" Score="2" Body="&lt;p&gt;The layout felt very C++ and very connected to &quot;functions&quot; instead of objects. Though you seem to got a nice idea of how it's work and do a lot better at objects than most people do.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I would do it like this (dirty version, should be improved, but it was a quick redesign):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public class Player {&#xA;    private String playerName;&#xA;    private int number;&#xA;&#xA;    public Player(String name){&#xA;      this.playerName = name;&#xA;    }&#xA;&#xA;    public int guessNumber() {&#xA;        return Integer.parseInt(JOptionPane.showInputDialog(playerName&#xA;            +&quot;'s Turn\nGuess the Number&quot;));&#xA;        JOptionPane.showMessageDialog(null, playerName+ &quot;'s GUESS is &quot; + number);&#xA;    }&#xA;&#xA;    public String getPlayerName() {&#xA;        return playerName;&#xA;    }&#xA;}&#xA;&#xA;public class GuessGame {&#xA;&#xA;    private int numberToGuess;&#xA;    private Player p1;&#xA;    private Player p2;&#xA;    private Player p3;&#xA;&#xA;    //Would probably made amount of players dynamic as well.&#xA;    public GuessGame(String player1, String player2, String player3){&#xA;        numberToGuess = (int) (Math.random()*10);&#xA;        p1 = new Player(player1);&#xA;        p2 = new Player(player2);&#xA;        p3 = new Player(player3);&#xA;    }&#xA;&#xA;    //Would probably split this up in submethods too.&#xA;    //The flagging is quite ugly too but I don't got time to edit it.&#xA;    public void startGame(){&#xA;        int flagWinner = 0;&#xA;        while(0==flagWinner){&#xA;            if (p1.guessNumber()==numberToGuess){&#xA;                flagWinner = 1;&#xA;                break;&#xA;            }&#xA;            JOptionPane.showMessageDialog(null, p1.getPlayerName()&#xA;                + &quot;'s Guess is Wrong!&quot;);&#xA;            if (p2.guessNumber()==numberToGuess){&#xA;                flagWinner = 2;&#xA;                break;&#xA;            }&#xA;            JOptionPane.showMessageDialog(null,p2.getPlayerName()&#xA;                + &quot;'s Guess is Wrong!&quot;);&#xA;            if (p3.guessNumber()==numberToGuess){&#xA;                flagWinner = 3;&#xA;                break;&#xA;            }&#xA;            JOptionPane.showMessageDialog(null,p3.getPlayerName()&#xA;                + &quot;'s Guess is Wrong!&quot;);&#xA;        }&#xA;        if (1 == flagWinner){&#xA;            JOptionPane.showMessageDialog(null,p1.getPlayerName()+ &quot; Wins!&quot;);&#xA;        } else if (2 == flagWinner){&#xA;            JOptionPane.showMessageDialog(null,p2.getPlayerName()+ &quot; Wins!&quot;);&#xA;        } else JOptionPane.showMessageDialog(null,p3.getPlayerName()+ &quot; Wins!&quot;);&#xA;    }&#xA;&#xA;    public static void main(String[] e){&#xA;        GuessGame gg = new GuessGame(&#xA;            JOptionPane.showInputDialog(&quot;Enter Player 1 Name: &quot;),&#xA;            JOptionPane.showInputDialog(&quot;Enter Player 2 Name: &quot;),&#xA;            JOptionPane.showInputDialog(&quot;Enter Player 3 Name: &quot;)&#xA;        );&#xA;        gg.startGame();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1828" LastEditorUserId="7076" LastEditDate="2012-11-11T10:14:40.707" LastActivityDate="2012-11-11T10:14:40.707" CommentCount="0" />
  <row Id="852" PostTypeId="2" ParentId="850" CreationDate="2011-02-19T12:27:58.477" Score="11" Body="&lt;p&gt;To start with, spot the inconsistency. For the name you create it in your main loop and then use a setter; for the number you have a method in the Player object to acquire the guess. The latter is more in line with the message-passing philosophy of OO. (Many people seem to think that using getters and setters is being OO. They're often - not always - a sign of non-OO thinking). However, it doesn't take it as far as it could. The number guessed isn't a property of the player - it's a property of the guess.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Guessing a number isn't the same thing as displaying it - either rename the method or, probably better - a method should do one thing - move that out.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Next up, the &lt;code&gt;flagWinner&lt;/code&gt; is a big red flag. Its sole purpose is to identify one of the objects &lt;code&gt;p1&lt;/code&gt;, &lt;code&gt;p2&lt;/code&gt;, &lt;code&gt;p3&lt;/code&gt;, or none of the above. What's the OO way to do that? Use the object to identify itself.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'd be inclined to factor out the IO as an object too, to be a bit less procedural. So without going into a full over-patterned architecture we have&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;public class IO {&#xA;    public void output(String msg) {&#xA;        JOptionPane.showMessageDialog(null, msg);&#xA;    }&#xA;&#xA;    public String input(String prompt) {&#xA;        return JOptionPane.showInputDialog(prompt)&#xA;    }&#xA;&#xA;    public int inputInt(String prompt) {&#xA;        return Integer.parseInt(input(prompt));&#xA;    }&#xA;}&#xA;&#xA;public class Player {&#xA;    private String playerName;&#xA;&#xA;    private Player(String name) {&#xA;        playerName = name;&#xA;    }&#xA;&#xA;    public static Player createPlayer(IO io, String prompt) {&#xA;        String name = io.input(&quot;Enter &quot; + prompt + &quot; Name: &quot;);&#xA;        return new Player(name);&#xA;    }&#xA;&#xA;    public String getPlayerName() {&#xA;        return playerName;&#xA;    }&#xA;&#xA;    public int guessNumber(IO io) {&#xA;        return io.inputInt(playerName +&quot;'s Turn\nGuess the Number&quot;));&#xA;    }&#xA;}&#xA;&#xA;public class GuessGame {&#xA;&#xA;    private final IO io;&#xA;    private final int numPlayers;&#xA;    private int numberToGuess;&#xA;    private List&amp;lt;Player&amp;gt; players = new LinkedList&amp;lt;Player&amp;gt;();&#xA;&#xA;    public GuessGame(IO io, int numPlayers) {&#xA;        this.io = io;&#xA;        this.numPlayers = numPlayers;&#xA;    }&#xA;&#xA;    public void init() {&#xA;        numberToGuess = (int) (Math.random()*10);&#xA;        for (int i = 0; i &amp;lt; numPlayers; i++) {&#xA;            players.add(Player.createPlayer(io, &quot;Player &quot; + (i+1)));&#xA;        }&#xA;    }&#xA;&#xA;    public void runGame(){&#xA;        init();&#xA;&#xA;        Player winner = null;&#xA;        Iterator&amp;lt;Player&amp;gt; it = players.iterator();&#xA;        while (winner == null) {&#xA;            if (!it.hasNext()) {&#xA;                it = players.iterator();&#xA;            }&#xA;&#xA;            Player turnPlayer = it.next();&#xA;            String playerName = turnPlayer.getPlayerName();&#xA;&#xA;            int guess = turnPlayer.guessNumber(io);&#xA;            io.output(playerName+ &quot;'s GUESS is &quot; + number);&#xA;&#xA;            if (guess == numberToGuess) {&#xA;                winner = turnPlayer;&#xA;            }&#xA;            else {&#xA;                io.output(playerName + &quot;'s Guess is Wrong!&quot;);&#xA;            }&#xA;        }&#xA;&#xA;        io.output(winner.getPlayerName()+ &quot; Wins!&quot;);&#xA;    }&#xA;}&#xA;&lt;/pre&gt;&#xA;" OwnerUserId="1402" LastEditorUserId="1402" LastEditDate="2011-04-11T09:00:20.073" LastActivityDate="2011-04-11T09:00:20.073" CommentCount="7" />
  <row Id="854" PostTypeId="2" ParentId="772" CreationDate="2011-02-19T15:25:49.970" Score="0" Body="&lt;p&gt;I think you are unwise to reject creation of variable used only once.  The forced line breaks you seem to be requesting are difficult if not impossible to implement in an aesthetically satisfactory way in an automated formatter - and if you're not using an automated formatter, you're wasting time.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var state = ORDERITEMSHIPCONFIRMSTATE.NONE;&#xA;var start = serverTime.AddDays(-7);&#xA;var end = serverTime.AddHours(-85);&#xA;var range = OrderItem.Fetch(market: MARKET, shipConfirmState: state, orderPlacedAfter: start, orderPlacedBefore: end);&#xA;shippedItems.AddRange(range);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="285" LastActivityDate="2011-02-19T15:25:49.970" CommentCount="2" />
  <row Id="855" PostTypeId="1" CreationDate="2011-02-19T16:57:29.663" Score="4" ViewCount="1774" Body="&lt;p&gt;So... I have a program in which I want to flip heads three times in the row.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What I'm asking for is for proposals of other solutions for this program, in pro way, as You do in natural sense.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;That's my code as Java novice.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/*&#xA; * File: ConsecutiveHeads.java&#xA; * ----------------&#xA; * This program flips a coin repeatly until three consecutive heads&#xA; * are tossed.&#xA; */&#xA;&#xA;import acm.program.*;&#xA;import acm.util.*;&#xA;&#xA;public class ConsecutiveHeads extends ConsoleProgram {&#xA;    /* Run the program */&#xA;    public void run() {&#xA;        println(&quot;This program flips a coin until there are three&quot; +&#xA;                &quot;heads in the row.&quot;);&#xA;        while(counter != 3) {&#xA;            FlipACoin();&#xA;        }&#xA;        println(&quot;Yupii! There are already three same heads in the row :)&quot;);&#xA;    }&#xA;&#xA;    /* Flip a coin. Then if heads are tossed, increment our counter.&#xA;     * In tails case, zero counter. */&#xA;    private void FlipACoin() {&#xA;        boolean rank = rgen.nextBoolean();&#xA;        if(rank) {&#xA;            println(&quot;heads&quot;);&#xA;            counter++;&#xA;        } else {&#xA;            println(&quot;tails&quot;);&#xA;            counter = 0;&#xA;        }&#xA;    }&#xA;&#xA;    /* Create an instance variable for the random number generator */&#xA;    private RandomGenerator rgen = new RandomGenerator();&#xA;&#xA;    /* Create an instance variable for counter detecting three heads in row */&#xA;    private int counter = 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerDisplayName="Christoph" LastEditorUserId="14561" LastEditDate="2012-07-10T13:18:32.003" LastActivityDate="2015-12-14T01:53:01.677" Title="&quot;Consecutive Heads&quot; program" Tags="&lt;java&gt;&lt;homework&gt;" AnswerCount="3" CommentCount="1" />
  <row Id="856" PostTypeId="1" AcceptedAnswerId="1825" CreationDate="2011-02-19T17:19:48.293" Score="16" ViewCount="426" Body="&lt;p&gt;I've got this javascript function which was written a bit ad-hoc and I'm not really sure how to go about refactoring and improving it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It's basically an implementation of &lt;a href=&quot;http://wiki.commonjs.org/wiki/Unit_Testing/1.1&quot;&gt;draft Unit-Testing/1.1&lt;/a&gt; specification.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// Runs the object as a test. The async paramater is an optional function&#xA;// To be passed in if the test is to be run async.&#xA;// notRoot is an internal paramater&#xA;var run = function(object, async, notRoot) {&#xA;    // if its the root call then cache the async func for us in _pushTests&#xA;    if (!notRoot) {&#xA;        func = async;&#xA;    }&#xA;    // tests to run&#xA;    var tests = [];&#xA;    // Assert constructor to be used is either on the object or from assert&#xA;    var Assert = object.Assert || assert.Assert;&#xA;    var failures = 0;&#xA;    // Push the tests to the tests array&#xA;    _pushTests(object, tests);&#xA;    var len = tests.length;&#xA;    // function that runs the test&#xA;    var testRunner;&#xA;    // If async Do I have to document it? It's full of the hacks.&#xA;    if (async) {&#xA;        // results object stores the calls to pass/fail/error&#xA;        var results = {};&#xA;        results.passes = [];&#xA;        results.fails = [];&#xA;        results.errors = [];&#xA;        // tests passed in the test object&#xA;        var testsPassed = 0;&#xA;        testRunner = function(val, key) {&#xA;            // Local assert object&#xA;            var _assert = new Assert;&#xA;            // Forward the mute property to the assert&#xA;            if (object.mute === true) {&#xA;                _assert.mute = true;    &#xA;            }&#xA;            // cache pass, fail &amp;amp; error&#xA;            var _pass = _assert.pass;&#xA;            var _fail = _assert.fail;&#xA;            var _error = _assert.error;&#xA;            // Wrap pass. Push the pass massge to the results object&#xA;            _assert.pass = function(message) {&#xA;                _pass.apply(_assert, arguments);&#xA;                results.passes.push(message);&#xA;                // If an assert passed after done then throw an error in &#xA;                // assert.error&#xA;                if (doneCalled) {&#xA;                    _assert.error(new Error(&#xA;                        &quot;assertion passed after done was called&quot; + &#xA;                        &quot;for test : &quot; + key + &quot; and message was : &quot; +&#xA;                        message&#xA;                    ));&#xA;                }&#xA;            }&#xA;            // Wrap fail. Push the fail message to the results object&#xA;            _assert.fail = function(message) {&#xA;                _fail.apply(_assert, arguments);&#xA;                results.failures.push(message);&#xA;                // Throw an error if assertion failed after done has been&#xA;                // called&#xA;                if (doneCalled) {&#xA;                    _assert.error(new Error(&#xA;                        &quot;assertion failed after done was called&quot; + &#xA;                        &quot;for test : &quot; + key + &quot; and message was : &quot; +&#xA;                        message&#xA;                    ));&#xA;                }&#xA;            }&#xA;            // Wrap error. Log calls to error&#xA;            _assert.error = function(error) {&#xA;                _error.apply(_assert, arguments);&#xA;                results.errors.push(error);&#xA;            }&#xA;            // Done has not been called&#xA;            var doneCalled = false;&#xA;            var done = function() {&#xA;                // If its not been called then set it to be called&#xA;                if (!doneCalled) {&#xA;                    doneCalled = true;&#xA;                    // Increment the number of tests that have passed&#xA;                    // If we have passed all then call the async function&#xA;                    // with the results&#xA;                    if (++testsPassed === len) {&#xA;                        async(results, object.name);    &#xA;                    };&#xA;                } else {&#xA;                    // Done has already been called thrown an error&#xA;                    _assert.error(new Error(&#xA;                        &quot;done already called for test : &quot; + key&#xA;                    ));&#xA;                }&#xA;            };&#xA;            // Try running the test function.&#xA;            try {&#xA;                val(_assert, done);    &#xA;            } catch(e) {&#xA;                // If a failure occurs log it when its an AssertionError&#xA;                if (e instanceof assert.AssertionError) {&#xA;                    console.log(&quot;failed : &quot; + e.message);&#xA;                } else {&#xA;                    // and throw if its another error&#xA;                    _assert.error(e);&#xA;                }&#xA;                failures++;&#xA;            }&#xA;        };&#xA;    } else {&#xA;        // the test runner takes the test function as a paramater&#xA;        testRunner = function(val) {&#xA;            // create a local assert&#xA;            var _assert = new Assert;&#xA;            // If we want to mute it then pass mute to the assert&#xA;            if (object.mute === true) {&#xA;                _assert.mute = true;    &#xA;            }&#xA;            // Try the test&#xA;            try {&#xA;                val(_assert);&#xA;            } catch(e) {&#xA;                // If it throws an assertion error then log it&#xA;                if (e instanceof assert.AssertionError) {&#xA;                    console.log(&quot;failed : &quot; + e.message);&#xA;                } else {&#xA;                    // Other error thrown so pass it to assert.error&#xA;                    _assert.error(e);    &#xA;                }&#xA;                failures++;&#xA;            }&#xA;        };&#xA;    }&#xA;    // For each test run it.&#xA;    _.each(tests, testRunner);&#xA;    // If the object had a name and was not async then print a message&#xA;    // saying we've finishe&#xA;    if (object.name &amp;amp;&amp;amp; !async) {&#xA;        var string = &quot;Completed &quot; + len + &#xA;            &quot; tests. Finished : &quot; + object.name +&#xA;            &quot; with &quot; + failures + &quot; tests failing&quot;;&#xA;        console.log(string);        &#xA;    }&#xA;    // Return the count of failures (Kind of useless for async).&#xA;    return failures;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;For more information the full file can be found &lt;a href=&quot;https://github.com/Raynos/BrowserCJS/blob/master/Modules/test/test1.1.js&quot;&gt;here&lt;/a&gt;. It also relies on &lt;a href=&quot;https://github.com/Raynos/BrowserCJS/blob/master/Modules/assert/assert1.1.js&quot;&gt;&lt;code&gt;assert&lt;/code&gt;&lt;/a&gt; object which is documented &lt;a href=&quot;https://github.com/Raynos/BrowserCJS/blob/master/Modules/assert/assert1.1.js&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There are some (limited) &lt;a href=&quot;https://github.com/Raynos/BrowserCJS/tree/master/Modules/unit-tests&quot;&gt;unit tests&lt;/a&gt; and they can be run in the browser &lt;a href=&quot;http://raynos.github.com/BrowserCJS/tests.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Please tell me if more information is needed. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;I was going to write some proper high level documentation on how to use it because the commonJS spec is a bit vague. I'll edit when that's done.&lt;/p&gt;&#xA;" OwnerUserId="463" LastEditorUserId="7076" LastEditDate="2013-09-12T13:03:32.293" LastActivityDate="2013-09-12T13:03:32.293" Title="Unit-testing function" Tags="&lt;javascript&gt;&lt;unit-testing&gt;" AnswerCount="1" CommentCount="0" FavoriteCount="1" />
  <row Id="857" PostTypeId="2" ParentId="855" CreationDate="2011-02-19T17:28:58.047" Score="3" Body="&lt;p&gt;Some things you could consider&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;make the starting class a simple program which calls other methods and/or classes to do most of the work.&lt;/li&gt;&#xA;&lt;li&gt;if you want something more general, you could use an abstract output stream so it can be captured or even use a Listener interface.&lt;/li&gt;&#xA;&lt;li&gt;make fields which are not intended to change &lt;code&gt;final&lt;/code&gt; this can improve clarity.&lt;/li&gt;&#xA;&lt;li&gt;is it conventional to place fields then constructors then methods as the class order.&lt;/li&gt;&#xA;&lt;li&gt;you could restructure the fields/method calls to be thread safe if that might be an issue. e.g. SimpleDateFormat is not thread-safe and causes no end of concern.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="1836" LastEditorUserId="1836" LastEditDate="2013-01-16T21:26:21.383" LastActivityDate="2013-01-16T21:26:21.383" CommentCount="2" />
  <row Id="858" PostTypeId="1" CreationDate="2011-02-19T18:05:21.783" Score="5" ViewCount="1893" Body="&lt;p&gt;I feel like I can make my switch statements more elegant with a function pointer, i.e. I'd like to set the &lt;code&gt;digestLength&lt;/code&gt; and a pointer to a function in the same switch statement instead of setting the length, declaring the result array, then calling the function.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;- (NSString *)hashWithDigestType:(NSStringDigestType)type {&#xA;    const char *s = [self UTF8String];&#xA;    int digestLength;&#xA;&#xA;    switch (type) {&#xA;        case NSStringDigestTypeMD5:&#xA;            digestLength = CC_MD5_DIGEST_LENGTH;&#xA;            break;&#xA;        case NSStringDigestTypeSHA1:&#xA;            digestLength = CC_SHA1_DIGEST_LENGTH;&#xA;            break;&#xA;        case NSStringDigestTypeSHA512:&#xA;            digestLength = CC_SHA512_DIGEST_LENGTH;&#xA;            break;&#xA;    }&#xA;&#xA;    unsigned char result[digestLength]; &#xA;&#xA;    switch (type) {&#xA;        case NSStringDigestTypeMD5:&#xA;            CC_MD5(s, strlen(s), result);&#xA;            break;&#xA;        case NSStringDigestTypeSHA1:&#xA;            CC_SHA1(s, strlen(s), result);&#xA;            break;&#xA;        case NSStringDigestTypeSHA512:&#xA;            CC_SHA512(s, strlen(s), result);&#xA;            break;&#xA;    }&#xA;&#xA;    NSMutableString *digest = [NSMutableString stringWithCapacity:(digestLength * 2)];&#xA;    for (NSUInteger i = 0; i &amp;lt; digestLength; i++)&#xA;        [digest appendFormat:@&quot;%02x&quot;,result[i]];&#xA;&#xA;    return [NSString stringWithString:digest];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1837" LastActivityDate="2011-02-20T04:26:03.220" Title="Function pointers and switch statements" Tags="&lt;c&gt;&lt;objective-c&gt;" AnswerCount="2" CommentCount="0" />
  <row Id="859" PostTypeId="2" ParentId="824" CreationDate="2011-02-19T18:13:36.433" Score="5" Body="&lt;p&gt;Cocky comment saying that this is almost max-optimized deserves a harsh review. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;I don't know anything about the &lt;code&gt;$.widget&lt;/code&gt;, from my brief look of it none of my comments can be ignored because it's &quot;Something you need to do to play nicely with the $.widget&quot;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Admittedly there are no obvious mistakes. Most of it is well structured and the code is readable. There are various nit picks all over the place though. Half of them can be ignored under the motto of that's a style specific comment.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Over all the code was pretty good.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Here are the main points:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Redundant:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;this.element = this.element;&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;That's just plain redundant.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if (lastLi.hasClass('selected'))&#xA;     lastLi.removeClass('selected');&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;jQuery is clever enough to not remove a class that doesn't exist. The hasClass check is just as expensive as the removeClass call.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;_popTag: function() {&#xA;    return this.tagsArray.pop();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;That particular abstraction feels redundant when tagsArray is public aswell.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;tags: function() {&#xA;    return this.tagsArray;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;again it feels like a redundant abstractions when tagsArray is public. You do know tagsArray is public right?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;HTML Strings versus DOM manipulation&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;this.element.html('&amp;lt;li class=&quot;tagit-new&quot;&amp;gt;&amp;lt;input class=&quot;tagit-input&quot; type=&quot;text&quot; /&amp;gt;&amp;lt;/li&amp;gt;');&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As mentioned in the comments I don't like messing with HTML directly. Use DOM manipulation methods instead.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;this.input = $(document.createElement(&quot;input&quot;));&#xA;this.input.addClass(&quot;tagit-input&quot;);&#xA;this.input[0].type = &quot;text&quot;;&#xA;var li = $(&quot;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&quot;);&#xA;li.addClass(&quot;tagit-new&quot;);&#xA;li.append(this.input);&#xA;this.element.empty();&#xA;this.element.append(li);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This can actaully be improved on with jQuery 1.4&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;this.input = $(document.createElement(&quot;input&quot;), {&#xA;     &quot;class&quot;: &quot;tagit-input&quot;,&#xA;     &quot;type&quot;: &quot;text&quot;&#xA;});&#xA;var li = $(document.createElement(&quot;li&quot;), {&#xA;     &quot;class&quot;: &quot;tagit-new&quot;&#xA;});&#xA;this.element.empty().append(li.append(this.input));&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;=== vs ==&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;if (e.target.tagName == 'A')&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Always use &lt;code&gt;===&lt;/code&gt; end of.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;name duplication&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;this.options.appendTo = this.element;&#xA;this.options.source = this.options.tagSource;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Why do this? Why have the same thing mapped under different names? It's just hard to read and makes maintenance more of a pain. Also harder to refactor.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Return from a function or use if-else&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if (e.which == self._keys.backspace)&#xA;     return self._backspace(lastLi);&#xA;if (self._isInitKey(e.which)) {&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Might as well use &lt;code&gt;else if&lt;/code&gt; here instead of returning. Avoid returning multiple times. There are some exceptions like guard statements or trivial functions.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Code smells&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;self.lastKey = e.which;&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Storing the last key that was pressed? That smells. Refactor or abstract this away. &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;_removeTag: function() {&#xA;    this._popTag();&#xA;    this.element.children(&quot;.tagit-choice:last&quot;).remove();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You have both a remove and pop function. Refactor this so you only have one.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Caching&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;self._addTag($(this).val());&#xA;$(this).val('');&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Really aught to cache it &lt;code&gt;var $this = $(this)&lt;/code&gt;. Get into this habit some calls to &lt;code&gt;$&lt;/code&gt; are really expensive. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Extending native prototypes&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;String.prototype.trim&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Don't do it. Simple as. You'll break everyone else's code. The problem is code like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for (var c in &quot;foo&quot;) {&#xA;     console.log(someString[c]); &#xA;}&#xA;&quot;f&quot;&#xA;&quot;o&quot;&#xA;&quot;o&quot;&#xA;&quot;function() { ... &quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This is why we check for hasOwnProperty in &lt;code&gt;for in&lt;/code&gt; loops. Personally I prefer to just assume no-one extends native prototypes and shout anyone that does that rather then use hasOwnProperty. Not to mention there's lots of 3rd party code you use that doesn't check for it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;if (x) return true&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if (this.tagsArray.length == 0 || $.inArray(value, this.tagsArray) == -1)&#xA;     return false;&#xA;return true;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Ignoring the fact that if statements without brackets make me rage. This really aught to be&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;return this.tagsArray.length !== 0 &amp;amp;&amp;amp; $.inArray(value, this.tagsArray) !== -1;&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;widget destroy function&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;destroy: function() {&#xA;    $.Widget.prototype.destroy.apply(this, arguments); // default destroy&#xA;    this.tagsArray = [];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The reason the widget makes call to &lt;code&gt;.destroy&lt;/code&gt; is because there is no garbage collector for the DOM. Your supposed to clean up the dom. Your supposed to remove &lt;code&gt;this.element&lt;/code&gt;, detach any event handlers. And whatever else needs cleaning up.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You do not need to clean up javascript. JS has a garbage collector.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Here is the full code annotated:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;just ctrl-f &lt;code&gt;//*&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(function($) {&#xA;    $.widget(&quot;ui.tagit&quot;, {&#xA;&#xA;        // default options&#xA;        options: {&#xA;            tagSource:   [],&#xA;            triggerKeys: ['enter', 'space', 'comma', 'tab'],&#xA;            initialTags: [],&#xA;            minLength:   1&#xA;        },&#xA;&#xA;        _keys: {&#xA;            backspace: 8,&#xA;            enter:     13,&#xA;            space:     32,&#xA;            comma:     44,&#xA;            tab:       9&#xA;        },&#xA;&#xA;        //initialization function&#xA;        _create: function() {&#xA;&#xA;            var self = this;&#xA;            this.tagsArray = [];&#xA;&#xA;            //store reference to the ul&#xA;            //* WTF? Seriously? you know theres only one this object right?&#xA;            this.element = this.element;&#xA;&#xA;            //add class &quot;tagit&quot; for theming&#xA;            this.element.addClass(&quot;tagit&quot;);&#xA;&#xA;            //add any initial tags added through html to the array&#xA;            this.element.children('li').each(function() {&#xA;                self.options.initialTags.push($(this).text());&#xA;            });&#xA;&#xA;            //add the html input&#xA;            //* Style issue. i don't like passing html strings around.&#xA;            /*&#xA;                this.input = $(&quot;&amp;lt;input&amp;gt;&amp;lt;/input&amp;gt;&quot;);&#xA;                this.input.addClass(&quot;tagit-input&quot;);&#xA;                this.input[0].type = &quot;text&quot;;&#xA;                var li = $(&quot;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&quot;);&#xA;                li.addClass(&quot;tagit-new&quot;);&#xA;                li.append(this.input);&#xA;                this.element.empty();&#xA;                this.element.append(li);&#xA;            */&#xA;            this.element.html('&amp;lt;li class=&quot;tagit-new&quot;&amp;gt;&amp;lt;input class=&quot;tagit-input&quot; type=&quot;text&quot; /&amp;gt;&amp;lt;/li&amp;gt;');&#xA;&#xA;            this.input = this.element.find(&quot;.tagit-input&quot;);&#xA;&#xA;            //setup click handler&#xA;            //*WTF this.element is already a jQuery object.&#xA;            $(this.element).click(function(e) {&#xA;                //*WTF use &quot;===&quot;&#xA;                if (e.target.tagName == 'A') {&#xA;                    // Removes a tag when the little 'x' is clicked.&#xA;                    //* Refactor this to ._popTag()&#xA;                    /*&#xA;                        self._popTag(e.target);&#xA;                    */&#xA;                    $(e.target).parent().remove();&#xA;                    self._popTag();&#xA;                }&#xA;                else {&#xA;                    self.input.focus();&#xA;                }&#xA;            });&#xA;&#xA;            //setup autcomplete handler&#xA;            //*WTF Why map it to .appendTo. Feels like an annoying abstraction&#xA;            this.options.appendTo = this.element;&#xA;            //*WTF renaming it for no good reason&#xA;            this.options.source = this.options.tagSource;&#xA;            this.options.select = function(event, ui) {&#xA;                // Remove and add a tag? Feels like it could use a comment&#xA;                // or a swap/switch tags method&#xA;                self._removeTag();&#xA;                self._addTag(ui.item.value);&#xA;                return false;&#xA;            }&#xA;            this.input.autocomplete(this.options);&#xA;&#xA;            //setup keydown handler&#xA;            this.input.keydown(function(e) {&#xA;                var lastLi = self.element.children(&quot;.tagit-choice:last&quot;);&#xA;                if (e.which == self._keys.backspace)&#xA;                    //*WTF don't return use else if statements.&#xA;                    return self._backspace(lastLi);&#xA;&#xA;                if (self._isInitKey(e.which)) {&#xA;                    e.preventDefault();&#xA;                    //*WTF if the string in val is bigger then minLength?&#xA;                    // Too code specific give a high level explanation.&#xA;                    if ($(this).val().length &amp;gt;= self.options.minLength)&#xA;                        self._addTag($(this).val());&#xA;                }&#xA;                //*WTF Why are you removing the selected class from the last&#xA;                // li on every key down press? This really could use a comment.&#xA;                if (lastLi.hasClass('selected'))&#xA;                    lastLi.removeClass('selected');&#xA;&#xA;                //*WTF storing the lastKey is a code smell. Reffactor this away&#xA;                self.lastKey = e.which;&#xA;            });&#xA;&#xA;            //setup blur handler&#xA;            this.input.blur(function(e) {&#xA;                //*WTF always cache&#xA;                /*&#xA;                    var $this = $(this);&#xA;                */&#xA;                self._addTag($(this).val());&#xA;                //* WTF duplication. The input is already cleared in the&#xA;                // addtag.&#xA;                $(this).val('');&#xA;                return false;&#xA;            });&#xA;&#xA;            //define missing trim function for strings&#xA;            //*WTF don't extend native prototypes. Your evil. Evil evil evil.&#xA;            // Theres a perfectly good $.trim. Use it!&#xA;            String.prototype.trim = function() {&#xA;                return this.replace(/^\s+|\s+$/g, &quot;&quot;);&#xA;            };&#xA;&#xA;            this._initialTags();&#xA;&#xA;        },&#xA;        //*WTF Feels like a useless abstraction. _popTag is &quot;internal&quot; because&#xA;        // it starts with &quot;_&quot; but this.tagsArray is public. &#xA;        _popTag: function() {&#xA;            return this.tagsArray.pop();&#xA;        }&#xA;        ,&#xA;&#xA;        _addTag: function(value) {&#xA;            this.input.val(&quot;&quot;);&#xA;            value = value.replace(/,+$/, &quot;&quot;);&#xA;            //*The extension! use var value = $.trim(value)&#xA;            value = value.trim();&#xA;            //* use &quot;===&quot; here. There's no reason why not to. &#xA;            if (value == &quot;&quot; || this._exists(value))&#xA;                return false;&#xA;&#xA;                var tag = &quot;&quot;;&#xA;            //* Ew more string generated HTML. use the jquery or native DOM &#xA;            // manipulation instead&#xA;            tag = '&amp;lt;li class=&quot;tagit-choice&quot;&amp;gt;' + value + '&amp;lt;a class=&quot;tagit-close&quot;&amp;gt;x&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;';&#xA;            $(tag).insertBefore(this.input.parent());&#xA;            //*WTF Sure. lets call it again? You know, just in case someone&#xA;            // managed to edit the input whilst where running IO blocking&#xA;            // javascript code.&#xA;            this.input.val(&quot;&quot;);&#xA;            //* Personally I would take the tagsArray and overwrite it's &#xA;            // .push methods with the _addTag function. That way you can just&#xA;            // call this.tagsArray.push everywhere. Make sure to document it.&#xA;            // put it in the init function if you want.&#xA;            /*&#xA;                var _push = this.tagsArray.push;&#xA;                this.tagsArray.push = function(value) {&#xA;                    _push.apply(this, arguments);   &#xA;                    // do stuff here.&#xA;                };&#xA;            */&#xA;            this.tagsArray.push(value);&#xA;        }&#xA;        ,&#xA;&#xA;        _exists: function(value) {&#xA;            //* check with === !!! Replace this with&#xA;            /*&#xA;                return this.tagsArray.length !== 0 &amp;amp;&amp;amp;&#xA;                    $.inArray(value, this.tagsArray) !== -1;&#xA;            */&#xA;            if (this.tagsArray.length == 0 || $.inArray(value, this.tagsArray) == -1)&#xA;                return false;&#xA;            return true;&#xA;        }&#xA;        ,&#xA;&#xA;        _isInitKey : function(keyCode) {&#xA;            var keyName = &quot;&quot;;&#xA;            for (var key in this._keys)&#xA;                //* Refactor this to &#xA;                /*&#xA;                    if (this._keys[key] === keyCode) {&#xA;                        return $.inArray(key, this.options.triggerKeys) !== -1;&#xA;                    }&#xA;                */&#xA;                if (this._keys[key] == keyCode)&#xA;                    keyName = key//*WTF don't forget that semi colon.&#xA;            //* unneccesary if refactored.&#xA;            if ($.inArray(keyName, this.options.triggerKeys) != -1)&#xA;                return true;&#xA;            return false;&#xA;        }&#xA;        ,&#xA;        //*WTF It feels so wrong from a design point of view to have both&#xA;        // a popTag and a removeTag function. What's the difference?&#xA;        // Why do you remove it from the tagList but not from the DOM?&#xA;        _removeTag: function() {&#xA;            this._popTag();&#xA;            this.element.children(&quot;.tagit-choice:last&quot;).remove();&#xA;        }&#xA;        ,&#xA;        //*WTF the whole backspace in lastKey things means you backspace has &#xA;        // two meanings when pressed byt eh user. It either selects it or&#xA;        // removes it. This just seems like bad design. Get rid of it.&#xA;        _backspace: function(li) {&#xA;            if (this.input.val() == &quot;&quot;) {&#xA;                // When backspace is pressed, the last tag is deleted.&#xA;                if (this.lastKey == this._keys.backspace) {&#xA;                    //*WTF why not just call _removeTag!!!&#xA;                    this._popTag();&#xA;                    li.remove();&#xA;                    this.lastKey = null;&#xA;                } else {&#xA;                    li.addClass('selected');&#xA;                    this.lastKey = this._keys.backspace;&#xA;                }&#xA;            }&#xA;            return true;&#xA;        }&#xA;        ,&#xA;&#xA;        _initialTags: function() {&#xA;            //*WTF use a &amp;gt; 0 check. checking for not 0 is just annoying,&#xA;            // Length can never be negative.&#xA;            if (this.options.initialTags.length != 0) {&#xA;                //*WTF avoid a for in loop on an array just use a standard&#xA;                /*&#xA;                    var len = this.options.initialTags.length;&#xA;                    for (var i=0;i &amp;lt; len;i++) {&#xA;                        var tag = this.options.initialTags[i];&#xA;                        if (!this._exists(tag)) {&#xA;                            this._addTag(tag);&#xA;                        }&#xA;                    }&#xA;                */&#xA;                for (var i in this.options.initialTags)&#xA;                    //*WTF you already check for existance in the addTag &#xA;                    // function. Why do it here? Choose to do it either before&#xA;                    // calling or in the function not both.&#xA;                    if (!this._exists(this.options.initialTags[i]))&#xA;                        this._addTag(this.options.initialTags[i]);&#xA;            }&#xA;        }&#xA;        ,&#xA;&#xA;        //*WTF why have both a tags &amp;amp; a tagsArray. Why? There both public.&#xA;        // It just a useless abstraction&#xA;        tags: function() {&#xA;            return this.tagsArray;&#xA;        }&#xA;        ,&#xA;        //*WTF What is this? C++. We have a garbage collector. if tagsArray&#xA;        // is no longer referenced anywhere then we don't need to null it on&#xA;        // purpose. &#xA;        // From a $.widget point of view you want destroy to act as a garbage collector&#xA;        // for the DOM. Remove stuff from the DOM. The JS has it's own garbage&#xA;        // collector. &#xA;        destroy: function() {&#xA;            $.Widget.prototype.destroy.apply(this, arguments); // default destroy&#xA;            this.tagsArray = [];&#xA;        }&#xA;&#xA;    });&#xA;})(jQuery);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="463" LastEditorUserId="463" LastEditDate="2011-02-19T18:47:52.643" LastActivityDate="2011-02-19T18:47:52.643" CommentCount="14" />
  <row Id="860" PostTypeId="1" CreationDate="2011-02-19T19:06:14.757" Score="11" ViewCount="555" Body="&lt;p&gt;I was bored over the last couple of days and wrote up a string interpolation library for JavaScript.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'm very pleased with its functionality, it passes it &lt;a href=&quot;https://github.com/BonsaiDen/Fomatto/blob/master/test/test.js&quot; rel=&quot;nofollow&quot;&gt;79 tests&lt;/a&gt; cross browser and the comments and &lt;a href=&quot;https://github.com/BonsaiDen/Fomatto#readme&quot; rel=&quot;nofollow&quot;&gt;README&lt;/a&gt; seem fine too.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;My main concern here are the regular expressions.  I'm not a real pro in that area so I suspect there could be some enhancement to them.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Another thing is readability of the code as well as how good the comments are.  I'd like to have &quot;unclear&quot; sections of the code pointed out so I can improve the naming / comments.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The library brings with it the &lt;code&gt;Formatter&lt;/code&gt; factory and the &lt;code&gt;FormatError&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Basic usage&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; format = Formatter()&#xA;&amp;gt; format('Good {} Sir {}.', 'morning', 'Lancelot')&#xA;'Good morning Sir Lancelot.'&#xA;&#xA;&amp;gt; format('Good {time} Sir {name}.', 'morning', 'Lancelot')&#xA;'Good morning Sir Lancelot.'&#xA;&#xA;&amp;gt; format('Good {0} Sir {1}.', ['morning', 'Lancelot'])&#xA;'Good morning Sir Lancelot.'&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Source&lt;/strong&gt; &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(function(undefined) {&#xA;    'use strict';&#xA;&#xA;    // Formatter factory&#xA;    function Formatter(formats) {&#xA;        function f() {&#xA;            return format(f.formats, arguments);&#xA;        }&#xA;        f.formats = formats || {};&#xA;        return f;&#xA;    }&#xA;&#xA;    // Default formatters&#xA;    Formatter.formats = {&#xA;        repeat: repeat,&#xA;&#xA;        join: function(value, str) {&#xA;            return value.join(str || ', ');&#xA;        },&#xA;&#xA;        upper: function(value) {&#xA;            return value.toUpperCase();&#xA;        },&#xA;&#xA;        lower: function(value) {&#xA;            return value.toLowerCase();&#xA;        },&#xA;&#xA;        lpad: function(value, length, str) {&#xA;            return pad(value, length, str, 'l');&#xA;        },&#xA;&#xA;        rpad: function(value, length, str) {&#xA;            return pad(value, length, str, 'r');&#xA;        },&#xA;&#xA;        pad: function(value, length, str) {&#xA;            return pad(value, length, str);&#xA;        },&#xA;&#xA;        surround: function(value, left, right) {&#xA;            return left + value + (right || left);&#xA;        },&#xA;&#xA;        hex: function(value, lead) {&#xA;            return (lead ? '0x' : '') + value.toString(16);&#xA;        },&#xA;&#xA;        bin: function(value, lead) {&#xA;            return (lead ? '0b' : '') + value.toString(2);&#xA;        }&#xA;    };&#xA;&#xA;    function repeat(value, count) {&#xA;        return new Array((count || 0) + 1).join(value || ' ');&#xA;    }&#xA;&#xA;    function pad(value, length, str, mode) {&#xA;        value = '' + value;&#xA;        str = str || ' ';&#xA;&#xA;        var len = length - value.length;&#xA;        if (len &amp;lt; 0) {&#xA;            return value;&#xA;&#xA;        } else if (mode === 'l') {&#xA;            return repeat(str, len) + value;&#xA;&#xA;        } else if (mode === 'r') {&#xA;            return value + repeat(str, len);&#xA;&#xA;        } else {&#xA;            return repeat(str, len - ~~(len / 2))&#xA;                   + value&#xA;                   + repeat(str, ~~(len / 2));&#xA;        }&#xA;    }&#xA;&#xA;    // match {} placholders like {0}, {name}, {} and the inner &quot;{{foo}}&quot;&#xA;    // {} can be escaped with \&#xA;    var replaceExp = /([^\\]|^)\{([^\{\}]*[^\\^\}]|)\}/g,&#xA;&#xA;        // match things like: foo[0].test[&quot;test&quot;]['test]&#xA;        accessExp = /^\.?([^\.\[]+)|\[((-?\d+)|('|&quot;)(.*?[^\\])\4)\]/,&#xA;&#xA;        // match :foo and :foo(.*?)&#xA;        formatExp = /\:([a-zA-Z]+)(\((.*?)\))?(\:|$)/,&#xA;&#xA;        // match arguments: &quot;test&quot;, 12, -12, 'test', true, false&#xA;        // strings can contain escaped characters like \&quot;&#xA;        argumentsExp = /^(,|^)\s*?((true|false|(-?\d+))|('|&quot;)(.*?([^\\]|\5))\5)/;&#xA;&#xA;    // Main formatting function&#xA;    function format(formatters, args) {&#xA;&#xA;        // Setup magic!&#xA;        var string = args[0],&#xA;            first = args[1],&#xA;            argsLength = args.length - 2,&#xA;            type = first != null ? {}.toString.call(first).slice(8, -1) : '',&#xA;            arrayLength = first ? first.length - 1 : 0,&#xA;            autoIndex = 0;&#xA;&#xA;        function replace(value, pre, form) {&#xA;&#xA;            // Extract formatters&#xA;            var formats = [], format = null, id = form;&#xA;            while (format = form.match(formatExp)) {&#xA;                if (formats.length === 0) {&#xA;                    id = form.substring(0, format.index);&#xA;                }&#xA;                form = form.substring(format[0].length - 1);&#xA;                formats.push(format);&#xA;            }&#xA;&#xA;            // In case of a valid number use it for indexing&#xA;            var num = (isNaN(+id) || id === '') ? null : +id;&#xA;&#xA;            // Handle objects&#xA;            if (type === 'Object' &amp;amp;&amp;amp; id !== '') {&#xA;&#xA;                // Handle plain keys&#xA;                if (id.indexOf('.') === -1 &amp;amp;&amp;amp; id.indexOf('[') === -1) {&#xA;                    if (first[id] !== undefined) {&#xA;                        value = first[id];&#xA;&#xA;                    // fall back to obj.toString()&#xA;                    } else {&#xA;                        value = args[1 + autoIndex];&#xA;                    }&#xA;&#xA;                // Access properties&#xA;                } else {&#xA;                    value = getProperty(first, id);&#xA;                }&#xA;&#xA;            // Handle given array indexes&#xA;            } else if (type === 'Array' &amp;amp;&amp;amp; num !== null) {&#xA;                value = first[num &amp;gt;= 0 ? num : arrayLength + num];&#xA;&#xA;            // Handle given arguments indexes&#xA;            } else if (num !== null) {&#xA;                value = args[1 + (num &amp;gt;= 0 ? num : argsLength + num)];&#xA;&#xA;            // Handle automatic arguments indexes&#xA;            } else {&#xA;                value = args[1 + autoIndex];&#xA;            }&#xA;            autoIndex++;&#xA;&#xA;            // Apply formats&#xA;            while (format = formats.shift()) {&#xA;                var method = (formatters[format[1]] ? formatters : Formatter.formats)[format[1]];&#xA;                if (method) {&#xA;                    value = method.apply(undefined,&#xA;                                         getArguments(value, format[3] || ''));&#xA;&#xA;                } else {&#xA;                    throw new FormatError(&#xA;                        replace, 'Undefined formatter &quot;{}&quot;.', format[1]&#xA;                    );&#xA;                }&#xA;            }&#xA;            return pre + value;&#xA;        }&#xA;        return string.replace(replaceExp, replace);&#xA;    }&#xA;&#xA;    // Get a specific peoperty of an object based on a accessor string&#xA;    function getProperty(obj, id) {&#xA;        var m, pos = 0;&#xA;        while (m = id.substring(pos).match(accessExp)) {&#xA;            // .name  / [0] / [&quot;test&quot;]&#xA;            var prop = m[1] || (m[3] ? +m[3] : m[5].replace('\\' + m[4], m[4]));&#xA;            if (obj === undefined) {&#xA;                throw new FormatError(&#xA;                    getProperty,&#xA;                    'Cannot access property &quot;{}&quot; of undefined.', prop&#xA;                );&#xA;&#xA;            } else {&#xA;                obj = obj[prop];&#xA;            }&#xA;            pos += m[0].length;&#xA;        }&#xA;        return obj;&#xA;    }&#xA;&#xA;    // Convert a string like:&#xA;    //   true, false, -1, 34, 'foo', &quot;bla\&quot; foo&quot;&#xA;    //&#xA;    // Into a  list of arguments:&#xA;    //   [true, false, -1, 34, 'foo', 'bla&quot; foo']&#xA;    function getArguments(value, string) {&#xA;        var m, pos = 0, args = [value];&#xA;        while (m = string.substring(pos).match(argumentsExp)) {&#xA;            // number&#xA;            args.push(m[4] ? +m[4]&#xA;                           // boolean&#xA;                           : (m[3] ? m[3] === 'true'&#xA;                                   // string&#xA;                                   : m[6].replace('\\' + m[5], m[5])));&#xA;&#xA;            pos += m[0].length;&#xA;        }&#xA;        return args;&#xA;    }&#xA;&#xA;    // Formatting error type&#xA;    function FormatError(func, msg, value) {&#xA;        this.name = 'FormatError';&#xA;        this.message = format(Formatter.formats, [msg, value]);&#xA;        if (Error.captureStackTrace) {&#xA;            Error.captureStackTrace(this, func);&#xA;        }&#xA;    }&#xA;    FormatError.prototype = new Error();&#xA;&#xA;    // Exports&#xA;    var exp = typeof window === 'undefined' ? exports : window;&#xA;    exp.Formatter = Formatter;&#xA;    exp.FormatError = FormatError;&#xA;})();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="89" LastEditorUserId="22222" LastEditDate="2014-06-21T05:29:23.953" LastActivityDate="2014-06-21T05:29:23.953" Title="String interpolation library" Tags="&lt;javascript&gt;&lt;strings&gt;&lt;formatting&gt;&lt;library&gt;" AnswerCount="1" CommentCount="0" FavoriteCount="1" />
  <row Id="861" PostTypeId="2" ParentId="855" CreationDate="2011-02-19T20:26:10.507" Score="4" Body="&lt;p&gt;Your function is called &lt;code&gt;FlipACoin()&lt;/code&gt;, but you are doing more than just flipping the coin. A more appropriate name might be &lt;code&gt;FlipACoinAndCountConsecutiveHeadRolls()&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I would suggest keeping the function as simple as the name suggests and return a string (or boolean) from &lt;code&gt;FlipACoin()&lt;/code&gt;, then examine the result outside the function. This will also allow you to make the counter a local variable to the run function, which will make the class smaller.&lt;/p&gt;&#xA;" OwnerUserId="1840" LastEditorUserId="34073" LastEditDate="2015-12-14T01:53:01.677" LastActivityDate="2015-12-14T01:53:01.677" CommentCount="0" />
  <row Id="862" PostTypeId="2" ParentId="858" CreationDate="2011-02-19T21:59:12.443" Score="3" Body="&lt;p&gt;I can't write the code in Objective-C, but in C, you could create yourself a structure type to get the information in one move.  I don't know whether the NSStringDigestTypeXXX values are conveniently numbered compactly from 0 or 1, so I'm taking the pessimistic view that they are not.  You can simplify the code below if they are compact and small.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;struct Digestifier  // Declaration in a header (probably)&#xA;{&#xA;    int      hashtype;&#xA;    void   (*hash)(const char *source, size_t length, char *result);&#xA;    size_t   hashlen;&#xA;};&#xA;static const struct Digestifier digests[] =&#xA;{&#xA;    { NSStringDigestTypeSHA1,   CC_SHA1,   CC_SHA1_DIGEST_LENGTH   },&#xA;    { NSStringDigestTypeMD5,    CC_MD5,    CC_MD5_DIGEST_LENGTH    },&#xA;    { NSStringDigestTypeSHA512, CC_SHA512, CC_SHA512_DIGEST_LENGTH },&#xA;};&#xA;{ enum NUM_DIGESTS = sizeof(digests) / sizeof(digests[0]) };&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You can then write a lookup function for this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;const struct Digestifier *digest_lookup(int hashtype)&#xA;{&#xA;    for (i = 0; i &amp;lt; NUM_DIGESTS; i++)&#xA;    {&#xA;        if (digests[i].hashtype == hashtype)&#xA;            return &amp;amp;digests[i];&#xA;    }&#xA;    assert(i != NUM_DIGESTS);  // Or other error handling!&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And in your function:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;- (NSString *)hashWithDigestType:(NSStringDigestType)type {&#xA;    const char *s = [self UTF8String];&#xA;    const struct Digestifier *digest = digest_lookup(type);&#xA;&#xA;    // Error check digest if digest_lookup() does not do it for you!&#xA;    unsigned char result[digest-&amp;gt;hashlen];&#xA;    digest-&amp;gt;hash(s, strlen(s), result);&#xA;&#xA;    NSMutableString *digest = [NSMutableString stringWithCapacity:(digest-&amp;gt;hashlen * 2)];&#xA;    for (NSUInteger i = 0; i &amp;lt; digestLength; i++)&#xA;        [digest appendFormat:@&quot;%02x&quot;,result[i]];&#xA;&#xA;    return [NSString stringWithString:digest];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Note that you could also write the hash function invocation as:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    (*digest-&amp;gt;hash)(s, strlen(s), result);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;To some of us old-school (pre-standard) C programmers, that might perhaps be clearer.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also, if Objective-C supports the C99 designated initializer notation, you could make the initializer for the &lt;code&gt;digests[]&lt;/code&gt; array more robust (and render the &lt;code&gt;hashtype&lt;/code&gt; member superfluous except for a cross-check):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;static const struct Digestifier digests[] =&#xA;{&#xA;    [NSStringDigestTypeSHA1]   =&#xA;           { NSStringDigestTypeSHA1,   CC_SHA1,   CC_SHA1_DIGEST_LENGTH   },&#xA;    [NSStringDigestTypeMD5]    =&#xA;           { NSStringDigestTypeMD5,    CC_MD5,    CC_MD5_DIGEST_LENGTH    },&#xA;    [NSStringDigestTypeSHA512] =&#xA;           { NSStringDigestTypeSHA512, CC_SHA512, CC_SHA512_DIGEST_LENGTH },&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This initializer correctly places the three rows in the array regardless of which member of the enumeration is mapped to 0, 1, 2.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;With the additional information that the NSStringDigestTypeXXX values are 0, 1, 2, you can simplify the &lt;code&gt;digest_lookup()&lt;/code&gt; function by:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Ensuring that the rows in the &lt;code&gt;digests&lt;/code&gt; array are in the correct (0, 1, 2) sequence.&lt;/li&gt;&#xA;&lt;li&gt;Changing from a search loop to a direct array lookup.&lt;/li&gt;&#xA;&lt;li&gt;Probably asserting that the value is under control.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;For the purposes of the code below, I'm assuming that NSStringDigestTypeMD5 is 0 and NSStringDigestTypeSHA512 is 2, but the ordering of the names is arbitrary; just choose the equivalent of 0 for the first name in the assert and 2 for the second.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;const struct Digestifier *digest_lookup(NSStringDigestType hashtype)&#xA;{&#xA;    assert(hashtype &amp;gt;= NSStringDigestTypeMD5 &amp;amp;&amp;amp;&#xA;           hashtype &amp;lt;= NSStringDigestTypeSHA512);&#xA;    assert(digest[hashtype].hashtype == hashtype);&#xA;    return &amp;amp;digests[hashtype];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The first assertion ensures that the value is in range.  The second assertion ensures that the table is properly sequenced and you are getting back the entry your expect.&lt;/p&gt;&#xA;" OwnerUserId="1160" LastEditorUserId="1160" LastEditDate="2011-02-20T01:24:07.743" LastActivityDate="2011-02-20T01:24:07.743" CommentCount="2" />
  <row Id="863" PostTypeId="2" ParentId="837" CreationDate="2011-02-20T02:41:31.897" Score="4" Body="&lt;p&gt;You could you PHP &lt;a href=&quot;http://php.net/manual/en/control-structures.alternative-syntax.php&quot; rel=&quot;nofollow&quot;&gt;alternate syntax&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?php&#xA;/**&#xA; * The Template for displaying all single posts.&#xA; *&#xA; * @package WordPress&#xA; * @subpackage Starkers&#xA; * @since Starkers 3.0&#xA; */&#xA;?&amp;gt;&#xA;&#xA;&amp;lt;?php get_header(); &#xA;&amp;lt;?php get_sidebar(); ?&amp;gt;&#xA;&#xA;&amp;lt;div id=&quot;content&quot;&amp;gt;&#xA;    &amp;lt;?php $intro_image = get_post_meta($post-&amp;gt;ID, 'Intro Image', true); ?&amp;gt;&#xA;    &amp;lt;div class=&quot;block-1&quot;&amp;gt;&#xA;        &amp;lt;img src=&quot;&amp;lt;?php echo $intro_image; ?&amp;gt;&quot; alt=&quot;&quot; /&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;&#xA;    &amp;lt;?php if ( have_posts() ? while ( have_posts() ) : the_post()): ?&amp;gt;  &#xA;        &amp;lt;div class=&quot;block-2 padding-top no-overlay&quot;&amp;gt;&#xA;            &amp;lt;?php the_content(); ?&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;    &amp;lt;?php endwhile; ?&amp;gt;&#xA;&#xA;    &amp;lt;div class=&quot;block-2 border-top&quot;&amp;gt;&#xA;        &amp;lt;?php $mainbar_left_title = get_post_meta($post-&amp;gt;ID, 'Mainbar Left Title', true); ?&amp;gt;&#xA;        &amp;lt;?php $mainbar_left_image = get_post_meta($post-&amp;gt;ID, 'Mainbar Left Image', true); ?&amp;gt;&#xA;        &amp;lt;div class=&quot;float-left&quot;&amp;gt;&#xA;            &amp;lt;h2&amp;gt;&amp;lt;?php echo $mainbar_left_title; ?&amp;gt;&amp;lt;/h2&amp;gt;&#xA;            &amp;lt;img src=&quot;&amp;lt;?php echo $mainbar_left_image ?&amp;gt;&quot; alt=&quot;&quot; /&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;&#xA;            &amp;lt;?php $mainbar_right_title = get_post_meta($post-&amp;gt;ID, 'Mainbar Right Title', true); ?&amp;gt;&#xA;            &amp;lt;?php $mainbar_right_image = get_post_meta($post-&amp;gt;ID, 'Mainbar Right Image', true); ?&amp;gt;&#xA;        &amp;lt;div class=&quot;float-right&quot;&amp;gt;&#xA;            &amp;lt;h2&amp;gt;&amp;lt;?php echo $mainbar_right_title; ?&amp;gt;&amp;lt;/h2&amp;gt;&#xA;            &amp;lt;img src=&quot;&amp;lt;?php echo $mainbar_right_image ?&amp;gt;&quot; alt=&quot;&quot; /&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;&#xA;    &amp;lt;?php $mainbar_right_title = get_post_meta($post-&amp;gt;ID, 'Mainbar Right Title', true); ?&amp;gt;&#xA;    &amp;lt;?php $mainbar_right_image = get_post_meta($post-&amp;gt;ID, 'Mainbar Right Image', true); ?&amp;gt;&#xA;    &amp;lt;div class=&quot;block-3 border-top&quot;&amp;gt;&#xA;        &amp;lt;h2&amp;gt;&amp;lt;?php echo $mainbar_right_title; ?&amp;gt;&amp;lt;/h2&amp;gt;&#xA;        &amp;lt;img src=&quot;&amp;lt;?php echo $mainbar_right_image ?&amp;gt;&quot; alt=&quot;&quot; /&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;&#xA;    &amp;lt;?php if ( have_posts() ? while ( have_posts() ) : the_post()): ?&amp;gt;&#xA;        &amp;lt;div class=&quot;block-4 border-top&quot;&amp;gt;&#xA;            &amp;lt;?php the_content(); ?&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;    &amp;lt;?php endwhile; ?&amp;gt;&#xA;&#xA;    &amp;lt;?php get_sidebar('secondary'); ?&amp;gt;&#xA;&amp;lt;/div&amp;gt;&#xA;&#xA;&amp;lt;?php get_footer(); ?&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This follows all WP coding standards from what I can tell and is readable.&#xA;I would also suggest changing sections like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?php $mainbar_right_title = get_post_meta($post-&amp;gt;ID, 'Mainbar Right Title', true); ?&amp;gt;&#xA;&amp;lt;?php $mainbar_right_image = get_post_meta($post-&amp;gt;ID, 'Mainbar Right Image', true); ?&amp;gt;&#xA;&amp;lt;div class=&quot;block-3 border-top&quot;&amp;gt;&#xA;    &amp;lt;h2&amp;gt;&amp;lt;?php echo $mainbar_right_title; ?&amp;gt;&amp;lt;/h2&amp;gt;&#xA;    &amp;lt;img src=&quot;&amp;lt;?php echo $mainbar_right_image ?&amp;gt;&quot; alt=&quot;&quot; /&amp;gt;&#xA;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;To:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;block-3 border-top&quot;&amp;gt;&#xA;    &amp;lt;h2&amp;gt;&amp;lt;?php echo get_post_meta($post-&amp;gt;ID, 'Mainbar Right Title', true); ?&amp;gt;&amp;lt;/h2&amp;gt;&#xA;    &amp;lt;img src=&quot;&amp;lt;?php echo get_post_meta($post-&amp;gt;ID, 'Mainbar Right Image', true) ?&amp;gt;&quot; alt=&quot;&quot; /&amp;gt;&#xA;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Although that's just personal preference, I find it much more readable.&lt;/p&gt;&#xA;" OwnerUserId="1613" LastActivityDate="2011-02-20T02:41:31.897" CommentCount="1" />
  <row Id="864" PostTypeId="2" ParentId="858" CreationDate="2011-02-20T04:26:03.220" Score="3" Body="&lt;p&gt;Here's some 2 cents.&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;You should never use identifiers beginning with &lt;code&gt;NS&lt;/code&gt;, as this prefix is reserved for Apple only. In fact, recently Apple has begun discouraging the use of two- or three-letter prefixes entirely.&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;[I'm not sure about this approach, but] consider implementing each hash calculation as separate methods; and simply using selectors instead of function pointers:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;- (NSString *) hashWithDigestType:(StringDigestType) type&#xA;{&#xA;    SEL digestMethods[] = {&#xA;        @selector(hashWithMD5),&#xA;        @selector(hashWithSHA1),&#xA;        @selector(hashWithSHA256)&#xA;    };&#xA;&#xA;    return [self performSelector:digestMethods[type]];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Consider also validating the &lt;code&gt;type&lt;/code&gt; variable and the possibility of using designated initialisers, so that you can directly map the enum values to the appropriate selectors.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;" OwnerUserId="1328" LastActivityDate="2011-02-20T04:26:03.220" CommentCount="4" />
  <row Id="865" PostTypeId="2" ParentId="830" CreationDate="2011-02-20T19:52:55.877" Score="2" Body="&lt;pre&gt;&lt;code&gt;// If you use selectors multiple times, always cache them into variables, else jQuery has to search for them multiple times.&#xA;var $cont      = $('.cont'),&#xA;    $expandAll = $('#expandAll'),&#xA;    $trigger   = $('.trigger');&#xA;&#xA;function expandAll() {&#xA;    $cont.removeClass('hid');&#xA;    $trigger.text('-');&#xA;    // Use .text() instead of .html().&#xA;    // You can chain these calls together.&#xA;    // If you use .one(), you don't have to unbind the previous event handler next time, jQuery does it for you.&#xA;    $expandAll.text('Collapse All').one('click', collapseAll);&#xA;}&#xA;function collapseAll() {&#xA;    $cont.addClass('hid');&#xA;    $trigger.text('-');&#xA;    $expandAll.text('Expand All').one('click', expandAll);&#xA;}&#xA;&#xA;// You can pass a function to jQuery itself – it's a shorthand for $(document).ready().&#xA;$(function() {&#xA;    // There's no need to pass the event argument, because&#xA;    // 1. You didn't use it there&#xA;    // 2. jQuery “normalizes” the event object, so you don't have to pass it as an argument. If you want a shorthand for it, do it inside the function:&#xA;    // var e = event;&#xA;    $trigger.click(function() {&#xA;        // Always use var to declare variables, to prevent polluting the global scope.&#xA;        var $this = $(this);&#xA;        // Again: use .text() instead of .html().&#xA;        $this.text($this.text() == '+' ? '-' : '+');&#xA;        // There's no need to do this:&#xA;        // $($this.nextAll(&quot;.cont&quot;).get(0)).toggleClass(&quot;hid&quot;);&#xA;        // You can simply do this:&#xA;        $this.nextAll('.cont').toggleClass('hid');&#xA;    });&#xA;    $expandAll.one('click', expandAll);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="688" LastEditorUserId="688" LastEditDate="2011-02-23T17:09:32.780" LastActivityDate="2011-02-23T17:09:32.780" CommentCount="4" />
  <row Id="866" PostTypeId="1" AcceptedAnswerId="884" CreationDate="2011-02-20T20:59:18.157" Score="11" ViewCount="1030" Body="&lt;p&gt;Writing a new site, has anyone got any comments on the HTML here?  Is it all semantically correct?  Thanks!  This will basically be the template, so I want to make sure it's pretty perfect.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&#xA;&amp;lt;html&amp;gt;&#xA;&amp;lt;head&amp;gt;&#xA;    &amp;lt;title&amp;gt;Welcome to Scirra.com&amp;lt;/title&amp;gt;&#xA;    &amp;lt;meta name=&quot;description&quot; content=&quot;Construct 2 is a free open source HTML5 games creator.&quot; /&amp;gt;&#xA;    &amp;lt;meta charset=&quot;UTF-8&quot; /&amp;gt;&#xA;&#xA;    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;css/default.css&quot; type=&quot;text/css&quot; /&amp;gt;&#xA;    &amp;lt;script type=&quot;text/javascript&quot; src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&#xA;    &amp;lt;script type=&quot;text/javascript&quot; src=&quot;js/common.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&#xA;    &amp;lt;script type=&quot;text/javascript&quot; src=&quot;plugins/coin-slider/coin-slider.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&#xA;    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;plugins/coin-slider/coin-slider-styles.css&quot; type=&quot;text/css&quot; /&amp;gt;&#xA;&#xA;    &amp;lt;link href=&quot;plugins/jquery.twit.0.2.0/twit.css&quot; type=&quot;text/css&quot; rel=&quot;stylesheet&quot; /&amp;gt;&#xA;    &amp;lt;script type=&quot;text/javascript&quot; src=&quot;plugins/jquery.twit.0.2.0/twit.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&#xA;    &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;&#xA;        $(document).ready(function() {&#xA;            $('#coin-slider').coinslider({ width: 470, height: 261, spw: 8, sph: 4, delay: 7000, effect: 'straight', hoverPause: true });&#xA;&#xA;            $('#twitterFeed').twit('Scirra', {&#xA;              limit: 5,&#xA;              label: '',&#xA;              icon: false,&#xA;              count: 20&#xA;            });&#xA;        });&#xA;    &amp;lt;/script&amp;gt;&#xA;&#xA;    &amp;lt;/head&amp;gt;&#xA;&#xA;&amp;lt;body&amp;gt;&#xA;&#xA;&amp;lt;div class=&quot;topBar&quot;&amp;gt;&amp;lt;/div&amp;gt;&#xA;&amp;lt;div class=&quot;mainBox&quot;&amp;gt;&#xA;    &amp;lt;div class=&quot;headWrapper&quot;&amp;gt;&#xA;        &amp;lt;div class=&quot;searchBox&quot;&amp;gt;&#xA;            &amp;lt;div class=&quot;searchContent&quot;&amp;gt;&#xA;                &amp;lt;input type=&quot;text&quot; id=&quot;SearchBox&quot; /&amp;gt;&#xA;                &amp;lt;div class=&quot;s searchIco&quot;&amp;gt;&amp;lt;/div&amp;gt;&#xA;            &amp;lt;/div&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;    &amp;lt;div class=&quot;topMenu&quot;&amp;gt;&#xA;        &amp;lt;a href=&quot;#&quot; class=&quot;topNormal&quot;&amp;gt;Main Link&amp;lt;/a&amp;gt;&#xA;        &amp;lt;a href=&quot;#&quot; class=&quot;topNormal&quot;&amp;gt;Mainy Link&amp;lt;/a&amp;gt;&#xA;        &amp;lt;a href=&quot;#&quot; class=&quot;topSelWrapper&quot;&amp;gt;Main Link&amp;lt;/a&amp;gt;&#xA;        &amp;lt;a href=&quot;#&quot; class=&quot;topNormal&quot;&amp;gt;Main Link&amp;lt;/a&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;    &amp;lt;div class=&quot;subMenu&quot;&amp;gt;&#xA;        &amp;lt;a href=&quot;#&quot; class=&quot;subSelWrapper&quot;&amp;gt;Another Sub Link&amp;lt;/a&amp;gt;&#xA;        &amp;lt;a href=&quot;#&quot; class=&quot;subNormal&quot;&amp;gt;Sub Link&amp;lt;/a&amp;gt;&#xA;        &amp;lt;a href=&quot;#&quot; class=&quot;subNormal&quot;&amp;gt;Sub Link&amp;lt;/a&amp;gt;&#xA;        &amp;lt;a href=&quot;#&quot; class=&quot;subNormal&quot;&amp;gt;Sub Link&amp;lt;/a&amp;gt;&#xA;        &amp;lt;a href=&quot;#&quot; class=&quot;subNormal&quot;&amp;gt;Sub Link&amp;lt;/a&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;    &amp;lt;div class=&quot;contentWrapper&quot;&amp;gt;&#xA;        &amp;lt;div class=&quot;wideCol&quot;&amp;gt;&#xA;            &amp;lt;div class=&quot;s slideShowWrapper&quot;&amp;gt;&#xA;                &amp;lt;div id='coin-slider'&amp;gt;&#xA;                    &amp;lt;a href=&quot;#&quot; target=&quot;_blank&quot;&amp;gt;&#xA;                        &amp;lt;img src='images/screenshot1.jpg' &amp;gt;&#xA;                        &amp;lt;span&amp;gt;&#xA;                            Scirra software allows you to bring your imagination to life&#xA;                        &amp;lt;/span&amp;gt;&#xA;                    &amp;lt;/a&amp;gt;&#xA;                    &amp;lt;a href=&quot;#&quot;&amp;gt;&#xA;                        &amp;lt;img src='images/screenshot2.jpg' &amp;gt;&#xA;                        &amp;lt;span&amp;gt;&#xA;                            Export your creations to HTML5 pages&#xA;                        &amp;lt;/span&amp;gt;&#xA;                    &amp;lt;/a&amp;gt;&#xA;                    &amp;lt;a href=&quot;#&quot;&amp;gt;&#xA;                        &amp;lt;img src='images/screenshot3.jpg' &amp;gt;&#xA;                        &amp;lt;span&amp;gt;&#xA;                            Another description of some image&#xA;                        &amp;lt;/span&amp;gt;&#xA;                    &amp;lt;/a&amp;gt;&#xA;                    &amp;lt;a href=&quot;#&quot;&amp;gt;&#xA;                        &amp;lt;img src='images/screenshot4.jpg' &amp;gt;&#xA;                        &amp;lt;span&amp;gt;&#xA;                            Something motivational to tell people&#xA;                        &amp;lt;/span&amp;gt;&#xA;                    &amp;lt;/a&amp;gt;&#xA;                &amp;lt;/div&amp;gt;&#xA;            &amp;lt;/div&amp;gt;&#xA;            &amp;lt;div class=&quot;newsWrapper&quot;&amp;gt;&#xA;                &amp;lt;h1&amp;gt;Latest from Twitter&amp;lt;/h1&amp;gt;&#xA;                &amp;lt;div id=&quot;twitterFeed&quot;&amp;gt;&amp;lt;/div&amp;gt;&#xA;            &amp;lt;/div&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;        &amp;lt;div class=&quot;thinCol&quot;&amp;gt;&#xA;            &amp;lt;h1&amp;gt;Main Heading&amp;lt;/h1&amp;gt;&#xA;            &amp;lt;p&amp;gt;Some paragraph goes here.  It tells you about the picture.  Cool!  Have you thought about downloading Construct 2?  Well you can download it with the link below.  This column will expand vertically.&amp;lt;/p&amp;gt;&#xA;            &amp;lt;a class=&quot;blueLinkBox&quot; href=&quot;#&quot;&amp;gt;Learn More&amp;lt;/a&amp;gt;&amp;lt;div class=&quot;clear&quot;&amp;gt;&amp;lt;/div&amp;gt;&#xA;            &amp;lt;h2&amp;gt;Help Me!&amp;lt;/h2&amp;gt;&#xA;            &amp;lt;p&amp;gt;This column will keep expanging and expanging.  It pads stuff out to make other things look good imo.&amp;lt;/p&amp;gt;&#xA;            &amp;lt;a class=&quot;blueLinkBox&quot; href=&quot;#&quot;&amp;gt;Learn More&amp;lt;/a&amp;gt;&amp;lt;div class=&quot;clear&quot;&amp;gt;&amp;lt;/div&amp;gt;&#xA;            &amp;lt;h2&amp;gt;Why Download?&amp;lt;/h2&amp;gt;&#xA;            &amp;lt;p&amp;gt;As well as other features, we also have some other features.  Check out our &amp;lt;a href=&quot;#&quot;&amp;gt;other features&amp;lt;/a&amp;gt;.  Each of our other features is really cool and there to help everyone suceed.&amp;lt;/p&amp;gt;&#xA;            &amp;lt;a href=&quot;#&quot; class=&quot;s downloadBox&quot;&amp;gt;&#xA;                &amp;lt;div class=&quot;downloadHead&quot;&amp;gt;Download&amp;lt;/div&amp;gt;&#xA;                &amp;lt;div class=&quot;downloadSize&quot;&amp;gt;24.5 MB&amp;lt;/div&amp;gt;&#xA;            &amp;lt;/a&amp;gt;&#xA;&#xA;        &amp;lt;/div&amp;gt;&#xA;        &amp;lt;div class=&quot;clear&quot;&amp;gt;&amp;lt;/div&amp;gt;&#xA;&#xA;        &amp;lt;h1&amp;gt;This Weeks Spotlight&amp;lt;/h1&amp;gt;&#xA;        &amp;lt;div class=&quot;halfColWrapper&quot;&amp;gt;&#xA;            &amp;lt;img src=&quot;images/spotlight1.png&quot; class=&quot;spotLightImg&quot; /&amp;gt;&#xA;            &amp;lt;p&amp;gt;Our spotlight member this week is Pooh-Bah.  He writes good stuff.  Read it.&amp;lt;/p&amp;gt;&#xA;            &amp;lt;a class=&quot;blueLinkBox&quot; href=&quot;#&quot;&amp;gt;Learn More&amp;lt;/a&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;        &amp;lt;div class=&quot;halfColSpacer&quot;&amp;gt;&amp;amp;nbsp;&amp;lt;/div&amp;gt;&#xA;        &amp;lt;div class=&quot;halfColWrapper&quot;&amp;gt;&#xA;            &amp;lt;img src=&quot;images/spotlight2.png&quot; class=&quot;spotLightImg&quot; /&amp;gt;&#xA;            &amp;lt;p&amp;gt;Killer Bears is a scary ass game from JimmyJones.  How many bears can you escape from?&amp;lt;/p&amp;gt;&#xA;            &amp;lt;a class=&quot;blueLinkBox&quot; href=&quot;#&quot;&amp;gt;Learn More&amp;lt;/a&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;        &amp;lt;div class=&quot;clear&quot;&amp;gt;&amp;lt;/div&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;&amp;lt;/div&amp;gt;&#xA;&#xA;&amp;lt;div class=&quot;footer&quot;&amp;gt;&#xA;    &amp;lt;div class=&quot;footerContent&quot;&amp;gt;&#xA;        &amp;lt;div class=&quot;footerItem&quot;&amp;gt;&#xA;            &amp;lt;h3&amp;gt;Community&amp;lt;/h3&amp;gt;&#xA;            &amp;lt;a href=&quot;#&quot;&amp;gt;The Blog&amp;lt;/a&amp;gt;&amp;lt;br /&amp;gt;&#xA;            &amp;lt;a href=&quot;#&quot;&amp;gt;Community Forum&amp;lt;/a&amp;gt;&amp;lt;br /&amp;gt;&#xA;            &amp;lt;a href=&quot;#&quot;&amp;gt;RSS Feed&amp;lt;/a&amp;gt;&amp;lt;br /&amp;gt;&#xA;            &amp;lt;a class=&quot;s footIco facebook&quot; href=&quot;http://www.facebook.com/ScirraOfficial&quot; target=&quot;_blank&quot;&amp;gt;&amp;lt;/a&amp;gt;&#xA;            &amp;lt;a class=&quot;s footIco twitter&quot; href=&quot;http://twitter.com/Scirra&quot; target=&quot;_blank&quot;&amp;gt;&amp;lt;/a&amp;gt;&#xA;            &amp;lt;a class=&quot;s footIco youtube&quot; href=&quot;http://www.youtube.com/user/ScirraVideos&quot; target=&quot;_blank&quot;&amp;gt;&amp;lt;/a&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;        &amp;lt;div class=&quot;footerItem&quot;&amp;gt;&#xA;            &amp;lt;h3&amp;gt;About Us&amp;lt;/h3&amp;gt;&#xA;            &amp;lt;a href=&quot;#&quot;&amp;gt;Contact Information&amp;lt;/a&amp;gt;&amp;lt;br /&amp;gt;&#xA;            &amp;lt;a href=&quot;#&quot;&amp;gt;Advertising&amp;lt;/a&amp;gt;&amp;lt;br /&amp;gt;&#xA;            &amp;lt;a href=&quot;#&quot;&amp;gt;History&amp;lt;/a&amp;gt;&amp;lt;br /&amp;gt;&#xA;            &amp;lt;a href=&quot;#&quot;&amp;gt;Privacy Policy&amp;lt;/a&amp;gt;&amp;lt;br /&amp;gt;&#xA;            &amp;lt;a href=&quot;#&quot;&amp;gt;Terms and Conditions&amp;lt;/a&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;        &amp;lt;div class=&quot;footerItem&quot;&amp;gt;&#xA;            &amp;lt;h3&amp;gt;Want to Help?&amp;lt;/h3&amp;gt;&#xA;            You can contribute to Scirra software as it is &amp;lt;a href=&quot;#&quot;&amp;gt;Open Source&amp;lt;/a&amp;gt;.  We welcome all contributions, and there are lots of ways to join in!&amp;lt;br /&amp;gt;&#xA;            &amp;lt;div class=&quot;ralign&quot;&amp;gt;&#xA;            &amp;lt;a href=&quot;#&quot;&amp;gt;&amp;lt;strong&amp;gt;Learn More&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt;&#xA;            &amp;lt;/div&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;        &amp;lt;div class=&quot;clear&quot;&amp;gt;&amp;lt;/div&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;&amp;lt;/div&amp;gt;&#xA;&amp;lt;div class=&quot;copyright&quot;&amp;gt;&#xA;    Copyright &amp;amp;copy; 2011 Scirra.com.  All rights reserved.&#xA;&amp;lt;/div&amp;gt;&#xA;&amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Looks great in all browsers, but want to check it's valid markup and as perfect as it could be.&lt;/p&gt;&#xA;" OwnerUserId="154" LastEditorUserId="11415" LastEditDate="2012-02-28T21:25:07.317" LastActivityDate="2012-02-28T21:25:07.317" Title="HTML Review of template for site - Is this ok for HTML5?" Tags="&lt;html&gt;&lt;html5&gt;&lt;template&gt;" AnswerCount="4" CommentCount="5" FavoriteCount="1" />
  <row Id="868" PostTypeId="1" CreationDate="2011-02-20T21:21:40.627" Score="144" ViewCount="23632" Body="&lt;p&gt;We're calculating entropy of a string a few places in Stack Overflow as a signifier of low quality.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I whipped up this simple method which counts unique characters in a string, but it is quite literally the first thing that popped into my head. It's the &quot;dumbest thing that works&quot;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/// &amp;lt;summary&amp;gt;&#xA;/// returns the # of unique characters in a string as a rough &#xA;/// measurement of entropy&#xA;/// &amp;lt;/summary&amp;gt;&#xA;public static int Entropy(this string s)&#xA;{&#xA;  var d = new Dictionary&amp;lt;char, bool&amp;gt;();&#xA;  foreach (char c in s)&#xA;      if (!d.ContainsKey(c)) d.Add(c, true);&#xA;  return d.Count();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Is there a better / more elegant / more accurate way to calculate the entropy of a string?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Efficiency is also good, though we never call this on large strings so it is not a huge concern.&lt;/p&gt;&#xA;" OwnerUserId="136" LastActivityDate="2016-06-07T10:35:09.800" Title="Calculating entropy of a string" Tags="&lt;c#&gt;&lt;strings&gt;" AnswerCount="13" CommentCount="11" FavoriteCount="39" />
  <row Id="869" PostTypeId="2" ParentId="868" CreationDate="2011-02-20T21:26:01.330" Score="65" Body="&lt;pre&gt;&lt;code&gt;public static int Entropy(this string s)&#xA;{&#xA;    HashSet&amp;lt;char&amp;gt; chars = new HashSet&amp;lt;char&amp;gt;(s);&#xA;    return chars.Count;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="265" LastActivityDate="2011-02-20T21:26:01.330" CommentCount="1" />
  <row Id="870" PostTypeId="2" ParentId="868" CreationDate="2011-02-20T21:26:39.127" Score="160" Body="&lt;p&gt;Won't this work too?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;string name = &quot;lltt&quot;;&#xA;int uniqueCharacterCount = name.Distinct().Count();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;will return 2&lt;/p&gt;&#xA;" OwnerUserId="1861" LastActivityDate="2011-02-20T21:26:39.127" CommentCount="2" />
  <row Id="871" PostTypeId="2" ParentId="868" CreationDate="2011-02-20T21:26:48.453" Score="6" Body="&lt;p&gt;You can probably expand this to something like bi-grams and tri-grams to get things like &quot;sdsdsdsdsdsdsdsdsdsd&quot; (although yours would catch this as well). Would a bayesian approach like spam filters do be appropriate for something like what you're trying to achieve?&lt;/p&gt;&#xA;" OwnerUserId="1864" LastActivityDate="2011-02-20T21:26:48.453" CommentCount="1" />
  <row Id="872" PostTypeId="2" ParentId="868" CreationDate="2011-02-20T21:27:57.423" Score="8" Body="&lt;ol&gt;&#xA;&lt;li&gt;I don't understand the point of the bool. You never appear to set it to false, so we can use a &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; instead.&lt;/li&gt;&#xA;&lt;li&gt;Given that you want just unique items, we can just use &lt;code&gt;HashSet&amp;lt;T&amp;gt;&lt;/code&gt; instead.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;Haven't tested, but this method should be equivalent and faster:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/// &amp;lt;summary&amp;gt;&#xA;/// returns the # of unique characters in a string as a rough &#xA;/// measurement of entropy&#xA;/// &amp;lt;/summary&amp;gt;&#xA;public static int Entropy(this string s)&#xA;{&#xA;    var hs = new HashSet&amp;lt;char&amp;gt;();&#xA;    foreach (char c in s)&#xA;        hs.Add(c);&#xA;    return hs.Count();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1866" LastActivityDate="2011-02-20T21:27:57.423" CommentCount="1" />
  <row Id="874" PostTypeId="2" ParentId="868" CreationDate="2011-02-20T21:39:17.327" Score="6" Body="&lt;p&gt;I'm going to assume this is English (seeing as that's all we do).  Wouldn't it be better to keep a &lt;code&gt;HashSet&amp;lt;string&amp;gt;&lt;/code&gt; of stop words (the most common words in English that don't convey meaning), tokenize the string into words, and count the number of words that aren't stop words?&lt;/p&gt;&#xA;" OwnerUserId="161" LastActivityDate="2011-02-20T21:39:17.327" CommentCount="0" />
  <row Id="876" PostTypeId="2" ParentId="866" CreationDate="2011-02-20T21:45:05.340" Score="6" Body="&lt;p&gt;Looks like a lot of extra &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s, as far as I can see. Why do you have &lt;code&gt;.footer&lt;/code&gt; and &lt;code&gt;.footerContent&lt;/code&gt;? Generally a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; without any siblings can be killed.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And that header looks really out of control. Any reason for wrapping the input and search icon in 4 lonely &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You should also avoid this: &lt;code&gt;class=&quot;blueLinkBox&quot;&lt;/code&gt;. Because what happens when you change your design to be orange? Would you then rename all your link boxes, or just try to remember that &lt;code&gt;blueLinkBox&lt;/code&gt; are those orange boxes? Name your classes by their content. &lt;code&gt;.importantLink&lt;/code&gt; or &lt;code&gt;.readMoreLink&lt;/code&gt; might be better names.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You also have some links without any content or &lt;code&gt;title&lt;/code&gt; attribute, which is bad for screen readers, seo and other stuff that can't &quot;see&quot; your website.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It's not a good idea to have multiple &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;s on one page. There are of course exceptions (eg: scrolling-for-navigation), but this page doesn't seem to fit... Because what you're saying now is that &quot;this weeks spotlight&quot; is as important as the main features of your product, which I'm guessing (hoping) is not the case.&lt;/p&gt;&#xA;" OwnerUserId="1873" LastActivityDate="2011-02-20T21:45:05.340" CommentCount="0" />
  <row Id="877" PostTypeId="2" ParentId="866" CreationDate="2011-02-20T21:45:40.597" Score="10" Body="&lt;p&gt;&lt;strong&gt;Some things that come to mind:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Load .css resources before .js resource for faster loading&lt;/li&gt;&#xA;&lt;li&gt;Don't use inline javascript&lt;/li&gt;&#xA;&lt;li&gt;Use an &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; with &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; items for a menu, this is semantically more correct&lt;/li&gt;&#xA;&lt;li&gt;Always use an alt tag on &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Don't use &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; tags, use &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; if we're talking about text. Use css (display:block) if you want to force an element to the next line.&lt;/li&gt;&#xA;&lt;li&gt;Use IDs when there is only one occurence per page, e.g. &lt;code&gt;&amp;lt;div id=&quot;footer&quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="1884" LastEditorUserId="1884" LastEditDate="2011-02-20T21:52:24.853" LastActivityDate="2011-02-20T21:52:24.853" CommentCount="1" />
  <row Id="878" PostTypeId="2" ParentId="868" CreationDate="2011-02-20T21:59:15.373" Score="52" Body="&lt;p&gt;in theory you can measure entropy only from the point of view of a given model. For instance the PI digits are well distributed, but actually is the entropy high? Not at all since the infinite sequence can be compressed into a small program calculating all the digits.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'll not dig further in the math side, since I'm not an expert in the field. But I want to suggest to you a few things that can make a very simple but practical model.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Short strings&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To start, distribution. Comparing characters that are the same is exactly this in some way, but the generalization is to build a frequency table and check the distribution.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Given a string of length N, how many A chars should I expect in average, given my model (that can be the english distribution, or natural distribution)?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But then what about &quot;abcdefg&quot;? No repetition here, but this is not random at all.&#xA;So what you want here is to take also the first derivative, and check the distribution of the first derivative.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;it is as trivial as subtracting the second char from the first, the thrid from the second, so in our example string this turns into: &quot;abcdefg&quot; =&gt; 1,1,1,1,1,1&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Now what aobut &quot;ababab&quot;... ? this will appear to have a better distribution, since the derivative is 1,-1,1,-1,... so what you actually want here is to take the absolute value.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Long strings&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If the string is long enough the no brainer approach is: try to compress it, and calculate the ratio between the compression output and the input.&lt;/p&gt;&#xA;" OwnerUserId="1893" LastEditorUserId="-1" LastEditDate="2016-06-07T10:35:09.800" LastActivityDate="2016-06-07T10:35:09.800" CommentCount="4" />
  <row Id="879" PostTypeId="2" ParentId="868" CreationDate="2011-02-20T21:59:16.470" Score="7" Body="&lt;p&gt;Why not divide the number of unique characters in the given string by the total number of characters in that string. That would give a more accurate measure of entropy.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example, going by your formula, an entropy of 3 for a string of 5 characters should be fine but an entropy of 3 for a string of 8 characters is poor. But, your formula wouldn't be able to differentiate between the two results. Whereas, the above given formula would do so to give a more accurate measure.&lt;/p&gt;&#xA;" OwnerUserId="1895" LastActivityDate="2011-02-20T21:59:16.470" CommentCount="0" />
  <row Id="880" PostTypeId="2" ParentId="868" CreationDate="2011-02-20T22:20:03.140" Score="7" Body="&lt;p&gt;I think antirez is right in suggesting that an entropy approach needs a model. So assuming we're talking English, then examining the string's character distribution and how closely it aligns with &quot;average&quot; will likely show that the text is mostly English. But is this what you want to achieve? Presumable many things are code or pseudo-code. Compression is a great idea, but this'll give the highest entropy for random text - is high entropy bad? Low entropy would indicate lots of repetition, maybe verbosity, but one can write long drawn out sentences with frilly words and transmit little information (e.g. this comment).&lt;/p&gt;&#xA;" OwnerDisplayName="user1903" LastActivityDate="2011-02-20T22:20:03.140" CommentCount="0" />
  <row Id="881" PostTypeId="1" AcceptedAnswerId="887" CreationDate="2011-02-20T22:34:53.247" Score="9" ViewCount="1125" Body="&lt;p&gt;I often run into the problem of producing a javascript array on an ASP.net page from an IEnumerable and I was wondering if there was an easier or clearer way to do it than&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;% bool firstItem = true;&#xA;   foreach(var item in items){&#xA;      if(firstItem)&#xA;      {&#xA;         firstItem = false;&#xA;      }&#xA;      else&#xA;      {%&amp;gt;&#xA;        ,&#xA;      &amp;lt;%}%&amp;gt;&#xA;     '&amp;lt;%:item%&amp;gt;'&#xA;  %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The whole thing is made much more verbose because of IE's inability to handle a hanging comma in an array or object.&lt;/p&gt;&#xA;" OwnerUserId="971" LastActivityDate="2011-02-23T22:53:44.107" Title="Is there a better way to output a javascript array from ASP.net?" Tags="&lt;c#&gt;&lt;javascript&gt;&lt;asp.net&gt;" AnswerCount="3" CommentCount="0" FavoriteCount="1" />
  <row Id="882" PostTypeId="2" ParentId="678" CreationDate="2011-02-20T22:41:29.777" Score="1" Body="&lt;p&gt;You're right, there's a lot of work going on here.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You probably need to be a bit more granular in your use of _init methods. You have navigation, ACL, view configuration and plugin registration all wrapped up in the _initView method. Try breaking these up into their own _init methods. Try to limit each _init method to a single purpose. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Personally, I prefer to limit the Bootstrap to a &quot;spark plug&quot; rolle , and move this kind of logic into Resource Plugins:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://framework.zend.com/manual/en/zend.application.theory-of-operation.html#zend.application.theory-of-operation.resources&quot; rel=&quot;nofollow&quot;&gt;http://framework.zend.com/manual/en/zend.application.theory-of-operation.html#zend.application.theory-of-operation.resources&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I divide those plugins into components that I'm likely to reuse on other projects, and components that are specific to the project under development. I store these in separate &quot;namespaced&quot; folders in the application library. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Externalise parameters (like $standardSystems ) into ini|php|xml files where possible - this will help you swap parameters based on application environment where required (i.e. database connectors).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If I have a lot of sequential logic in a class, I tend to use one function for traffic control duties - but keep the details in separate methods. Currently, I feel that there are too many points of potential failure in the _initView method which will make debugging tricky.&lt;/p&gt;&#xA;" OwnerUserId="1906" LastActivityDate="2011-02-20T22:41:29.777" CommentCount="0" />
  <row Id="883" PostTypeId="2" ParentId="868" CreationDate="2011-02-20T22:56:23.587" Score="4" Body="&lt;p&gt;I would try to count each character and verify that it roughly matches the normal frequency of English letters. It could be more precise (on sufficiently large inputs) than counting the number of letters.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you sort letters by their number of appearences, you should, statistically speaking, get something like &lt;code&gt;ETAONRISHDLFCMUGYPWBVKXJQZ&lt;/code&gt;. You could use the edit distance between this string and the letters sorted by order of appearance to give a rough measurement of entropy.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also, you could possibly catch non-English posts that way. (If you do go this way, I recommend you exclude code fragments from the count...)&lt;/p&gt;&#xA;" OwnerUserId="1911" LastEditorUserId="1911" LastEditDate="2011-02-20T23:02:23.750" LastActivityDate="2011-02-20T23:02:23.750" CommentCount="1" />
  <row Id="884" PostTypeId="2" ParentId="866" CreationDate="2011-02-20T23:14:24.773" Score="16" Body="&lt;p&gt;If you are going with HTML5, I would suggest a few more things:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Lose the type=&quot;text/javascript&quot; from the script tags - you don't need them in HTML5&lt;/li&gt;&#xA;&lt;li&gt;Same goes with type=&quot;text/css&quot; on link tags&lt;/li&gt;&#xA;&lt;li&gt;Keep your self-closing XML syntax consistent - on some tags you have the closing /&gt;, on some you don't (it doesn't matter which way, just make it consistent)&lt;/li&gt;&#xA;&lt;li&gt;Consider placing .js files at the bottom of the document - that way the page can start rendering before it's downloaded them all. Often these are required for post-rendering functions anyway - so do your users a favor and put them at the bottom of the document.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;" OwnerUserId="1914" LastEditorUserId="2063" LastEditDate="2011-02-27T01:49:11.083" LastActivityDate="2011-02-27T01:49:11.083" CommentCount="4" />
  <row Id="885" PostTypeId="2" ParentId="602" CreationDate="2011-02-20T23:16:11.040" Score="1" Body="&lt;p&gt;I'd avoid Singletons - you can limit access by using a dependency injector like YADIF, which makes writing tests against components that rely on the connection easier to create (as well as testing the class itself)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is a tricky question - DBAL (Database Abstraction Layers) is a deceptively short acronym for a very broad (and hotly debated) topic. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you want to keep it light, you can write a Transaction script:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://martinfowler.com/eaaCatalog/transactionScript.html&quot; rel=&quot;nofollow&quot;&gt;http://martinfowler.com/eaaCatalog/transactionScript.html&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Basically an OOP wrapper for your apps most common queries (i.e. &lt;strong&gt;saveCompanyEmployees&lt;/strong&gt;, &lt;strong&gt;deleteEmployee&lt;/strong&gt;, &lt;strong&gt;selectEmployee&lt;/strong&gt; etc.). &lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can take this up a notch and use assemble queries programmatically, in which case your methods may become more like this:&lt;strong&gt;select($table,$id)&lt;/strong&gt;, &lt;strong&gt;selectWhere($table,$condition)&lt;/strong&gt; - this is more of a Data Access Object than a Transaction Script&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you find yourself moving towards a fluent interface, or class representations of tables - then you may well want to consider an ORM of some description (it's not really worth writing your own, although it has the advantage of being more tailored to your app and possibly more lightweight, and of course you learn the hard way - which is often the best way...), although these can be a mixed blessing - and personally I think it's slightly perverse to be so averse to SQL to hide it entirely in this manner.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'd reserve your direct SQL execution as a &quot;back door&quot; method you can resort to when all else fails - since having to write the SQL in your application logic kinda ruins the encapsulation benefits of OOP&lt;/p&gt;&#xA;" OwnerUserId="1906" LastActivityDate="2011-02-20T23:16:11.040" CommentCount="0" />
  <row Id="886" PostTypeId="2" ParentId="868" CreationDate="2011-02-21T00:16:04.513" Score="13" Body="&lt;p&gt;How about actually computing entropy?  Also, it's not clear that character-level entropy will help, but here goes.  It's in my mother tongue C++, but surely you can convert this to Java using Array instead of std::vector.  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;float CharacterEntropy(const char *str) {&#xA;  std::vector&amp;lt;unsigned&amp;gt; counts(256);&#xA;  for (const char *i = str; *i; ++i)&#xA;    ++counts[static_cast&amp;lt;unsigned char&amp;gt;(*i)];&#xA;  unsigned int total = 0;&#xA;  for (unsigned i = 0; i &amp;lt; 256; ++i)&#xA;    total += counts[i];&#xA;  float total_float = static_cast&amp;lt;float&amp;gt;(total);&#xA;  float ret = 0.0;&#xA;  for (unsigned i = 0; i &amp;lt; 256; ++i) {&#xA;    float p = static_cast&amp;lt;float&amp;gt;(counts[i]) / total_float;&#xA;    ret -= p * logf(p);&#xA;  }&#xA;  return p * M_LN2;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerDisplayName="user1922" LastActivityDate="2011-02-21T00:16:04.513" CommentCount="2" />
  <row Id="887" PostTypeId="2" ParentId="881" CreationDate="2011-02-21T01:22:20.473" Score="6" Body="&lt;p&gt;With a bit of help from System.Linq this becomes quite easy.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var array = [ &amp;lt;%= &#xA;    string.Join(&quot;,&quot;, items.Select(v =&amp;gt; &quot;'&quot; + v.ToString() + &quot;'&quot;).ToArray())  &#xA;%&amp;gt; ];&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1795" LastActivityDate="2011-02-21T01:22:20.473" CommentCount="3" />
  <row Id="888" PostTypeId="1" AcceptedAnswerId="893" CreationDate="2011-02-21T01:33:23.120" Score="10" ViewCount="1414" Body="&lt;p&gt;Here's my code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public static void CopyStream(Stream input, Stream output)&#xA;{&#xA;    var size = 8192;&#xA;&#xA;    var inBuffer = new byte[size];&#xA;    var outBuffer = new byte[size];&#xA;&#xA;    IAsyncResult writeAsync = null;&#xA;&#xA;    int count;&#xA;    while (true)&#xA;    {&#xA;        var readAsync = input.BeginRead(inBuffer, 0, size, null, null);&#xA;&#xA;        if (writeAsync != null)&#xA;        {&#xA;            output.EndWrite(writeAsync);&#xA;            writeAsync = null;&#xA;        }&#xA;&#xA;        count = input.EndRead(readAsync);&#xA;        inBuffer.CopyTo(outBuffer, 0);&#xA;&#xA;        if (count &amp;gt; 0)&#xA;        {&#xA;            writeAsync = output.BeginWrite(outBuffer, 0, count, null, null);&#xA;        }&#xA;        else&#xA;        {&#xA;            break;&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This really is my first piece of code using the Begin/End asynchronous model.  I'm just wondering if I have any glaring issues.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Or, are there any improvements that you can see to make this even better?&lt;/p&gt;&#xA;" OwnerUserId="1931" LastEditorUserId="1931" LastEditDate="2011-02-21T18:11:50.117" LastActivityDate="2011-04-30T17:03:18.750" Title="Am I overlooking anything with this asynchronous read/write loop?" Tags="&lt;c#&gt;&lt;asynchronous&gt;" AnswerCount="2" CommentCount="2" />
  <row Id="889" PostTypeId="1" CreationDate="2011-02-21T02:07:04.827" Score="6" ViewCount="11666" Body="&lt;p&gt;I want to create a validation wherein blank entries will not be accepted. So if I call this code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;entry[i].setName(JOptionPane.showInputDialog(&quot;Enter Name: &quot;));&#xA;if the entry is blank, it will not be accepted and an error will prompt:&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;it cannot accept blank entries. Of course it could easily remedied with this code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;String name = JOptionPane.showInputDialog(&quot;Enter Name: &quot;);&#xA; while (name.equals(&quot;&quot;)){&#xA;       JOptionPane.showMessageDialog(null, &quot;Cannot accept blank entries!&quot;);&#xA;       name = JOptionPane.showInputDialog(&quot;Enter Name: &quot;);&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;but if I want to validate 100 fields that I don't want to have a blank entry, then my code will be messy and long.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;How could I do it better? I've read about using getters and setters or the try-catch methods to do the validation but I don't know if this kind of validation is applicable. And I don't know how I can do it. And if it is applicable, would I be violating the Model-View-Controller concept if I included a &lt;code&gt;JOption&lt;/code&gt; message dialog box on my getter and setter methods? What code does programmers usually use in doing blank entries validation?&lt;/p&gt;&#xA;" OwnerUserId="1830" LastEditorUserId="22222" LastEditDate="2015-12-23T21:47:25.503" LastActivityDate="2015-12-23T21:47:25.503" Title="Data validation for preventing blank entries" Tags="&lt;java&gt;&lt;beginner&gt;&lt;validation&gt;" AnswerCount="3" CommentCount="0" FavoriteCount="1" />
  <row Id="890" PostTypeId="2" ParentId="889" CreationDate="2011-02-21T02:19:06.757" Score="5" Body="&lt;p&gt;Extract the input code into a method:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;String getNonBlankInput(String prompt) {&#xA;   String input = JOptionPane.showInputDialog(prompt);&#xA;&#xA;   while (input.equals(&quot;&quot;)) {&#xA;      JOptionPane.showMessageDialog(null, &quot;Cannot accept blank entries!&quot;);&#xA;      input = JOptionPane.showInputDialog(prompt);&#xA;   }&#xA;&#xA;   return input;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Usage:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;String name = getNonBlankInput(&quot;Enter name: &quot;);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="110" LastActivityDate="2011-02-21T02:19:06.757" CommentCount="0" />
  <row Id="892" PostTypeId="1" AcceptedAnswerId="924" CreationDate="2011-02-21T03:17:14.243" Score="10" ViewCount="3130" Body="&lt;p&gt;I have created a &lt;code&gt;HashMap&amp;lt;string,int&amp;gt;&lt;/code&gt; in C++. I would like help determining if it is good or bad.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I have not handled the errors or successes with messages. I have also not implemented the load factor in this map. As of now, once the size limit is reached, no more keys are accepted. I have written this code for just educational purpose only.  I would like to know few things to make it better. &lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;p&gt;How can I implement the load factor concept?  The hash function &lt;code&gt;O/P&lt;/code&gt; is dependent on the previous table size. If we are to change the table size, the old &lt;code&gt;&amp;lt;key, value&amp;gt;&lt;/code&gt; pair will be lost.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;How can I make this generic? i.e. instead of &lt;code&gt;&amp;lt;string,int&amp;gt;&lt;/code&gt;, is it possible to write a template code for both key and the value?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Implementing a hash function will not be a problem, since the hash function can be overloaded. What about the storage? In case of Java, the key and value will be treated as &lt;code&gt;Object&lt;/code&gt;. Is there any option similar to that in C++?&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Any other important (or mandatory) feature this map is missing?&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;string&amp;gt;&#xA;#include &amp;lt;vector&amp;gt;&#xA;&#xA;using namespace std;&#xA;&#xA;typedef struct Node {&#xA;string key;&#xA;int value;&#xA;struct Node * left;&#xA;struct Node * right;&#xA;}doubly;&#xA;&#xA;&#xA;class myHashStrKey{&#xA;&#xA;private:&#xA;int currentCount;&#xA;int hashsize; // Default n = 2000. So 701 slots will be initialized.&#xA;vector&amp;lt;doubly *&amp;gt; table;&#xA;&#xA;//hash function taken from net and modified.&#xA;size_t hash(const std::string data) {&#xA;    size_t h(0);&#xA;    for (int i=0; i&amp;lt;data.length(); i++){&#xA;        h = (h &amp;lt;&amp;lt; (31-i) ^ (h &amp;gt;&amp;gt; i) ^ data[i]);&#xA;    }&#xA;    h = h%hashsize;&#xA;    return h;&#xA;}&#xA;&#xA;//Inserts the key and value. If the key is already present, the value is updated.&#xA;//Checks if the currentCount &amp;lt; (hashsize+1)*3&#xA;void insertNode(doubly ** root, int Value, const string Key){&#xA;&#xA;    if(*root ==NULL){&#xA;        if(myHashStrKey::currentCount &amp;gt;= ((hashsize+1)*3))&#xA;            return;&#xA;        doubly * newNode = new doubly();&#xA;        newNode-&amp;gt;value = Value;&#xA;        newNode-&amp;gt;left = NULL;&#xA;        newNode-&amp;gt;right = NULL;&#xA;        newNode-&amp;gt;key = (Key);&#xA;        *root = newNode;&#xA;        myHashStrKey::currentCount++;&#xA;        return;&#xA;    }&#xA;&#xA;    doubly * prev = NULL;&#xA;    doubly * current = *root;&#xA;    while(current != NULL &amp;amp;&amp;amp; ((current)-&amp;gt;key).compare(Key)){&#xA;        prev = current;&#xA;        current = current-&amp;gt;right;&#xA;    }&#xA;&#xA;    if(current ==NULL){&#xA;        if(myHashStrKey::currentCount &amp;gt;= ((hashsize+1)*3))&#xA;            return;&#xA;        doubly *newNode = new doubly();&#xA;        newNode-&amp;gt;value = Value;&#xA;        newNode-&amp;gt;key = Key;&#xA;        newNode-&amp;gt;left = prev;&#xA;        newNode-&amp;gt;right = NULL;&#xA;        prev-&amp;gt;right = newNode;&#xA;        myHashStrKey::currentCount++;&#xA;    }&#xA;    else{&#xA;        (current)-&amp;gt;value = Value;&#xA;    }&#xA;}&#xA;&#xA;//Return the corresponding value for the given key from the table&#xA;int getNodeValue(doubly * root, string key){&#xA;    while(root != NULL){&#xA;        if(!key.compare(root-&amp;gt;key)){&#xA;            return root-&amp;gt;value;&#xA;        }&#xA;        root = root-&amp;gt;right;&#xA;    }&#xA;    return -1;&#xA;}&#xA;&#xA;//Removes the node from bucket if present and reduces the currentcount&#xA;//else nothing.&#xA;void removeNode(doubly ** root, string Key){&#xA;    doubly * toRemove;&#xA;    doubly * head = *root;&#xA;&#xA;    //Check to see if the first element is the target.&#xA;    if((head != NULL) &amp;amp;&amp;amp;!(head-&amp;gt;key).compare(Key)){&#xA;        toRemove = head;&#xA;        *root = head-&amp;gt;right;&#xA;        if(head-&amp;gt;right != NULL)&#xA;            head-&amp;gt;right-&amp;gt;left = NULL;&#xA;        delete toRemove;&#xA;        myHashStrKey::currentCount--;&#xA;        return;&#xA;    }&#xA;    //First element is not the target.&#xA;    else{&#xA;        if(head == NULL)&#xA;            return;&#xA;&#xA;        while((head != NULL) &amp;amp;&amp;amp;(head-&amp;gt;key).compare(Key)){&#xA;            head = head-&amp;gt;right;&#xA;        }&#xA;        //Element not present. return&#xA;        if(head == NULL)&#xA;            return;&#xA;&#xA;        //Element found. Remove the element and decrement currentCount.&#xA;        toRemove = head;&#xA;&#xA;        head-&amp;gt;left-&amp;gt;right = head-&amp;gt;right;&#xA;        if(head-&amp;gt;right !=NULL)&#xA;            head-&amp;gt;right-&amp;gt;left = head-&amp;gt;left;&#xA;&#xA;        myHashStrKey::currentCount--;&#xA;        delete toRemove;&#xA;        return;&#xA;    }&#xA;}&#xA;&#xA;public:&#xA;//Constructor for default size.&#xA;//I am considering that hash table size to have default value of 701.&#xA;//The average elements per bucket is 3.&#xA;//THe total allowed elements will be 701*3 i.e. tablesize*3.&#xA;myHashStrKey(){&#xA;    myHashStrKey::currentCount=0;&#xA;    myHashStrKey::hashsize = 701;&#xA;    myHashStrKey::table.insert(myHashStrKey::table.begin(),hashsize,((doubly *)NULL));&#xA;}&#xA;&#xA;//Constructor for the user given size&#xA;//Hashsize is calculated to be size/3 +1 (average elements per bucket is 3)&#xA;myHashStrKey(int size){&#xA;    myHashStrKey::currentCount=0;&#xA;    myHashStrKey::hashsize = size/3 +1;&#xA;    myHashStrKey::table.insert(myHashStrKey::table.begin(),hashsize,((doubly *)NULL));&#xA;}&#xA;&#xA;&#xA;//Adds entry to the HashMap&#xA;void addKeyValue(const string &amp;amp;key,int value ){&#xA;    size_t keyHash = hash(key);&#xA;    insertNode(&amp;amp;(table[keyHash]), value, key);&#xA;}&#xA;&#xA;//Gets the corresponding value for the key if present else nothing&#xA;int getValue(const string &amp;amp;key ){&#xA;    size_t keyHash = hash(key);&#xA;    int result = getNodeValue(table[keyHash],key);&#xA;    return result;&#xA;}&#xA;&#xA;//Deletes the key if present else nothing.&#xA;void deleteKey(const string &amp;amp;key){&#xA;    size_t keyHash = hash(key);&#xA;    removeNode(&amp;amp;(table[keyHash]),key);&#xA;}&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1943" LastEditorUserId="59481" LastEditDate="2015-12-14T01:57:51.047" LastActivityDate="2015-12-14T01:57:51.047" Title="Improving HashMap in C++" Tags="&lt;c++&gt;&lt;hash-table&gt;" AnswerCount="2" CommentCount="1" FavoriteCount="1" />
  <row Id="893" PostTypeId="2" ParentId="888" CreationDate="2011-02-21T03:27:21.547" Score="7" Body="&lt;p&gt;It's not entirely clear what your goals are with this bit of code.  Three possibilities that come to mind:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;CopyStream should be asynchronous.  As written, it does not meet this goal since it blocks on the results of EndRead and EndWrite.  If this is your goal, you need to use callback methods and not call the End methods until your callbacks have been called.  You also need to modify CopyStream's signature to return IAsyncResult and take a callback and state as parameters.&lt;/li&gt;&#xA;&lt;li&gt;CopyStream should hide the details of the underlying asynchronous calls from its users, but is itself synchronous.  Your code accomplishes this goal, but there are a few things that could use cleaning up.&lt;/li&gt;&#xA;&lt;li&gt;CopyStream should hide the details of the underlying asynchronous calls, and also maximize performance by making sure the writer is kept busy at all times and never sitting around idle waiting for reads, to the extent possible.  It seems like this may have been your goal due to the attempt to read/write in parallel, but by only allowing a single outstanding read or write, you're not really getting much out of it.  In order to implement this correctly, you need to use a reader thread and a writer thread, with a queue of items to be written.  The reader reads as fast as it can and inserts chunks of data into the queue, which the writer then writes as fast as it can or as fast as they show up.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;EDIT:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As an example of how to write this code using a queue, see the following.  Note that I didn't need to spin up a thread because I can just make use of the EndRead/EndWrite callbacks and have the original thread wait for a signal to be raised.  Also, this is a lightly-tested first draft, so beware that there could be bugs lurking in there.  This type of code is complex and difficult to get right, and should only be used when really necessary for valid perf reasons.  If the complexity is not justified, I would just use the synchronous Read and Write methods to simplify the code as much as possible.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public static void CopyStream(Stream input, Stream output)&#xA;{&#xA;    AutoResetEvent completed = new AutoResetEvent(false);&#xA;    BeginRead(new CopyStreamState(completed, input, output));&#xA;&#xA;    completed.WaitOne();&#xA;}&#xA;&#xA;private static void BeginRead(CopyStreamState state)&#xA;{&#xA;    const int bufferSize = 8192;&#xA;&#xA;    state.InputBuffer = new byte[bufferSize];&#xA;    state.Input.BeginRead(state.InputBuffer, 0, bufferSize, ReadCallback, state);&#xA;}&#xA;&#xA;private static void ReadCallback(IAsyncResult ar)&#xA;{&#xA;    CopyStreamState state = (CopyStreamState)ar.AsyncState;&#xA;&#xA;    int bytesRead = state.Input.EndRead(ar);&#xA;    if (bytesRead &amp;gt; 0)&#xA;    {&#xA;        byte[] dataToWrite = state.InputBuffer;&#xA;&#xA;        if (bytesRead &amp;lt; state.InputBuffer.Length)&#xA;        {&#xA;            dataToWrite = new byte[bytesRead];&#xA;            Array.Copy(state.InputBuffer, dataToWrite, bytesRead);&#xA;        }&#xA;&#xA;        EnqueueWriteData(state, dataToWrite);&#xA;        BeginRead(state);&#xA;    }&#xA;    else&#xA;    {&#xA;        state.FinishedReading = true;&#xA;    }&#xA;&#xA;    BeginWriteOrComplete(state);&#xA;}&#xA;&#xA;private static void EnqueueWriteData(CopyStreamState state, byte[] data)&#xA;{&#xA;    lock (state)&#xA;    {&#xA;        state.WriteQueue.Enqueue(data);&#xA;    }&#xA;}&#xA;&#xA;private static void BeginWriteOrComplete(CopyStreamState state)&#xA;{&#xA;    lock (state)&#xA;    {&#xA;        if (!state.WriteInProgress)&#xA;        {&#xA;            if (state.WriteQueue.Count &amp;gt; 0)&#xA;            {&#xA;                byte[] outputBuffer = state.WriteQueue.Dequeue();&#xA;                state.WriteInProgress = true;&#xA;                state.Output.BeginWrite(outputBuffer, 0, outputBuffer.Length, WriteCallback, state);&#xA;            }&#xA;            else if (state.FinishedReading)&#xA;            {&#xA;                state.Completed.Set();&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;private static void WriteCallback(IAsyncResult ar)&#xA;{&#xA;    CopyStreamState state = (CopyStreamState)ar.AsyncState;&#xA;    state.Output.EndWrite(ar);&#xA;&#xA;    lock (state)&#xA;    {&#xA;        state.WriteInProgress = false;&#xA;        BeginWriteOrComplete(state);&#xA;    }&#xA;}&#xA;&#xA;private class CopyStreamState&#xA;{&#xA;    public CopyStreamState(&#xA;        AutoResetEvent completed, &#xA;        Stream input, &#xA;        Stream output)&#xA;    {&#xA;        this.Completed = completed;&#xA;        this.Input = input;&#xA;        this.Output = output;&#xA;        this.WriteQueue = new Queue&amp;lt;byte[]&amp;gt;();&#xA;    }&#xA;&#xA;    public AutoResetEvent Completed { get; private set; }&#xA;    public Stream Input { get; private set; }&#xA;    public Stream Output { get; private set; }&#xA;    public Queue&amp;lt;byte[]&amp;gt; WriteQueue { get; private set; }&#xA;&#xA;    public byte[] InputBuffer { get; set; }&#xA;    public bool FinishedReading { get; set; }&#xA;    public bool WriteInProgress { get; set; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1142" LastEditorUserId="1142" LastEditDate="2011-04-30T17:03:18.750" LastActivityDate="2011-04-30T17:03:18.750" CommentCount="9" />
  <row Id="894" PostTypeId="2" ParentId="889" CreationDate="2011-02-21T09:49:20.653" Score="2" Body="&lt;p&gt;Please change the validating condition like this.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;while (&quot;&quot;.equals(input.trim())) {&#xA;      JOptionPane.showMessageDialog(null, &quot;Cannot accept blank entries!&quot;);&#xA;      input = JOptionPane.showInputDialog(prompt);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This type of validation may also check only blanks as input &amp;amp; any other value also.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;1. String name = JOptionPane.showInputDialog(&quot;Enter Name: &quot;); contains spaces.&#xA;2. String name = JOptionPane.showInputDialog(&quot;Enter Name: &quot;); contains null.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1433" LastActivityDate="2011-02-21T09:49:20.653" CommentCount="0" />
  <row Id="895" PostTypeId="2" ParentId="888" CreationDate="2011-02-21T10:27:22.887" Score="1" Body="&lt;p&gt;Just a quick note: If I'm following your code correctly, I just can't see how the last &lt;code&gt;if (writeAsync != null)&lt;/code&gt; could ever be true.&lt;/p&gt;&#xA;" OwnerUserId="1974" LastActivityDate="2011-02-21T10:27:22.887" CommentCount="1" />
  <row Id="896" PostTypeId="2" ParentId="772" CreationDate="2011-02-21T11:22:36.933" Score="0" Body="&lt;p&gt;I really like &lt;a href=&quot;http://codereview.stackexchange.com/questions/772/how-to-break-up-long-lines-of-code-example-line-results-of-method-call-added-t/807#807&quot;&gt;Mongus Pong's answer&lt;/a&gt;, but I have a couple of things to add.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The name of the extracted method should reflect the actual meaning of the &lt;em&gt;&lt;a href=&quot;http://stackoverflow.com/q/47882/11808&quot;&gt;magic numbers&lt;/a&gt;&lt;/em&gt; (-7 and -85) inside the method.&lt;/li&gt;&#xA;&lt;li&gt;The magic numbers themselves should probably be turned into named constants, for added clarity.&lt;/li&gt;&#xA;&lt;li&gt;The extracted method should be put where it belongs. I would suggest using the &lt;a href=&quot;http://martinfowler.com/eaaCatalog/repository.html&quot; rel=&quot;nofollow&quot;&gt;repository pattern&lt;/a&gt;, but in this specific case it would probably be a good idea to put it next to the &lt;code&gt;Fetch&lt;/code&gt; method, inside the &lt;code&gt;OrderItem&lt;/code&gt; class. (The &lt;code&gt;OrderItem&lt;/code&gt; class looks like a domain entity to me, so this would break &lt;a href=&quot;http://en.wikipedia.org/wiki/Single_responsibility_principle&quot; rel=&quot;nofollow&quot;&gt;SRP&lt;/a&gt;, but I digress.)&lt;/li&gt;&#xA;&lt;li&gt;If all usages of &lt;code&gt;Fetch&lt;/code&gt; could be replaced by methods like this, &lt;code&gt;Fetch&lt;/code&gt; could eventually be made non-public.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Something like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;shippedItems.AddRange(OrderItem.FetchLastWeeksOrderItems(MARKET, serverTime));&#xA;&#xA;public class OrderItem&#xA;{&#xA;    public static IEnumerable&amp;lt;OrderItem&amp;gt; FetchLastWeeksOrderItems(&#xA;        string market, DateTime serverTime)&#xA;    {&#xA;        return OrderItem.Fetch(&#xA;            market: market,&#xA;            shipConfirmState: ORDERITEMSHIPCONFIRMSTATE.NONE,&#xA;            orderPlacedAfter: serverTime.AddDays(-7),&#xA;            orderPlacedBefore: serverTime.AddHours(-85));&#xA;    }&#xA;&#xA;    private static IEnumerable&amp;lt;OrderItem&amp;gt; Fetch( ... )&#xA;    {&#xA;        ...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1974" LastActivityDate="2011-02-21T11:22:36.933" CommentCount="0" />
  <row Id="897" PostTypeId="2" ParentId="802" CreationDate="2011-02-21T12:49:54.133" Score="0" Body="&lt;p&gt;You're using a decent hash, with a unique salt per user. So it's pretty solid. You might consider adding some password stretching, but it is by no means necessary.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Step 1: Hash the password and salt.&#xA;Step 2: Add the salt to the hash, and rehash&#xA;Step 3: Repeat step 2 x number of times.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1988" LastActivityDate="2011-02-21T12:49:54.133" CommentCount="1" />
  <row Id="898" PostTypeId="2" ParentId="562" CreationDate="2011-02-21T13:22:24.657" Score="2" Body="&lt;p&gt;It is a matter of style and taste but I'd rather go with&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public long getRunTime() {&#xA;   if(processRunning)&#xA;     return System.currentTimeMillis() - time; &#xA;&#xA;     return time;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I just think this reads easier, and its easier to comment this. Now set me on fire for multiple return statements :D&lt;/p&gt;&#xA;" OwnerUserId="1992" LastActivityDate="2011-02-21T13:22:24.657" CommentCount="2" />
  <row Id="899" PostTypeId="1" AcceptedAnswerId="907" CreationDate="2011-02-21T15:57:50.980" Score="11" ViewCount="678" Body="&lt;p&gt;I have this piece of code I would like some help with. I'm running a lengthy process that I want to interrupt at any time. The thing is, as you can see in the code, I have &lt;code&gt;if(stop)&lt;/code&gt; everywhere, also in the methods inside the &lt;code&gt;for&lt;/code&gt; (since they have &lt;code&gt;for&lt;/code&gt; loops also).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;stop&lt;/code&gt; is a member variable of the class, and the &lt;code&gt;Stop()&lt;/code&gt; method is called from the UI from a different thread.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I don't think making it multithreading would be a good option since would be more complex to keep state and to communicate between threads.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Can you think of a better way to solve this, making the code cleaner?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public void Start()&#xA;{&#xA;    for(int i = 0; i &amp;lt; Length; i++)&#xA;    {&#xA;        if(stop)&#xA;            return;&#xA;&#xA;        LengthyMethodA();&#xA;&#xA;        if(stop)&#xA;            return;&#xA;&#xA;        LengthyMethodB();&#xA;&#xA;        if(stop)&#xA;            return;&#xA;&#xA;        LengthyMethodC();&#xA;    }&#xA;}&#xA;&#xA;public void Stop()&#xA;{&#xA;    stop = true;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1998" LastEditorUserId="22222" LastEditDate="2016-08-06T02:35:35.203" LastActivityDate="2016-08-06T02:35:35.203" Title="Interrupt lengthy for loops" Tags="&lt;c#&gt;" AnswerCount="4" CommentCount="1" />
  <row Id="900" PostTypeId="1" AcceptedAnswerId="903" CreationDate="2011-02-21T16:25:14.313" Score="7" ViewCount="365" Body="&lt;pre&gt;&lt;code&gt;public static class StringHelpers&#xA;{&#xA;    public static string CapitalizeEachWord(this string sentence)&#xA;    {&#xA;        CultureInfo cultureInfo = Thread.CurrentThread.CurrentCulture;&#xA;        TextInfo textInfo = cultureInfo.TextInfo;&#xA;&#xA;        if (String.IsNullOrEmpty(sentence))&#xA;        {&#xA;            return String.Empty;&#xA;        }&#xA;&#xA;        return textInfo.ToTitleCase(sentence);&#xA;    }&#xA;&#xA;    public static string CapitalizeFirstWord(this string sentence)&#xA;    {&#xA;        if (String.IsNullOrEmpty(sentence))&#xA;        {&#xA;            return String.Empty;&#xA;        }&#xA;&#xA;        var words = sentence.Split();&#xA;        StringBuilder resultBuilder = new StringBuilder();&#xA;&#xA;        var letters = words[0].ToCharArray();&#xA;        List&amp;lt;string&amp;gt; lettersHolder = new List&amp;lt;string&amp;gt;();&#xA;        lettersHolder.Add(letters[0].ToString().ToUpper());&#xA;        for (int i = 1; i &amp;lt; letters.Length; i++)&#xA;        {&#xA;            lettersHolder.Add(letters[i].ToString().ToLower());&#xA;        }&#xA;&#xA;        foreach (var letter in lettersHolder)&#xA;        {&#xA;            resultBuilder.Append(letter);                   &#xA;        }&#xA;&#xA;        resultBuilder.Append(&quot; &quot;);&#xA;&#xA;        for (int i = 1; i &amp;lt; words.Length; i++)&#xA;        {&#xA;            resultBuilder.Append(words[i].ToLower());&#xA;            resultBuilder.Append(&quot; &quot;);&#xA;        }&#xA;&#xA;        return resultBuilder.ToString();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The first method, is supposed to correctly capitalize each word in a sentence. I don't think there's much room for improvement in that one.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The second method, seems a little confusing and even after I've written it and tested it, I cannot seem to fully put what it's doing into my buffer. :) That's a sign of code smell.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If I &lt;em&gt;kinda&lt;/em&gt; get it now, what will happen down the line when I have to change it or something. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Thank you for the feedback!&lt;/p&gt;&#xA;" OwnerDisplayName="Sergio Tapia" LastActivityDate="2013-04-12T10:05:45.990" Title="Can you review my two extension methods?" Tags="&lt;c#&gt;&lt;strings&gt;&lt;extension-methods&gt;" AnswerCount="3" CommentCount="1" FavoriteCount="1" />
  <row Id="901" PostTypeId="2" ParentId="899" CreationDate="2011-02-21T16:31:11.877" Score="2" Body="&lt;p&gt;Any answer given will be completely conditional. Can you be sure that stopping after step B will not have dire consequences related to the fact that step A was completed successfully? I recommend you break each section into work that must be completed with a chance to terminate before entering. Then I recommend you switch to &lt;code&gt;AutoResetEvent&lt;/code&gt; which is thread safe. Unfortunately this really won't lead to less code but it will make your code more robust. &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private readonly AutoResetEvent _stopRunning = new AutoResetEvent(false);&#xA;&#xA;public void Start()&#xA;{&#xA;    for(int i = 0; i &amp;lt; Length; i++)&#xA;    {    &#xA;        if (_stopRunning.WaitOne(1)) return;&#xA;        WorkThatMustRunToCompletion();&#xA;    }&#xA;}&#xA;&#xA;public void Stop()&#xA;{&#xA;    _stopRunning.Set();    &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1795" LastActivityDate="2011-02-21T16:31:11.877" CommentCount="1" />
  <row Id="902" PostTypeId="1" AcceptedAnswerId="905" CreationDate="2011-02-21T16:54:18.110" Score="8" ViewCount="5526" Body="&lt;p&gt;I wrote as an exercise in Test-Driven Development a piece of Python code that contains two functions:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;roman2dec(roman)&lt;/code&gt;, that converts a roman number (string) into a decimal number (int)&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;dec2roman(dec)&lt;/code&gt;, that converts a decimal number (int) into a roman number (string)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;I'd like to read your comments on this code, if there are bad practices, if you would sign it for shipping or if you'd change anything.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import re&#xA;import math&#xA;&#xA;# Regular expression used to validate and parse Roman numbers&#xA;roman_re = re.compile(&quot;&quot;&quot;^&#xA;   ([M]{0,9})   # thousands&#xA;   ([DCM]*)     # hundreds&#xA;   ([XLC]*)     # tens&#xA;   ([IVX]*)     # units&#xA;   $&quot;&quot;&quot;, re.VERBOSE)&#xA;&#xA;# This array contains valid groups of digits and encodes their values.&#xA;# The first row is for units, the second for tens and the third for&#xA;# hundreds. For example, the sixth element of the tens row yields the&#xA;# value 50, as the first is 0.&#xA;d2r_table = [&#xA;    ['', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX'],&#xA;    ['', 'X', 'XX', 'XXX', 'XL', 'L', 'LX', 'LXX', 'LXXX', 'XC'],&#xA;    ['', 'C', 'CC', 'CCC', 'CD', 'D', 'DC', 'DCC', 'DCCC', 'CM']]&#xA;&#xA;&#xA;def roman2dec(roman):&#xA;    &quot;&quot;&quot;Converts a roman number, encoded in a string, to a decimal number.&quot;&quot;&quot;&#xA;    roman = roman.upper()&#xA;    match = roman_re.match(roman)&#xA;&#xA;    if not match:&#xA;        raise ValueError&#xA;&#xA;    thousands, hundreds, tens, units = match.groups()&#xA;    result = 1000 * len(thousands)&#xA;    result += d2r_table[2].index(hundreds) * 100&#xA;    result += d2r_table[1].index(tens) * 10&#xA;    result += d2r_table[0].index(units)&#xA;&#xA;    return result&#xA;&#xA;&#xA;def dec2roman(dec):&#xA;&quot;&quot;&quot;Converts a positive decimal integer to a roman number.&quot;&quot;&quot;&#xA;    if dec == 0:&#xA;        return ''&#xA;&#xA;    digit = 0&#xA;    rem = dec&#xA;    result = ''&#xA;&#xA;    # Length in digits of the number dec&#xA;    dec_len = int(math.ceil(math.log10(dec)) + 1)&#xA;&#xA;    # Scan the number digit-by-digit, starting from the MSD (most-significant&#xA;    # digit)&#xA;    while dec_len &amp;gt; 0:&#xA;        # Let's take the current digit&#xA;        factor = 10 ** (dec_len - 1)&#xA;        digit = rem / factor&#xA;&#xA;        # And remove it from the number&#xA;        rem = rem - digit * factor&#xA;&#xA;        if dec_len &amp;gt;= 4:&#xA;            # Thousands&#xA;            result = result + digit * 'M'&#xA;        else:&#xA;            # Look in the look-up table&#xA;            result = result + d2r_table[dec_len - 1][digit]&#xA;&#xA;        dec_len -= 1&#xA;&#xA;    return result&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt;: Here is the test suite for dec2roman:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class DecToRoman(unittest.TestCase):&#xA;    def testZeroIsEmpty(self):&#xA;        self.checkString(0, &quot;&quot;)&#xA;&#xA;    def testSingleDigits(self):&#xA;        self.checkString(1, &quot;I&quot;)&#xA;        self.checkString(10, &quot;X&quot;)&#xA;        self.checkString(50, &quot;L&quot;)&#xA;        self.checkString(100, &quot;C&quot;)&#xA;        self.checkString(500, &quot;D&quot;)&#xA;        self.checkString(1000, &quot;M&quot;)&#xA;&#xA;    def testSimpleRepeats(self):&#xA;        self.checkString(1, &quot;I&quot;)&#xA;        self.checkString(2, &quot;II&quot;)&#xA;        self.checkString(3, &quot;III&quot;)&#xA;        self.checkString(10, &quot;X&quot;)&#xA;        self.checkString(20, &quot;XX&quot;)&#xA;        self.checkString(30, &quot;XXX&quot;)&#xA;&#xA;    def testSubtraction(self):&#xA;        self.checkString(4, &quot;IV&quot;)&#xA;        self.checkString(9, &quot;IX&quot;)&#xA;        self.checkString(40, &quot;XL&quot;)&#xA;        self.checkString(90, &quot;XC&quot;)&#xA;&#xA;    def testOther(self):&#xA;        self.checkString(89, &quot;LXXXIX&quot;)&#xA;        self.checkString(145, &quot;CXLV&quot;)&#xA;        self.checkString(691, &quot;DCXCI&quot;)&#xA;        self.checkString(1983, &quot;MCMLXXXIII&quot;)&#xA;        self.checkString(2412, &quot;MMCDXII&quot;)&#xA;        self.checkString(3309, &quot;MMMCCCIX&quot;)&#xA;&#xA;    def checkString(self, decimal, expected_string):&#xA;        self.assertEqual(expected_string, new_dec2roman(decimal))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1445" LastEditorUserId="1445" LastEditDate="2011-02-22T09:27:03.990" LastActivityDate="2011-02-22T12:29:05.363" Title="Conversion from/to roman numbers" Tags="&lt;python&gt;&lt;unit-testing&gt;&lt;converting&gt;" AnswerCount="1" CommentCount="2" FavoriteCount="1" />
  <row Id="903" PostTypeId="2" ParentId="900" CreationDate="2011-02-21T17:12:10.640" Score="8" Body="&lt;p&gt;You're right, your second method is way too complicated. It also doesn't handle the case where the string starts with a space (in which case &lt;code&gt;words[0]&lt;/code&gt; will be the empty string and &lt;code&gt;letters[0]&lt;/code&gt; will be out of bounds). Since all your method seems to be doing is to capitalize the first letter of the string and lower case everything else, why not just do that?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public static string CapitalizeFirstWord(this string sentence)&#xA;{&#xA;    if (String.IsNullOrEmpty(sentence))&#xA;    {&#xA;        return String.Empty;&#xA;    }&#xA;&#xA;    String firstLetter = sentence.Substring(0,1);&#xA;    String rest = sentence.Substring(1);&#xA;    return firstLetter.ToUpper() + rest.ToLower();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="128" LastActivityDate="2011-02-21T17:12:10.640" CommentCount="1" />
  <row Id="904" PostTypeId="2" ParentId="899" CreationDate="2011-02-21T17:59:42.873" Score="4" Body="&lt;p&gt;You say that &lt;code&gt;Start&lt;/code&gt; is running in a thread other than the UI thread and that the &lt;code&gt;Stop&lt;/code&gt; method is called from the UI thread.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;That being the case, why not just call &lt;code&gt;Abort&lt;/code&gt; on the thread Start is running in? This throws a &lt;code&gt;ThreadAbortException&lt;/code&gt; in the Start thread and causes your code to fall through as you intend.&lt;/p&gt;&#xA;" OwnerUserId="1416" LastActivityDate="2011-02-21T17:59:42.873" CommentCount="4" />
  <row Id="905" PostTypeId="2" ParentId="902" CreationDate="2011-02-21T18:49:04.853" Score="10" Body="&lt;p&gt;First of all you should document the fact that your code does not work with numbers above 9999.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Then I think your code will become a bit simpler, if you add a fourth row to your &lt;code&gt;d2r_table&lt;/code&gt; for the thousands. To avoid repetition you can use a list comprehension:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;d2r_table = [&#xA;    ['', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX'],&#xA;    ['', 'X', 'XX', 'XXX', 'XL', 'L', 'LX', 'LXX', 'LXXX', 'XC'],&#xA;    ['', 'C', 'CC', 'CCC', 'CD', 'D', 'DC', 'DCC', 'DCCC', 'CM'],&#xA;    ['M' * i for i in xrange(0,10) ]]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This allows you to not treat the thousands as a special case. So instead of:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;thousands, hundreds, tens, units = match.groups()&#xA;result = 1000 * len(thousands)&#xA;result += d2r_table[2].index(hundreds) * 100&#xA;result += d2r_table[1].index(tens) * 10&#xA;result += d2r_table[0].index(units)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;you can write:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;thousands, hundreds, tens, units = match.groups()&#xA;result =  d2r_table[3].index(thousands) * 1000&#xA;result += d2r_table[2].index(hundreds) * 100&#xA;result += d2r_table[1].index(tens) * 10&#xA;result += d2r_table[0].index(units)&#xA;return result&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now you can easily notice the common pattern here: For each number from 0 to 3 you're taking the &lt;code&gt;i&lt;/code&gt;th row of &lt;code&gt;d2r_table&lt;/code&gt;, calling &lt;code&gt;index&lt;/code&gt; on it with the &lt;code&gt;3-i&lt;/code&gt;th element of &lt;code&gt;groups&lt;/code&gt; as the argument, then multiplying it with &lt;code&gt;10**i&lt;/code&gt; and lastly summing the results. You can abstract the common pattern like this if you want:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def value_for_group(i):&#xA;    group = match.groups[3-i]&#xA;    return d2r_table[i].index(group) * 10**i&#xA;&#xA;return sum(value_for_group(i) for i in xrange(0,4))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You can also replace the magic numbers 3 and 4, with something more meaningful:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;num_rows = len(d2r_table)&#xA;&#xA;def value_for_group(i):&#xA;    group = match.groups[num_rows - 1 - i]&#xA;    return d2r_table[i].index(group) * 10**i&#xA;&#xA;return sum(value_for_group(i) for i in xrange(0, num_rows))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This way your code will work without modification if you ever change &lt;code&gt;d2r_table&lt;/code&gt; to account for extended roman numerals.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;In your &lt;code&gt;dec2roman&lt;/code&gt; function you're using integer arithmetic to iterate over the digits of the number. I think it'd be easier and clearer to just convert the number to a string and iterate over the digits with a for loop. By reversing the &lt;code&gt;d2r_table&lt;/code&gt;, you can use &lt;code&gt;zip&lt;/code&gt; to iterate over the table and the digits in parallel without any index based loops. This way your &lt;code&gt;dec2roman&lt;/code&gt; function would look like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;result = ''&#xA;# Make digits four digits long so it has the same number of digits&#xA;# as d2r_table has rows, then convert each digit to an int&#xA;digits = [int(digit) for digit in &quot;%04d&quot; % dec]&#xA;&#xA;for digit, d2r_row in zip(digits, reversed(d2r_table)):&#xA;    result += d2r_row[ digit ]&#xA;&#xA;return result&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You can also use &lt;code&gt;join&lt;/code&gt; with a generator expression instead of updating &lt;code&gt;result&lt;/code&gt; imperatively:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;digits = [int(digit) for digit in &quot;%04d&quot; % dec]&#xA;table = reversed(d2r_table)&#xA;return ''.join( d2r_row[ digit ] for digit, d2r_row in zip(digits, table) )&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Again you might also want to replace the 4 in &lt;code&gt;%04d&lt;/code&gt; with &lt;code&gt;len(d2r_table)&lt;/code&gt;, so your code will automatically adapt to a longer &lt;code&gt;d2r_table&lt;/code&gt;.&lt;/p&gt;&#xA;" OwnerUserId="128" LastEditorUserId="128" LastEditDate="2011-02-22T12:29:05.363" LastActivityDate="2011-02-22T12:29:05.363" CommentCount="0" />
  <row Id="906" PostTypeId="1" AcceptedAnswerId="911" CreationDate="2011-02-21T20:25:26.630" Score="9" ViewCount="355" Body="&lt;p&gt;I've gone back and forth a few times recently on my Perl coding style when it comes to module subroutines. If you have an object and you want to call the method &lt;code&gt;bar&lt;/code&gt; with no arguments, then you can either do &lt;code&gt;$foo-&amp;gt;bar()&lt;/code&gt; or &lt;code&gt;$foo-&amp;gt;bar&lt;/code&gt;. At one point I started favoring the latter because I felt it cleaned up the code and made it more readable. However, sometimes I question whether it would be better to be fully explicit, especially considering the possibility that someone else will have to look at my code later — someone who almost certainly will &lt;em&gt;not&lt;/em&gt; be an expert Perl programmer.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example, consider this block of code. For the method calls that require arguments (&lt;code&gt;get_tag_values&lt;/code&gt; and &lt;code&gt;has_tag&lt;/code&gt;), there is no question about the parentheses. But what about &lt;code&gt;next_feature&lt;/code&gt; and &lt;code&gt;primary_tag&lt;/code&gt;? Is the readability I gain from dropping the parens worth losing the explicit syntax? Is one better than the other for long term maintainability? Or is this simply a subjective judgment call?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;while( my $feature = $gff3-&amp;gt;next_feature )&#xA;{&#xA;  if($type eq &quot;cds&quot;)&#xA;  {&#xA;    if( $feature-&amp;gt;primary_tag eq &quot;mRNA&quot; )&#xA;    {&#xA;      my($gene_id) = $feature-&amp;gt;get_tag_values(&quot;Parent&quot;);&#xA;      my($mRNA_id) = $feature-&amp;gt;get_tag_values(&quot;ID&quot;);&#xA;      next unless( $list eq '' or $genes_to_extract-&amp;gt;{$gene_id} );&#xA;      $subseq_locations-&amp;gt;{ $feature-&amp;gt;seq_id }-&amp;gt;{ $mRNA_id } = Bio::Location::Split-&amp;gt;new();&#xA;    }&#xA;    elsif( $feature-&amp;gt;primary_tag eq &quot;CDS&quot; )&#xA;    {&#xA;      my($mRNA_id) = $feature-&amp;gt;get_tag_values(&quot;Parent&quot;);&#xA;      if( $subseq_locations-&amp;gt;{ $feature-&amp;gt;seq_id }-&amp;gt;{ $mRNA_id } )&#xA;      {&#xA;        $subseq_locations-&amp;gt;{ $feature-&amp;gt;seq_id }-&amp;gt;{ $mRNA_id }-&amp;gt;add_sub_Location( $feature-&amp;gt;location );&#xA;      }&#xA;    }&#xA;  }&#xA;  else&#xA;  {&#xA;    if( $feature-&amp;gt;primary_tag eq $type )&#xA;    {&#xA;      my $feat_id;&#xA;      if( $list ne '')&#xA;      {&#xA;        ($feat_id) = $feature-&amp;gt;get_tag_values(&quot;ID&quot;) if($feature-&amp;gt;has_tag(&quot;ID&quot;));&#xA;        next unless( $feature-&amp;gt;has_tag(&quot;ID&quot;) and $genes_to_extract-&amp;gt;{$feat_id} );&#xA;      }&#xA;      $subseq_locations-&amp;gt;{ $feature-&amp;gt;seq_id }-&amp;gt;{ $feat_id } = Bio::Location::Split-&amp;gt;new();&#xA;      $subseq_locations-&amp;gt;{ $feature-&amp;gt;seq_id }-&amp;gt;{ $feat_id }-&amp;gt;add_sub_Location( $feature-&amp;gt;location );&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="45" LastEditorUserId="9357" LastEditDate="2015-09-29T19:26:14.393" LastActivityDate="2015-09-29T19:26:14.393" Title="Analyzing genetic tags" Tags="&lt;perl&gt;&lt;bioinformatics&gt;" AnswerCount="6" CommentCount="1" FavoriteCount="0" />
  <row Id="907" PostTypeId="2" ParentId="899" CreationDate="2011-02-21T21:04:13.040" Score="8" Body="&lt;p&gt;You could always set up a list of Actions that need to be worked on, and then loop through them checking for Stop each time.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Something like :&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;List&amp;lt;Action&amp;gt; actions = new List&amp;lt;Action&amp;gt; {&#xA;  () =&amp;gt; LengthyMethodA(),&#xA;  () =&amp;gt; LengthyMethodB(),&#xA;  () =&amp;gt; LengthyMethodC() };&#xA;&#xA;  for(int i = 0; i &amp;lt; Length; i++)&#xA;  {    &#xA;    foreach (Action action in actions)&#xA;    {&#xA;       action();&#xA;       if(stop)&#xA;            return;&#xA;    }  &#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This may or may not be better. It depends on the actual code. The actions list would represent an ordered set of transactional units of code - each unit must be completed, but the whole set can be broken apart and cancelled if necessary.&lt;/p&gt;&#xA;" OwnerUserId="1756" LastActivityDate="2011-02-21T21:04:13.040" CommentCount="3" />
  <row Id="908" PostTypeId="1" AcceptedAnswerId="910" CreationDate="2011-02-21T20:42:20.877" Score="4" ViewCount="518" Body="&lt;p&gt;I am creating a tab plugin. I want to know if there is a better way of doing this or if what I have is good. It works just fine, but there may be some shortcuts or a more optimized way of accomplishing this. I plan to replace the &lt;code&gt;startTab&lt;/code&gt; variable with an options set, but I am not quite there yet.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://www.mail-apps.com/tabplugin/TabPluginWorkFile.html&quot; rel=&quot;nofollow&quot;&gt;View the current updated version here&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here is what I have so far:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&quot;lang-html prettyprint-override&quot;&gt;&lt;code&gt;    &amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&amp;gt;&#xA;&amp;lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&amp;gt;&#xA;&amp;lt;head&amp;gt;&#xA;&amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&amp;gt;&#xA;&amp;lt;title&amp;gt;Untitled Document&amp;lt;/title&amp;gt;&#xA;&amp;lt;style&amp;gt;&#xA;ul.tabNavigation {&#xA;    list-style: none;&#xA;    margin: 0;&#xA;    padding: 0;&#xA;}&#xA;ul.tabNavigation li {&#xA;    display: inline;&#xA;}&#xA;ul.tabNavigation li a {&#xA;    text-decoration: none;&#xA;    color:#000;&#xA;}&#xA;.tabViews {&#xA;    width: 100%;&#xA;    border: #8db2e3 solid 1px;&#xA;    clear:both;&#xA;    height:18px;&#xA;    margin-top: -12px;&#xA;    background: url(css/tabs/images/tabs_Lower_Header_Background.png) repeat-x;&#xA;}&#xA;.tab {&#xA;    height: 25px;&#xA;    font-family:'Trebuchet MS', Arial, Helvetica, sans-serif;&#xA;    font-size:14px;&#xA;    float:left;&#xA;    padding-left: 4px;&#xA;    position: relative;&#xA;    top: 1px&#xA;}&#xA;.tab .right {&#xA;    float:left;&#xA;    background:url(css/tabs/images/tab_Selected_Right.png) no-repeat;&#xA;    height:25px;&#xA;    width: 8px;&#xA;}&#xA;.tab .content {&#xA;    float:left;&#xA;    background:url(css/tabs/images/tab_Selected_Content.png) repeat-x;&#xA;    height:25px;&#xA;    text-align: center;&#xA;    padding-left: 5px;&#xA;    padding-right: 5px;&#xA;    padding-top: 4px;&#xA;}&#xA;.tab .left {&#xA;    float:left;&#xA;    background:url(css/tabs/images/tab_Selected_Left.png) no-repeat;&#xA;    height:25px;&#xA;    width: 6px;&#xA;}&#xA;.tabHover {&#xA;    height: 25px;&#xA;    font-family:'Trebuchet MS', Arial, Helvetica, sans-serif;&#xA;    font-size:14px;&#xA;    float:left;&#xA;    padding-left: 4px;&#xA;    position: relative;&#xA;    top: 1px;&#xA;    cursor: pointer;&#xA;}&#xA;.h1 {&#xA;    float:left;&#xA;    height:25px;&#xA;    width: 14px;&#xA;}&#xA;.h2 {&#xA;    float:left;&#xA;    height:25px;&#xA;    text-align: center;&#xA;    padding-left: 7px;&#xA;    padding-right: 5px;&#xA;    padding-top: 4px;&#xA;}&#xA;.h3 {&#xA;    float:left;&#xA;    height:25px;&#xA;    width: 10px;&#xA;}&#xA;.tabHover:hover .h1 {&#xA;    background:url(css/tabs/images/tab_Hover_Right.png) no-repeat;&#xA;}&#xA;.tabHover:hover .h2 {&#xA;    background:url(css/tabs/images/tab_Hover_Content.png) repeat-x;&#xA;}&#xA;.tabHover:hover .h3 {&#xA;    background:url(css/tabs/images/tab_Hover_Left.png) no-repeat;&#xA;}&#xA;&amp;lt;/style&amp;gt;&#xA;&amp;lt;script type=&quot;text/javascript&quot; src=&quot;javascript/jquery/jquery.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;script&amp;gt;&#xA;&#xA;$.fn.tabs = function(startTab){&#xA;    //Set currentIndex&#xA;    var currentIndex = 0;&#xA;&#xA;    //Get all tab views&#xA;    var tabViews = $('.tabViews &amp;gt; div',$(this));&#xA;&#xA;    //Current tab container&#xA;    var tabsContainer = $(this);&#xA;    //Hide all tabView containers&#xA;    tabViews.hide();&#xA;&#xA;&#xA;    //Get all tabs&#xA;    var $tabs = $('ul &amp;gt; li', tabsContainer);&#xA;&#xA;&#xA;    $tabs.each(function(index){&#xA;        $('a',$(this)).click(function(){&#xA;            changeTab(index);&#xA;&#xA;        });&#xA;&#xA;&#xA;    });&#xA;&#xA;     //call the changeTab method for the first time and selected the starting tab.&#xA;    changeTab(startTab);&#xA;&#xA;    function changeTab(selectedIndex){&#xA;&#xA;        if(selectedIndex != currentIndex){&#xA;            switchClass(selectedIndex);&#xA;            var previousSelectedTab = $('a',$tabs[currentIndex]);&#xA;            var currentSelectedTab = $('a',$tabs[selectedIndex]);&#xA;&#xA;            $(previousSelectedTab.attr('href')).hide();            &#xA;            $(currentSelectedTab.attr('href')).show();&#xA;            currentIndex = selectedIndex;&#xA;        }&#xA;&#xA;&#xA;    }&#xA;&#xA;     //Method to switch the calles for selected and non selected tabs.&#xA;    function switchClass(selectedIndex){        &#xA;        $tabs.each(function(index){&#xA;                            //Get Child Left, Content, right divs&#xA;                            var classBuilder = $('div  &amp;gt; div',$(this))&#xA;&#xA;                            //Current Selected Tab&#xA;                            if(index == selectedIndex){&#xA;                                var tabContainer = $('a &amp;gt; div',$(this))&#xA;                                tabContainer.removeClass('tabHover');&#xA;                                tabContainer.addClass('tab');&#xA;                                $(classBuilder[0]).removeClass('h3');&#xA;                                $(classBuilder[0]).addClass('left');&#xA;                                $(classBuilder[1]).removeClass('h2');&#xA;                                $(classBuilder[1]).addClass('content');&#xA;                                $(classBuilder[2]).removeClass('h1');&#xA;                                $(classBuilder[2]).addClass('right');&#xA;&#xA;&#xA;                            }&#xA;                            //Previously selected tab&#xA;                            if(index == currentIndex){&#xA;                                var tabContainer = $('a &amp;gt; div',$(this))&#xA;                                tabContainer.removeClass('tab');&#xA;                                tabContainer.addClass('tabHover');&#xA;&#xA;                                $(classBuilder[0]).removeClass('left');&#xA;                                $(classBuilder[0]).addClass('h3');&#xA;                                $(classBuilder[1]).removeClass('content');&#xA;                                $(classBuilder[1]).addClass('h2');&#xA;                                $(classBuilder[2]).removeClass('right');&#xA;                                $(classBuilder[2]).addClass('h1');&#xA;                            }&#xA;                            });&#xA;    }&#xA;&#xA;}&#xA;&#xA;$(function() {&#xA;  $('#rfiTabs').tabs(0);&#xA;}); &#xA;&#xA;&amp;lt;/script&amp;gt;&#xA;&amp;lt;/head&amp;gt;&#xA;&amp;lt;body&amp;gt;&#xA;&amp;lt;div id=&quot;rfiTabs&quot;&amp;gt;&#xA;  &amp;lt;ul class=&quot;tabNavigation&quot;&amp;gt;&#xA;    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#rfiBasic&quot;&amp;gt;&#xA;      &amp;lt;div class=&quot;tab&quot;&amp;gt;&#xA;        &amp;lt;div class=&quot;left&quot;&amp;gt;&amp;lt;/div&amp;gt;&#xA;        &amp;lt;div class=&quot;content&quot;&amp;gt;Basic&amp;lt;/div&amp;gt;&#xA;        &amp;lt;div class=&quot;right&quot;&amp;gt;&amp;lt;/div&amp;gt;&#xA;      &amp;lt;/div&amp;gt;&#xA;      &amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xA;    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#rfiHome&quot;&amp;gt;&#xA;      &amp;lt;div class=&quot;tabHover&quot;&amp;gt;&#xA;        &amp;lt;div style=&quot;&quot; class=&quot;h3&quot;&amp;gt;&amp;lt;/div&amp;gt;&#xA;        &amp;lt;div style=&quot;&quot; class=&quot;h2&quot;&amp;gt;Home&amp;lt;/div&amp;gt;&#xA;        &amp;lt;div class=&quot;h1&quot;&amp;gt;&amp;lt;/div&amp;gt;&#xA;      &amp;lt;/div&amp;gt;&#xA;      &amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xA;  &amp;lt;/ul&amp;gt;&#xA;  &amp;lt;div class=&quot;tabViews&quot; style=&quot;&quot;&amp;gt;&#xA;    &amp;lt;div id=&quot;rfiBasic&quot;&amp;gt;Test&amp;lt;/div&amp;gt;&#xA;    &amp;lt;div id=&quot;rfiHome&quot;&amp;gt;test this&amp;lt;/div&amp;gt;&#xA;  &amp;lt;/div&amp;gt;&#xA;&amp;lt;/div&amp;gt;&#xA;&amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I realized I can optimize the left, content, and center part of the tabs by updating the CSS and jQuery for the hover section:&lt;/p&gt;&#xA;&#xA;&lt;pre class=&quot;lang-html prettyprint-override&quot;&gt;&lt;code&gt;.tabHover .right {&#xA;    float:left;&#xA;    height:25px;&#xA;    width: 14px;&#xA;}&#xA;.tabHover .content {&#xA;    float:left;&#xA;    height:25px;&#xA;    text-align: center;&#xA;    padding-left: 7px;&#xA;    padding-right: 5px;&#xA;    padding-top: 4px;&#xA;}&#xA;.tabHover .left {&#xA;    float:left;&#xA;    height:25px;&#xA;    width: 10px;&#xA;}&#xA;.tabHover:hover .right {&#xA;    background:url(css/tabs/images/tab_Hover_Right.png) no-repeat;&#xA;}&#xA;.tabHover:hover .content {&#xA;    background:url(css/tabs/images/tab_Hover_Content.png) repeat-x;&#xA;}&#xA;.tabHover:hover .left {&#xA;    background:url(css/tabs/images/tab_Hover_Left.png) no-repeat;&#xA;}&#xA;&#xA;function switchClass(selectedIndex){        &#xA;        $tabs.each(function(index){&#xA;                            //Get Child Lef, Content, right divs&#xA;                            var classBuilder = $('div  &amp;gt; div',$(this))&#xA;&#xA;&#xA;                            if(index == selectedIndex){&#xA;                                var tabContainer = $('a &amp;gt; div',$(this))&#xA;                                tabContainer.removeClass('tabHover');&#xA;                                tabContainer.addClass('tab');&#xA;                                //$(classBuilder[0]).removeClass('h3');&#xA;//                                $(classBuilder[0]).addClass('left');&#xA;//                                $(classBuilder[1]).removeClass('h2');&#xA;//                                $(classBuilder[1]).addClass('content');&#xA;//                                $(classBuilder[2]).removeClass('h1');&#xA;//                                $(classBuilder[2]).addClass('right');&#xA;&#xA;&#xA;                            }&#xA;&#xA;                            if(index == currentIndex){&#xA;                                var tabContainer = $('a &amp;gt; div',$(this))&#xA;                                tabContainer.removeClass('tab');&#xA;                                tabContainer.addClass('tabHover');&#xA;&#xA;                                //$(classBuilder[0]).removeClass('left');&#xA;//                                $(classBuilder[0]).addClass('h3');&#xA;//                                $(classBuilder[1]).removeClass('content');&#xA;//                                $(classBuilder[1]).addClass('h2');&#xA;//                                $(classBuilder[2]).removeClass('right');&#xA;//                                $(classBuilder[2]).addClass('h1');&#xA;                            }&#xA;                            });&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2018" OwnerDisplayName="DDiVita" LastEditorUserId="22222" LastEditDate="2014-10-20T21:06:08.867" LastActivityDate="2014-10-20T21:06:08.867" Title="Creating a tab plugin" Tags="&lt;javascript&gt;&lt;optimization&gt;&lt;jquery&gt;&lt;css&gt;&lt;plugin&gt;" AnswerCount="1" CommentCount="0" FavoriteCount="1" />
  <row Id="909" PostTypeId="2" ParentId="868" CreationDate="2011-02-21T21:34:58.517" Score="45" Body="&lt;p&gt;I also came up with this, based on &lt;a href=&quot;http://en.wikipedia.org/wiki/Entropy_%28information_theory%29&quot;&gt;Shannon entropy&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;In information theory, entropy is a measure of the uncertainty associated with a random variable. In this context, the term usually refers to the &lt;strong&gt;Shannon entropy, which quantifies the expected value of the information contained in a message, usually in units such as bits.&lt;/strong&gt; &lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;It is a more &quot;formal&quot; calculation of entropy than simply counting letters:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/// &amp;lt;summary&amp;gt;&#xA;/// returns bits of entropy represented in a given string, per &#xA;/// http://en.wikipedia.org/wiki/Entropy_(information_theory) &#xA;/// &amp;lt;/summary&amp;gt;&#xA;public static double ShannonEntropy(string s)&#xA;{&#xA;    var map = new Dictionary&amp;lt;char, int&amp;gt;();&#xA;    foreach (char c in s)&#xA;    {&#xA;        if (!map.ContainsKey(c))&#xA;            map.Add(c, 1);&#xA;        else&#xA;            map[c] += 1;&#xA;    }&#xA;&#xA;    double result = 0.0;&#xA;    int len = s.Length;&#xA;    foreach (var item in map)&#xA;    {&#xA;        var frequency = (double)item.Value / len;&#xA;        result -= frequency * (Math.Log(frequency) / Math.Log(2));&#xA;    }&#xA;&#xA;    return result;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Results are:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&quot;abcdefghijklmnop&quot; = 4.00&#xA;&quot;Hello, World!&quot; = 3.18&#xA;&quot;hello world&quot; = 2.85&#xA;&quot;123123123123&quot; = 1.58&#xA;&quot;aaaa&quot; = 0&#xA;&lt;/pre&gt;&#xA;" OwnerUserId="136" LastEditorUserId="136" LastEditDate="2011-02-21T22:09:33.757" LastActivityDate="2011-02-21T22:09:33.757" CommentCount="8" />
  <row Id="910" PostTypeId="2" ParentId="908" CreationDate="2011-02-21T21:47:29.087" Score="6" Body="&lt;p&gt;You could remove tab navigation from html and create it dynamically in plugin so the html will look like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&quot;rfiTabs&quot;&amp;gt;&#xA;  &amp;lt;div class=&quot;tabViews&quot; style=&quot;&quot;&amp;gt;&#xA;    &amp;lt;div id=&quot;rfiBasic&quot;&amp;gt;Test&amp;lt;/div&amp;gt;&#xA;    &amp;lt;div id=&quot;rfiHome&quot;&amp;gt;test this&amp;lt;/div&amp;gt;&#xA;  &amp;lt;/div&amp;gt;&#xA;&amp;lt;/div&amp;gt;&#xA;&amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;you don't need to call&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var tabsContainer = $(this);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;this is already jQuery object&lt;/p&gt;&#xA;&#xA;&lt;p&gt;inside switchClass function you call $(this) 3 times you can call it once and stor the value&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var $this = $(this);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;you get element from jQuery object and then wrap it again.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$(classBuilder[0]).removeClass('h3');&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;you could use eq jquery method&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;classBuilder.eq(0).removeClass('h3');&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;instead &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if(index == selectedIndex){&#xA;&#xA;} &#xA;if(index == currentIndex){&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;use&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if(index == selectedIndex){&#xA;&#xA;} else if(index == currentIndex){&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;you don't need to check if &lt;code&gt;index == currentIndex&lt;/code&gt; if &lt;code&gt;index == selectedIndex&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;this code is repeaded twice but with different class names create a function for it (it looks almost the same — if you see something like this always create new function)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$(classBuilder[0]).removeClass('h3');&#xA;$(classBuilder[0]).addClass('left');&#xA;$(classBuilder[1]).removeClass('h2');&#xA;$(classBuilder[1]).addClass('content');&#xA;$(classBuilder[2]).removeClass('h1');&#xA;$(classBuilder[2]).addClass('right');&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;and you can chain jquery methods:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;classBuilder.eq(0).removeClass('h3').addClass('left');&#xA;classBuilder.eq(1).removeClass('h2').addClass('content');&#xA;classBuilder.eq(2).removeClass('h1').addClass('right');&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;you don't need to iterate over $tabs&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function switchClass(selectedIndex){ &#xA;   $tabs.eq(selectedIndex) &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;and I think that this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var classBuilder = $tabs.eq(selectedIndex).find('div  &amp;gt; div');&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;will be the same as&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var classBuilder = $('div  &amp;gt; div',$(this))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;and this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if(index == currentIndex){&#xA;    var tabContainer = $('a &amp;gt; div',$(this))&#xA;    tabContainer.removeClass('tab');&#xA;    tabContainer.addClass('tabHover');&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;is the same as &lt;/p&gt;&#xA;&#xA;&lt;p&gt;$tabs.eq(currentIndex).find('a &gt; div').removeClass('tab').addClass('tabHover');&lt;/p&gt;&#xA;&#xA;&lt;p&gt;and at the end of the script you should return &lt;code&gt;this&lt;/code&gt; so it could be chained &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$('#rfiTabs').tabs(0).css('background-color', 'red');&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;you can also do this:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;return this.each(function() {&#xA;      var $this = $(this);&#xA;      //and create your tabs here&#xA;   });&lt;/p&gt;&#xA;&#xA;&lt;p&gt;so if you call it &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$('.myalltabs').tabs(0);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;it will create tabs for every element that have &lt;code&gt;.myalltabs&lt;/code&gt; class&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;if you your jquery object have multiple elements (But this is Something Completely Different)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$.fn.tabs = function(n) {&#xA;&#xA;    var = tabcontainer = $('&amp;lt;div/&amp;gt;').attr('class', 'mainTabClass')&#xA;             .appendTo($('body'));&#xA;&#xA;    var nav = $('&amp;lt;ul&amp;gt;').addClass('navigation').appendTo(tabcontainer);&#xA;    this.each(function() {&#xA;       var $this = $(this);&#xA;       var id = $this.attr('id');&#xA;       $('&amp;lt;li&amp;gt;').append('&amp;lt;a&amp;gt;').appendTo(nav).children().&#xA;          attr('href', '#' + id).html($this.attr('name'));&#xA;    }).addClass('tabContent').detach().appendTo(tabcontainer);&#xA;&#xA;    nav.find('li a').click(function() {&#xA;      tabcontainer.find('tabContent').removeClass('selected');&#xA;      tabcontainer.find($(this).attr('href')).addClass('selected');&#xA;    }).eq(n).addClass('selected');&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;in this case you need only&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;.selected {&#xA;   display: block;&#xA;}&#xA;.mainTabClass .tabContent {&#xA;   display: none;&#xA;}&#xA;&#xA;  ....&#xA;  &amp;lt;div id=&quot;home&quot; name=&quot;Home Page&quot;&amp;gt;this is home&amp;lt;/div&amp;gt;&#xA;  ....&#xA;  &amp;lt;div id=&quot;about&quot; name=&quot;About me&quot;&amp;gt;this is about&amp;lt;/div&amp;gt;&#xA;  ....&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;name attribute in case you won't different name than id.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$('#home, #about').tabs(1);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;and you will have&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;mainTabClass&quot;&amp;gt;&#xA;  &amp;lt;ul class=&quot;navigation&quot;&amp;gt;&#xA;    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#home&quot;&amp;gt;Home Page&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xA;    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#about&quot;&amp;gt;About me&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xA;  &amp;lt;/ul&amp;gt;&#xA;  &amp;lt;div class=&quot;tabContent&quot; id=&quot;home&quot;&amp;gt;this is home&amp;lt;/div&amp;gt;&#xA;  &amp;lt;div class=&quot;tabContent selected&quot; id=&quot;about&quot;&amp;gt;this is about&amp;lt;/div&amp;gt;&#xA;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I don't know why you have repeated &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt; and &lt;code&gt;content&lt;/code&gt; for every tab, if you need to use those - create one instance and change it on click (in case you will have 100 tabs you will have 3 DOM elements instead of 300)&lt;/p&gt;&#xA;" OwnerUserId="2019" LastEditorUserId="2019" LastEditDate="2011-02-22T10:23:37.843" LastActivityDate="2011-02-22T10:23:37.843" CommentCount="9" />
  <row Id="911" PostTypeId="2" ParentId="906" CreationDate="2011-02-21T22:08:47.990" Score="10" Body="&lt;p&gt;Because either is technically acceptable, you are right that it is a style issue and simply a case of choosing a coding convention.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;However, I think that you have hit a very important point. So few other languages that use parentheses for functions allow a parameterless function call without parentheses that it can be very surprising for developers unfamiliar to perl.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This point would sway me in favour of always using them and, indeed, I always do so out of habit because I use other languages a lot and it just comes naturally.&lt;/p&gt;&#xA;" OwnerUserId="72" LastActivityDate="2011-02-21T22:08:47.990" CommentCount="0" />
  <row Id="912" PostTypeId="1" CreationDate="2011-02-21T22:11:42.180" Score="6" ViewCount="871" Body="&lt;p&gt;Here is a snippet of code that generates a thumbnail from a given file.  It works well, but is much slower than desired.  Without using an external library (which I'm trying to avoid for learning purposes), is there anything that can be done to increase the speed?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I know the fastest way would be to retrieve the stored thumbnail.  I've looked into reading for any EXIF thumbnail data by parsing out the embedded information, but gave up since it was taking me a lot of effort with no finished end result.  Again, I'd prefer not to rely on a library specifically because I want to learn more about the format itself.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I know many will state right away I shouldn't be messing with EXIF data unless I use an external library, so as an alternative, what can be done specifically with this snippet to make things (significantly) faster?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Feel free to give me feedback about my coding style as well, except for the use of JavaDoc comments.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class ThumbIcon extends ImageIcon implements Runnable {&#xA;   public int    thumbWidth;&#xA;   public int    thumbHeight;&#xA;&#xA;   Image         image;&#xA;   Graphics2D    g2dBuffer;&#xA;   ThumbButton   parent;&#xA;   BufferedImage scaledImage;&#xA;&#xA;   public ThumbIcon(final ThumbButton theParent) {&#xA;      super();&#xA;      parent = theParent;&#xA;   } // End ThumbIcon(ThumbButton, String)&#xA;&#xA;   public void run() {&#xA;                         image   = Toolkit.getDefaultToolkit().getImage(filePath);&#xA;      final MediaTracker tracker = new MediaTracker(new Container());&#xA;      tracker.addImage(image, 0);&#xA;      try {&#xA;         tracker.waitForID(0);&#xA;      } catch (InterruptedException e) {&#xA;         System.out.println(&quot;Interrupted getting thumb&quot;);&#xA;      } // End try&#xA;&#xA;      // Get dimensions from the now-loaded image&#xA;      final int width   = image.getWidth(null);&#xA;      final int height  = image.getHeight(null);&#xA;&#xA;      // Use the width to determine if the image is legitimate and loaded&#xA;      // Limit importable images to &amp;lt;54MiB or &amp;lt;51.5MP (9000px x 6000px)&#xA;      if ((width &amp;gt; 0) &amp;amp;&amp;amp; (width * height &amp;lt; 54000000)) {&#xA;         // This is an actual image, so display on screen&#xA;&#xA;         // Set the thumbnail size depending on image orientation&#xA;         // We are assuming a square thumbnail&#xA;         if (width &amp;gt; height) { // Landscape&#xA;            thumbWidth  = THUMBS_SIZE;&#xA;            thumbHeight = (int)((double)height / (double)width * THUMBS_SIZE);&#xA;         } else {              // Portrait&#xA;            thumbWidth  = (int)((double)width / (double)height * THUMBS_SIZE);&#xA;            thumbHeight = THUMBS_SIZE;&#xA;         } // End if&#xA;&#xA;         scaledImage = new BufferedImage(thumbWidth, thumbHeight,&#xA;                                         BufferedImage.TYPE_INT_RGB);&#xA;&#xA;         // Simultaneously load image into g2d buffer and scale to desired size&#xA;         g2dBuffer = scaledImage.createGraphics();&#xA;         g2dBuffer.setRenderingHint(RenderingHints.KEY_INTERPOLATION,&#xA;                                    RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR);&#xA;&#xA;         //g2dBuffer.setRenderingHint(RenderingHints.KEY_ANTIALIASING,&#xA;         //                           RenderingHints.VALUE_ANTIALIAS_ON);&#xA;&#xA;         // Size image (no matter initial size) to destWidth x destHeight&#xA;         g2dBuffer.drawImage(image, 0, 0, thumbWidth, thumbHeight, null);&#xA;         ...&#xA;         // Create the thumbnail&#xA;         setImage(Toolkit.getDefaultToolkit().createImage(scaledImage.getSource()));&#xA;         scaledImage.flush();&#xA;         image.flush();&#xA;         //g2dBuffer.finalize();&#xA;         g2dBuffer = null;&#xA;      } else {&#xA;         ...&#xA;      } // End if&#xA;   } // End run()&#xA;   ...&#xA;} // End ThumbIcon&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I shaved off some time by disabling anti-aliasing.  It looks nasty, but it serves its purpose.&lt;/p&gt;&#xA;" OwnerUserId="2021" LastEditorUserId="22222" LastEditDate="2014-12-21T01:56:53.680" LastActivityDate="2014-12-21T01:56:53.680" Title="Optimized thumbnail generation" Tags="&lt;java&gt;&lt;optimization&gt;&lt;image&gt;" AnswerCount="1" CommentCount="4" />
  <row Id="913" PostTypeId="2" ParentId="899" CreationDate="2011-02-21T22:19:57.627" Score="0" Body="&lt;p&gt;Looks like so long as you aren't calling more than these three methods, what you have is better for clarity's sake.  And the cost of the conditionals is pretty cheap as far as compilation goes.&lt;/p&gt;&#xA;" OwnerDisplayName="user2022" LastActivityDate="2011-02-21T22:19:57.627" CommentCount="0" />
  <row Id="914" PostTypeId="2" ParentId="906" CreationDate="2011-02-21T22:56:10.133" Score="3" Body="&lt;p&gt;To me, it is a no-brainer (for all it is a style question); retain the empty parentheses for the function call.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The language I've used that allows (requires?) functions with no arguments to be called without parentheses was Pascal, and I always found such calls confusing - doubly so when invoked in the argument list to another function.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Perl no longer requires the &lt;code&gt;&amp;amp;&lt;/code&gt; in front of functions as it once did.  I think it is still worth distinguishing between a variable reference and a function call by providing the parentheses, at least when the call could be confused with a variable reference.&lt;/p&gt;&#xA;" OwnerUserId="1160" LastEditorUserId="1160" LastEditDate="2011-02-22T04:08:12.927" LastActivityDate="2011-02-22T04:08:12.927" CommentCount="0" />
  <row Id="916" PostTypeId="1" AcceptedAnswerId="1035" CreationDate="2011-02-22T04:03:59.627" Score="8" ViewCount="500" Body="&lt;p&gt;I am using the JSON output of the MediaWiki API documented &lt;a href=&quot;https://www.mediawiki.org/wiki/API:Main_page&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/w/api.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;, and I have found that for Boolean values, it often returns an empty string if true and omits it if false. Thus, I want to &quot;rationalize&quot; the response.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;(Historical context: This was before a &lt;a href=&quot;https://www.mediawiki.org/wiki/API:JSON_version_2&quot; rel=&quot;nofollow noreferrer&quot;&gt;new output format&lt;/a&gt; was added that uses native JSON &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;My current code to do so (written some months ago) is located in a giant anonymous function:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;user = query.users[0];&#xA;invalid = typeof user.invalid != &quot;undefined&quot;;&#xA;missing = typeof user.missing != &quot;undefined&quot;;&#xA;groups = (typeof user.groups == &quot;object&quot;) ? user.groups : [];&#xA;editcount = (typeof user.editcount == &quot;number&quot;) ? user.editcount : null;&#xA;registration = (typeof user.registration == &quot;string&quot;) ?&#xA;    UserinfoJsParseDate(user.registration) : null;&#xA;blocked = typeof user.blockedby != &quot;undefined&quot;;&#xA;gender = (typeof user.gender == &quot;string&quot;) ? user.gender : null;&#xA;lastEdited = (typeof query.usercontribs[0] == &quot;object&quot;) &amp;amp;&amp;amp;&#xA;    (typeof query.usercontribs[0].timestamp == &quot;string&quot;) ?&#xA;    UserinfoJsParseDate(query.usercontribs[0].timestamp) : null;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I am trying to clean this up, breaking the script's main components into separate functions:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/**&#xA; * Extract relevant information from the server's response.&#xA; * @param data The server's response to the AJAX request&#xA; * @return An object containing the user's information&#xA; */&#xA;function processResponse( data ) {&#xA;    var query = data.query, info = {};&#xA;&#xA;    if ( query &amp;amp;&amp;amp; query.users &amp;amp;&amp;amp; query.users[0] ) {&#xA;        var user = query.users[0];&#xA;&#xA;        info.invalid = 'invalid' in user;&#xA;        info.missing = 'missing' in user;&#xA;        info.groups = user.groups || [];&#xA;        info.editcount = ( 'editcount' in user ) ? user.editcount : null;&#xA;        info.registration = ( 'registration' in user ) ? parseDate( user.registration ) : null;&#xA;        info.blocked = 'blockexpiry' in user;&#xA;        info.gender = ( 'gender' in user &amp;amp;&amp;amp; user.gender != 'unknown' ) ? user.gender : null;&#xA;&#xA;        info.lastEdited = null;&#xA;        if ( query.usercontribs &amp;amp;&amp;amp; query.usercontribs[0] ) {&#xA;            var contribs = query.usercontribs[0];&#xA;            if ( contribs.timestamp ) {&#xA;                user.lastEdited = parseDate( contribs.timestamp );&#xA;            }&#xA;        }&#xA;&#xA;    }&#xA;&#xA;    return info;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Is this better, or have I just written more messy code?&lt;/p&gt;&#xA;" OwnerUserId="115" LastEditorUserId="22222" LastEditDate="2016-12-02T04:19:10.263" LastActivityDate="2016-12-02T04:19:10.263" Title="Processing an API's JSON response" Tags="&lt;javascript&gt;&lt;json&gt;" AnswerCount="1" CommentCount="0" FavoriteCount="1" />
  <row Id="917" PostTypeId="1" AcceptedAnswerId="1013" CreationDate="2011-02-22T04:17:43.040" Score="8" ViewCount="179" Body="&lt;p&gt;I have been generating English-language text from some machine-readable data, but now I want internationalization of my script to be relatively easy. The challenge is that some data might be missing and thus should be omitted from the output, possibly precluding any approach involving just &quot;plugging in&quot; numbers.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Currently, I have functions like these, the output concatenated together in the main program:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function UserinfoJsFormatQty(qty, singular, plural) {&#xA;    return String(qty).replace(/\d{1,3}(?=(\d{3})+(?!\d))/g, &quot;$&amp;amp;,&quot;) + &quot;\u00a0&quot; + (qty == 1 ? singular : plural);&#xA;}&#xA;&#xA;function UserinfoJsFormatDateRel(old) {&#xA;    // The code below requires the computer's clock to be set correctly.&#xA;    var age = new Date().getTime() - old.getTime();&#xA;    var ageNumber, ageRemainder, ageWords;&#xA;    if(age &amp;lt; 60000) {&#xA;        // less than one minute old&#xA;        ageNumber = Math.floor(age / 1000);&#xA;        ageWords = UserinfoJsFormatQty(ageNumber, &quot;second&quot;, &quot;seconds&quot;);&#xA;    } else if(age &amp;lt; 3600000) {&#xA;        // less than one hour old&#xA;        ageNumber = Math.floor(age / 60000);&#xA;        ageWords = UserinfoJsFormatQty(ageNumber, &quot;minute&quot;, &quot;minutes&quot;);&#xA;    } else if(age &amp;lt; 86400000) {&#xA;        // less than one day old&#xA;        ageNumber = Math.floor(age / 3600000);&#xA;        ageWords = UserinfoJsFormatQty(ageNumber, &quot;hour&quot;, &quot;hours&quot;);&#xA;        ageRemainder = Math.floor((age - ageNumber * 3600000) / 60000);&#xA;    } else if(age &amp;lt; 604800000) {&#xA;        // less than one week old&#xA;        ageNumber = Math.floor(age / 86400000);&#xA;        ageWords = UserinfoJsFormatQty(ageNumber, &quot;day&quot;, &quot;days&quot;);&#xA;    } // ...&#xA;    return ageWords;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It is supposed to generate output like:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;A reviewer and rollbacker, 2 years 9 months old, with 8,624 edits. Last edited 7 hours ago.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;The age, edit count, date of last edit, or all of them could be missing. How could I improve my current design without resorting to a tabular display format? (All the information needs to nicely fit into a single status line.)&lt;/p&gt;&#xA;" OwnerUserId="115" LastEditorUserId="22222" LastEditDate="2016-12-02T04:19:43.277" LastActivityDate="2016-12-02T04:19:43.277" Title="Generating readable text in a human language from machine-readable data" Tags="&lt;javascript&gt;" AnswerCount="1" CommentCount="0" FavoriteCount="1" />
  <row Id="919" PostTypeId="2" ParentId="906" CreationDate="2011-02-22T10:04:35.347" Score="13" Body="&lt;p&gt;I prefer to make a distinction on semantic level: there are no functions or methods, but instead there are properties and actions. Every property is an object (in real-world sense) and an action is something done &lt;em&gt;on&lt;/em&gt; an object. A good mnemonic is probably to read &lt;code&gt;()&lt;/code&gt; as &lt;code&gt;do it!&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Consider a variable:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$document&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You know by the name it's an object, since it's a noun.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$document-&amp;gt;author&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Even though &lt;code&gt;author&lt;/code&gt; is probably a function/method, an author is an object and a noun, so it's a property and thus no parens here.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$document-&amp;gt;send()&#xA;$document-&amp;gt;author-&amp;gt;write_book()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Again, &lt;code&gt;send&lt;/code&gt; and &lt;code&gt;write_book&lt;/code&gt; are functions/methods, but since those are actions (as designated by verbs), we write parens behind them. &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$document-&amp;gt;author_count&#xA;$document-&amp;gt;has_reviews&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Again, a function/method, but a property of a document object, not an action, so no parens. A boolean value or an integer is strictly speaking not a real-world object, but it's more &lt;em&gt;like&lt;/em&gt; an object than an action.&lt;/p&gt;&#xA;" OwnerUserId="1591" LastActivityDate="2011-02-22T10:04:35.347" CommentCount="0" />
  <row Id="920" PostTypeId="1" AcceptedAnswerId="921" CreationDate="2011-02-22T10:50:10.730" Score="7" ViewCount="5086" Body="&lt;p&gt;The following extension method is being used in our code base:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public static bool ToBool(this object src)&#xA;{&#xA;    return src != null &amp;amp;&amp;amp; ((string) src).ToBool(false);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It leverages off another extension method:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public static bool ToBool(this string src, bool defaultValue)&#xA;{&#xA;    if (src.IsEmpty())&#xA;        return defaultValue;&#xA;&#xA;    if (src.IsNumeric())&#xA;        return src.ToInt() != 0;&#xA;&#xA;    var ret = false;&#xA;    if (bool.TryParse(src, out ret))&#xA;        return ret;&#xA;    return defaultValue;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;(where the ToInt and all the Is* methods are wrappers around the appropriate objects IsNullEmpty / Parse method)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This does not 'feel' right but I cannot explain it to the author. Besides for the obvious problem of passing an object that cannot be cast to a string what other reasons are there to justify this as bad code?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Are there any other concrete reasons why this code may be good or bad?&lt;/p&gt;&#xA;" OwnerUserId="2031" LastEditorUserId="2798" LastEditDate="2011-10-27T16:21:42.393" LastActivityDate="2015-02-05T08:03:20.560" Title="Converting objects to type Bool" Tags="&lt;c#&gt;&lt;extension-methods&gt;" AnswerCount="2" CommentCount="3" />
  <row Id="921" PostTypeId="2" ParentId="920" CreationDate="2011-02-22T11:11:06.650" Score="6" Body="&lt;p&gt;I'd criticize:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Extension methods on &quot;object&quot; should be avoided because of the broad scope, except for special cases (which such a &quot;ToBool&quot; method is not one). It also feels like an overuse of extension methods.&lt;/li&gt;&#xA;&lt;li&gt;The first one takes an &quot;object&quot;, but really wants a string, and will blow up with an &lt;code&gt;InvalidCastException&lt;/code&gt; at runtime.&lt;/li&gt;&#xA;&lt;li&gt;The second one does not check for &lt;code&gt;null&lt;/code&gt; (which wouldn't be a problem in itself, but having overloads for default values with differing behavior is bad).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="2034" LastActivityDate="2011-02-22T11:11:06.650" CommentCount="0" />
  <row Id="922" PostTypeId="2" ParentId="920" CreationDate="2011-02-22T11:11:58.723" Score="5" Body="&lt;p&gt;Creating and extension method for &lt;code&gt;object&lt;/code&gt; that will throw an exception if the actual object isn't a &lt;code&gt;string&lt;/code&gt; is asking for trouble.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also, the general approach looks very much like an attempt to create a dynamic type system where you can use any type and call &lt;code&gt;ToXxx&lt;/code&gt; to convert to whatever type you need using &quot;sensible&quot; rules. Is that really what you want in a strongly typed language like C#?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Do you have any guarantees that &lt;code&gt;ToBool&lt;/code&gt; will not throw exceptions even if it is passed a string? What if &lt;code&gt;IsNumeric&lt;/code&gt; returns true but &lt;code&gt;ToInt&lt;/code&gt; throws an exception? None of this code seems to take culture settings into account even though it parses strings to number and may break unexpectedly if run in a different culture.&lt;/p&gt;&#xA;" OwnerUserId="1977" LastEditorUserId="1977" LastEditDate="2015-02-05T08:03:20.560" LastActivityDate="2015-02-05T08:03:20.560" CommentCount="1" />
  <row Id="924" PostTypeId="2" ParentId="892" CreationDate="2011-02-22T11:47:56.303" Score="8" Body="&lt;blockquote&gt;&#xA;  &lt;p&gt;How to implement the load factor concept, because the hash function o/p is dependent on the previous table size. If we are to change the table size, the old &lt;code&gt;&amp;lt;key, value&amp;gt;&lt;/code&gt; pair will be lost.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;You will need to rehash when the table size changes, removing the nodes from the old table and inserting them in their new locations in the new table. I would suggest that you remove the line &lt;code&gt;h = h%hashsize;&lt;/code&gt; from the &lt;code&gt;hash&lt;/code&gt; function, and apply the modulo operation when you're actually doing the table lookup, for two reasons:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The hash function will no longer be dependent on the hash table, and can be made a static or non-member function&lt;/li&gt;&#xA;&lt;li&gt;You can store the raw hash value in the node, so you won't need to recalculate when you rehash.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;How to make this generic ? i.e. instead of &lt;code&gt;&amp;lt;string,int&amp;gt;&lt;/code&gt; , is it possible to write a template code for both key and the value ?&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;You can make it generic by turning it into a class template, with template parameters to specify the key and value types:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;template &amp;lt;typename Key, typename Value&amp;gt;&#xA;class MyHashMap&#xA;{&#xA;    struct Node&#xA;    {&#xA;        Key key;&#xA;        Value value;&#xA;        ...&#xA;    };&#xA;    ...&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then find where you're using &lt;code&gt;string&lt;/code&gt; as a key type and replace it with &lt;code&gt;Key&lt;/code&gt;; similarly, replace &lt;code&gt;int&lt;/code&gt; as a value type with &lt;code&gt;Value&lt;/code&gt;. You'll then need to make sure you're always using generic rather than type-specific operations on them. In particular, your (slightly odd) string comparisons will need to change from, for example, &lt;code&gt;!(head-&amp;gt;key).compare(key)&lt;/code&gt; to &lt;code&gt;head-&amp;gt;key == key&lt;/code&gt; - which is rather more readable anyway, in my opinion.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Finally, as you say, you'll need hash functions for each key type. The best way to support this is to move the hash function outside the class; then any user of the hash template can overload it for their own types.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Any other important (or mandatory )feature this map is missing ?&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;You do not have a destructor, so when the map is destroyed any memory allocated for the nodes will be lost. There are two choices here:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Add a destructor to walk through all remaining nodes and delete them. Add a copy constructor and assignment operator (or declare them private), to prevent shallow copying leading to double deletion.&lt;/li&gt;&#xA;&lt;li&gt;Use a memory-managed container to store the nodes; remove the &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; pointers, and change the type of &lt;code&gt;table&lt;/code&gt; from &lt;code&gt;vector&amp;lt;Node*&amp;gt;&lt;/code&gt; to &lt;code&gt;vector&amp;lt;vector&amp;lt;Node&amp;gt; &amp;gt;&lt;/code&gt;. In my opinion, this would be the better option, as it removes the responsibility for memory management from your class.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="1594" LastEditorUserId="1594" LastEditDate="2011-02-22T14:16:23.737" LastActivityDate="2011-02-22T14:16:23.737" CommentCount="6" />
  <row Id="925" PostTypeId="2" ParentId="802" CreationDate="2011-02-22T18:31:40.307" Score="5" Body="&lt;p&gt;I see you check for sql injection of the loginname: &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$loginName = mysql_real_escape_string($loginName);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Do you filter bad content for the submitted password?  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Now that I look at it, you are sending the POSTed login name straight to the SQL, aren't you? &lt;/p&gt;&#xA;&#xA;&lt;p&gt;This:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;new user($db,$_POST['username']);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Should be this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;new user($db,$loginName); &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If I'm reading this correctly - you need to sanitize the password also!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is generally very important. You are also using MySQL functions to sanitize SQLite data.  That's &lt;em&gt;probably&lt;/em&gt; okay, but I wouldn't bet the farm on it!&lt;/p&gt;&#xA;" OwnerUserId="2049" LastEditorUserId="22222" LastEditDate="2016-11-30T21:31:17.037" LastActivityDate="2016-11-30T21:31:17.037" CommentCount="1" />
  <row Id="926" PostTypeId="2" ParentId="868" CreationDate="2011-02-22T18:46:04.730" Score="11" Body="&lt;p&gt;Similar to &lt;a href=&quot;http://codereview.stackexchange.com/questions/868/calculating-entropy-of-a-string/886#886&quot;&gt;zngu's answer&lt;/a&gt;, I think better than just counting the number of characters would be calculating the &lt;a href=&quot;http://en.wikipedia.org/wiki/Entropy_%28information_theory%29#Definition&quot;&gt;character-entropy of the message&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public double CalculateEntropy(string entropyString)&#xA;{&#xA;    Dictionary&amp;lt;char, int&amp;gt; characterCounts = new Dictionary&amp;lt;char, int&amp;gt;();&#xA;    foreach(char c in entropyString.ToLower())&#xA;    {&#xA;        if(c == ' ') continue;&#xA;        int currentCount;&#xA;        characterCounts.TryGetValue(c, out currentCount);&#xA;        characterCounts[c] = currentCount + 1;&#xA;    }&#xA;&#xA;    IEnumerable&amp;lt;double&amp;gt; characterEntropies = &#xA;        from c in characterCounts.Keys&#xA;        let frequency = (double)characterCounts[c]/entropyString.Length&#xA;        select -1*frequency*Math.Log(frequency);&#xA;&#xA;    return characterEntropies.Sum();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It seems to work well with both code and text, but note that it is not calculating the actual entropy of the string, only the entropy of the character-distribution; sorting the characters within the string should reduce the entropy of the string, but it does not reduce the result of this function.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here are some tests:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private void CalculateEntropyTest(object sender, EventArgs e)&#xA;{&#xA;    string[] testStrings = {&#xA;        &quot;Hello world!&quot;,&#xA;        &quot;This is a typical english sentence containing all the letters of the english language - The quick brown fox jumped over the lazy dogs&quot;,&#xA;        String.Join(&quot;&quot;, &quot;This is a typical english sentence containing all the letters of the english language - The quick brown fox jumped over the lazy dogs&quot;.ToCharArray().OrderBy(o =&amp;gt; o).Select(o =&amp;gt; o.ToString()).ToArray()),&#xA;        &quot;Won't this work too?\nstring name = \&quot;lltt\&quot;;\nint uniqueCharacterCount = name.Distinct().Count();\nwill return 2&quot;,&#xA;        &quot;Pull the entropy finding source from any compression algotithm, i.e. Huffman&quot;,&#xA;        &quot;float CharacterEntropy(const char *str) {\n  std::vector&amp;lt;unsigned&amp;gt; counts(256);\n  for (const char *i = str; *i; ++i)\n    ++counts[static_cast&amp;lt;unsigned char&amp;gt;(*i)];\n  unsigned int total = 0;\n  for (unsigned i = 0; i &amp;lt; 256; ++i)\n    total += counts[i];\n  float total_float = static_cast&amp;lt;float&amp;gt;(total);\n  float ret = 0.0;\n  for (unsigned i = 0; i &amp;lt; 256; ++i) {\n    float p = static_cast&amp;lt;float&amp;gt;(counts[i]) / total_float;\n    ret -= p * logf(p);\n  }\n  return p * M_LN2;\n}&quot;,&#xA;        &quot;~~~~~~No.~~~~~~&quot;,&#xA;        &quot;asdasdasdasdasdasd&quot;,&#xA;        &quot;abcdefghijklmnopqrstuvwxyz&quot;,&#xA;        &quot;Fuuuuuuu-------&quot;,                &#xA;    };&#xA;    foreach(string str in testStrings)&#xA;    {&#xA;        Console.WriteLine(&quot;{0}\nEntropy: {1:0.000}\n&quot;, str, CalculateEntropy(str));&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Results:&lt;br&gt;&#xA;  Hello world!&lt;br&gt;&#xA;  Entropy: 1.888&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;This is a typical english sentence containing all the letters of the english language - The quick brown fox jumped over the lazy dogs&lt;br&gt;&#xA;  Entropy: 2.593&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;-TTaaaaaaabccccddeeeeeeeeeeeeeeffgggggghhhhhhhiiiiiiiijk&#xA;  lllllllmnnnnnnnnnooooooppqrrrsssssssttttttttuuuvwxyyz&lt;br&gt;&#xA;  Entropy: 2.593&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;Won't this work too?&#xA;  string name = &quot;lltt&quot;;&#xA;  int uniqueCharacterCount = name.Distinct().Count();&#xA;  will return 2&lt;br&gt;&#xA;  Entropy: 2.838&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;Pull the entropy finding source from any compression algotithm, i.e. Huffman&lt;br&gt;&#xA;  Entropy: 2.641&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;float CharacterEntropy(const char *str) {&#xA;    std::vector counts(256);&#xA;    for (const char *i = str; *i; ++i)&#xA;    ++counts[static_cast(*i)];&#xA;    unsigned int total = 0;&#xA;    for (unsigned i = 0; i &amp;lt; 256; ++i)&#xA;      total += counts[i];&#xA;    float total_float = static_cast(total);&#xA;    float ret = 0.0;&#xA;    for (unsigned i = 0; i &amp;lt; 256; ++i) {&#xA;      float p = static_cast(counts[i]) / total_float;&#xA;      ret -= p * logf(p);&#xA;    }&#xA;    return p * M_LN2;&#xA;  }&lt;br&gt;&#xA;  Entropy: 2.866&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;~~~~~~No.~~~~~~&lt;br&gt;&#xA;  Entropy: 0.720&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;asdasdasdasdasdasd&lt;br&gt;&#xA;  Entropy: 1.099&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;abcdefghijklmnopqrstuvwxyz&lt;br&gt;&#xA;  Entropy: 3.258&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;Fuuuuuuu-------&lt;br&gt;&#xA;  Entropy: 0.892&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Actually, I think it would be better to do some frequency analysis, but I don't know anything about the frequencies of symbols used in code.  The best place to determine that would be the stackoverflow data-dump - I'll have to get back to you after it finishes downloading, in 2 years.&lt;/p&gt;&#xA;" OwnerUserId="2050" LastEditorUserId="2050" LastEditDate="2011-02-22T19:07:48.557" LastActivityDate="2011-02-22T19:07:48.557" CommentCount="0" />
  <row Id="927" PostTypeId="2" ParentId="429" CreationDate="2011-02-22T20:14:34.153" Score="0" Body="&lt;p&gt;One note for anyone else researching this issue: The modules in this application need to be WPF User Control Library projects. Simply replace the XAML in the empty UserControl objects with @Scott's Ribbon Tab XAML shown above. There is no need to wrap the &lt;code&gt;RibbonTab&lt;/code&gt; object in a &lt;code&gt;UserControl&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In this specific case, I don't share @Snowbear's concern about deriving the Ribbon Tab 'view' from a &lt;code&gt;RibbonTab&lt;/code&gt; control. I agree with his point in a more general situation, but the Ribbon Tab that we are inserting into the Ribbon isn't really a view, per se. In other words, it's not a composite of several different UI controls meant to present a UI or a part of a UI to a user. The Ribbon Tab is a lot more specific than that--it is literally a &lt;code&gt;RibbonTab&lt;/code&gt; object--a single control--and it can be nothing else.&lt;/p&gt;&#xA;" OwnerUserId="1695" LastEditorUserId="22222" LastEditDate="2015-07-28T17:09:48.567" LastActivityDate="2015-07-28T17:09:48.567" CommentCount="0" />
  <row Id="928" PostTypeId="1" AcceptedAnswerId="933" CreationDate="2011-02-22T20:57:16.000" Score="6" ViewCount="713" Body="&lt;p&gt;I am implementing the command pattern in a project that I am working on and I have an interface, &lt;code&gt;ICommandFactory&lt;/code&gt; that all of my commands are implementing. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;When I run the application I want to dynamically gather all classes in the current assembly that implement that interface, thus producing a list of all possible commands.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So I came up with the method below. This was the first thing that I could get to work. Is there a better way to do this?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    private static IEnumerable&amp;lt;ICommandFactory&amp;gt; GetAvailableCommands()&#xA;    {&#xA;        var interfaceType = typeof (ICommandFactory);&#xA;        var implementors = Assembly.GetExecutingAssembly().GetTypes().Where(&#xA;            i =&amp;gt; interfaceType.IsAssignableFrom(i) &amp;amp;&amp;amp; i != interfaceType);&#xA;&#xA;        var commands = new List&amp;lt;ICommandFactory&amp;gt;();&#xA;&#xA;        foreach(var implementor in implementors)&#xA;        {&#xA;            var ctor = implementor.GetConstructor(Type.EmptyTypes);&#xA;            if (ctor == null) continue;&#xA;            var instance = ctor.Invoke(null) as ICommandFactory;&#xA;            if (instance == null) continue;&#xA;            commands.Add(instance);&#xA;        }&#xA;&#xA;        return commands;&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2056" LastEditorUserId="1029" LastEditDate="2011-09-15T08:16:28.520" LastActivityDate="2011-09-15T08:16:28.520" Title="IEnumerable of classes that implement a given interface at runtime" Tags="&lt;c#&gt;&lt;design-patterns&gt;" AnswerCount="3" CommentCount="0" />
  <row Id="929" PostTypeId="2" ParentId="906" CreationDate="2011-02-22T21:15:15.607" Score="2" Body="&lt;p&gt;It depends on the purpose. I prefer parenthesis for &quot;real&quot; methods, doing something. For properties with at most small getter/setter and simple checks I use the shorter version.&lt;/p&gt;&#xA;" OwnerUserId="2057" LastActivityDate="2011-02-22T21:15:15.607" CommentCount="1" />
  <row Id="930" PostTypeId="2" ParentId="601" CreationDate="2011-02-22T21:27:20.223" Score="4" Body="&lt;p&gt;Consider using mysqli instead of mysql:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://www.php.net/manual/en/mysqli.connect.php&quot; rel=&quot;nofollow&quot;&gt;mysqli&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Mysqli (the &quot;i&quot; stands for &quot;improved&quot;) is more OO-friendly and has better security.  It also seems like the standard mysql functions are being deprecated (some of them anyway).&lt;/p&gt;&#xA;" OwnerUserId="2049" LastActivityDate="2011-02-22T21:27:20.223" CommentCount="1" />
  <row Id="931" PostTypeId="1" AcceptedAnswerId="942" CreationDate="2011-02-22T21:41:01.967" Score="11" ViewCount="3403" Body="&lt;p&gt;I am stuck with this horrible object model coming back from a 3rd party product.  It's six levels of objects deep, and I have to loop through the collection in each level, to get the values I need, in order to produce a small object model that I actually require.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The code ends up looking like this (with variable and type names changed). How can I clean up this mess when I can't modify the structure of the &lt;code&gt;rootObject&lt;/code&gt;?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;(This is .NET 3.5.)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var levelOneEnumerator = rootObject.GetEnumerator();&#xA;while (levelOneEnumerator.MoveNext())&#xA;{&#xA;    var levelOneItem = levelOneEnumerator.Current as Foo_LevelOneItem;&#xA;    if (levelOneItem == null) continue;&#xA;&#xA;    var levelTwoItemsEnumerator = levelOneItem.LevelTwoItems.GetEnumerator();&#xA;    while (levelTwoItemsEnumerator.MoveNext())&#xA;    {&#xA;        var LevelTwoItemsItem = levelTwoItemsEnumerator.Current as Foo_LevelTwoItem;&#xA;        if (LevelTwoItemsItem == null) continue;&#xA;&#xA;        var foobars = new List&amp;lt;FooBar&amp;gt;();&#xA;&#xA;        var levelThreeItemsEnumerator = LevelTwoItemsItem.LevelThreeItems.GetEnumerator();&#xA;        while (levelThreeItemsEnumerator.MoveNext())&#xA;        {&#xA;            var levelThreeItem = levelThreeItemsEnumerator.Current as Foo_LevelThreeItem;&#xA;            if (levelThreeItem == null) continue;&#xA;&#xA;            var levelFourItemsEnumerator = levelThreeItem.LevelFourItems.GetEnumerator();&#xA;            while (levelFourItemsEnumerator.MoveNext())&#xA;            {&#xA;                var levelFourItem = levelFourItemsEnumerator.Current as Foo_LevelFourItem;&#xA;                if (levelFourItem == null) continue;&#xA;&#xA;                var levelFiveItemsEnumerator = levelFourItem.LevelFiveItems.GetEnumerator();&#xA;                while (levelFiveItemsEnumerator.MoveNext())&#xA;                {&#xA;                    var levelFiveItem = levelFiveItemsEnumerator.Current as Foo_LevelFiveItem;&#xA;                    if (levelFiveItem == null) continue;&#xA;&#xA;                    var levelSixItemsEnumerator = levelFiveItem.LevelSixItems.GetEnumerator();&#xA;                    while (levelSixItemsEnumerator.MoveNext())&#xA;                    {&#xA;                        var levelSixItem = levelSixItemsEnumerator.Current as Foo_LevelSixItem;&#xA;                        if (levelSixItem == null) continue;&#xA;&#xA;                        var levelSixKey = levelSixItem.Key;&#xA;                        var foobar = foobars.Where(x =&amp;gt; x.Key == levelSixKey).FirstOrDefault();&#xA;                        if (foobar == null)&#xA;                        {&#xA;                            foobar = new FooBar&#xA;                                          {&#xA;                                              LevelSixKey = levelSixKey,&#xA;                                              TransDate = levelFiveItem.TransDate,&#xA;                                              PaidAmount = 0&#xA;                                          };&#xA;                            foobars.Add(foobar);&#xA;                        }&#xA;&#xA;                        // * -1 because value should be positive, while product reports a negative (and vice versa)&#xA;                        foobar.PaidAmount += (levelFiveItem.PaidAmount ?? 0) * -1; &#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;&#xA;        yield return new FooBarsCollection&#xA;                         {&#xA;                             Prop1 = levelTwoItemsItem.Prop1,&#xA;                             Prop2 = levelTwoItemsItem.Prop2,&#xA;                             Prop3 = levelTwoItemsItem.Prop3,&#xA;                             FooBars = foobars&#xA;                         };&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="922" LastEditorUserId="22222" LastEditDate="2015-11-22T19:41:22.357" LastActivityDate="2015-11-22T19:41:22.357" Title="Deep nesting when looping over an object model coming from a 3rd part" Tags="&lt;c#&gt;&lt;.net&gt;" AnswerCount="5" CommentCount="2" FavoriteCount="3" />
  <row Id="932" PostTypeId="2" ParentId="802" CreationDate="2011-02-22T22:02:42.383" Score="4" Body="&lt;p&gt;Don't ever pass data directly into a query.  You are just opening yourself to &lt;a href=&quot;http://en.wikipedia.org/wiki/Sql_injection&quot; rel=&quot;nofollow&quot;&gt;SQL Injection.&lt;/a&gt;  Always use &lt;a href=&quot;http://php.net/manual/en/pdo.prepared-statements.php&quot; rel=&quot;nofollow&quot;&gt;bind variables&lt;/a&gt; when you can.&lt;/p&gt;&#xA;" OwnerUserId="55" LastActivityDate="2011-02-22T22:02:42.383" CommentCount="0" />
  <row Id="933" PostTypeId="2" ParentId="928" CreationDate="2011-02-22T22:08:51.453" Score="2" Body="&lt;p&gt;Your code seems to do what it is supposed to do.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'm worried about the fact that you're hinting at the possibility of having multiple &lt;code&gt;CommandFactory&lt;/code&gt; classes. Why would you want that? (I'm just asking. You might have very valid reasons.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'm also wondering if you actually meant &lt;em&gt;Factory&lt;/em&gt;, since the variable name you use for the list inside your method is just &lt;code&gt;commands&lt;/code&gt;, which makes me believe that you are looking for just that: types that implement &lt;code&gt;ICommand&lt;/code&gt;, not &lt;code&gt;ICommandFactory&lt;/code&gt;.&lt;/p&gt;&#xA;" OwnerUserId="1974" LastActivityDate="2011-02-22T22:08:51.453" CommentCount="1" />
  <row Id="934" PostTypeId="2" ParentId="931" CreationDate="2011-02-22T22:15:23.190" Score="2" Body="&lt;p&gt;If you extract the innermost nested part as its own method that takes a LevelSixKey as its parameter, then create your own Enumerator over levelSixItems, the product of which is the same as all your nesting (and, honestly, simply moved all the nesting into it - or added to a list at the inside of the innermost loop, and returned that list's enumerator), then what you see for the foobar-building is simply iterating over the enumerator and doing what you do - and all the ugly nested stuff is hidden away out of sight.  It doesn't exactly &lt;em&gt;solve&lt;/em&gt; the problem, but maybe it makes it more manageable.&lt;/p&gt;&#xA;" OwnerUserId="285" LastActivityDate="2011-02-22T22:15:23.190" CommentCount="1" />
  <row Id="935" PostTypeId="1" CreationDate="2011-02-22T22:16:02.330" Score="7" ViewCount="1401" Body="&lt;p&gt;I implemented a multistep form with the method described by Ryan Bates in &lt;a href=&quot;http://www.asciicasts.com/episodes/217-multistep-forms&quot; rel=&quot;nofollow&quot;&gt;ep217&lt;/a&gt; but I had some weird behavior when refreshing or moving between the steps &lt;a href=&quot;http://rubyglasses.blogspot.com/2007/08/actsasgoodstyle.html&quot; rel=&quot;nofollow&quot;&gt;Acts_as_good_style&lt;/a&gt; (old but still good) has a tip &lt;strong&gt;redirect when moving on&lt;/strong&gt; that lead me to the change in the code that follows.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In a nutshell, it says that if you're in the &lt;code&gt;create&lt;/code&gt; action you should not render &lt;code&gt;new&lt;/code&gt; (as I was doing).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This solved the problem. But I had to manage the case of errors in the form, so I ended up with this code.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#profiles_controller.rb&#xA;&#xA;def create&#xA;  # [...] save etc [...]&#xA;&#xA;  # render&#xA;  if @profile.new_record?  &#xA;    # render 'new' # OLD&#xA;    session[:profile_valid] = @profile.errors.blank?  # NEW&#xA;    redirect_to new_profile_path # NEW&#xA;  else &#xA;    # [...]&#xA;  end&#xA;end &#xA;&#xA;&#xA;def new  &#xA;  @profile = Profile.new(session[:profile_params])  &#xA;  # [...]&#xA;&#xA;  # rebuild errors (see create)&#xA;  # check false because first time is nil and no error have to be displayed&#xA;  @profile.valid? if session[:profile_valid] == false&#xA;  session[:profile_valid] = true&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Where in the &lt;code&gt;new&lt;/code&gt; action I reload the errors otherwise lost depending on &lt;code&gt;session[:profile_valid]&lt;/code&gt;, that works fine.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;BUT this way doesn't look very good to me and I would appreciate to have your opinion, OR how do you manage your controllers in multispets forms?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What was the strange behavior? Refreshing or going back and forth through the steps sometimes you jump to the wrong page, not clear what the logic is, probably depends on the validations in the model and the params hash.&lt;/p&gt;&#xA;" OwnerUserId="96" LastEditorUserId="22222" LastEditDate="2014-12-16T18:53:37.237" LastActivityDate="2014-12-19T05:35:45.707" Title="Developing a multistep form" Tags="&lt;ruby&gt;&lt;ruby-on-rails&gt;&lt;form&gt;" AnswerCount="1" CommentCount="0" />
  <row Id="936" PostTypeId="2" ParentId="860" CreationDate="2011-02-22T23:16:45.673" Score="2" Body="&lt;p&gt;I have not looked at your regexes in detail. Could you please explain them? The rest of the code could use better documentation as well.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I did find two serious code correctness issues:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;p&gt;Your &lt;code&gt;:join()&lt;/code&gt; formatter will not work with the empty string as the delimiter.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;return value.join(str || ', ');    // Boolean('') === false&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Your &lt;code&gt;:pad()&lt;/code&gt; formatter, when used for center padding, will not correctly add an odd number of padding characters, as the padding on either side is rounded down.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;} else {&#xA;    return repeat(str, len - ~~(len / 2))&#xA;           + value&#xA;           + repeat(str, ~~(len / 2));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In general, using tricks such as &lt;code&gt;~~&lt;/code&gt; tends to reduce the code's clarity, and this is an excellent example of that. You should use the &lt;code&gt;Math.floor()&lt;/code&gt; and &lt;code&gt;Math.ceil()&lt;/code&gt; functions instead if that is what you intend.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;Fix these issues, and of course add corresponding tests. Also document the fact that &lt;code&gt;:pad()&lt;/code&gt; and the other padding functions are only intended to work with a single padding character.&lt;/p&gt;&#xA;" OwnerUserId="115" LastEditorUserId="115" LastEditDate="2011-02-22T23:22:02.937" LastActivityDate="2011-02-22T23:22:02.937" CommentCount="3" />
  <row Id="937" PostTypeId="2" ParentId="881" CreationDate="2011-02-23T00:41:15.083" Score="1" Body="&lt;p&gt;You can use an anonymous class and DataContractJsonSerializer and do something like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;var toSerialize = items.Select(x =&gt; new { JSProp = x.ItemProp }).ToList();&#xA;&#xA;var serializer = new DataContractJsonSerializer(toSerialize.GetType());&#xA;MemoryStream ms = new MemoryStream();&#xA;serializer.WriteObject(ms, myPerson);&#xA;string json = Encoding.Default.GetString(ms.ToArray());&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I like this approach because you can create complex javascript types in a simply way.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Sorry if it does not compile but I'm not with a dev machine.&lt;/p&gt;&#xA;" OwnerUserId="865" LastActivityDate="2011-02-23T00:41:15.083" CommentCount="2" />
  <row Id="938" PostTypeId="2" ParentId="931" CreationDate="2011-02-23T01:07:32.740" Score="5" Body="&lt;p&gt;I would probably refactor out the two innermost loops into a method returning a &lt;code&gt;FooBarCollection&lt;/code&gt;. You could then collapse the other loops with LINQs &lt;code&gt;SelectMany&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;foreach (var level2 in rootObject.SelectMany(l1 =&amp;gt; l1.LevelTwoItems)) {&#xA;    var items = level2.LevelThreeItems&#xA;        .SelectMany(l3 =&amp;gt; l3.LevelFourItems)&#xA;        .SelectMany(l4 =&amp;gt; l4.LevelFiveItems);&#xA;    yield return CollectFooBars(level2, items);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Edit: I took out the filtering for &lt;code&gt;null&lt;/code&gt; values because that seem to be a result of non-generic enumerators in your example (and I assume there aren't any &lt;code&gt;null&lt;/code&gt; values in those arrays).&lt;/p&gt;&#xA;" OwnerUserId="2034" LastEditorUserId="2034" LastEditDate="2011-02-23T06:34:44.163" LastActivityDate="2011-02-23T06:34:44.163" CommentCount="0" />
  <row Id="939" PostTypeId="2" ParentId="928" CreationDate="2011-02-23T02:16:38.390" Score="0" Body="&lt;p&gt;You can use the Activator to create an instance:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;commands.Add( Activator.CreateInstance(implementor) as ICommandFactory );&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;or even a fancy &lt;a href=&quot;http://bloggingabout.net/blogs/vagif/archive/2010/04/02/don-t-use-activator-createinstance-or-constructorinfo-invoke-use-compiled-lambda-expressions.aspx&quot; rel=&quot;nofollow&quot;&gt;Compiled Lamdba Expression&lt;/a&gt;.&lt;/p&gt;&#xA;" OwnerUserId="1840" LastActivityDate="2011-02-23T02:16:38.390" CommentCount="2" />
  <row Id="940" PostTypeId="1" AcceptedAnswerId="944" CreationDate="2011-02-23T02:21:09.943" Score="5" ViewCount="736" Body="&lt;p&gt;This is some Erlang code I wrote to output a string of all the IP addresses of the machine. The string is simply printed to the user for him to read.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;-module(ip).&#xA;-export([get_ip_address_string/0]).&#xA;&#xA;get_ip_address_string() -&amp;gt;&#xA;    {ok, IPAddress} = inet:getif(),&#xA;    filter_ip_address(IPAddress).&#xA;&#xA;filter_ip_address(IPAddress) -&amp;gt;&#xA;    filter_ip_address(IPAddress, []).&#xA;&#xA;filter_ip_address([], Acc) -&amp;gt;&#xA;    Acc;&#xA;filter_ip_address([{{127,0,0,1}, _Broadcast, _Mask} | Tail], Acc) -&amp;gt;&#xA;    %Do not include the loopback address.&#xA;    filter_ip_address(Tail, Acc);&#xA;filter_ip_address([Head | Tail], Acc) -&amp;gt;&#xA;    {{Oct1, Oct2, Oct3, Oct4}, _Broadcast, _Mask} = Head,&#xA;    IPString = io_lib:format(&quot;~b.~b.~b.~b &quot;, [Oct1, Oct2, Oct3, Oct4]),&#xA;    filter_ip_address(Tail, IPString ++ Acc).&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Comments on how to write this in a more Erlang way, make it more readable, or anything you would do different are welcome.&lt;/p&gt;&#xA;" OwnerUserId="163" LastEditorUserId="22687" LastEditDate="2015-05-11T17:05:40.043" LastActivityDate="2015-05-11T17:05:40.043" Title="Erlang code to list all IP addresses" Tags="&lt;functional-programming&gt;&lt;erlang&gt;&lt;ip-address&gt;" AnswerCount="2" CommentCount="0" />
  <row Id="942" PostTypeId="2" ParentId="931" CreationDate="2011-02-23T03:57:16.860" Score="16" Body="&lt;p&gt;First of all, I would realise that&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var levelOneEnumerator = rootObject.GetEnumerator();&#xA;while (levelOneEnumerator.MoveNext())&#xA;{&#xA;    var levelOneItem = levelOneEnumerator.Current as Foo_LevelOneItem;&#xA;    if (levelOneItem == null) continue;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;is equivalent to the much shorter&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;foreach (var levelOneItem in rootObject.OfType&amp;lt;Foo_LevelOneItem&amp;gt;())&#xA;{&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then you will realise that you have several nested &lt;code&gt;foreach&lt;/code&gt; loops which make for nicely-readable single-line nestings. So factor all the multi-line code into methods of its own. The end-result I got looks like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;foreach (var levelOneItem in rootObject.OfType&amp;lt;Foo_LevelOneItem&amp;gt;())&#xA;    foreach (var levelTwoItem in levelOneItem.LevelTwoItems.OfType&amp;lt;Foo_LevelTwoItem&amp;gt;())&#xA;        yield return new FooBarsCollection&#xA;        {&#xA;            Prop1 = levelTwoItem.Prop1,&#xA;            Prop2 = levelTwoItem.Prop2,&#xA;            Prop3 = levelTwoItem.Prop3,&#xA;            FooBars = getFoobars(levelTwoItem)&#xA;        };&#xA;&#xA;[...]&#xA;&#xA;private static List&amp;lt;FooBar&amp;gt; getFoobars(Foo_LevelTwoItem levelTwoItem)&#xA;{&#xA;    var foobars = new List&amp;lt;FooBar&amp;gt;();&#xA;&#xA;    foreach (var levelThreeItem in levelTwoItem.LevelThreeItems.OfType&amp;lt;Foo_LevelThreeItem&amp;gt;())&#xA;        foreach (var levelFourItem in levelThreeItem.LevelFourItems.OfType&amp;lt;Foo_LevelFourItem&amp;gt;())&#xA;            foreach (var levelFiveItem in levelFourItem.LevelFiveItems.OfType&amp;lt;Foo_LevelFiveItem&amp;gt;())&#xA;                foreach (var levelSixItem in levelFiveItem.LevelSixItems.OfType&amp;lt;Foo_LevelSixItem&amp;gt;())&#xA;                    processLevelSixItem(foobars, levelFiveItem, levelSixItem.Key);&#xA;&#xA;    return foobars;&#xA;}&#xA;&#xA;private static void processLevelSixItem(List&amp;lt;FooBar&amp;gt; foobars, Foo_LevelFiveItem levelFiveItem, Foo_LevelSixItemKey levelSixKey)&#xA;{&#xA;    var foobar = foobars.Where(x =&amp;gt; x.Key == levelSixKey).FirstOrDefault();&#xA;    if (foobar == null)&#xA;    {&#xA;        foobar = new FooBar&#xA;        {&#xA;            LevelSixKey = levelSixKey,&#xA;            TransDate = levelFiveItem.TransDate,&#xA;            PaidAmount = 0&#xA;        };&#xA;        foobars.Add(foobar);&#xA;    }&#xA;&#xA;    // * -1 because value should be positive, while product reports a negative (and vice versa)&#xA;    foobar.PaidAmount += (levelFiveItem.PaidAmount ?? 0) * -1;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Of course, you could further change this into a much more LINQy expression involving either &lt;code&gt;SelectMany&lt;/code&gt; or the &lt;code&gt;from&lt;/code&gt; query syntax, but to be honest, in your particular case I would leave it like this. It is very clear. In case you still want the query syntax, here is just &lt;code&gt;getFoobars&lt;/code&gt; to give you the idea:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private static List&amp;lt;FooBar&amp;gt; getFoobars(Foo_LevelTwoItem levelTwoItem)&#xA;{&#xA;    var foobars = new List&amp;lt;FooBar&amp;gt;();&#xA;&#xA;    var query =&#xA;        from levelThreeItem in levelTwoItem.LevelThreeItems.OfType&amp;lt;Foo_LevelThreeItem&amp;gt;()&#xA;        from levelFourItem in levelThreeItem.LevelFourItems.OfType&amp;lt;Foo_LevelFourItem&amp;gt;()&#xA;        from levelFiveItem in levelFourItem.LevelFiveItems.OfType&amp;lt;Foo_LevelFiveItem&amp;gt;()&#xA;        from levelSixItem in levelFiveItem.LevelSixItems.OfType&amp;lt;Foo_LevelSixItem&amp;gt;()&#xA;        select new { LevelFiveItem = levelFiveItem, Key = levelSixItem.Key };&#xA;&#xA;    foreach (var info in query)&#xA;        processLevelSixItem(foobars, info.LevelFiveItem, info.Key);&#xA;&#xA;    return foobars;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2063" LastEditorUserId="2063" LastEditDate="2011-02-23T04:04:48.150" LastActivityDate="2011-02-23T04:04:48.150" CommentCount="0" />
  <row Id="943" PostTypeId="1" CreationDate="2011-02-23T10:16:10.800" Score="7" ViewCount="2135" Body="&lt;p&gt;I have written an Android application which downloads pdf files through web service. I am using kSoap2 android library to parse the response of web service which basically contains file name &amp;amp; file data. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;I have written following code. Please review &amp;amp; tell how to increase the speed I think there is some small defect in code which reduces the speed. I am using version 2.5.1 of kSoap2.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public void downloadPdfFiles(File fileDocsDir, int noOfFiles)&#xA;            throws NullPointerException, SoapFault, XmlPullParserException,&#xA;            FileNotFoundException, IOException, Exception {&#xA;&#xA;        System.gc();&#xA;&#xA;        // Download files from web service and save them in the folder.&#xA;        soapObject = new SoapObject(NAMESPACE, METHOD_NAME);&#xA;        soapObject.addProperty(&quot;startingFile&quot;, noOfFiles);&#xA;        soapObject.addProperty(&quot;deviceId&quot;, deviceId);&#xA;        soapObject.addProperty(&quot;loginId&quot;, loginId);&#xA;        soapObject.addProperty(&quot;byoinId&quot;, &quot;1&quot;);&#xA;&#xA;        envelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);&#xA;&#xA;        envelope.setOutputSoapObject(soapObject);&#xA;&#xA;        // Calling the web service&#xA;        System.gc();&#xA;        androidHttpTransport = new HttpTransportSE(URL);&#xA;        androidHttpTransport.call(SOAP_ACTION, envelope);&#xA;&#xA;        // Getting Response through xml mainly generated as soap:reponse.&#xA;        responseBean = (SoapObject) envelope.getResponse();&#xA;&#xA;        // Array of PDFInfoBean.&#xA;        list = (SoapObject) responseBean.getProperty(0);&#xA;&#xA;        FileOutputStream outputStream = null;&#xA;        BufferedOutputStream bufferedOutputStream = null;&#xA;        // Get Individual PDF Details from Array.&#xA;        SoapObject pdfDetails = null;&#xA;&#xA;        mIncrement = noOfFiles;&#xA;        // Log.i(&quot;Increment Values&quot;, String.valueOf(mIncrement));&#xA;&#xA;        File pdfFile = null;&#xA;        for (int i = 0; i &amp;lt; list.getPropertyCount(); i++) {&#xA;            pdfDetails = (SoapObject) list.getProperty(i);&#xA;&#xA;            // Get PDF File Name.&#xA;            pdfDocName = pdfDetails.getProperty(1).toString();&#xA;            Log.i(TAG, &quot;File Name: &quot; + pdfDocName);&#xA;&#xA;            // Check for last file.&#xA;            if (pdfDocName.equalsIgnoreCase(&quot;EOF&quot;)) {&#xA;                mFlag = false;&#xA;                break;&#xA;            }&#xA;&#xA;            // Creating PDF File.&#xA;            pdfFile = new File(fileDocsDir, pdfDocName);&#xA;&#xA;            // Writing PDF file received through web service.&#xA;            if (pdfFile.exists()) {&#xA;                Log.i(TAG, pdfFile.getName() + &quot; File Already Exists&quot;);&#xA;            } else {&#xA;                outputStream = new FileOutputStream(pdfFile);&#xA;                bufferedOutputStream = new BufferedOutputStream(outputStream);&#xA;&#xA;                bufferedOutputStream.write(Base64Coder.decode(pdfDetails&#xA;                        .getProperty(0).toString()));&#xA;&#xA;                mIncrement = mIncrement + 1;&#xA;&#xA;                bufferedOutputStream.close();&#xA;                outputStream.close();&#xA;&#xA;                bufferedOutputStream = null;&#xA;                outputStream = null;&#xA;            }&#xA;            pdfDetails = null;&#xA;            pdfDocName = null;&#xA;            pdfFile = null;&#xA;            System.gc();&#xA;        }&#xA;        soapObject = null;&#xA;        envelope = null;&#xA;        responseBean = null;&#xA;        list = null;&#xA;        androidHttpTransport = null;&#xA;&#xA;        System.gc();&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1433" LastEditorUserId="7076" LastEditDate="2012-10-26T22:43:30.800" LastActivityDate="2012-10-26T22:43:30.800" Title="How to increase download speed using the following method?" Tags="&lt;java&gt;&lt;android&gt;&lt;soap&gt;" AnswerCount="2" CommentCount="3" />
  <row Id="944" PostTypeId="2" ParentId="940" CreationDate="2011-02-23T12:36:16.763" Score="4" Body="&lt;p&gt;First of all your variable &lt;code&gt;IPAddress&lt;/code&gt; is misnamed. It sounds as if it contained a single IP address, but in fact it contains a list of multiple triples, where each one does not only contain an IP address, but also the corresponding broadcast address and netmask. You should probably call it something like &lt;code&gt;IPTriples&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you look at your code it's basically doing three things:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Filtering out localhost&lt;/li&gt;&#xA;&lt;li&gt;Replacing each ip address with a string representation&lt;/li&gt;&#xA;&lt;li&gt;Concatenating the thus created list of strings, separating them with spaces.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;For each of these 3 steps there's already an erlang function, which can be used to do it:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;lists:filter&lt;/code&gt; which takes a predicate and a list and returns a list only containing elements that match this predicate.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;lists:map&lt;/code&gt; which takes a function and a list and returns a list containing the result of the function for each element.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;string:join&lt;/code&gt; which takes a list of strings and a separator and returns a string with each item in the list separated by the separator.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;Usually it it is good style to reuse existing functionality as much as possible instead of reimplementing it. So using these functions, your &lt;code&gt;get_ip_address_string&lt;/code&gt; can be rewritten to something like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;get_ip_address_string() -&amp;gt;&#xA;    {ok, IPTriples} = inet:getif(),&#xA;    FilteredIPTriples = lists:filter(fun is_not_localhost/1), IPTriples),&#xA;    IPAddresses = lists:map(fun ip_triple_to_string/1, FilteredIPTriples),&#xA;    string:join(IPAddresses, &quot; &quot;).&#xA;&#xA;is_not_localhost({{127,0,0,1}, _Broadcast, _Mask}) -&amp;gt; false;&#xA;is_not_localhost({_IP, _Broadcast, _Mask})         -&amp;gt; true.&#xA;&#xA;ip_triple_to_string({{Oct1, Oct2, Oct3, Oct4}, _Broadcast, _Mask}) -&amp;gt;&#xA;    io_lib:format(&quot;~b.~b.~b.~b&quot;, [Oct1, Oct2, Oct3, Oct4]).&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note that this has also the benefit that the logic for filtering out localhost, the logic for turning the IP addresses into strings and the logic for building the result string from that are now no longer intertwined, which should make the code more manageable.&lt;/p&gt;&#xA;" OwnerUserId="128" LastEditorUserId="128" LastEditDate="2011-02-23T13:14:47.637" LastActivityDate="2011-02-23T13:14:47.637" CommentCount="0" />
  <row Id="945" PostTypeId="2" ParentId="940" CreationDate="2011-02-23T14:08:01.530" Score="6" Body="&lt;p&gt;My solution is close to sepp2k's:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;First a simpler conversion routine:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;ip_triple_to_string(Tup) -&amp;gt;&#xA;    io_lib:format(&quot;~b.~b.~b.~b&quot;, tuple_to_list(Tup)).&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then the meat:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;get_ip_address_string() -&amp;gt;&#xA;    {ok, IPTriples} = inet:getif(),&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Not much you can do here. You have to assert that you really got data from the &lt;code&gt;getif/0&lt;/code&gt; call.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    Strings = [ip_triple_to_string(IP) || {IP, _, _} &amp;lt;- IPTriples,&#xA;                IP =/= {127,0,0,1}],&#xA;    string:join(Strings, &quot; &quot;).&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The list comprehension captures the map and filter in one go over the list. Otherwise, it is much like the other definition.&lt;/p&gt;&#xA;" OwnerUserId="2071" LastActivityDate="2011-02-23T14:08:01.530" CommentCount="0" />
  <row Id="946" PostTypeId="1" AcceptedAnswerId="953" CreationDate="2011-02-23T15:10:37.940" Score="8" ViewCount="922" Body="&lt;p&gt;Trying to refactor this code and can't seem to think of a way to make it cleaner. &lt;code&gt;Type&lt;/code&gt; is  a property in my &lt;code&gt;Person&lt;/code&gt; class.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;foreach (var item in list)&#xA;{&#xA;    if (person.Type != PersonType.Employee &amp;amp;&amp;amp; person.Type != PersonType.Manager &amp;amp;&amp;amp; person.Type != PersonType.Contractor &amp;amp;&amp;amp; person.Type != PersonType.Executive)&#xA;    {&#xA;        DoSomething();&#xA;    }&#xA;}&#xA;&#xA;public enum PersonType : int {&#xA;   Employee = 0,&#xA;   Manager = 1,&#xA;   Contractor = 2,&#xA;   President = 3,&#xA;   Executive = 4&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I should note that there are other types in the &lt;code&gt;PersonType&lt;/code&gt; class which I don't want to show.&lt;/p&gt;&#xA;" OwnerUserId="1095" LastEditorUserId="27623" LastEditDate="2014-12-19T21:44:49.497" LastActivityDate="2014-12-19T21:44:49.497" Title="Refactoring a bunch of and statements" Tags="&lt;c#&gt;&lt;.net&gt;" AnswerCount="7" CommentCount="0" FavoriteCount="4" />
  <row Id="947" PostTypeId="2" ParentId="946" CreationDate="2011-02-23T15:21:06.110" Score="2" Body="&lt;p&gt;I would probably go with code that looked like this.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;list.ForEach(c =&amp;gt; &#xA;                {&#xA;                    if (DoAction(c.Type))&#xA;                    {&#xA;                        DoSomething();&#xA;                    }&#xA;                });&#xA;&#xA;&#xA;private static bool DoAction(PersonType personType)&#xA;        {&#xA;            switch (personType)&#xA;            {&#xA;                case PersonType.Employee:            &#xA;                case PersonType.Manager:            &#xA;                case PersonType.Contractor:           &#xA;                case PersonType.Executive:&#xA;                    return false;&#xA;                default:&#xA;                    return true;&#xA;            }&#xA;        }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2074" LastEditorUserId="2074" LastEditDate="2011-02-23T15:31:15.667" LastActivityDate="2011-02-23T15:31:15.667" CommentCount="3" />
  <row Id="949" PostTypeId="2" ParentId="946" CreationDate="2011-02-23T15:31:16.510" Score="2" Body="&lt;p&gt;You could use Enum.IsDefined. It has some disadvantages. It can be slow, and it is not strongly typed, but I do like how it reads.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;foreach (var item in list)&#xA;{&#xA;    if (!Enum.IsDefined(typeof(PersonType), person.Type))&#xA;    {&#xA;        DoSomething();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="163" LastActivityDate="2011-02-23T15:31:16.510" CommentCount="1" />
  <row Id="950" PostTypeId="2" ParentId="946" CreationDate="2011-02-23T15:41:13.607" Score="5" Body="&lt;p&gt;[Edit] Corrected given edit to question&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Try something more like this&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;[Flags]&#xA;public enum PersonType&#xA;{&#xA;    None = 0,&#xA;    Employee = 1 &amp;lt;&amp;lt; 0,&#xA;    Manager = 1 &amp;lt;&amp;lt; 1,&#xA;    Contractor = 1 &amp;lt;&amp;lt; 2,&#xA;    President = 1 &amp;lt;&amp;lt; 3,&#xA;    Executive = 1 &amp;lt;&amp;lt; 4&#xA;}&#xA;&#xA;foreach (var item in list)&#xA;{&#xA;    if ((person.Type &amp;amp; PersonType.President) == 0)&#xA;    {&#xA;        DoSomething();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You can now also add combined values such as&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;[Flags]&#xA;public enum PersonType&#xA;{&#xA;    None = 0,&#xA;    Employee = 1 &amp;lt;&amp;lt; 0,&#xA;    Manager = 1 &amp;lt;&amp;lt; 1,&#xA;    Contractor = 1 &amp;lt;&amp;lt; 2,&#xA;    President = 1 &amp;lt;&amp;lt; 3,&#xA;    Executive = 1 &amp;lt;&amp;lt; 4,&#xA;    NotPresident = Employee | Manager | Contractor | Executive,&#xA;    Boss = Manager | President | Executive&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Given this enumeration, this NUnit test passes&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;[Test]&#xA;public void TestEnum()&#xA;{&#xA;    var personType = PersonType.Manager | PersonType.Contractor;&#xA;    Assert.That(personType == PersonType.None, Is.Not.True);&#xA;    Assert.That((personType &amp;amp; PersonType.Manager) != 0, Is.True);&#xA;    Assert.That((personType &amp;amp; PersonType.Boss) != 0, Is.True);&#xA;    Assert.That((personType &amp;amp; PersonType.Employee) != 0, Is.Not.True);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1416" LastEditorUserId="1416" LastEditDate="2011-02-23T16:24:32.070" LastActivityDate="2011-02-23T16:24:32.070" CommentCount="2" />
  <row Id="951" PostTypeId="2" ParentId="931" CreationDate="2011-02-23T15:43:49.610" Score="4" Body="&lt;p&gt;What we have here is a tree data structure. Unfortunately it is an implicit tree structure which means we can't easily write some generic code to search the tree.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Make the tree structure explicit&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So, what we first need is an adapter that can help to make things more generic. I don't know if these classes share a common base class, so everything will have to use &lt;strong&gt;object&lt;/strong&gt;. If there is a common base class this will make things much tidier..&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We can have a class like so :&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public static class BranchExtensions&#xA;{&#xA;    public static Dictionary&amp;lt;Type, Func&amp;lt;object, IEnumerable&amp;gt;&amp;gt; NextLevels = new Dictionary&amp;lt;Type, Func&amp;lt;object, IEnumerable&amp;gt;&amp;gt; ();&#xA;&#xA;    private static IEnumerable NextLevel ( object branch )&#xA;    {&#xA;        Func&amp;lt;object, IEnumerable&amp;gt; nextLevel;&#xA;        if (NextLevels.TryGetValue(branch.GetType (), out nextLevel))&#xA;            return nextLevel ( branch );&#xA;        else&#xA;            return null;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then we need some initialization code somewhere :&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;BranchExtensions.NextLevels.Add ( typeof ( Foo_LevelOneItem ), level =&amp;gt; ( (Foo_LevelOneItem) level ).Level2Items );&#xA;BranchExtensions.NextLevels.Add ( typeof ( Foo_LevelTwoItem ), level =&amp;gt; ( (Foo_LevelTwoItem) level ).Level3Items );&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now, given any item in the heirarchy I can call &lt;code&gt;NextLevel&lt;/code&gt; and get an Enumerator for its next level.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Write some general utility functions&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This enables us to write some generic code.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What we need to do is walk the tree, collecting the objects we want along the way. When we read a leaf node, we want to process.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So we add the following to our BranchExtensions :&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    private static IEnumerable&amp;lt;Dictionary&amp;lt;Type, object&amp;gt;&amp;gt; Flatten ( object branch, Predicate&amp;lt;object&amp;gt; collect, Dictionary&amp;lt;Type, object&amp;gt; collection )&#xA;    {&#xA;        IEnumerable nextLevel = NextLevel ( branch );&#xA;        if ( nextLevel != null )&#xA;        {&#xA;            foreach ( object next in nextLevel )&#xA;            {&#xA;                if ( next != null )&#xA;                {&#xA;                    // Do we want to collect this type&#xA;                    if ( collect ( next.GetType () ) )&#xA;                        collection[next.GetType ()] = next;&#xA;&#xA;                    if ( NextLevel ( next ) == null )&#xA;                    {&#xA;                        // This is a leaf node.&#xA;                        yield return collection;&#xA;                        collection.Remove (next.GetType ());&#xA;                    }&#xA;                    else&#xA;                    {&#xA;                        // This is a branch, so recurse down the tree.&#xA;                        foreach ( var more in Flatten ( next, collect, collection ) )&#xA;                        {&#xA;                            if ( more != null )&#xA;                            {&#xA;                                yield return more;&#xA;                                collection.Remove ( more.GetType () );&#xA;                            }&#xA;                        }&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    public static IEnumerable&amp;lt;Dictionary&amp;lt;Type, object&amp;gt;&amp;gt; Flatten ( this Predicate&amp;lt;object&amp;gt; collect, object branch )&#xA;    {&#xA;        return Flatten ( branch, collect, new Dictionary&amp;lt;Type, object&amp;gt; () );&#xA;    }&#xA;&#xA;    public static Predicate&amp;lt;object&amp;gt; Collect ( Predicate&amp;lt;object&amp;gt; collect )&#xA;    {&#xA;        return collect;&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The first Flatten method does all the work. It is pretty horrendous and I'm sure it could be tidied up and refactored, I just hacked it together to demonstrate the point.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The second Flatten method is the entry point method. This creates a new Dictionary to collect our values and passes the call along. It should do some validation here as well really. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;As a slight frill - this is an extension method on Predicate. The Collect method following is even stranger and does nothing really. It is just there to enable a more fluent interface when coming to use it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Use the code&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The Nested loops can then be converted to something like the following :&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;foreach ( var collection in BranchExtensions.Collect( type =&amp;gt; type == typeof(Foo_LevelFiveItem) || type == typeof(Foo_LevelSixItem)).Flatten ( rootObject ) )&#xA;{&#xA;    var levelFiveItem = collection[typeof(Foo_LevelFiveItem)] as Foo_LevelFiveItem;&#xA;    var levelSixItem = collection[typeof(Foo_LevelSixItem)] as Foo_LevelSixItem&#xA;&#xA;    // Do stuff on our items...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It looks like a lot of work to acheive a small thing. It all depends on how much you need to use this stuff. If you have only got a single nested loop in your entire application, then none of this makes sense and I would just suck up the nested loop and carry on.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But,&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you have nested loops all over your code, then a few utility methods like this would make a lot of sense to abstract the complexity away and allow you to focus on the meaning of what you are trying to do.&lt;/p&gt;&#xA;" OwnerUserId="1756" LastActivityDate="2011-02-23T15:43:49.610" CommentCount="1" />
  <row Id="952" PostTypeId="2" ParentId="946" CreationDate="2011-02-23T17:30:28.110" Score="0" Body="&lt;p&gt;If this is just a one shot test, then I would use something like this. If this was used in multiple places, I would probably use flags like pdr.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;PersonType[] ignoredPersonTypes = &#xA;{&#xA;    PersonType.Employee,&#xA;    PersonType.Manager,&#xA;    PersonType.Contractor,&#xA;    PersonType.Executive,&#xA;}&#xA;&#xA;foreach (var item in list)&#xA;{&#xA;    if (ignoredPersonTypes.Contains(person.Type) == false)&#xA;    {&#xA;        DoSomething();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="17" LastActivityDate="2011-02-23T17:30:28.110" CommentCount="0" />
  <row Id="953" PostTypeId="2" ParentId="946" CreationDate="2011-02-23T17:34:44.890" Score="13" Body="&lt;p&gt;&lt;strong&gt;If the “allowedness” of a &lt;code&gt;PersonType&lt;/code&gt; value is specific to the particular algorithm you are writing,&lt;/strong&gt; I usually write this as an array:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var disallowedTypes = new[] {&#xA;    PersonType.Employee,&#xA;    PersonType.Manager,&#xA;    PersonType.Contractor,&#xA;    PersonType.Executive&#xA;};&#xA;&#xA;foreach (var item in list.Where(p =&amp;gt; !disallowedTypes.Contains(p.Type)))&#xA;    DoSomething(item);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;If this set of disallowed types is central to your application&lt;/strong&gt; (or to a particular class), I would declare it as a static field in a static class (or the relevant class). That way your entire program (or that class) has convenient access to it, and you only need to update it in a single place if the business logic changes:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public static class Data&#xA;{&#xA;    public static readonly PersonType[] DisallowedTypes = {&#xA;        PersonType.Employee,&#xA;        PersonType.Manager,&#xA;        PersonType.Contractor,&#xA;        PersonType.Executive&#xA;    };&#xA;}&#xA;&#xA;// [ ... ]&#xA;&#xA;foreach (var item in list.Where(p =&amp;gt; !Data.DisallowedTypes.Contains(p.Type)))&#xA;    DoSomething(item);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;If the set of disallowed types is inherent in the semantics of the &lt;code&gt;PersonType&lt;/code&gt; enum itself,&lt;/strong&gt; I would make this very explicit by using custom attributes in the enum type itself. Of course you should think up a more descriptive name than &lt;code&gt;IsAllowed&lt;/code&gt; and fix the XML comment on the attribute type to explain what it &lt;em&gt;really&lt;/em&gt; means:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/// &amp;lt;summary&amp;gt;Specifies that a &amp;lt;see cref=&quot;PersonType&quot;/&amp;gt; value is allowed.&amp;lt;/summary&amp;gt;&#xA;public sealed class IsAllowedAttribute : Attribute { }&#xA;&#xA;public enum PersonType&#xA;{&#xA;    Employee,&#xA;    Manager,&#xA;    Contractor,&#xA;    Executive,&#xA;&#xA;    [IsAllowed]&#xA;    President&#xA;}&#xA;&#xA;public static class Data&#xA;{&#xA;    /// &amp;lt;summary&amp;gt;This array is automatically prefilled with the&#xA;    /// PersonType values that do not have an [IsAllowed] custom attribute.&#xA;    /// To change this array, change the custom attributes in the&#xA;    /// &amp;lt;see cref=&quot;PersonType&quot;/&amp;gt; enum instead.&amp;lt;/summary&amp;gt;&#xA;    public static readonly PersonType[] DisallowedTypes;&#xA;&#xA;    static Data()&#xA;    {&#xA;        DisallowedTypes = typeof(PersonType)&#xA;            .GetFields(BindingFlags.Public | BindingFlags.Static)&#xA;            .Where(f =&amp;gt; !f.IsDefined(typeof(IsAllowedAttribute), false))&#xA;            .Select(f =&amp;gt; f.GetValue(null))&#xA;            .ToArray();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This way the information whether any particular enum value is allowed or not is stored in the enum itself and no-where else. That makes the code very explicit, easy to follow, and easy to modify in obviously-correct ways.&lt;/p&gt;&#xA;" OwnerUserId="2063" LastEditorUserId="2063" LastEditDate="2011-02-23T17:41:39.693" LastActivityDate="2011-02-23T17:41:39.693" CommentCount="2" />
  <row Id="954" PostTypeId="2" ParentId="928" CreationDate="2011-02-23T17:58:17.063" Score="5" Body="&lt;p&gt;I only have a few minor comments about your code:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;p&gt;This code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var ctor = implementor.GetConstructor(Type.EmptyTypes);&#xA;if (ctor == null) continue;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;has the potential to mask a bug. Imagine you add a constructor to one of your command-factory types and accidentally forget that this implicitly removes the default constructor. This code will then silently swallow this mistake and simply not list that particular command factory. It would be preferable to throw in this case so that you notice it immediately. Even better, of course, would be to &lt;a href=&quot;http://timwi.blogspot.com/2010/03/ensure-code-quality-using-post-build.html&quot; rel=&quot;nofollow&quot;&gt;use a post-build event to turn this error into a compile-time check&lt;/a&gt; so that you can’t even run the program when it is invalid.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;This code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var instance = ctor.Invoke(null) as ICommandFactory;&#xA;if (instance == null) continue;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;has exactly the same problem, but the consequences are much more subtle. The &lt;code&gt;if (instance == null)&lt;/code&gt; condition &lt;em&gt;should&lt;/em&gt; never fire because the code was written so that the instance cannot be of any other type. Imagine you have a bug in that code. This code swallows this bug and you won’t notice it directly. You will only notice some subtle/weird effects that occur much later, and it will be a pain to trace it back to this code here. You could make it throw like above, but personally I think you should change this to &lt;code&gt;var instance = (ICommandFactory) ctor.Invoke(null);&lt;/code&gt; so that it will automatically throw if it’s not of the right type.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Your code does not allow for a class that implements &lt;code&gt;ICommandFactory&lt;/code&gt; but is not intended to appear in your UI. If you are sure that you don’t want that to be possible, then your code is fine. Otherwise, I would declare a custom attribute — either one that allows you to explicitly &lt;em&gt;exclude&lt;/em&gt; an &lt;code&gt;ICommandFactory&lt;/code&gt; from appearing in the UI, or one that is required on all the &lt;code&gt;ICommandFactory&lt;/code&gt; types to be &lt;em&gt;included&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Very very minor nitpick:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;i =&amp;gt; interfaceType.IsAssignableFrom(i) &amp;amp;&amp;amp; i != interfaceType&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You should perform the simpler check first:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;i =&amp;gt; i != interfaceType &amp;amp;&amp;amp; interfaceType.IsAssignableFrom(i)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;" OwnerUserId="2063" LastActivityDate="2011-02-23T17:58:17.063" CommentCount="1" />
  <row Id="955" PostTypeId="2" ParentId="946" CreationDate="2011-02-23T18:18:26.177" Score="13" Body="&lt;p&gt;This is such a perfect match for the &lt;a href=&quot;http://Refactoring.Com/catalog/replaceConditionalWithPolymorphism.html&quot;&gt;&lt;em&gt;Replace Conditional with Polymorphism&lt;/em&gt; Refactoring&lt;/a&gt; that it even looks as if it was specifically designed to demonstrate the Replace Conditional with Polymorphism Refactoring. I mean, the field it is basing its behavior on is even &lt;em&gt;called&lt;/em&gt; &lt;code&gt;Type&lt;/code&gt;!&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;interface Person { void DoSomething(); }&#xA;&#xA;class PrivilegedPerson : Person {&#xA;    public void DoSomething() {&#xA;        // do something&#xA;    }&#xA;}&#xA;&#xA;class UnprivilegedPerson : Person {&#xA;    public void DoSomething() {} // literally do nothing&#xA;}&#xA;&#xA;class Employee   : UnprivilegedPerson {}&#xA;class Manager    : UnprivilegedPerson {}&#xA;class Contractor : UnprivilegedPerson {}&#xA;class President  : UnprivilegedPerson {}&#xA;class Executive  : UnprivilegedPerson {}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1581" LastEditorUserId="1581" LastEditDate="2011-02-24T20:13:34.400" LastActivityDate="2011-02-24T20:13:34.400" CommentCount="1" />
  <row Id="956" PostTypeId="1" AcceptedAnswerId="959" CreationDate="2011-02-23T18:31:05.457" Score="7" ViewCount="413" Body="&lt;p&gt;I am not very good with thread-safety and often fall prey to subtle issues in concurrency. Therefore, I hope that someone here might be able to tell me whether there is a subtle concurrency issue (race condition etc.) in the following code, or whether it’s fine. In particular, have I used &lt;code&gt;Monitor.Wait&lt;/code&gt; and &lt;code&gt;Monitor.PulseAll&lt;/code&gt; correctly?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Of course, if you can reason about the code and come to the conclusion that it is already correct, that would be a welcome answer too.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This code is intended to implement the &lt;code&gt;costreams&lt;/code&gt; pattern (I invented that name, so you won’t find it in Google). It runs two methods (passed in as delegates) in parallel. It provides one of those methods with a write-only stream and the other with a read-only stream. The idea is for one of them to generate data and write it to the stream, and the other one to read from the stream and consume the data. (The reading/writing methods intended to be passed in could be anything that reads to/writes from a stream; they are not likely to be specifically written to be used with costreams. If they were, they could probably be rewritten so that they wouldn’t need to use streams at all.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;While reviewing the &lt;code&gt;Read&lt;/code&gt; method, remember that the contract for &lt;code&gt;Stream.Read&lt;/code&gt; is slightly counterintuitive: it is allowed to read and return fewer bytes than requested (as long as it returns the number of bytes actually read). Thus the fact that it sometimes returns fewer bytes than the &lt;code&gt;count&lt;/code&gt; parameter requests is not a bug. Of course it must not return 0 except when the end of the stream is reached.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;using System;&#xA;using System.Collections.Generic;&#xA;using System.IO;&#xA;using System.Threading;&#xA;&#xA;namespace MyLibrary&#xA;{&#xA;    public static class Costreams&#xA;    {&#xA;        /// &amp;lt;summary&amp;gt;Runs the two specified processes in parallel, allowing one to generate data by writing it to a stream, and the other to consume the data by reading it from a stream.&amp;lt;/summary&amp;gt;&#xA;        /// &amp;lt;param name=&quot;writingAction&quot;&amp;gt;An action that generates data and writes it to a stream.&amp;lt;/param&amp;gt;&#xA;        /// &amp;lt;param name=&quot;readingAction&quot;&amp;gt;An action that will want to read information from a stream.&amp;lt;/param&amp;gt;&#xA;        public static void RunCostreams(Action&amp;lt;Stream&amp;gt; writingAction, Action&amp;lt;Stream&amp;gt; readingAction)&#xA;        {&#xA;            // Everything the writingAction writes will be enqueued in here and dequeued by the readingAction&#xA;            var queue = new Queue&amp;lt;byteChunk&amp;gt;();&#xA;&#xA;            writingCostream writer = new writingCostream(queue);&#xA;            readingCostream reader = new readingCostream(queue);&#xA;&#xA;            // Start reading in a new thread. The first call to reader.Read() will block until there is something in the queue to read.&#xA;            var thread = new Thread(() =&amp;gt; readingAction(reader));&#xA;            thread.Start();&#xA;&#xA;            // Start writing. Calls to writer.Write() will place the data in the queue and signal the reading thread.&#xA;            writingAction(writer);&#xA;&#xA;            // Insert a null at the end of the queue to signal to the reader that this is where the data ends.&#xA;            queue.Enqueue(null);&#xA;&#xA;            // Wait for the reader to consume all the remaining data.&#xA;            thread.Join();&#xA;        }&#xA;&#xA;        private sealed class byteChunk&#xA;        {&#xA;            public byte[] Buffer;&#xA;            public int Offset;&#xA;            public int Count;&#xA;        }&#xA;&#xA;        private sealed class readingCostream : Stream&#xA;        {&#xA;            private Queue&amp;lt;byteChunk&amp;gt; _queue;&#xA;            public readingCostream(Queue&amp;lt;byteChunk&amp;gt; queue) { _queue = queue; }&#xA;&#xA;            public override bool CanRead { get { return true; } }&#xA;            public override bool CanSeek { get { return false; } }&#xA;            public override bool CanWrite { get { return false; } }&#xA;            public override void Flush() { }&#xA;            public override long Length { get { throw new NotSupportedException(); } }&#xA;            public override long Position { get { throw new NotSupportedException(); } set { throw new NotSupportedException(); } }&#xA;            public override long Seek(long offset, SeekOrigin origin) { throw new NotSupportedException(); }&#xA;            public override void SetLength(long value) { throw new NotSupportedException(); }&#xA;            public override void Write(byte[] buffer, int offset, int count) { throw new NotSupportedException(); }&#xA;&#xA;            public override int Read(byte[] buffer, int offset, int count)&#xA;            {&#xA;                lock (_queue)&#xA;                {&#xA;                    // If there is no data waiting to be read, wait for it.&#xA;                    while (_queue.Count == 0)&#xA;                        Monitor.Wait(_queue);&#xA;&#xA;                    var peeked = _queue.Peek();&#xA;&#xA;                    // A null element in the queue signals the end of the stream. Don't dequeue this item.&#xA;                    if (peeked == null)&#xA;                        return 0;&#xA;&#xA;                    if (peeked.Count &amp;lt;= count)&#xA;                    {&#xA;                        // If we can return the complete item, dequeue it&#xA;                        Buffer.BlockCopy(peeked.Buffer, peeked.Offset, buffer, offset, peeked.Count);&#xA;                        _queue.Dequeue();&#xA;                        return peeked.Count;&#xA;                    }&#xA;                    else&#xA;                    {&#xA;                        // If we can only return part of the item, modify it accordingly&#xA;                        Buffer.BlockCopy(peeked.Buffer, peeked.Offset, buffer, offset, count);&#xA;                        peeked.Offset += count;&#xA;                        peeked.Count -= count;&#xA;                        return count;&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;&#xA;        private sealed class writingCostream : Stream&#xA;        {&#xA;            private Queue&amp;lt;byteChunk&amp;gt; _queue;&#xA;            public writingCostream(Queue&amp;lt;byteChunk&amp;gt; queue) { _queue = queue; }&#xA;&#xA;            public override bool CanRead { get { return false; } }&#xA;            public override bool CanSeek { get { return false; } }&#xA;            public override bool CanWrite { get { return true; } }&#xA;            public override void Flush() { }&#xA;            public override long Length { get { throw new NotSupportedException(); } }&#xA;            public override long Position { get { throw new NotSupportedException(); } set { throw new NotSupportedException(); } }&#xA;            public override int Read(byte[] buffer, int offset, int count) { throw new NotSupportedException(); }&#xA;            public override long Seek(long offset, SeekOrigin origin) { throw new NotSupportedException(); }&#xA;            public override void SetLength(long value) { throw new NotSupportedException(); }&#xA;&#xA;            public override void Write(byte[] buffer, int offset, int count)&#xA;            {&#xA;                // Ignore zero-length writes&#xA;                if (count == 0)&#xA;                    return;&#xA;&#xA;                lock (_queue)&#xA;                {&#xA;                    // We have to take a copy of the data because the calling thread might re-use the same buffer multiple times.&#xA;                    var bufferCopy = new byte[count];&#xA;                    Buffer.BlockCopy(buffer, offset, bufferCopy, 0, count);&#xA;&#xA;                    // Put the data in the queue&#xA;                    _queue.Enqueue(new byteChunk { Buffer = bufferCopy, Offset = 0, Count = count });&#xA;&#xA;                    // Signal the reading thread(s) that the queue has changed (in case it's waiting)&#xA;                    Monitor.PulseAll(_queue);&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2063" LastEditorUserId="22222" LastEditDate="2015-12-01T20:16:38.250" LastActivityDate="2015-12-01T20:16:38.250" Title="Implementation of costreams" Tags="&lt;c#&gt;&lt;multithreading&gt;&lt;thread-safety&gt;&lt;stream&gt;" AnswerCount="1" CommentCount="10" FavoriteCount="0" />
  <row Id="958" PostTypeId="1" AcceptedAnswerId="40997" CreationDate="2011-02-23T20:04:32.897" Score="8" ViewCount="1088" Body="&lt;p&gt;I have to generate a sequential number for &lt;strong&gt;groovy-grails&lt;/strong&gt; app wide use and came up with the following.  However, is there a better way to do this?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Domain classes:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class RoastIdCounter {&#xA;    int counter =0&#xA;    static constraints = {&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This one has no views or controller associated with it.  It's purely for db interaction in a service class.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class RoastId {&#xA;    Family family&#xA;    Integer nextId&#xA;    long timeCreated = new Date().time&#xA;&#xA;    static constraints = {&#xA;        family()&#xA;        nextId()&#xA;    }&#xA;    static belongsTo = [ Family ]&#xA;}&#xA;&#xA;class Family  extends {&#xA;&#xA;    String farmId;&#xA;    String welcome;&#xA;    String familyName;&#xA;    String ourFarm;&#xA;    String howMuchDoWeGetPaid;&#xA;&#xA;    SortedSet pictureAlbums;&#xA;    SortedSet pictures;&#xA;&#xA;    Integer pictureAlbumsCount = 0;&#xA;    Integer picturesCount = 0;&#xA;&#xA;    Date dateCreated = new Date()&#xA;    Date lastUpdated = new Date()&#xA;&#xA;    static hasMany = [ roastIds : RoastId, pictureAlbums : PictureAlbum, pictures : Picture ]&#xA;&#xA;    static constraints = {&#xA;        farmId()&#xA;        familyName( )&#xA;        welcome( widget:'textarea' )&#xA;        ourFarm( widget:'textarea' )&#xA;        howMuchDoWeGetPaid( widget:'textarea' )&#xA;&#xA;        dateCreated()&#xA;        lastUpdated()&#xA;}&#xA;&#xA;    String toString() { &quot;$farmId - $familyName&quot; }&#xA;&#xA;} // Family&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Service class for dealing with the number generation:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class RoastIdCounterService {&#xA;&#xA;    static transactional = true&#xA;&#xA;    def getNextRoastId() {&#xA;&#xA;        def ric = RoastIdCounter.list()[-1]&#xA;&#xA;        if( ric != null ){&#xA;            ric.lock()&#xA;            ric.counter = ric.counter + 1&#xA;            ric.save()&#xA;            return ric.counter&#xA;        } else {&#xA;            return -1 &#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Controller:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here I'm just sending the object all pre-populated:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def create = {&#xA;    def roastIdInstance = new RoastId()&#xA;    roastIdInstance.properties = params&#xA;    roastIdInstance.nextId = roastIdCounterService.getNextRoastId()&#xA;    return [roastIdInstance: roastIdInstance]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Environment: Grails 1.3.7, PostgreSql 8.4&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Would there be a better way to do this? What potential problems am I overlooking?&lt;/p&gt;&#xA;" OwnerUserId="2084" LastEditorUserId="22222" LastEditDate="2014-01-11T16:09:03.833" LastActivityDate="2014-02-05T19:56:05.263" Title="Generating a sequential number for app-wide use" Tags="&lt;groovy&gt;&lt;grails&gt;" AnswerCount="1" CommentCount="2" FavoriteCount="2" />
  <row Id="959" PostTypeId="2" ParentId="956" CreationDate="2011-02-23T22:09:04.240" Score="5" Body="&lt;p&gt;Depends what you're trying to do. Is it really possible to have multiple Read threads, as the comment suggests? If so then you're going to run a risk of having several Reads released at once and return in the wrong order. If not then why use &lt;code&gt;PulseAll&lt;/code&gt; as opposed to &lt;code&gt;Pulse&lt;/code&gt;?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It feels wrong to me that if Read is called and there are items on the Queue then further calls to Write are locked out, but if Read Waits until Write releases it, then Write is called again, Write will be able to lock the Queue and use it. That said, it shouldn't be a problem given that Read will be dealing with another item at the time.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But that raises the question, why bother with the Wait? Why not replace the whole thing with a &lt;code&gt;ManualResetEvent&lt;/code&gt;? That way, you only have to lock the queue while you're updating it, so that you can &lt;code&gt;Set&lt;/code&gt; the event when you add data, &lt;code&gt;Reset&lt;/code&gt; it when you remove the last item.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I haven't tested it, but it will look a lot like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public static class Costreams&#xA;{&#xA;    /// &amp;lt;summary&amp;gt;Runs the two specified processes in parallel, allowing one to generate data by writing it to a stream, and the other to consume the data by reading it from a stream.&amp;lt;/summary&amp;gt;&#xA;    /// &amp;lt;param name=&quot;writingAction&quot;&amp;gt;An action that generates data and writes it to a stream.&amp;lt;/param&amp;gt;&#xA;    /// &amp;lt;param name=&quot;readingAction&quot;&amp;gt;An action that will want to read information from a stream.&amp;lt;/param&amp;gt;&#xA;    public static void RunCostreams(Action&amp;lt;Stream&amp;gt; writingAction, Action&amp;lt;Stream&amp;gt; readingAction)&#xA;    {&#xA;        // Everything the writingAction writes will be enqueued in here and dequeued by the readingAction&#xA;        var queue = new Queue&amp;lt;byteChunk&amp;gt;();&#xA;        using (var hasData = new ManualResetEvent(false))&#xA;        {&#xA;            writingCostream writer = new writingCostream(queue, hasData);&#xA;            readingCostream reader = new readingCostream(queue, hasData);&#xA;&#xA;            // Start reading in a new thread. The first call to reader.Read() will block until there is something in the queue to read.&#xA;            var thread = new Thread(() =&amp;gt; readingAction(reader));&#xA;            thread.Start();&#xA;&#xA;            // Start writing. Calls to writer.Write() will place the data in the queue and signal the reading thread.&#xA;            writingAction(writer);&#xA;&#xA;            // Insert a null at the end of the queue to signal to the reader that this is where the data ends.&#xA;            lock(queue)&#xA;            {&#xA;                queue.Enqueue(null);&#xA;                hasData.Set();&#xA;            }&#xA;&#xA;            // Wait for the reader to consume all the remaining data.&#xA;            thread.Join();&#xA;        }&#xA;    }&#xA;&#xA;    private sealed class byteChunk&#xA;    {&#xA;        public byte[] Buffer;&#xA;        public int Offset;&#xA;        public int Count;&#xA;    }&#xA;&#xA;    private sealed class readingCostream : Stream&#xA;    {&#xA;        private Queue&amp;lt;byteChunk&amp;gt; _queue;&#xA;        private ManualResetEvent _hasData;&#xA;&#xA;        public readingCostream(Queue&amp;lt;byteChunk&amp;gt; queue, ManualResetEvent hasData)&#xA;        {&#xA;            _queue = queue;&#xA;            _hasData = hasData;&#xA;        }&#xA;&#xA;        public override bool CanRead { get { return true; } }&#xA;        public override bool CanSeek { get { return false; } }&#xA;        public override bool CanWrite { get { return false; } }&#xA;        public override void Flush() { }&#xA;        public override long Length { get { throw new NotSupportedException(); } }&#xA;        public override long Position { get { throw new NotSupportedException(); } set { throw new NotSupportedException(); } }&#xA;        public override long Seek(long offset, SeekOrigin origin) { throw new NotSupportedException(); }&#xA;        public override void SetLength(long value) { throw new NotSupportedException(); }&#xA;        public override void Write(byte[] buffer, int offset, int count) { throw new NotSupportedException(); }&#xA;&#xA;        public override int Read(byte[] buffer, int offset, int count)&#xA;        {&#xA;            // If there is no data waiting to be read, wait for it.&#xA;            _hasData.WaitOne();&#xA;&#xA;            byteChunk peeked;&#xA;            lock(_queue)&#xA;                peeked = _queue.Peek();&#xA;&#xA;            // A null element in the queue signals the end of the stream. Don't dequeue this item.&#xA;            if (peeked == null)&#xA;                return 0;&#xA;&#xA;            if (peeked.Count &amp;lt;= count)&#xA;            {&#xA;                // If we can return the complete item, dequeue it&#xA;                Buffer.BlockCopy(peeked.Buffer, peeked.Offset, buffer, offset, peeked.Count);&#xA;                lock(_queue)&#xA;                {&#xA;                    _queue.Dequeue();&#xA;                    // If this has emptied the queue, tell the next call to read&#xA;                    if (_queue.Count == 0)&#xA;                        _hasData.Reset();&#xA;                }&#xA;&#xA;                return peeked.Count;&#xA;            }&#xA;&#xA;            // If we can only return part of the item, modify it accordingly&#xA;            Buffer.BlockCopy(peeked.Buffer, peeked.Offset, buffer, offset, count);&#xA;            peeked.Offset += count;&#xA;            peeked.Count -= count;&#xA;            return count;&#xA;        }&#xA;    }&#xA;&#xA;    private sealed class writingCostream : Stream&#xA;    {&#xA;        private Queue&amp;lt;byteChunk&amp;gt; _queue;&#xA;        private ManualResetEvent _hasData;&#xA;        public writingCostream(Queue&amp;lt;byteChunk&amp;gt; queue, ManualResetEvent _hasData)&#xA;        {&#xA;            _queue = queue;&#xA;            _hasData = hasData;&#xA;        }&#xA;&#xA;        public override bool CanRead { get { return false; } }&#xA;        public override bool CanSeek { get { return false; } }&#xA;        public override bool CanWrite { get { return true; } }&#xA;        public override void Flush() { }&#xA;        public override long Length { get { throw new NotSupportedException(); } }&#xA;        public override long Position { get { throw new NotSupportedException(); } set { throw new NotSupportedException(); } }&#xA;        public override int Read(byte[] buffer, int offset, int count) { throw new NotSupportedException(); }&#xA;        public override long Seek(long offset, SeekOrigin origin) { throw new NotSupportedException(); }&#xA;        public override void SetLength(long value) { throw new NotSupportedException(); }&#xA;&#xA;        public override void Write(byte[] buffer, int offset, int count)&#xA;        {&#xA;            // Ignore zero-length writes&#xA;            if (count == 0)&#xA;                return;&#xA;&#xA;            // We have to take a copy of the data because the calling thread might re-use the same buffer multiple times.&#xA;            var bufferCopy = new byte[count];&#xA;            Buffer.BlockCopy(buffer, offset, bufferCopy, 0, count);&#xA;&#xA;            // Put the data in the queue&#xA;            lock (_queue)&#xA;            {&#xA;                _queue.Enqueue(new byteChunk { Buffer = bufferCopy, Offset = 0, Count = count });&#xA;&#xA;                // Inform the reading thread that the queue now has data&#xA;                _hasData.Set();&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;A couple of other comments from a Review standpoint:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Microsoft's Naming Standards for C# suggest that class names should be PascalCase&lt;/li&gt;&#xA;&lt;li&gt;You might also want to look at another &lt;code&gt;ManualResetEvent&lt;/code&gt; for memory overloads - if Write gets called many times and you run out of memory, you may want to wait until Read has removed some data from the Queue, rather than failing with an &lt;code&gt;OutOfMemoryException&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="1416" LastEditorUserId="2063" LastEditDate="2011-02-28T15:55:32.850" LastActivityDate="2011-02-28T15:55:32.850" CommentCount="6" />
  <row Id="960" PostTypeId="2" ParentId="881" CreationDate="2011-02-23T22:53:44.107" Score="4" Body="&lt;p&gt;Use the JavaScriptSerializer from System.Web.Extensions&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;&amp;lt;%: new JavaScriptSerializer().Serialize(items) %&amp;gt;&lt;/code&gt;&lt;/p&gt;&#xA;" OwnerUserId="2088" LastActivityDate="2011-02-23T22:53:44.107" CommentCount="0" />
  <row Id="963" PostTypeId="2" ParentId="946" CreationDate="2011-02-24T04:12:32.207" Score="3" Body="&lt;p&gt;Assuming you don't want to turn &lt;code&gt;PersonType&lt;/code&gt; into an actual polymorphic class, a simple cleanup is:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;foreach (var item in list)&#xA;{&#xA;    switch (person.Type) {&#xA;    case PersonType.Employee:&#xA;    case PersonType.Manager:&#xA;    case PersonType.Contractor:&#xA;    case PersonType.Executive:&#xA;        // Do nothing.&#xA;        break;&#xA;    default:&#xA;        DoSomething();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You have to be careful with enums, though. If a new &lt;code&gt;PersonType&lt;/code&gt; is added, is &lt;code&gt;DoSomething()&lt;/code&gt; the correct behavior for that type? A safer implementation won't rely on &lt;code&gt;default&lt;/code&gt;.&lt;/p&gt;&#xA;" OwnerUserId="816" LastActivityDate="2011-02-24T04:12:32.207" CommentCount="1" />
  <row Id="966" PostTypeId="1" AcceptedAnswerId="969" CreationDate="2011-02-24T10:04:59.017" Score="4" ViewCount="1553" Body="&lt;p&gt;I have a hierarchy of of groups, and I want to get a collection of all the lowest level groups (or leaves if we'll look at this as a tree).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I wrote the following code. Is it inefficient?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public static class FeatureWeightGroupExtensions&#xA;{&#xA;    public static IEnumerable&amp;lt;IFeatureWeightGroup&amp;gt; GetLeafGroups(this IFeatureWeightGroup featureWeightGroup)&#xA;    {&#xA;        return GetLeafGroupsRecursive(featureWeightGroup).ToList();&#xA;    }&#xA;&#xA;    private static IEnumerable&amp;lt;IFeatureWeightGroup&amp;gt; GetLeafGroupsRecursive(IFeatureWeightGroup featureWeightGroup)&#xA;    {&#xA;        if (!featureWeightGroup.ChildGroups.Any())&#xA;            return Enumerable.Repeat(featureWeightGroup, 1);&#xA;&#xA;        return featureWeightGroup.ChildGroups.Aggregate(Enumerable.Empty&amp;lt;IFeatureWeightGroup&amp;gt;(),&#xA;                                                        (allGroups, group) =&amp;gt;&#xA;                                                        allGroups.Concat(GetLeafGroupsRecursive(group)));&#xA;    }&#xA;}                      &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2094" LastEditorUserId="31503" LastEditDate="2014-03-25T05:16:33.487" LastActivityDate="2014-03-25T05:16:33.487" Title="Is this Recursion + Linq example inefficient?" Tags="&lt;c#&gt;&lt;linq&gt;&lt;recursion&gt;" AnswerCount="2" CommentCount="1" FavoriteCount="2" />
  <row Id="968" PostTypeId="1" AcceptedAnswerId="974" CreationDate="2011-02-24T13:03:07.473" Score="4" ViewCount="178" Body="&lt;p&gt;I need to parse an invalid JSON string in which I find many repetitions of the same key, like the following snippet:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;[...]&#xA;&quot;term&quot; : {&quot;Entry&quot; : &quot;value1&quot;, [.. other data ..]},&#xA;&quot;term&quot; : {&quot;Entry&quot; : &quot;value2&quot;, [.. other data ..]},&#xA;[...]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I thought of appending a suffix to each key, and I do it using the following code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;word = &quot;term&quot;&#xA;offending_string = '&quot;term&quot; : {&quot;Entry&quot;'&#xA;replacing_string_template = '&quot;%s_d&quot; : {&quot;Entry&quot;'&#xA;&#xA;counter = 0&#xA;index = 0&#xA;while index != -1:&#xA;    # result is the string containing the JSON data&#xA;    index = result.find(offending_string, index)&#xA;    result = result.replace(offending_string,&#xA;                replacing_string_template % (word, counter), 1)&#xA;    counter += 1&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It works, but I'd like to know if it is a good approach and if you would do this in a different way.&lt;/p&gt;&#xA;" OwnerUserId="1445" LastEditorUserId="1445" LastEditDate="2011-02-24T17:30:56.717" LastActivityDate="2011-02-24T17:30:56.717" Title="Substitution of different occurrences of a string with changing patterns" Tags="&lt;python&gt;&lt;parsing&gt;&lt;strings&gt;&lt;json&gt;" AnswerCount="1" CommentCount="0" FavoriteCount="1" />
  <row Id="969" PostTypeId="2" ParentId="966" CreationDate="2011-02-24T13:14:40.377" Score="4" Body="&lt;pre&gt;&lt;code&gt;return featureWeightGroup.ChildGroups.Aggregate(Enumerable.Empty&amp;lt;IFeatureWeightGroup&amp;gt;(),&#xA;                                                    (allGroups, group) =&amp;gt;&#xA;                                                    allGroups.Concat(GetLeafGroupsRecursive(group)));&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It looks like it can be replaced with:  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;return featureWeightGroup.ChildGroups&#xA;           .SelectMany(g =&amp;gt; GetLeafGroupsRecursive(group));&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Which probably will not be much better from performance point of view, but looks cleaner.&lt;/p&gt;&#xA;" OwnerUserId="645" LastEditorUserId="2063" LastEditDate="2011-02-27T01:45:24.923" LastActivityDate="2011-02-27T01:45:24.923" CommentCount="1" />
  <row Id="972" PostTypeId="1" AcceptedAnswerId="1014" CreationDate="2011-02-24T15:41:31.883" Score="7" ViewCount="278" Body="&lt;p&gt;I'm quite new to JavaScript, and I'd like a review of the code structure and syntax. It serves &lt;a href=&quot;http://florent2.github.com/test-regexp-online/&quot; rel=&quot;nofollow&quot;&gt;this little online regexp test&lt;/a&gt; (still a work in progress).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The whole code (JavaScript, CSS &amp;amp; HTML) &lt;a href=&quot;https://github.com/Florent2/test-regexp-online&quot; rel=&quot;nofollow&quot;&gt;is on GitHub&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;application.js:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function update_result_for(input, regexp_value) {&#xA;  var input_value   = input.val();&#xA;  var result_spans  = input.parent().children('span');        &#xA;  if(!input_value || !$('#regexp').val()) {&#xA;    result_spans.hide();&#xA;  } else {&#xA;    var regexp = new RegExp(regexp_value);&#xA;    var result = regexp.exec(input_value);&#xA;    if(result) {&#xA;      var matched_string = result.shift();&#xA;&#xA;      var submatches_list_string = jQuery.map(result, function(submatch, index) {&#xA;        return '$' + (index + 1) + ' = ' + submatch;&#xA;      }).join('; ');&#xA;&#xA;      var regexp_to_highlight_matched_string          = new RegExp('(.*)' + matched_string + '(.*)');&#xA;      var regexp_to_highlight_matched_string_result   = regexp_to_highlight_matched_string.exec(input_value);&#xA;      var before_matched_string                       = regexp_to_highlight_matched_string_result[1];&#xA;      var after_matched_string                        = regexp_to_highlight_matched_string_result[2];&#xA;      var input_value_with_matched_string_highlighted   = 'matched: ' + before_matched_string + '&amp;lt;span class=&quot;matched&quot;&amp;gt;' + matched_string + '&amp;lt;/span&amp;gt;' + after_matched_string;&#xA;&#xA;      result_spans.filter(&quot;.submatches&quot;).text(submatches_list_string);&#xA;      result_spans.filter(&quot;.match&quot;).html(input_value_with_matched_string_highlighted);&#xA;      result_spans.filter(&quot;.ok&quot;).show('fast');            &#xA;      result_spans.filter(&quot;.not_ok&quot;).hide();&#xA;    } else {&#xA;      result_spans.filter(&quot;.not_ok&quot;).show('fast');&#xA;      result_spans.filter(&quot;.ok&quot;).hide();&#xA;    }&#xA;  }&#xA;}       &#xA;&#xA;// from http://www.scottklarr.com/topic/126/how-to-create-ctrl-key-shortcuts-in-javascript/&#xA;var isCtrl = false;&#xA;$(document).keyup(function (e) {&#xA;    if(e.which === 17) isCtrl=false;&#xA;}).keydown(function (e) {&#xA;    if(e.which === 17) isCtrl=true;&#xA;    if(e.which === 69 &amp;amp;&amp;amp; isCtrl) {&#xA;    $('#regexp').focus();          &#xA;        return false;&#xA;    }&#xA;});&#xA;&#xA;$(document).ready(function() {&#xA;  $('#regexp').focus();&#xA;  $('span.result').hide();&#xA;  $('input:not(#regexp)').live(&quot;keyup&quot;, function() {&#xA;    update_result_for($(this), $('#regexp').val());&#xA;  });        &#xA;  $('input#regexp').keyup(function() {&#xA;    $('input:not(#regexp)').each(function(i) {&#xA;      update_result_for($(this), $('#regexp').val());&#xA;    });          &#xA;  });&#xA;  $('a.add_example').click(function() {&#xA;    new_example = $('div#examples p:last').clone();&#xA;    new_example.children('input').attr('value', '');&#xA;    new_example.children('span').hide();&#xA;    new_example.insertBefore($(this));&#xA;    new_example.children(&quot;input&quot;).focus();&#xA;  });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1808" LastEditorUserId="22222" LastEditDate="2014-12-19T21:58:57.840" LastActivityDate="2014-12-19T21:58:57.840" Title="JavaScript portion of regexp tester" Tags="&lt;javascript&gt;&lt;jquery&gt;" AnswerCount="2" CommentCount="0" FavoriteCount="1" />
  <row Id="973" PostTypeId="2" ParentId="966" CreationDate="2011-02-24T15:42:37.983" Score="3" Body="&lt;p&gt;As already pointed out by &lt;em&gt;Snowbear&lt;/em&gt; and my comment on his answer, you can improve the performance &lt;em&gt;and&lt;/em&gt; readability by using &lt;code&gt;SelectMany&lt;/code&gt; instead of &lt;code&gt;Concat&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;However, I notice that you are using &lt;code&gt;ToList()&lt;/code&gt; at the end anyway. This pulls into question the benefit of using LINQ and all those &lt;code&gt;SelectMany&lt;/code&gt; iterators in the first place. Using LINQ sacrifices performance at the benefit of lazy evaluation, but you are not using the lazy-evaluation aspect. Therefore, if performance is what you are after, then don’t use LINQ that much:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public static class FeatureWeightGroupExtensions&#xA;{&#xA;    public static IEnumerable&amp;lt;IFeatureWeightGroup&amp;gt; GetLeafGroups(this IFeatureWeightGroup featureWeightGroup)&#xA;    {&#xA;        var list = new List&amp;lt;IFeatureWeightGroup&amp;gt;();&#xA;        populateList(list, featureWeightGroup);&#xA;        return list;&#xA;    }&#xA;&#xA;    private static void populateList(List&amp;lt;IFeatureWeightGroup&amp;gt; list, IFeatureWeightGroup featureWeightGroup)&#xA;    {&#xA;        if (!featureWeightGroup.ChildGroups.Any())&#xA;            list.Add(featureWeightGroup);&#xA;        else&#xA;            foreach (var childGroup in featureWeightGroup.ChildGroups)&#xA;                populateList(list, childGroup);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This is the most performance-optimised way I can think of, while at the same time also being significantly easier to read than the original &lt;em&gt;or&lt;/em&gt; the &lt;code&gt;SelectMany&lt;/code&gt; alternative.&lt;/p&gt;&#xA;" OwnerUserId="2063" LastActivityDate="2011-02-24T15:42:37.983" CommentCount="4" />
  <row Id="974" PostTypeId="2" ParentId="968" CreationDate="2011-02-24T17:19:37.210" Score="4" Body="&lt;pre&gt;&lt;code&gt;import json&#xA;&#xA;def fixup(pairs):&#xA;   return pairs&#xA;&#xA;decoded = json.loads(bad_json, object_pairs_hook = fixup)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;object_pairs_hook is a more recent addition. If you have an older version of python you may not have it. The resulting python object will contain lists of pairs (including duplicates) rather then dictionaries. &lt;/p&gt;&#xA;" OwnerUserId="1659" LastActivityDate="2011-02-24T17:19:37.210" CommentCount="2" />
  <row Id="975" PostTypeId="1" AcceptedAnswerId="976" CreationDate="2011-02-24T18:30:22.743" Score="10" ViewCount="178" Body="&lt;p&gt;As I'm creating a 3D Tic-Tac-Toe game, I'm having several modules inside my JavaScript application. For example, there is a 3D module which handles perspective calculations, whereas a Multiplayer module manages everything with relation to online playing.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Is it good practice to put functions of each module in its separate object?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I currently have:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;multiplayer.js:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var Multiplayer = {&#xA;    socket: new Socket(&quot;ws://192.168.0.100:123/test&quot;), // Relevant variables concerning multiplayer stuff&#xA;&#xA;    createSession:&#xA;    function() {&#xA;       //...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;renderer.js:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var Renderer = {&#xA;    f: 200, // Relevant variables concerning 3D rendering stuff&#xA;    g: 200;&#xA;&#xA;    render:&#xA;    function() {&#xA;        //...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;and so on.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Is this a good practice of organising my project? Or is there a more efficient way?&lt;/p&gt;&#xA;" OwnerUserId="2110" LastEditorUserId="2798" LastEditDate="2011-10-27T14:49:57.940" LastActivityDate="2011-10-27T14:49:57.940" Title="Separating and organising modules with objects?" Tags="&lt;javascript&gt;" AnswerCount="2" CommentCount="0" FavoriteCount="0" />
  <row Id="976" PostTypeId="2" ParentId="975" CreationDate="2011-02-24T18:38:17.540" Score="7" Body="&lt;p&gt;I would recommend you use a closure like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var Obj = (function() {&#xA;    var privateState = null;&#xA;    return {&#xA;        A: 1,&#xA;        B: true,&#xA;        C: function() {&#xA;            return privateState;  &#xA;        }    &#xA;    };&#xA;})();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The biggest reason why this is a good idea is that it adds the ability to keep private state within the closure. Normally you can define private properties by convention but as the complexity of an object increases the better it is to keep certain things private.&lt;/p&gt;&#xA;" OwnerUserId="1795" LastActivityDate="2011-02-24T18:38:17.540" CommentCount="4" />
  <row Id="977" PostTypeId="1" AcceptedAnswerId="979" CreationDate="2011-02-24T22:49:56.587" Score="3" ViewCount="2203" Body="&lt;p&gt;I am building a query that could end up look like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;SELECT &quot;patients&quot;.* FROM &quot;patients&quot; &#xA;INNER JOIN &quot;users&quot; ON &quot;users&quot;.&quot;id&quot; = &quot;patients&quot;.&quot;user_id&quot; &#xA;WHERE (users.username LIKE '%Bob%' AND users.last_name LIKE '%Smith%' &#xA;AND users.active = '1' AND users.disabled = '1') &#xA;ORDER BY users.first_name DESC LIMIT 10 OFFSET 0&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Below is code to create a complex query such as:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;conditions = []&#xA;where = ''&#xA;where_parameters = []&#xA;order = 'users.last_name ASC'&#xA;per_page = 20&#xA;&#xA;if is_admin?&#xA;  if defined?(params[:username]) and !params[:username].blank?&#xA;    where += 'users.username LIKE ? AND '&#xA;    where_parameters.push(&quot;%#{params[:username]}%&quot;)&#xA;  end&#xA;&#xA;  if defined?(params[:last_name]) and !params[:last_name].blank?&#xA;    where += 'users.last_name LIKE ? AND '&#xA;    where_parameters.push(&quot;%#{params[:last_name]}%&quot;)&#xA;  end&#xA;&#xA;  if defined?(params[:active]) and !params[:active].blank?&#xA;    where += 'users.active = ? AND '&#xA;    where_parameters.push(params[:active])&#xA;  end&#xA;&#xA;  if defined?(params[:disabled]) and !params[:disabled].blank?&#xA;    where += 'users.disabled = ? AND '&#xA;    where_parameters.push(params[:disabled])&#xA;  end&#xA;&#xA;  if !where.empty?&#xA;    where = where[0, where.length - 5]&#xA;    conditions = [where, *where_parameters]&#xA;  end&#xA;&#xA;  if defined?(params[:order_by]) and !params[:order_by].blank?&#xA;    order = params[:order_by] + ' '&#xA;  end&#xA;&#xA;  if defined?(params[:order]) and !params[:order].blank?&#xA;    order += params[:order]&#xA;  end&#xA;&#xA;  if defined?(params[:per_page]) and !params[:per_page].blank?&#xA;    per_page = params[:per_page].to_i&#xA;  end&#xA;  @patients = Patient.joins(:user).paginate(:all, :include =&amp;gt;:user, :conditions =&amp;gt; conditions, :order =&amp;gt; order, :page =&amp;gt; params[:page], :per_page =&amp;gt; per_page) &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Is there a better way to do this, this is just ugly?&lt;/p&gt;&#xA;" OwnerUserId="2113" LastActivityDate="2011-03-04T20:35:11.037" Title="Ruby on rails complex select statement...there has to be a better way!" Tags="&lt;ruby&gt;&lt;ruby-on-rails&gt;" AnswerCount="1" CommentCount="0" />
  <row Id="978" PostTypeId="1" AcceptedAnswerId="982" CreationDate="2011-02-24T23:18:49.393" Score="5" ViewCount="486" Body="&lt;pre&gt;&lt;code&gt;&amp;lt;% i = 0 %&amp;gt; &#xA;&amp;lt;% @patients.each do |patient| %&amp;gt; &#xA; &amp;lt;tr class=&quot;&amp;lt;%= i % 2 == 0 ? 'Even' : 'Odd' %&amp;gt;&quot;&amp;gt;&#xA;    &amp;lt;td&amp;gt;&amp;lt;%= link_to patient.id, patient %&amp;gt;&amp;lt;/td&amp;gt;&#xA;    &amp;lt;td&amp;gt;&amp;lt;%= patient.user.username %&amp;gt;&amp;lt;/td&amp;gt;&#xA;    &amp;lt;td&amp;gt;&amp;lt;%= patient.user.first_name %&amp;gt;&amp;lt;/td&amp;gt;&#xA;    &amp;lt;td&amp;gt;&amp;lt;%= patient.user.last_name %&amp;gt;&amp;lt;/td&amp;gt;&#xA;    &amp;lt;td&amp;gt;&amp;lt;%= patient.user.email %&amp;gt;&amp;lt;/td&amp;gt;&#xA;    &amp;lt;td&amp;gt;&amp;lt;%= patient.user.active %&amp;gt;&amp;lt;/td&amp;gt;&#xA;    &amp;lt;td&amp;gt;&amp;lt;%= patient.user.disabled %&amp;gt;&amp;lt;/td&amp;gt;&#xA;    &amp;lt;td&amp;gt;&#xA;      &amp;lt;ul class=&quot;Horizlist&quot;&amp;gt;&#xA;        &amp;lt;li&amp;gt;&amp;lt;%= link_to 'Detail', patient %&amp;gt;&amp;lt;/li&amp;gt;&#xA;      &amp;lt;/ul&amp;gt;&#xA;    &amp;lt;/td&amp;gt;&#xA;  &amp;lt;/tr&amp;gt;&#xA;&amp;lt;% i += 1 %&amp;gt;    &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I don't like that I have to define an i variable, is there a better way?&lt;/p&gt;&#xA;" OwnerUserId="2113" LastActivityDate="2011-05-23T01:31:14.043" Title="Refactor View Code (Ruby On Rails)" Tags="&lt;ruby&gt;&lt;ruby-on-rails&gt;" AnswerCount="2" CommentCount="0" />
  <row Id="979" PostTypeId="2" ParentId="977" CreationDate="2011-02-24T23:53:04.243" Score="7" Body="&lt;p&gt;First of all be very careful when building queries from request data. When building your &lt;code&gt;where&lt;/code&gt; string, you're using parametrized queries, so that's fine. But in your &lt;code&gt;order&lt;/code&gt; string, you're building actual SQL code from data you directly take out of &lt;code&gt;params&lt;/code&gt;. Do NOT do that. This is a big risk of SQL injection.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What you should do instead is take the order string apart (splitting at the comma), then check that each element is a column name optionally followed by &lt;code&gt;ASC&lt;/code&gt; or &lt;code&gt;DESC&lt;/code&gt;, then put the string back together accordingly.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A method for this could look something like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def safe_order_from_param(collection, order_string)&#xA;  tokens = order_string.split(/ *, */)&#xA;  tokens.each do |token|&#xA;    column, direction = token.match(/^(\w+)(? +(\w+))?$/).captures&#xA;    if Patient.column_names.include? column&#xA;      # if direction is nil, it will just be turned into the empty&#xA;      # string, so no problem there&#xA;      collection = collection.order(&quot;#{column} #{direction}&quot;)&#xA;    else&#xA;      raise ArgumentError, &quot;No such column: #{column}&quot;&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Second of all &lt;code&gt;defined?(params[:foo])&lt;/code&gt; does is check that &lt;code&gt;params&lt;/code&gt; is defined. It does &lt;em&gt;not&lt;/em&gt; check that &lt;code&gt;params&lt;/code&gt; is a hash and has the key &lt;code&gt;:foo&lt;/code&gt;. Since &lt;code&gt;params&lt;/code&gt; will always exist, there really is no need for the check. Checking &lt;code&gt;params[:foo].blank?&lt;/code&gt; is entirely sufficient.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Now to the main part of your question: the ugly building of the query string:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I assume from the fact that you're using the &lt;code&gt;joins&lt;/code&gt; method that this is rails 3. In rails 3 options like &lt;code&gt;:include&lt;/code&gt;, &lt;code&gt;:conditions&lt;/code&gt; and &lt;code&gt;:order&lt;/code&gt; are deprecated in favor of the corresponding query methods. The beauty of those methods is that they're chainable. So instead of building a query string using concatenation, it is much cleaner to just chain together multiple &lt;code&gt;where&lt;/code&gt;s.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if is_admin?&#xA;  @patients = Patient.joins(:user).includes(:user).order('users.last_name ASC')&#xA;&#xA;  unless params[:username].blank?&#xA;    @patients = @patients.where(&quot;users.username LIKE ?&quot;, params[:username])&#xA;  end&#xA;&#xA;  # same for :last_name&#xA;&#xA;  unless params[:active].blank?&#xA;    @patients = @patients.where(&quot;users.active&quot; =&amp;gt; params[:active])&#xA;  end&#xA;&#xA;  # same for disabled&#xA;&#xA;  unless params[:order_by].blank?&#xA;    @patients = safe_order_from_param(@patients, params[:order_by])&#xA;  end&#xA;&#xA;  # same for order&#xA;&#xA;  per_page = params[:per_page].blank? ? 20 : params[:per_page].to_i&#xA;  @patients = @patients.paginate(:page =&amp;gt; params[:page], :per_page =&amp;gt; per_page)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="128" LastEditorUserId="128" LastEditDate="2011-03-04T20:35:11.037" LastActivityDate="2011-03-04T20:35:11.037" CommentCount="2" />
  <row Id="980" PostTypeId="2" ParentId="978" CreationDate="2011-02-25T00:06:25.737" Score="2" Body="&lt;p&gt;First of all ruby has an &lt;code&gt;each_with_index&lt;/code&gt; method, so you can do &lt;code&gt;@patients.each_with_index do |patient, i|&lt;/code&gt; instead of keeping a counter manually.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;However with the conditional inside the loop that is still too much logic for the view in my opinion. What I'd do is define a helper for this, which might look like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;# For each item in the given collection, yield that item and embed the&#xA;# result in the given tag. The class attribute of that tag alternates&#xA;# between class1 and class2&#xA;def alternating(collection, tag, class1, class2, html =&amp;gt; {})&#xA;  collection.each_with_index do |item, i|&#xA;    html[:class] = i % 2 == 0 ? class1 : class2&#xA;    content_tag(tag, html, false) do&#xA;      yield item&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And then call it like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;% alternating(@patients, :tr, 'Even', 'Odd') do |patient| %&amp;gt; &#xA;  &amp;lt;td&amp;gt;&amp;lt;%= link_to patient.id, patient %&amp;gt;&amp;lt;/td&amp;gt;&#xA;  &amp;lt;td&amp;gt;&amp;lt;%= patient.user.username %&amp;gt;&amp;lt;/td&amp;gt;&#xA;  &amp;lt;td&amp;gt;&amp;lt;%= patient.user.first_name %&amp;gt;&amp;lt;/td&amp;gt;&#xA;  &amp;lt;td&amp;gt;&amp;lt;%= patient.user.last_name %&amp;gt;&amp;lt;/td&amp;gt;&#xA;  &amp;lt;td&amp;gt;&amp;lt;%= patient.user.email %&amp;gt;&amp;lt;/td&amp;gt;&#xA;  &amp;lt;td&amp;gt;&amp;lt;%= patient.user.active %&amp;gt;&amp;lt;/td&amp;gt;&#xA;  &amp;lt;td&amp;gt;&amp;lt;%= patient.user.disabled %&amp;gt;&amp;lt;/td&amp;gt;&#xA;  &amp;lt;td&amp;gt;&#xA;    &amp;lt;ul class=&quot;Horizlist&quot;&amp;gt;&#xA;      &amp;lt;li&amp;gt;&amp;lt;%= link_to 'Detail', patient %&amp;gt;&amp;lt;/li&amp;gt;&#xA;    &amp;lt;/ul&amp;gt;&#xA;  &amp;lt;/td&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="128" LastActivityDate="2011-02-25T00:06:25.737" CommentCount="0" />
  <row Id="981" PostTypeId="1" CreationDate="2011-02-25T02:25:03.077" Score="5" ViewCount="615" Body="&lt;p&gt;Basically, I'm uploading an excel file and parsing the information then displaying what was parsed in a view.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;using System.Data;&#xA;using System.Data.OleDb;&#xA;using System.Web;&#xA;using System.Web.Mvc;&#xA;using QuimizaReportes.Models;&#xA;using System.Collections.Generic;&#xA;using System;&#xA;&#xA;namespace QuimizaReportes.Controllers&#xA;{&#xA;    public class UploadController : Controller&#xA;    {&#xA;        public ActionResult Index()&#xA;        {&#xA;            return View();&#xA;        }&#xA;&#xA;        [HttpPost]&#xA;        public ActionResult Index(HttpPostedFileBase excelFile)&#xA;        {&#xA;            if (excelFile != null)&#xA;            {&#xA;                //Save the uploaded file to the disc.&#xA;                string savedFileName = &quot;~/UploadedExcelDocuments/&quot; + excelFile.FileName;&#xA;                excelFile.SaveAs(Server.MapPath(savedFileName));&#xA;&#xA;                //Create a connection string to access the Excel file using the ACE provider.&#xA;                //This is for Excel 2007. 2003 uses an older driver.&#xA;                var connectionString = string.Format(&quot;Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};Extended Properties=Excel 12.0;&quot;, Server.MapPath(savedFileName));&#xA;&#xA;                //Fill the dataset with information from the Hoja1 worksheet.&#xA;                var adapter = new OleDbDataAdapter(&quot;SELECT * FROM [Hoja1$]&quot;, connectionString);&#xA;                var ds = new DataSet();&#xA;                adapter.Fill(ds, &quot;results&quot;);&#xA;                DataTable data = ds.Tables[&quot;results&quot;];&#xA;&#xA;                var people = new List&amp;lt;Person&amp;gt;();&#xA;&#xA;                for (int i = 0; i &amp;lt; data.Rows.Count - 1; i++)&#xA;                {&#xA;                    Person newPerson = new Person();&#xA;                    newPerson.Id = data.Rows[i].Field&amp;lt;double?&amp;gt;(&quot;Id&quot;);&#xA;                    newPerson.Name = data.Rows[i].Field&amp;lt;string&amp;gt;(&quot;Name&quot;);&#xA;                    newPerson.LastName = data.Rows[i].Field&amp;lt;string&amp;gt;(&quot;LastName&quot;);&#xA;                    newPerson.DateOfBirth = data.Rows[i].Field&amp;lt;DateTime?&amp;gt;(&quot;DateOfBirth&quot;);&#xA;&#xA;                    people.Add(newPerson);&#xA;                }&#xA;&#xA;                return View(&quot;UploadComplete&quot;, people);&#xA;            }&#xA;&#xA;            return RedirectToAction(&quot;Error&quot;, &quot;Upload&quot;);                      &#xA;        }&#xA;&#xA;        public ActionResult Error()&#xA;        {&#xA;            return View();&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Not feeling so confident this is the best approach. Any suggestion any of you MVC3 vets have for this aspiring senior programmer? :)&lt;/p&gt;&#xA;" OwnerDisplayName="Sergio Tapia" LastActivityDate="2011-08-09T05:41:56.253" Title="Not feeling 100% about my Controller design." Tags="&lt;c#&gt;&lt;mvc&gt;&lt;asp.net-mvc-3&gt;&lt;controller&gt;" AnswerCount="3" CommentCount="1" FavoriteCount="2" />
  <row Id="982" PostTypeId="2" ParentId="978" CreationDate="2011-02-25T05:14:49.333" Score="11" Body="&lt;p&gt;Rails has a built in method, &lt;a href=&quot;http://api.rubyonrails.org/classes/ActionView/Helpers/TextHelper.html#method-i-cycle&quot;&gt;&lt;code&gt;cycle&lt;/code&gt;&lt;/a&gt;, which will cycle between two more more options for you, so you don't have to manage the &quot;Even&quot;/&quot;Odd&quot; selection.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;% @patients.each do |patient| %&amp;gt;&#xA;  &amp;lt;%= content_tag :tr, :class =&amp;gt; cycle('Even', 'Odd') do %&amp;gt;&#xA;    &amp;lt;%= content_tag :td, link_to(patient.id, patient) %&amp;gt;&#xA;    &amp;lt;% [:username, :first_name, :last_name, :email, :active, :disabled].each do |property| %&amp;gt;&#xA;      &amp;lt;%= content_tag :td, patient.user.send(property) %&amp;gt;&#xA;    &amp;lt;% end %&amp;gt;&#xA;    &amp;lt;td&amp;gt;&#xA;      &amp;lt;ul class=&quot;Horizlist&quot;&amp;gt;&#xA;        &amp;lt;%= content_tag :li, link_to('Detail', patient) %&amp;gt;&#xA;      &amp;lt;/ul&amp;gt;&#xA;    &amp;lt;/td&amp;gt;&#xA;  &amp;lt;% end %&amp;gt;&#xA;&amp;lt;% end %&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you happen to use Haml, it looks quite nice. :)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;- @patients.each do |patient|&#xA;  %tr{:class =&amp;gt; cycle('Even', 'Odd')}&#xA;    %td= link_to(patient.id, patient)&#xA;    - [:username, :first_name, :last_name, :email, :active, :disabled].each do |property|&#xA;      %td= patient.user.send(property)&#xA;    %td&#xA;      %ul.Horizlist&#xA;        %li= link_to('Detail', patient)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1580" LastActivityDate="2011-02-25T05:14:49.333" CommentCount="2" />
  <row Id="984" PostTypeId="1" AcceptedAnswerId="998" CreationDate="2011-02-25T06:24:22.873" Score="6" ViewCount="6478" Body="&lt;p&gt;I am been using a code pattern for recursive database actions in my applications.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I create two class objects of a database table, singular one (e.g Agent) for holding single record with all fields definition, plural one (e.g Agents) for database actions of that records like, select, insert, delete, update etc. I find it easy using the code pattern.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But as the time runs I find it somewhat laborious to define same database action functions in different classes only differing in datatype.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;How can I make it good and avoid defining it again and again?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Sample code of a class file representing the class definition:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;pre class=&quot;lang-vb prettyprint-override&quot;&gt;&lt;code&gt;Imports EssenceDBLayer&#xA;&#xA;Public Class Booking&#xA;#Region &quot;Constants&quot;&#xA;    Public Shared _Pre As String = &quot;bk01&quot;&#xA;    Public Shared _Table As String = &quot;bookings&quot;&#xA;#End Region&#xA;&#xA;#Region &quot; Instance Variables &quot;&#xA;    Private _UIN As Integer = 0&#xA;    Private _Title As String = &quot;&quot;&#xA;    Private _Email As String = &quot;&quot;&#xA;    Private _contactPerson As String = &quot;&quot;&#xA;    Private _Telephone As String = &quot;&quot;&#xA;    Private _Mobile As String = &quot;&quot;&#xA;    Private _Address As String = &quot;&quot;&#xA;    Private _LastBalance As Double = 0&#xA;#End Region&#xA;&#xA;#Region &quot; Constructor &quot;&#xA;    Public Sub New()&#xA;        'Do nothing as all private variables has been initiated'&#xA;    End Sub&#xA;&#xA;    Public Sub New(ByVal DataRow As DataRow)&#xA;        _UIN = CInt(DataRow.Item(_Pre &amp;amp; &quot;UIN&quot;))&#xA;        _Title = CStr(DataRow.Item(_Pre &amp;amp; &quot;Title&quot;))&#xA;        _Email = CStr(DataRow.Item(_Pre &amp;amp; &quot;Email&quot;))&#xA;        _contactPerson = CStr(DataRow.Item(_Pre &amp;amp; &quot;contact_person&quot;))&#xA;        _Telephone = CStr(DataRow.Item(_Pre &amp;amp; &quot;Telephone&quot;))&#xA;        _Mobile = CStr(DataRow.Item(_Pre &amp;amp; &quot;Mobile&quot;))&#xA;        _Address = CStr(DataRow.Item(_Pre &amp;amp; &quot;Address&quot;))&#xA;        _LastBalance = CDbl(DataRow.Item(_Pre &amp;amp; &quot;Last_Balance&quot;))&#xA;    End Sub&#xA;#End Region&#xA;&#xA;#Region &quot; Properties &quot;&#xA;    Public Property UIN() As Integer&#xA;        Get&#xA;            Return _UIN&#xA;        End Get&#xA;        Set(ByVal value As Integer)&#xA;            _UIN = value&#xA;        End Set&#xA;    End Property&#xA;&#xA;    Public Property Title() As String&#xA;        Get&#xA;            Return _Title&#xA;        End Get&#xA;        Set(ByVal value As String)&#xA;            _Title = value&#xA;        End Set&#xA;    End Property&#xA;&#xA;    Public Property Email() As String&#xA;        Get&#xA;            Return _Email&#xA;        End Get&#xA;        Set(ByVal value As String)&#xA;            _Email = value&#xA;        End Set&#xA;    End Property&#xA;&#xA;    Public Property ContactPerson() As String&#xA;        Get&#xA;            Return _contactPerson&#xA;        End Get&#xA;        Set(ByVal value As String)&#xA;            _contactPerson = value&#xA;        End Set&#xA;    End Property&#xA;&#xA;    Public Property Telephone() As String&#xA;        Get&#xA;            Return _Telephone&#xA;        End Get&#xA;        Set(ByVal value As String)&#xA;            _Telephone = value&#xA;        End Set&#xA;    End Property&#xA;&#xA;    Public Property Mobile() As String&#xA;        Get&#xA;            Return _Mobile&#xA;        End Get&#xA;        Set(ByVal value As String)&#xA;            _Mobile = value&#xA;        End Set&#xA;    End Property&#xA;&#xA;    Public Property Address() As String&#xA;        Get&#xA;            Return _Address&#xA;        End Get&#xA;        Set(ByVal value As String)&#xA;            _Address = value&#xA;        End Set&#xA;    End Property&#xA;&#xA;    Public Property LastBalance() As Double&#xA;        Get&#xA;            Return _LastBalance&#xA;        End Get&#xA;        Set(ByVal value As Double)&#xA;            _LastBalance = value&#xA;        End Set&#xA;    End Property&#xA;&#xA;#End Region&#xA;&#xA;#Region &quot; Methods &quot;&#xA;    Public Sub [Get](ByRef DataRow As DataRow)&#xA;        DataRow(_Pre &amp;amp; &quot;Title&quot;) = _Title&#xA;        DataRow(_Pre &amp;amp; &quot;Email&quot;) = _Email&#xA;        DataRow(_Pre &amp;amp; &quot;Contact_person&quot;) = _contactPerson&#xA;        DataRow(_Pre &amp;amp; &quot;Telephone&quot;) = _Telephone&#xA;        DataRow(_Pre &amp;amp; &quot;Mobile&quot;) = _Mobile&#xA;        DataRow(_Pre &amp;amp; &quot;Address&quot;) = _Address&#xA;        DataRow(_Pre &amp;amp; &quot;last_balance&quot;) = _LastBalance&#xA;    End Sub&#xA;#End Region&#xA;End Class&#xA;&#xA;Public Class Bookings&#xA;    Inherits DBLayer&#xA;&#xA;#Region &quot;Constants&quot;&#xA;    Public Shared _Pre As String = &quot;bk01&quot;&#xA;    Public Shared _Table As String = &quot;bookings&quot;&#xA;#End Region&#xA;&#xA;#Region &quot; Standard Methods &quot;&#xA;    Public Shared Function GetData() As List(Of Booking)&#xA;        Dim QueryString As String = String.Format(&quot;SELECT * FROM {0}{1} ORDER BY {0}UIN;&quot;, _Pre, _Table)&#xA;        Dim Dataset As DataSet = New DataSet()&#xA;        Dim DataList As List(Of Booking) = New List(Of Booking)&#xA;&#xA;        Try&#xA;            Dataset = Query(QueryString)&#xA;            For Each DataRow As DataRow In Dataset.Tables(0).Rows&#xA;                DataList.Add(New Booking(DataRow))&#xA;            Next&#xA;        Catch ex As Exception&#xA;            DataList = Nothing&#xA;            SystemErrors.Create(New SystemError(ex.Message, ex.StackTrace))&#xA;        End Try&#xA;        Return DataList&#xA;    End Function&#xA;&#xA;    Public Shared Function GetData(ByVal uin As String) As Booking&#xA;        Dim QueryString As String = String.Format(&quot;SELECT * FROM {0}{1} WHERE {0}uin = {2};&quot;, _Pre, _Table, uin)&#xA;        Dim Dataset As DataSet = New DataSet()&#xA;        Dim Data As Booking = New Booking()&#xA;&#xA;        Try&#xA;            Dataset = Query(QueryString)&#xA;            If Dataset.Tables(0).Rows.Count = 1 Then&#xA;                Data = New Booking(Dataset.Tables(0).Rows(0))&#xA;            Else&#xA;                Data = Nothing&#xA;            End If&#xA;        Catch ex As Exception&#xA;            Data = Nothing&#xA;            SystemErrors.Create(New SystemError(ex.Message, ex.StackTrace))&#xA;        End Try&#xA;        Return Data&#xA;    End Function&#xA;&#xA;    Public Shared Function Create(ByVal Data As Booking) As Boolean&#xA;        Dim QueryString As String = String.Format(&quot;SELECT * FROM {0}{1} WHERE {0}uin = Null;&quot;, _Pre, _Table)&#xA;        Dim Dataset As DataSet = New DataSet()&#xA;        Dim Datarow As DataRow&#xA;        Dim Result As Boolean = False&#xA;&#xA;        Try&#xA;            Dataset = Query(QueryString)&#xA;            If Dataset.Tables(0).Rows.Count = 0 Then&#xA;                Datarow = Dataset.Tables(0).NewRow()&#xA;                Data.Get(Datarow)&#xA;                Dataset.Tables(0).Rows.Add(Datarow)&#xA;                Result = UpdateDB(QueryString, Dataset)&#xA;            Else&#xA;                Result = False&#xA;            End If&#xA;        Catch ex As Exception&#xA;            Result = False&#xA;            SystemErrors.Create(New SystemError(ex.Message, ex.StackTrace))&#xA;        End Try&#xA;        Return Result&#xA;    End Function&#xA;&#xA;    Public Shared Function Update(ByVal Data As Booking) As Boolean&#xA;        Dim QueryString As String = String.Format(&quot;SELECT * FROM {0}{1} WHERE {0}uin = {2};&quot;, _Pre, _Table, Data.UIN)&#xA;        Dim Dataset As DataSet = New DataSet()&#xA;        Dim Result As Boolean = False&#xA;        Dim DataRow As DataRow = Nothing&#xA;&#xA;        Try&#xA;            Dataset = Query(QueryString)&#xA;            If Dataset.Tables(0).Rows.Count = 1 Then&#xA;                DataRow = Dataset.Tables(0).Rows(0)&#xA;                Data.Get(DataRow)&#xA;                Result = UpdateDB(QueryString, Dataset)&#xA;            Else&#xA;                Result = False&#xA;            End If&#xA;        Catch ex As Exception&#xA;            Result = False&#xA;            SystemErrors.Create(New SystemError(ex.Message, ex.StackTrace))&#xA;        End Try&#xA;        Return Result&#xA;    End Function&#xA;&#xA;    Public Shared Function UpdateBulk(ByRef DataList As List(Of Booking)) As Boolean&#xA;        Dim Result As Boolean = False&#xA;&#xA;        Try&#xA;            For Each Data As Booking In DataList&#xA;                Update(Data)&#xA;            Next&#xA;            Result = True&#xA;        Catch ex As Exception&#xA;            SystemErrors.Create(New SystemError(ex.Message, ex.StackTrace))&#xA;        End Try&#xA;&#xA;        Return Result&#xA;    End Function&#xA;&#xA;    Public Shared Function FillGrid() As List(Of Booking)&#xA;        Return GetData()&#xA;    End Function&#xA;#End Region&#xA;End Class&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2067" LastEditorUserId="22222" LastEditDate="2015-07-10T01:00:20.477" LastActivityDate="2016-07-03T10:54:27.540" Title="Recursive database actions" Tags="&lt;oop&gt;&lt;.net&gt;&lt;database&gt;&lt;vb.net&gt;" AnswerCount="2" CommentCount="1" FavoriteCount="1" />
  <row Id="985" PostTypeId="1" AcceptedAnswerId="986" CreationDate="2011-02-25T06:46:56.983" Score="3" ViewCount="482" Body="&lt;p&gt;I generally encounter a lot of &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt;. I would like to get some suggestions on my code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if( $blnLogged &amp;amp;&amp;amp; isset( $_POST['postReview'] ) )&#xA;{&#xA;    if( $_SESSION['REVIEW']['SUBMITTED'] != '' )&#xA;    {&#xA;        $arrSharedData['blnRetSave'] = $_SESSION['REVIEW']['SUBMITTED'];&#xA;        $blnShowForm = false;&#xA;        $blnReviewPosted = true;&#xA;    }else{&#xA;        if( $arrData['captcha'] != $_SESSION['REVIEW']['CODE'] )&#xA;        {&#xA;            $strErrMsg = 'Invalid Captcha Code...';&#xA;        }else{&#xA;            if( empty( $arrData['review_title'] ) || empty( $arrData[ 'review_description' ] ) || empty( $arrData[ 'overall_review' ] ) || empty( $arrData[ 'cleanliness' ] ) || empty( $arrData[ 'facilities' ] ) || empty( $arrData[ 'location' ] ) || empty( $arrData[ 'quality_of_service' ] ) || empty( $arrData[ 'room' ] ) || empty( $arrData[ 'value_of_money' ]) )&#xA;            {&#xA;                $strErrMsg = 'Required field missing...';&#xA;            }else{&#xA;&#xA;                //do we need any processing...&#xA;                $arrData['business_id'] = $bID;&#xA;                $arrData['client_id']   = $_SESSION['site_user'];&#xA;                $arrData['website_id']  = WEBSITE_ID;&#xA;                $arrData['review_date'] = date('Y-m-d');&#xA;&#xA;                //If field Transformation required do it...&#xA;&#xA;                $objTripReview = SM_Loader::loadClass('Class_Reviews');&#xA;                $blnRetSave = $objTripReview-&amp;gt;saveReview( $arrData );&#xA;                $_SESSION['REVIEW']['SUBMITTED'] = $blnRetSave;&#xA;                $arrSharedData['blnRetSave'] = $_SESSION['REVIEW']['SUBMITTED'];&#xA;                $blnShowForm = false;&#xA;                $blnReviewPosted = true;&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;if( $blnShowForm === true )&#xA;{&#xA;    $_SESSION['REVIEW']['CODE'] = rand(9999,99999);&#xA;    $_SESSION['Review']['SUBMITTED'] = '';&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2067" LastEditorUserId="22222" LastEditDate="2015-01-29T23:44:07.383" LastActivityDate="2015-01-29T23:44:07.383" Title="Submitting client reviews" Tags="&lt;php&gt;" AnswerCount="2" CommentCount="1" FavoriteCount="1" />
  <row Id="986" PostTypeId="2" ParentId="985" CreationDate="2011-02-25T07:45:08.297" Score="5" Body="&lt;p&gt;One simple way to improve this is to package it in a function, and return (or throw an exception) after each &lt;code&gt;$strErrMsg = ...&lt;/code&gt; line. This will flatten the function, and allow you to put the main functionality at the &quot;top level&quot; of the function.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Even better might be to move all the validation code to a separate function that throws an exception, and then handle it in the function that called it with the wrong parameters.&lt;/p&gt;&#xA;" OwnerUserId="716" LastActivityDate="2011-02-25T07:45:08.297" CommentCount="0" />
  <row Id="987" PostTypeId="2" ParentId="981" CreationDate="2011-02-25T10:34:02.353" Score="9" Body="&lt;p&gt;The logic for reading the Excel file (i.e. everything from &lt;code&gt;var connectionString&lt;/code&gt; until before the &lt;code&gt;return&lt;/code&gt;) belongs in a model method, not the controller.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You might also want to handle the case when the uploaded file isn't an Excel file or it doesn't have the columns you expect it to. Depending on how you use this or who uses it, this might not be necessary, but if normal users are allowed to upload files, they might very well upload the wrong file even if you tell them not to. And in that case a meaningful error message leads to a better user experience.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Regarding the question in your comment: As I said, I don't know how this is going to be used, but I can't think of a situation where it would be helpful for the user to be able to re-upload the file by hitting the refresh button. So yes, redirecting to an &lt;code&gt;UploadComplete&lt;/code&gt; action makes sense.&lt;/p&gt;&#xA;" OwnerUserId="128" LastActivityDate="2011-02-25T10:34:02.353" CommentCount="0" />
  <row Id="988" PostTypeId="2" ParentId="201" CreationDate="2011-02-25T11:31:13.107" Score="2" Body="&lt;p&gt;This would probably be way more efficient:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function is_numeric_array($array)&#xA;{&#xA;    $array = array_keys($array);&#xA;&#xA;    if ($array === array_filter($array, 'is_int'))&#xA;    {&#xA;        return true;&#xA;    }&#xA;&#xA;    return false;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;I just noticed what you're really trying to do is not check if all the keys in an array are integers but rather if the array is indexed (non-associative), for this use &lt;code&gt;array_values()&lt;/code&gt; does the trick:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function is_numeric_array($array)&#xA;{&#xA;    return ($array === array_values($array));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1762" LastEditorUserId="1762" LastEditDate="2011-02-25T12:27:05.233" LastActivityDate="2011-02-25T12:27:05.233" CommentCount="0" />
  <row Id="989" PostTypeId="2" ParentId="985" CreationDate="2011-02-25T14:10:18.647" Score="3" Body="&lt;p&gt;Instead of&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if (x)&#xA;{&#xA;    // ...&#xA;}&#xA;else&#xA;{&#xA;    if (y)&#xA;    {&#xA;        // ...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;you can just write&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if (x)&#xA;{&#xA;    // ...&#xA;}&#xA;else if (y)&#xA;{&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In addition to that, I would put the list of required fields in an array somewhere where it is easily maintainable, so it’s not buried somewhere deep in the complex code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$requiredFields = array( 'review_title', 'review_description',&#xA;    'overall_review', 'cleanliness', 'facilities', 'location',&#xA;    'quality_of_service', 'room', 'value_of_money' );&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then your code will look like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if( $blnLogged &amp;amp;&amp;amp; isset( $_POST['postReview'] ) )&#xA;{&#xA;    $requiredFieldsPresent = true;&#xA;    foreach( $requiredFields as $field )&#xA;        if( empty( $arrData[$field] ) )&#xA;            $requiredFieldsPresent = false;&#xA;&#xA;    if( $_SESSION['REVIEW']['SUBMITTED'] != '' )&#xA;    {&#xA;        $arrSharedData['blnRetSave'] = $_SESSION['REVIEW']['SUBMITTED'];&#xA;        $blnShowForm = false;&#xA;        $blnReviewPosted = true;&#xA;    }&#xA;    else if( $arrData['captcha'] != $_SESSION['REVIEW']['CODE'] )&#xA;    {&#xA;        $strErrMsg = 'Invalid Captcha Code...';&#xA;    }&#xA;    else if( !$requiredFieldsPresent )&#xA;    {&#xA;        $strErrMsg = 'Required field missing...';&#xA;    }&#xA;    else&#xA;    {&#xA;        // do we need any processing...&#xA;        // etc.&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2063" LastActivityDate="2011-02-25T14:10:18.647" CommentCount="0" />
  <row Id="990" PostTypeId="1" CreationDate="2011-02-25T14:34:57.060" Score="4" ViewCount="2644" Body="&lt;p&gt;This class handles HTTP requests. It's a singleton class that parses URI to get the controller, method and parameters and then executes the controller's method.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Maybe &lt;code&gt;parseUri&lt;/code&gt; should be in another class and maybe there is too much responsibility for this class.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I know that it can be improved. The execute method could be better because there are some repeated code.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?php&#xA;class Request&#xA;{&#xA;    private static $_instance;&#xA;    private $_host;&#xA;    private $_request_uri;&#xA;    private $_script_name;&#xA;    private $_controller;&#xA;    private $_method;&#xA;    private $_parameters;&#xA;    private $_headers;&#xA;&#xA;    private function __construct()&#xA;    {&#xA;        $this-&amp;gt;_host = $_SERVER['HTTP_HOST'];&#xA;        $this-&amp;gt;_request_uri = $_SERVER['REQUEST_URI'];&#xA;        $this-&amp;gt;_script_name = $_SERVER['SCRIPT_NAME'];&#xA;        $this-&amp;gt;_headers = array();&#xA;&#xA;        $this-&amp;gt;_parseUri();&#xA;    }&#xA;&#xA;    private function _parseUri()&#xA;    {&#xA;        /* In 'http://www.example.com/foo/bar/' get the '/foo/bar/' part */&#xA;        $part = str_replace(&#xA;            dirname($this-&amp;gt;_script_name),&#xA;            '',&#xA;            $this-&amp;gt;_request_uri&#xA;        );&#xA;&#xA;        /* break it into chunks and clean up empty positions */&#xA;        $chunks = explode('/', $part);&#xA;        $chunks = array_filter($chunks);&#xA;&#xA;        if (count($chunks))&#xA;        {&#xA;            if ($this-&amp;gt;_controller = array_shift($chunks))&#xA;            {&#xA;                $this-&amp;gt;_controller = ucfirst($this-&amp;gt;_controller) . '_Controller';&#xA;            }&#xA;&#xA;            if ($this-&amp;gt;_method = array_shift($chunks))&#xA;            {&#xA;                $this-&amp;gt;_method = ucfirst($this-&amp;gt;_method) . 'Action';&#xA;            }&#xA;            $this-&amp;gt;_parameters = $chunks ? $chunks : null;&#xA;        }&#xA;    }&#xA;&#xA;    private function _send_headers()&#xA;    {&#xA;        foreach($this-&amp;gt;_headers as $header)&#xA;        {&#xA;            header($header);&#xA;        }&#xA;    }&#xA;&#xA;    public static function instance()&#xA;    {&#xA;        if (!self::$_instance)&#xA;        {&#xA;            self::$_instance = new Request();&#xA;        }&#xA;&#xA;        return self::$_instance;&#xA;    }&#xA;&#xA;    public function execute()&#xA;    {&#xA;        /* There is a controller ... */&#xA;        if (!empty($this-&amp;gt;_controller))&#xA;        {&#xA;            if (!class_exists($this-&amp;gt;_controller, true))&#xA;            {&#xA;                array_push($this-&amp;gt;_headers, 'HTTP/1.1 404 Not Found');&#xA;                $this-&amp;gt;_send_headers();&#xA;                return;&#xA;            }&#xA;&#xA;            $controller = new $this-&amp;gt;_controller();&#xA;            /* ... and a method */&#xA;            if ($this-&amp;gt;_method)&#xA;            {&#xA;                if (!method_exists($controller, $this-&amp;gt;_method))&#xA;                {&#xA;                    array_push($this-&amp;gt;_headers, 'HTTP/1.1 404 Not Found');&#xA;                    $this-&amp;gt;_send_headers();&#xA;                    return;&#xA;                }&#xA;&#xA;                $method = new ReflectionMethod(&#xA;                    $controller, $this-&amp;gt;_method&#xA;                );&#xA;&#xA;                /* Do we have parameters? Let's call the right method */&#xA;                $this-&amp;gt;_parameters&#xA;                    ? $method-&amp;gt;invokeArgs($controller, $this-&amp;gt;_parameters)&#xA;                    : $method-&amp;gt;invoke($controller);&#xA;&#xA;                array_push($this-&amp;gt;_headers, 'HTTP/1.1 200 OK');&#xA;                $this-&amp;gt;_send_headers();&#xA;            }&#xA;            /* we don't have a method here, let's call the 'index_action' method */&#xA;            else&#xA;            {&#xA;                $method = new ReflectionMethod($controller, 'indexAction');&#xA;                $method-&amp;gt;invoke($controller);&#xA;&#xA;                array_push($this-&amp;gt;_headers, 'HTTP/1.1 200 OK');&#xA;                $this-&amp;gt;_send_headers();&#xA;            }&#xA;        }&#xA;        /* We don't have a Controller, let's call the default one. */&#xA;        else&#xA;        {&#xA;            if (!class_exists('Default_Controller', true))&#xA;            {&#xA;                throw new RequestException(&quot;'Default_Controller' class not found.&quot;);&#xA;            }&#xA;&#xA;            $controller = new Default_Controller();&#xA;&#xA;            if (!method_exists($controller, 'indexAction'))&#xA;            {&#xA;                throw new RequestException(&#xA;                    &quot;'indexAction' method not found in 'Default_Controller' class.&quot;&#xA;                );&#xA;            }&#xA;&#xA;            $method = new ReflectionMethod($controller, 'indexAction');&#xA;            $method-&amp;gt;invoke($controller);&#xA;        }&#xA;    }&#xA;}&#xA;?&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerDisplayName="user2135" LastEditorUserId="22222" LastEditDate="2015-01-29T23:47:08.300" LastActivityDate="2015-01-29T23:47:08.300" Title="Handling HTTP requests" Tags="&lt;php&gt;&lt;http&gt;" AnswerCount="2" CommentCount="0" FavoriteCount="1" />
  <row Id="991" PostTypeId="1" CreationDate="2011-02-25T16:30:32.357" Score="4" ViewCount="370" Body="&lt;p&gt;I am currently learning myself a little F# and have written the following code to practice.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The code uses the Mono.Cecil library to inject some IL at the start of every method in each .net assembly found in a given directory. The IL will call a LogMe method in a Loggit.dll assembly.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I want to make this code as functional and idiomatically F# as possible.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;My main concern is that the method to inject code into an assembly has some definite side effects. This is unavoidable as thats what the whole point is. I do this in the function InjectMethods. This function is passed to the DoOnModule function. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;This DoOnModule function is used twice - &lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;once when injecting methods - a method with side effects and no real return value, &lt;/li&gt;&#xA;&lt;li&gt;and once when retreiving the LogMe method reference from the Loggit.dll assembly - a method with no side effects and a useful return value.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;I feel a little uneasy about this double use, which doesnt feel very functional - and yet I find it very useful save code repetition...&lt;/p&gt;&#xA;&#xA;&lt;p&gt;How can I make this code more functional?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// &#xA;open System.IO&#xA;open Mono.Cecil&#xA;open Mono.Cecil.Cil&#xA;&#xA;exception LogNotFoundError of string&#xA;&#xA;let IsClass(t:TypeDefinition) =&#xA;    t.IsAnsiClass &amp;amp;&amp;amp; not t.IsInterface&#xA;&#xA;let UsefulMethods(t:TypeDefinition) =&#xA;    t.Methods |&amp;gt; Seq.filter ( fun m -&amp;gt; m.HasBody ) &#xA;&#xA;// Perform the given funtion on the module found at the given filename.&#xA;let DoOnModule fn (file:string) =&#xA;    try&#xA;        let _module = ModuleDefinition.ReadModule file &#xA;        Some ( fn ( _module ) )&#xA;    with&#xA;        | :? System.BadImageFormatException as ex -&amp;gt; printfn &quot;%A&quot; ex; None&#xA;        | :? System.Exception as ex -&amp;gt; printfn &quot;%A&quot; ex; None&#xA;&#xA;// Do the given function on the dll filenames found in the given directory&#xA;let MapAssemblies fn directory = &#xA;    System.IO.Directory.GetFiles(directory) |&amp;gt; &#xA;    Seq.filter(fun file -&amp;gt; file.EndsWith(&quot;dll&quot;) || file.EndsWith(&quot;exe&quot;) ) |&amp;gt;&#xA;    Seq.map( fn )&#xA;&#xA;// Return the methods found in the given module&#xA;let GetMethods(_module:ModuleDefinition) =&#xA;    _module.Types |&amp;gt; Seq.filter ( IsClass ) |&amp;gt; Seq.collect ( UsefulMethods )&#xA;&#xA;// Get the log method found in the Loggit.dll.&#xA;// A call to this method will be injected into each method&#xA;let LogMethod (_module:ModuleDefinition) = &#xA;    let GetLogMethod(_logmodule:ModuleDefinition) =&#xA;        let logClass = _logmodule.Types |&amp;gt; Seq.filter ( fun t -&amp;gt; t.Name.Contains ( &quot;Log&quot; ) ) |&amp;gt; Seq.head&#xA;        let logMethod = logClass.Methods |&amp;gt; Seq.filter ( fun m -&amp;gt; m.Name.Contains ( &quot;LogMe&quot; ) ) |&amp;gt; Seq.head&#xA;        _module.Import logMethod&#xA;    &quot;Loggit.dll&quot; |&amp;gt; DoOnModule GetLogMethod &#xA;&#xA;// Injects IL into the second method to call the first method, &#xA;// passing this and the method name as parameters&#xA;let InjectCallToMethod(logMethod:MethodReference) (_method:MethodDefinition) =&#xA;        let processor = _method.Body.GetILProcessor()&#xA;        let firstInstruction = _method.Body.Instructions.Item(0)&#xA;        let parameter1 = processor.Create(OpCodes.Ldstr, _method.Name)&#xA;        let parameter2 = processor.Create(if _method.HasThis then OpCodes.Ldarg_0 else OpCodes.Ldnull)&#xA;        let call = processor.Create(OpCodes.Call, logMethod)&#xA;        processor.InsertBefore ( firstInstruction, parameter1 );&#xA;        processor.InsertBefore ( firstInstruction, parameter2 );&#xA;        processor.InsertBefore ( firstInstruction, call )&#xA;&#xA;// Inject a call to the Log method at the start of every method found in the given module.&#xA;let InjectMethods(_module:ModuleDefinition) =&#xA;    // Inject the call&#xA;    let logMethod = LogMethod _module&#xA;    match logMethod with&#xA;    | Some(log) -&amp;gt;&#xA;        let methods = GetMethods _module&#xA;        for m in methods do&#xA;            m |&amp;gt; InjectCallToMethod log&#xA;    | None -&amp;gt; raise(LogNotFoundError(&quot;Cant find log method&quot;))&#xA;&#xA;    // Save the module&#xA;    Directory.CreateDirectory ( Path.GetDirectoryName ( _module.FullyQualifiedName ) + @&quot;\jiggled\&quot; ) |&amp;gt; ignore&#xA;    _module.Write ( Path.Combine ( Path.GetDirectoryName ( _module.FullyQualifiedName ) + @&quot;\jiggled\&quot;, Path.GetFileName ( _module.FullyQualifiedName ) ) );&#xA;&#xA;let dir = &quot;D:\\Random\\AssemblyJig\\spog\\bin\\Debug&quot;&#xA;&#xA;// Now inject into the methods&#xA;try&#xA;    dir |&amp;gt;&#xA;    MapAssemblies ( DoOnModule InjectMethods )  |&amp;gt;&#xA;    Seq.toList |&amp;gt;&#xA;    ignore&#xA;with&#xA;    | :? System.Exception as ex -&amp;gt; printfn &quot;%A&quot; ex; &#xA;&#xA;System.Console.ReadLine |&amp;gt; ignore&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1756" LastActivityDate="2011-02-25T16:51:19.933" Title="How can I make this F# more functional?" Tags="&lt;functional-programming&gt;&lt;f#&gt;" AnswerCount="1" CommentCount="0" />
  <row Id="992" PostTypeId="2" ParentId="991" CreationDate="2011-02-25T16:51:19.933" Score="3" Body="&lt;p&gt;I only have two minor nitpicks with this code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Seq.filter(fun file -&amp;gt; file.EndsWith(&quot;dll&quot;) || file.EndsWith(&quot;exe&quot;) ) |&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Perhaps this should say &lt;code&gt;&quot;.dll&quot;&lt;/code&gt; and &lt;code&gt;&quot;.exe&quot;&lt;/code&gt;. Or you could use &lt;code&gt;Path.GetExtension&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Seq.filter ( fun t -&amp;gt; t.Name.Contains ( &quot;Log&quot; ) ) |&amp;gt; Seq.head&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This will take the first type whose name happens to contain &lt;code&gt;Log&lt;/code&gt;; even if the name is &lt;code&gt;ILoggable&lt;/code&gt; or &lt;code&gt;LogProcessor&lt;/code&gt; or something. Are you sure you know that there will never be any other types with such names than the type you want? The same goes for the method &lt;code&gt;LogMe&lt;/code&gt;.&lt;/p&gt;&#xA;" OwnerUserId="2063" LastActivityDate="2011-02-25T16:51:19.933" CommentCount="2" />
  <row Id="993" PostTypeId="1" AcceptedAnswerId="995" CreationDate="2011-02-25T16:56:43.730" Score="5" ViewCount="5156" Body="&lt;p&gt;I have a function that returns a set of values from a &lt;code&gt;Dictionary&lt;/code&gt;.&lt;br&gt;&#xA;I don't currently want to allow it to throw &lt;code&gt;KeyNotFoundException&lt;/code&gt;, so I'm filtering the keys out before I try to select the values.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I have a feeling this can be done in a more straightforward fashion, but I'm not sure where to go with it.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// this.resources is a Dictionary&amp;lt;string, Resource&amp;gt;&#xA;&#xA;public IEnumerable&amp;lt;Resource&amp;gt; GetResources(IEnumerable&amp;lt;string&amp;gt; resourceNames)&#xA;{&#xA;    HashSet&amp;lt;string&amp;gt; hs = new HashSet&amp;lt;string&amp;gt;(resourceNames);&#xA;&#xA;    hs.IntersectWith(this.resources.Keys);&#xA;&#xA;    List&amp;lt;Resource&amp;gt; resources = new List&amp;lt;Resource&amp;gt;();&#xA;&#xA;    foreach(string resourceName in hs)&#xA;    {&#xA;        resources.Add(this.resources[resourceName]);&#xA;    }&#xA;&#xA;    return resources;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="938" LastEditorUserId="938" LastEditDate="2011-02-25T17:07:23.883" LastActivityDate="2011-02-25T17:07:27.933" Title="Pulling a subset of elements from a Dictionary" Tags="&lt;c#&gt;" AnswerCount="1" CommentCount="0" />
  <row Id="995" PostTypeId="2" ParentId="993" CreationDate="2011-02-25T17:07:27.933" Score="10" Body="&lt;p&gt;I would write it the obvious straight-forward LINQ way, which gives you good readability as well as lazy evaluation:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public IEnumerable&amp;lt;Resource&amp;gt; GetResources(IEnumerable&amp;lt;string&amp;gt; resourceNames)&#xA;{&#xA;    return resourceNames&#xA;        .Where(name =&amp;gt; resources.ContainsKey(name))&#xA;        .Select(name =&amp;gt; resources[name]);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2063" LastActivityDate="2011-02-25T17:07:27.933" CommentCount="1" />
  <row Id="996" PostTypeId="1" AcceptedAnswerId="997" CreationDate="2011-02-25T18:39:09.897" Score="10" ViewCount="2650" Body="&lt;p&gt;Is it bad to do return render? I am doing this to NOT also allow a redirect.  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def create&#xA;    @patient = Patient.new(params[:patient])&#xA;    if  !@patient.save&#xA;      @patient.user.password = ''&#xA;      @patient.user.password_confirmation = ''&#xA;      return render is_admin? ? 'new_admin' : 'new'&#xA;    else&#xA;      #Fire off an e-mail&#xA;      PatientMailer.welcome_email(@patient).deliver&#xA;    end&#xA;&#xA;    if current_user == @patient&#xA;      sign_in @patient&#xA;    else&#xA;      redirect_to patients_path&#xA;    end&#xA;  end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2113" LastEditorUserId="22222" LastEditDate="2013-11-25T02:16:56.667" LastActivityDate="2014-12-25T19:29:06.830" Title="Return render in Ruby on Rails" Tags="&lt;ruby&gt;&lt;ruby-on-rails&gt;" AnswerCount="2" CommentCount="0" FavoriteCount="3" />
  <row Id="997" PostTypeId="2" ParentId="996" CreationDate="2011-02-25T18:55:37.833" Score="7" Body="&lt;p&gt;Writing it like this makes it look the &lt;code&gt;render&lt;/code&gt; returns a meaningful value that is then returned by create and used by the code that calls &lt;code&gt;create&lt;/code&gt;, which is not the case. So instead I would write:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;render is_admin? ? 'new_admin' : 'new'&#xA;return&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This makes it clear that &lt;code&gt;render&lt;/code&gt; is solely used for its side effects and &lt;code&gt;create&lt;/code&gt; does not return a value (other than &lt;code&gt;nil&lt;/code&gt;).&lt;/p&gt;&#xA;" OwnerUserId="128" LastEditorUserId="128" LastEditDate="2012-11-06T20:02:22.007" LastActivityDate="2012-11-06T20:02:22.007" CommentCount="0" />
  <row Id="998" PostTypeId="2" ParentId="984" CreationDate="2011-02-25T20:26:49.653" Score="4" Body="&lt;p&gt;What you're talking about is called object-relational mapping.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You could do this, but it will be a fair amount of effort. Luckily many people have run into this same question before, answered it and open-sourced that solution. I suggest looking at using one of those solutions.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://www.nhibernate.com/&quot; rel=&quot;nofollow&quot;&gt;nHibernate&lt;/a&gt; is just one example but is a popular and mature solution.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Edit: More accurately, object-relational mapping is mapping fields to columns, objects to tables and object relationships to table relationships, so it does exactly what you want and (optionally) much more.&lt;/p&gt;&#xA;" OwnerUserId="1416" LastActivityDate="2011-02-25T20:26:49.653" CommentCount="0" />
  <row Id="999" PostTypeId="2" ParentId="984" CreationDate="2011-02-25T20:36:24.210" Score="3" Body="&lt;p&gt;To add a little to PDR's answer, since you have mentioned VB.NET, if you're using .NET 3.5 or higher you can use the &lt;a href=&quot;https://msdn.microsoft.com/en-gb/data/ef.aspx&quot; rel=&quot;nofollow&quot;&gt;Entity Framework&lt;/a&gt; to generate all of the basic classes and the supporting CRUD methods of those classes.&lt;/p&gt;&#xA;" OwnerUserId="2143" LastEditorUserId="4203" LastEditDate="2016-07-03T10:54:27.540" LastActivityDate="2016-07-03T10:54:27.540" CommentCount="2" />
  <row Id="1000" PostTypeId="1" AcceptedAnswerId="1010" CreationDate="2011-02-25T20:44:42.203" Score="4" ViewCount="1703" Body="&lt;p&gt;I am writing an application aimed at the desktop but using web technologies. It will have an HTML interface and a server written in Python using Flask will do all of the filesystem interaction. It will have the ability to edit user settings so I want to make it impossible for other users to interfere. This is a little tricky because the server and client communicate using HTTP over a localhost port.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The program is split between 3 files:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;run.py&lt;/strong&gt; - controls the start up and shut down of the server and client.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import os&#xA;import json&#xA;import time&#xA;import signal&#xA;&#xA;secret_file = os.path.join(os.environ['HOME'], '.myapp.secret')&#xA;if os.path.exists(secret_file):&#xA;    os.remove(secret_file)&#xA;&#xA;os.system(&quot;python server.py &amp;amp;&quot;)&#xA;&#xA;while not os.path.exists(secret_file):&#xA;    time.sleep(0.1)&#xA;&#xA;f = open(secret_file)&#xA;secret = json.load(f)&#xA;&#xA;url = 'http://localhost:' + str(secret['port']) + '/' + secret['key']&#xA;&#xA;os.system(&quot;python client.py &quot; + url)&#xA;&#xA;&#xA;os.kill(secret['pid'], signal.SIGINT)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;server.py&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;from flask import Flask, request, Response&#xA;import socket&#xA;import random&#xA;import json&#xA;import sys&#xA;import os&#xA;&#xA;app = Flask(__name__)&#xA;key = ''.join(random.sample(&#xA;    &quot;1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM&quot;, &#xA;    random.randint(8, 24)&#xA;))&#xA;port = 0&#xA;secret_file = os.path.join(os.environ['HOME'], '.myapp.secret')&#xA;&#xA;@app.route('/&amp;lt;authkey&amp;gt;')&#xA;def hello(authkey):&#xA;    if authkey == key:&#xA;        return 'Hello, world!'&#xA;    else:&#xA;        return Response('Access Denied', 401)&#xA;&#xA;def broadcast(port):&#xA;    s = json.dumps({&#xA;        'key' : key,&#xA;        'port' : port,&#xA;    'pid' : os.getpid()&#xA;    })&#xA;    f = open(&#xA;        secret_file,&#xA;        'w'&#xA;    )&#xA;    f.write(s)&#xA;    os.chmod(secret_file, 0400)&#xA;    f.close()&#xA;&#xA;&#xA;if __name__ == '__main__':&#xA;    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)&#xA;    sock.bind(('localhost', 0))&#xA;    port = sock.getsockname()[1]&#xA;    broadcast(port)&#xA;    sock.close()&#xA;    app.run(port=port)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;client.py&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is a simple GTK window with a webkit widget that renders the page. It renders the URL passed to it by the first argument.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Is this sufficiently secure? Also, are there any other problems that I have not considered?&lt;/p&gt;&#xA;" OwnerUserId="2142" LastEditorUserId="22222" LastEditDate="2015-02-06T18:32:44.653" LastActivityDate="2015-02-06T18:32:44.653" Title="Security of simple client/server desktop app" Tags="&lt;python&gt;&lt;security&gt;&lt;flask&gt;" AnswerCount="2" CommentCount="0" FavoriteCount="2" />
  <row Id="1001" PostTypeId="1" AcceptedAnswerId="1004" CreationDate="2011-02-25T23:44:49.373" Score="30" ViewCount="1272" Body="&lt;p&gt;I'm trying to port this little F# snippet while staying pythonic:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;[&quot;something&quot;; &quot;something else&quot;; &quot;blah&quot;; &quot;a string&quot;] |&amp;gt; List.map (fun p -&amp;gt; p, p.Length) |&amp;gt; List.sortBy snd&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In case you don't speak F#, it gets the length of each string, then sorts by length.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Output:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;pre&gt;&lt;code&gt;[(&quot;blah&quot;, 4); (&quot;a string&quot;, 8); (&quot;something&quot;, 9); (&quot;something else&quot;, 14)]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;In Python, this is the best I could do so far:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;sorted([(p, len(p)) for p in [&quot;something&quot;, &quot;something else&quot;, &quot;blah&quot;, &quot;a string&quot;]], key=lambda a:a[1])&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;While correct, this doesn't look very elegant to me, or maybe it's just my non-pythonic eye.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Is this pythonic code? How would you write it? Maybe an imperative style is more appropriate?&lt;/p&gt;&#xA;" OwnerUserId="524" LastEditorUserId="22222" LastEditDate="2015-01-25T18:13:55.200" LastActivityDate="2015-01-25T18:13:55.200" Title="Sorting strings by length - functional Python" Tags="&lt;python&gt;&lt;beginner&gt;&lt;strings&gt;&lt;sorting&gt;&lt;functional-programming&gt;" AnswerCount="5" CommentCount="0" />
  <row Id="1002" PostTypeId="1" AcceptedAnswerId="1003" CreationDate="2011-02-25T23:50:59.147" Score="9" ViewCount="14052" Body="&lt;p&gt;I am working on a helper method that will map properties from an &lt;code&gt;ExpandoObject&lt;/code&gt; to a user supplied object and was wondering if the code could be cleaned up or made any more efficiently. It currently has the correct behaviour from a simple test.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public static class Mapper&#xA;{&#xA;    public static void Map&amp;lt;T&amp;gt;(ExpandoObject source, T destination)&#xA;    {&#xA;        IDictionary&amp;lt;string, object&amp;gt; dict = source;&#xA;        var type = destination.GetType();&#xA;&#xA;        foreach (var prop in type.GetProperties())&#xA;        {&#xA;            var lower = prop.Name.ToLower();&#xA;            var key = dict.Keys.SingleOrDefault(k =&amp;gt; k.ToLower() == lower);&#xA;&#xA;            if (key != null)&#xA;            {&#xA;                prop.SetValue(destination, dict[key], null);&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Full test can be seen &lt;a href=&quot;https://gist.github.com/844736&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;. There is currently no type checking. Would this be next to add?&lt;/p&gt;&#xA;" OwnerUserId="2147" LastEditorUserId="22222" LastEditDate="2016-06-25T18:16:46.720" LastActivityDate="2016-06-25T18:16:46.720" Title="Mapping ExpandoObject to another object type" Tags="&lt;c#&gt;&lt;.net&gt;" AnswerCount="1" CommentCount="0" FavoriteCount="6" />
  <row Id="1003" PostTypeId="2" ParentId="1002" CreationDate="2011-02-26T00:16:03.807" Score="7" Body="&lt;p&gt;I've come up with a few changes that should actually speed it up.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// By using a generic class we can take advantage&#xA;// of the fact that .NET will create a new generic type&#xA;// for each type T. This allows us to avoid creating&#xA;// a dictionary of Dictionary&amp;lt;string, PropertyInfo&amp;gt;&#xA;// for each type T. We also avoid the need for the &#xA;// lock statement with every call to Map.&#xA;public static class Mapper&amp;lt;T&amp;gt;&#xA;    // We can only use reference types&#xA;    where T : class&#xA;{&#xA;    private static readonly Dictionary&amp;lt;string, PropertyInfo&amp;gt; _propertyMap;&#xA;&#xA;    static Mapper()&#xA;    {&#xA;        // At this point we can convert each&#xA;        // property name to lower case so we avoid &#xA;        // creating a new string more than once.&#xA;        _propertyMap = &#xA;            typeof(T)&#xA;            .GetProperties()&#xA;            .ToDictionary(&#xA;                p =&amp;gt; p.Name.ToLower(), &#xA;                p =&amp;gt; p&#xA;            );&#xA;    }&#xA;&#xA;    public static void Map(ExpandoObject source, T destination)&#xA;    {&#xA;        // Might as well take care of null references early.&#xA;        if (source == null)&#xA;            throw new ArgumentNullException(&quot;source&quot;);&#xA;        if (destination == null)&#xA;            throw new ArgumentNullException(&quot;destination&quot;);&#xA;&#xA;        // By iterating the KeyValuePair&amp;lt;string, object&amp;gt; of&#xA;        // source we can avoid manually searching the keys of&#xA;        // source as we see in your original code.&#xA;        foreach (var kv in source)&#xA;        {&#xA;            PropertyInfo p;&#xA;            if (_propertyMap.TryGetValue(kv.Key.ToLower(), out p))&#xA;            {&#xA;                var propType = p.PropertyType;&#xA;                if (kv.Value == null)&#xA;                {&#xA;                    if (!propType.IsByRef &amp;amp;&amp;amp; propType.Name != &quot;Nullable`1&quot;)&#xA;                    {&#xA;                        // Throw if type is a value type &#xA;                        // but not Nullable&amp;lt;&amp;gt;&#xA;                        throw new ArgumentException(&quot;not nullable&quot;);&#xA;                    }&#xA;                }&#xA;                else if (kv.Value.GetType() != propType)&#xA;                {&#xA;                    // You could make this a bit less strict &#xA;                    // but I don't recommend it.&#xA;                    throw new ArgumentException(&quot;type mismatch&quot;);&#xA;                }&#xA;                p.SetValue(destination, kv.Value, null);&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1795" LastEditorUserId="1795" LastEditDate="2011-02-26T04:05:59.257" LastActivityDate="2011-02-26T04:05:59.257" CommentCount="2" />
  <row Id="1004" PostTypeId="2" ParentId="1001" CreationDate="2011-02-26T00:48:39.577" Score="28" Body="&lt;pre&gt;&lt;code&gt;data = [&quot;something&quot;, &quot;something else&quot;, &quot;blah&quot;, &quot;a string&quot;]&#xA;result = [(x, len(x)) for x in sorted(data, key = len)]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Basically, its more straightforward to sort first then decorate. Although, I'm not sure why you would need the length of the list in your tuple. If you don't really need it sorting by length can be much shorter.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If all I wanted was to output the data, I'd do it like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for string in sorted(data, key = len):&#xA;    print string, len(string)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you really wanted to eliminate the two references to len you could do:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;mykey = len&#xA;for string in sorted(data, key = mykey):&#xA;    print string, mykey(string)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;But unless you are reusing the code with different mykey's that doesn't seem worthwhile.&lt;/p&gt;&#xA;" OwnerUserId="1659" LastEditorUserId="1659" LastEditDate="2011-02-26T17:49:20.617" LastActivityDate="2011-02-26T17:49:20.617" CommentCount="6" />
  <row Id="1005" PostTypeId="2" ParentId="1001" CreationDate="2011-02-26T00:48:54.177" Score="6" Body="&lt;p&gt;I don't think that your solution looks bad. I would probably use a temporary variable to make the line length a bit more readable. You could consider &lt;code&gt;itemgetter&lt;/code&gt; from the &lt;code&gt;operator&lt;/code&gt; module.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;E.g.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;from operator import itemgetter&#xA;&#xA;orig_list = [&quot;something&quot;, &quot;something else&quot;, &quot;blah&quot;, &quot;a string&quot;]&#xA;mylist = [(p, len(p)) for p in orig_list]&#xA;mylist.sort(itemgetter(1))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Personally I think that this is just as readable.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;mylist = sorted([(p, len(p)) for p in orig_list], key=itemgetter(1))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="72" LastActivityDate="2011-02-26T00:48:54.177" CommentCount="0" />
  <row Id="1006" PostTypeId="1" CreationDate="2011-02-26T07:06:59.440" Score="6" ViewCount="316" Body="&lt;p&gt;I am looking for some help with improving this bilinear scaling SSE2 code on Core 2 CPUs.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;On my Atom N270 and on an i7, this code is about 2x faster than the MMX code. But under Core 2 CPUs, it is only equal to the MMX code.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;void ConversionProcess::convert_SSE2(BBitmap *from, BBitmap *to)&#xA;{&#xA;    uint32 fromBPR, toBPR, fromBPRDIV4, x, y, yr, xr;&#xA;&#xA;    ULLint start = rdtsc();&#xA;    ULLint stop;&#xA;    if (from &amp;amp;&amp;amp; to) {&#xA;        uint32 width, height;&#xA;        width = from-&amp;gt;Bounds().IntegerWidth() + 1;&#xA;        height = from-&amp;gt;Bounds().IntegerHeight() + 1;&#xA;&#xA;        uint32 toWidth, toHeight;&#xA;        toWidth = to-&amp;gt;Bounds().IntegerWidth() + 1;&#xA;        toHeight = to-&amp;gt;Bounds().IntegerHeight() + 1;&#xA;&#xA;        fromBPR = from-&amp;gt;BytesPerRow();&#xA;        fromBPRDIV4 = fromBPR &amp;gt;&amp;gt; 2;&#xA;        toBPR = to-&amp;gt;BytesPerRow();&#xA;&#xA;        uint32 x_ratio = ((width-1) &amp;lt;&amp;lt; 7) / toWidth ;&#xA;        uint32 y_ratio = ((height-1) &amp;lt;&amp;lt; 7) / toHeight ;&#xA;&#xA;        uint8* toPtr = (uint8*)to-&amp;gt;Bits();&#xA;        uint8* fromPtr1 = (uint8*)from-&amp;gt;Bits();&#xA;        uint8* fromPtr2 = (uint8*)from-&amp;gt;Bits() + fromBPR;&#xA;&#xA;        struct FilterInfo {&#xA;            uint16 one_minus_diff;      // one minus diff&#xA;            uint16 diff;                // diff value used to calculate the weights used to average the pixels&#xA;            uint16 one_minus_diff_rep;  // one minus diff repeated&#xA;            uint16 diff_rep;            // diff value used to calculate the weights used to average the pixels repeated&#xA;        };&#xA;&#xA;        FilterInfo *xWeights = (FilterInfo *)memalign(16, toWidth * 8);&#xA;        FilterInfo *yWeights = (FilterInfo *)memalign(16, toHeight * 8);&#xA;        uint32 *xIndexes = (uint32 *)memalign(16, (toWidth+2) * 4);     // will overread by 2 index&#xA;        uint32 *yIndexes = (uint32 *)memalign(16, toHeight * 4);&#xA;&#xA;        x = 0;&#xA;        for (uint32 j=0;j &amp;lt; toWidth;j++) {&#xA;            xr = x &amp;gt;&amp;gt; 7;&#xA;            xWeights[j].diff = x - (xr &amp;lt;&amp;lt; 7);&#xA;            xWeights[j].one_minus_diff = 127 - xWeights[j].diff;&#xA;            xWeights[j].one_minus_diff_rep = xWeights[j].one_minus_diff;&#xA;            xWeights[j].diff_rep = xWeights[j].diff;&#xA;            xIndexes[j] = xr &amp;lt;&amp;lt; 2;&#xA;&#xA;            x += x_ratio;&#xA;        }&#xA;&#xA;        y = 0;&#xA;        for (uint32 j=0;j &amp;lt; toHeight; j++) {&#xA;            yr = y &amp;gt;&amp;gt; 7;&#xA;            yWeights[j].diff = y - (yr &amp;lt;&amp;lt; 7);&#xA;            yWeights[j].one_minus_diff = 127 - yWeights[j].diff;&#xA;            yIndexes[j] = (yr * fromBPR);&#xA;            y += y_ratio;&#xA;&#xA;        }&#xA;&#xA;        for (uint32 i=0;i &amp;lt; toHeight; i++) {&#xA;            _ScaleSSE2X2(toPtr, fromPtr1 + yIndexes[i], fromPtr2 + yIndexes[i], xIndexes, xWeights, &amp;amp;yWeights[i], toWidth);&#xA;            toPtr += toBPR; &#xA;        }&#xA;&#xA;        free(xWeights);&#xA;        free(yWeights);&#xA;        free(xIndexes);&#xA;        free(yIndexes);&#xA;&#xA;        stop = rdtsc() - start;&#xA;        if (stop &amp;lt; timeTaken) {&#xA;            timeTaken = stop;&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;;&#xA;; Copyright (C) 2011 David McPaul&#xA;;&#xA;; All rights reserved. Distributed under the terms of the MIT License.&#xA;;&#xA;&#xA;; A rather unoptimised bilinear scaler&#xA;&#xA;%macro  cglobal 1&#xA;    global  _%1&#xA;    %define %1 _%1&#xA;    align 16&#xA;%1:&#xA;%endmacro&#xA;&#xA;SECTION .data align=16&#xA;&#xA;RGB_AND db  0xff&#xA;        db  0x00&#xA;        db  0x00&#xA;        db  0x00&#xA;        db  0xff&#xA;        db  0x00&#xA;        db  0x00&#xA;        db  0x00&#xA;        db  0xff&#xA;        db  0x00&#xA;        db  0x00&#xA;        db  0x00&#xA;        db  0xff&#xA;        db  0x00&#xA;        db  0x00&#xA;        db  0x00&#xA;&#xA;; void  _ScaleSSE2X2(void *toPtr, void *fromPtr1, void *fromPtr2, void* xIndexPtr, void *xWeightPtr, void *yWeightPtr, uint32 length);&#xA;&#xA;length      equ ebp+32&#xA;yWeightPtr  equ ebp+28&#xA;xWeightPtr  equ ebp+24&#xA;xIndexPtr   equ ebp+20&#xA;fromPtr2    equ ebp+16&#xA;fromPtr1    equ ebp+12&#xA;toPtr       equ ebp+8&#xA;&#xA;SECTION .text align=16&#xA;cglobal ScaleSSE2X2&#xA;; reserve registers. eax, ecx, edx automatically available&#xA;    push ebp&#xA;    mov ebp, esp&#xA;    push ebx    ; yWeights, xIndexPtr&#xA;    push edi    ; scratch&#xA;    push esi    ; fromPtr3&#xA;&#xA;    mov esi, [fromPtr1]&#xA;    mov edx, [fromPtr2]&#xA;    mov eax, [xWeightPtr]&#xA;    mov ebx, [yWeightPtr]&#xA;    mov ecx, [length]&#xA;&#xA;; calculate y weights and cache&#xA;    movd xmm7, [ebx]                ; get 1-yDiff and yDiff&#xA;    pshuflw xmm7, xmm7, 01010000b   ; 1-yDiff, 1-yDiff, yDiff, yDiff&#xA;    pshufd xmm7, xmm7, 01000100b    ; duplicate&#xA;&#xA;    mov ebx, [xIndexPtr]&#xA;&#xA;    push ebp                        ; reuse frame ptr for toPtr&#xA;    mov ebp, [toPtr]                ; Cannot use parameter refs anymore&#xA;&#xA;    shr ecx,1&#xA;&#xA;    ; calculate first index&#xA;    mov edi, [ebx]                  ; index&#xA;&#xA;    align 16&#xA;REPEATLOOPX2:&#xA;&#xA;    ; load first and second set of weights into xmm3&#xA;    movdqa xmm3, [eax]              ; get 1-xDiff, xDiff, 1-xDiff, xDiff&#xA;    pmullw xmm3, xmm7               ; calculate F1, F2, F3, F4 (2)&#xA;    add eax, 16&#xA;&#xA;    ; load first set of source pixels&#xA;    movq xmm0, [esi+edi]            ; xmm0 = fromPtr1 + index | fromPtr1 + index + 4&#xA;    movq xmm1, [edx+edi]            ; xmm1 = fromPtr2 + index | fromPtr2 + index + 4&#xA;    punpcklqdq xmm0, xmm1           ; combine all 4 pixels into xmm0&#xA;&#xA;    sub edi, [ebx+4]                ; if the x index is the same then skip the second load&#xA;    jz SKIP&#xA;&#xA;    ; calculate second index&#xA;    mov edi, [ebx+4]                ; index&#xA;&#xA;    ; load second set of source pixels&#xA;    movq xmm4, [esi+edi]            ; xmm4 = fromPtr1 + index | fromPtr1 + index + 4&#xA;    movq xmm5, [edx+edi]            ; xmm5 = fromPtr2 + index | fromPtr2 + index + 4&#xA;    punpcklqdq xmm4, xmm5           ; combine all 4 pixels into xmm4&#xA;&#xA;    movdqa xmm1, xmm0               ; copy to xmm1, xmm2&#xA;    pshufd xmm2, xmm0, 0xE4 &#xA;    movdqa xmm5, xmm4               ; copy to xmm1, xmm2&#xA;    pshufd xmm6, xmm4, 0xE4 &#xA;&#xA;    jmp NEXT&#xA;align 16&#xA;SKIP:&#xA;    movdqa xmm1, xmm0               ; copy to xmm1, xmm2&#xA;    pshufd xmm2, xmm0, 0xE4 &#xA;    movdqa xmm4, xmm0               ; copy first pixel set xmm0 to second pixel set xmm4&#xA;    pshufd xmm5, xmm4, 0xE4         ; copy to xmm4, xmm6&#xA;    movdqa xmm6, xmm4               &#xA;NEXT:&#xA;;   prefetchnta [edx+edi+16]&#xA;&#xA;    add ebx, 8&#xA;&#xA;; calculate dest rgb values using color = a * F1 + b * F2 + c * F3 + d * F4&#xA;&#xA;; extract b from both sets of pixels and combine into a single reg&#xA;    pand xmm0, [RGB_AND]            ; clear all but r values leaving b000&#xA;    pand xmm4, [RGB_AND]            ; clear all but r values leaving b000&#xA;    packssdw xmm0, xmm4             ; pack down to 16 bit values&#xA;&#xA;    movdqa xmm4, [RGB_AND]          ; xmm4 is now free&#xA;    pmaddwd xmm0, xmm3              ; multiply and add to get temp1 = a * F1 + b * F2, temp2 = c * F3 + d * F4&#xA;&#xA;; extract g&#xA;    psrld xmm1, 8                   ; rotate g to low bytes&#xA;    pand xmm1, xmm4                 ; extract g values g000&#xA;    psrld xmm5, 8                   ; rotate g to low bytes&#xA;    pand xmm5, xmm4                 ; extract g values g000&#xA;    packssdw xmm1, xmm5             ; pack down to 16 bit values&#xA;&#xA;    pmaddwd xmm1, xmm3              ; multiply and add&#xA;&#xA;; extract r&#xA;    psrld xmm2, 16                  ; rotate b to low bytes&#xA;    pand xmm2, xmm4                 ; extract b values b000&#xA;    psrld xmm6, 16                  ; rotate b to low bytes&#xA;    pand xmm6, xmm4                 ; extract b values b000&#xA;    packssdw xmm2, xmm6             ; pack down to 16 bit values&#xA;&#xA;    pmaddwd xmm2, xmm3              ; multiply and add&#xA;&#xA;;   Add temp1 and temp2 leaving us with rrrr xxxx rrrr xxxx&#xA;    psrld xmm0, 14                  ; scale back to range&#xA;    pshufd xmm3, xmm0, 00110001b    ; extract temp2&#xA;    paddd xmm0, xmm3                ; add back to temp1&#xA;&#xA;    psrld xmm1, 14                  ; scale back to range&#xA;    pshufd xmm3, xmm1, 00110001b&#xA;    paddd xmm1, xmm3                ; add&#xA;&#xA;    psrld xmm2, 14                  ; scale back to range&#xA;    pshufd xmm3, xmm2, 00110001b&#xA;    paddd xmm2, xmm3                ; add&#xA;&#xA;;   recombine into 2 rgba values&#xA;&#xA;    pslld xmm1, 8&#xA;    por xmm0, xmm1&#xA;    pslld xmm2, 16&#xA;    por xmm0, xmm2&#xA;    pshufd xmm0, xmm0, 00001000b    ; shuffle down&#xA;&#xA;    movq [ebp], xmm0                ; output 32bit * 2&#xA;    add ebp, 8&#xA;&#xA;    mov edi, [ebx]                  ; index&#xA;&#xA;    sub ecx, 1&#xA;    jnz REPEATLOOPX2&#xA;&#xA;; Cleanup&#xA;&#xA;    pop ebp&#xA;    pop esi&#xA;    pop edi&#xA;    pop ebx&#xA;    mov esp, ebp&#xA;    pop ebp&#xA;    ret&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2154" LastEditorUserId="22222" LastEditDate="2013-11-25T02:54:48.600" LastActivityDate="2013-11-25T02:54:48.600" Title="Improving this bilinear scaling SSE2 code on Core 2 CPUs" Tags="&lt;optimization&gt;&lt;c&gt;&lt;assembly&gt;" AnswerCount="1" CommentCount="1" FavoriteCount="1" />
  <row Id="1007" PostTypeId="2" ParentId="866" CreationDate="2011-02-26T09:05:08.673" Score="0" Body="&lt;p&gt;The validator says there are a lot of meta tag values missing (about 10) and that there a 2 starting &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;&#xA;" OwnerDisplayName="user100" LastEditorUserId="7076" LastEditDate="2012-02-26T20:14:49.887" LastActivityDate="2012-02-26T20:14:49.887" CommentCount="1" />
  <row Id="1009" PostTypeId="2" ParentId="1000" CreationDate="2011-02-26T11:03:24.077" Score="3" Body="&lt;p&gt;It's not secure because you delete the file with the port on. Finding open ports is easy. A better option is to bind only on localhost so that you can't connect from other computers at all. Figuring out the port is always going to be easy, so making that secret doesn't help. In fact it should be configurable so you can avoid port conflicts.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Since you start the server from within the client, you can actually create the key in the client, and instead pass it in to the server at startup preferably via stdin. That way it doesn't have to exist on the file system at all. You probably want to use subprocess instead of os.system for that.&lt;/p&gt;&#xA;" OwnerUserId="1235" LastActivityDate="2011-02-26T11:03:24.077" CommentCount="2" />
  <row Id="1010" PostTypeId="2" ParentId="1000" CreationDate="2011-02-26T11:04:13.403" Score="4" Body="&lt;p&gt;The important thing you want to enforce is that only the same local user can see the hello world.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You're relying at least on the inability of any random user to&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;listen in on someone else's sockets.&lt;/li&gt;&#xA;&lt;li&gt;read another user's files&lt;/li&gt;&#xA;&lt;li&gt;otherwise learn the secret&lt;/li&gt;&#xA;&lt;li&gt;execute random python code in your server&lt;/li&gt;&#xA;&lt;li&gt;And the inability for a remote attacker to connect to your socket.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;1, 2 and 4 depend how well you've secured your system (no privilege elevation or random suid files lying around). 4 also depends on the security of flask and the rest of your python stack.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Five can be broken, depending on how your firewall is configured (someone could use connection tracking to get your socket forwarded, even though it is bound to localhost). You'd be better off using unix domain sockets.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The second is broken, because you chmod the file only after you've written to it. That gives a window for the attacker to open the file. In fact the attacker could even write to the file and execute arbitrary commands, which is why you should never use os.system, and you should use urlparse to build the url.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The third is broken in two ways:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;the secret appears in the process list&lt;/li&gt;&#xA;&lt;li&gt;the server won't take the same time to compare strings that are mostly right and mostly wrong. The attacker can guess the length of the secret, and guess the secret letter by letter (timing attack).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="2156" LastEditorUserId="2156" LastEditDate="2011-02-26T11:28:03.650" LastActivityDate="2011-02-26T11:28:03.650" CommentCount="0" />
  <row Id="1012" PostTypeId="2" ParentId="990" CreationDate="2011-02-26T14:09:13.640" Score="3" Body="&lt;p&gt;Only something litle, don't write the closing &lt;code&gt;?&amp;gt;&lt;/code&gt; , because if there is a whitespace after and you try to modifiy the header anywhere else, it won't work and you will have very very long to find the whitespace.&lt;/p&gt;&#xA;" OwnerUserId="2160" LastActivityDate="2011-02-26T14:09:13.640" CommentCount="3" />
  <row Id="1013" PostTypeId="2" ParentId="917" CreationDate="2011-02-26T14:37:35.740" Score="5" Body="&lt;p&gt;I see a couple of potential issues with regards to internationalization:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;pluralization is more complex than &lt;code&gt;(qty == 1 ? singular : plural)&lt;/code&gt;. What about the value 0? Also in some languages, &lt;a href=&quot;http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html&quot; rel=&quot;nofollow&quot;&gt;different plural forms are in use depending on the number&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;numbers should be formatted according to language, &lt;a href=&quot;http://en.wikipedia.org/wiki/Decimal_mark&quot; rel=&quot;nofollow&quot;&gt;using appropriate separators&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;concatenation (that you mention is done in main program) must be avoided because the order of words and phrases will often vary in translations in different languages&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;I would advise to :&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;localize translations using named parameters to be replaced: this solves the ordering issue, and avoids concatenation.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;format values, for number formatting and pluralization, using a separate function localized for each language&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;replace parameters with formatted values in parameterized translations using a template engine: this should keep some potentially buggy regular expressions out of your code :)&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;You may be interested in having a look at:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&quot;http://24ways.org/2007/javascript-internationalisation&quot; rel=&quot;nofollow&quot;&gt;JavaScript Internationalisation&lt;/a&gt;, a post by Matthew Somerville on 24 Ways&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&quot;https://github.com/jquery/jquery-global&quot; rel=&quot;nofollow&quot;&gt;jQuery-global&lt;/a&gt;, &quot;a jQuery plugin for the globalization of string, date, and number formatting and parsing&quot;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;and last but not least, the i18n API part of the Scalable JavaScript Application framework, which I designed for Legal-Box :)&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&quot;https://github.com/eric-brechemier/lb_js_scalableApp&quot; rel=&quot;nofollow&quot;&gt;eric-brechemier/lb_js_scalableApp&lt;/a&gt;, the project home page on GitHub&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&quot;https://github.com/eric-brechemier/lb_js_scalableApp/blob/master/src/lb.core.Sandbox.js&quot; rel=&quot;nofollow&quot;&gt;lb.core.Sandbox.js&lt;/a&gt;, check the i18n part of the API, methods starting with &quot;i18n.&quot;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;I may be able to provide more practical suggestions if you show more of your code, especially at the &quot;top&quot;, part of the main program.&lt;/p&gt;&#xA;" OwnerUserId="185" LastEditorUserId="185" LastEditDate="2011-08-14T14:48:59.420" LastActivityDate="2011-08-14T14:48:59.420" CommentCount="0" />
  <row Id="1014" PostTypeId="2" ParentId="972" CreationDate="2011-02-26T15:46:52.843" Score="4" Body="&lt;p&gt;This code looks fine to me for a toy project. I especially appreciate the long names for identifiers.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Now, it could look better:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;with more comments. You should describe the intent (the why behind the how) and the expected use case for the function: type and range of values in parameters, one line to describe what it does, and one more paragraph for details if needed.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;my personal preference would be to use camelCase instead of underscore_between_words for long names. Although this is &lt;a href=&quot;http://stackoverflow.com/questions/921133/javascript-naming-conventions&quot;&gt;open to discussion&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;a little trick: end the if branch with &lt;code&gt;return;&lt;/code&gt; to avoid nesting all remaining code in the else branch:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function update_result_for(input, regexp_value) {&#xA;  var input_value   = input.val();&#xA;  var result_spans  = input.parent().children('span');        &#xA;  if(!input_value || !$('#regexp').val()) {&#xA;    result_spans.hide();&#xA;    return; // return as soon as possible to avoid deep nesting&#xA;  }&#xA;  // no need for else&#xA;  var regexp = new RegExp(regexp_value);&#xA;  var result = regexp.exec(input_value);&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;in the same vein, treat exceptional cases first and normal cases after. This is a useful convention which helps the reader, and the exception handling is usually shorter (or should be extracted to a separate function if longer) which avoids long runs of nested code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if (!result) {&#xA;  result_spans.filter(&quot;.not_ok&quot;).show('fast');&#xA;  result_spans.filter(&quot;.ok&quot;).hide();&#xA;  return;&#xA;}&#xA;// reduced nesting&#xA;var matched_string = result.shift();&#xA;// ...&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;only use anonymous functions when you actually need a closure with access to the context: the intent of the function will be clearer with a name, you will avoid nesting, and may reuse the function more easily including for unit testing. There are many anonymous functions in your code, which makes it harder to understand:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function(submatch, index) {&#xA;  return '$' + (index + 1) + ' = ' + submatch;&#xA;})&#xA;&#xA;function(e) {&#xA;  if(e.which === 17) isCtrl=false;&#xA;}&#xA;&#xA;function(e) {&#xA;  if(e.which === 17) isCtrl=true;&#xA;    if(e.which === 69 &amp;amp;&amp;amp; isCtrl) {&#xA;    $('#regexp').focus();          &#xA;        return false;&#xA;    }&#xA;})&#xA;&#xA;function() {&#xA;  $('#regexp').focus();&#xA;  $('span.result').hide();&#xA;  // ...&#xA;}&#xA;&#xA;function() {&#xA;  update_result_for($(this), $('#regexp').val());&#xA;}&#xA;&#xA;function() {&#xA;  $('input:not(#regexp)').each(function(i) {&#xA;    update_result_for($(this), $('#regexp').val());&#xA;  });          &#xA;}&#xA;&#xA;function() {&#xA;  new_example = $('div#examples p:last').clone();&#xA;  new_example.children('input').attr('value', '');&#xA;  new_example.children('span').hide();&#xA;  new_example.insertBefore($(this));&#xA;  new_example.children(&quot;input&quot;).focus();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;once you define more than one function, you should wrap your code in a closure to avoid cluttering the global namespace, following the &lt;a href=&quot;http://www.adequatelygood.com/2010/3/JavaScript-Module-Pattern-In-Depth&quot; rel=&quot;nofollow&quot;&gt;Module Pattern&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(function(){&#xA;  // private scope for your code&#xA;}());&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;break long lines to fit in about 80 characters to avoid the need for scrolling horizontally in typical console windows and in code areas on this site:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var regexp_to_highlight_matched_string =&#xA;  new RegExp('(.*)' + matched_string + '(.*)');&#xA;var regexp_to_highlight_matched_string_result =&#xA;  regexp_to_highlight_matched_string.exec(input_value);&#xA;var before_matched_string =&#xA;  regexp_to_highlight_matched_string_result[1];&#xA;var after_matched_string =&#xA;  regexp_to_highlight_matched_string_result[2];&#xA;var input_value_with_matched_string_highlighted =&#xA;  'matched: ' +&#xA;  before_matched_string +&#xA;  '&amp;lt;span class=&quot;matched&quot;&amp;gt;' + matched_string + '&amp;lt;/span&amp;gt;' +&#xA;  after_matched_string;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;To go further, my advice would be to read &quot;&lt;a href=&quot;http://rads.stackoverflow.com/amzn/click/0596517742&quot; rel=&quot;nofollow&quot;&gt;JavaScript: The Good Parts&lt;/a&gt;&quot; and start using &lt;a href=&quot;http://www.jslint.com/&quot; rel=&quot;nofollow&quot;&gt;JSLint&lt;/a&gt;, in this order: this is an enlightening experience on your way to mastering JavaScript. The other way round, using the tool without understanding the mindset of its author, is very frustrating.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I ran JSLint on your code. It has one critical complaint hidden among hair splittings: the declaration of new_example is missing, it is therefore a global variable which is susceptible to result in unexpected bugs.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;   // var keyword added:&#xA;   var new_example = $('div#examples p:last').clone();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="185" LastActivityDate="2011-02-26T15:46:52.843" CommentCount="1" />
  <row Id="1015" PostTypeId="1" AcceptedAnswerId="1685" CreationDate="2011-02-26T19:01:35.590" Score="8" ViewCount="1124" Body="&lt;p&gt;I have used code which looks a little like this in an app I'm working on:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;module App&#xA;  module Settings&#xA;&#xA;    class &amp;lt;&amp;lt; self&#xA;      attr_accessor :console, :file&#xA;    end&#xA;&#xA;    self.console ||= true&#xA;    self.file    ||= []&#xA;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I decided to use this method because I like the interface, I had the idea after reading the Singleton examples from &lt;em&gt;Design Patterns in Ruby&lt;/em&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I can then &lt;code&gt;require 'app/settings'&lt;/code&gt; from any file in my app and read/write the settings&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;p App::Settings.console&#xA;App::Settings.file &amp;lt;&amp;lt; &quot;afile.rb&quot;&#xA;p App::Settings.file&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;etc...&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Is this a reasonable way to keep my settings in a single file? I feel I am unnecessarily repeating myself. Any ideas for DRYing?&lt;/p&gt;&#xA;" OwnerUserId="2166" LastEditorUserId="9357" LastEditDate="2016-11-08T00:42:24.850" LastActivityDate="2016-11-08T00:42:24.850" Title="Storing a Ruby app's settings" Tags="&lt;ruby&gt;&lt;ruby-on-rails&gt;&lt;singleton&gt;&lt;configuration&gt;" AnswerCount="3" CommentCount="0" FavoriteCount="1" />
  <row Id="1017" PostTypeId="2" ParentId="415" CreationDate="2011-02-26T22:28:54.907" Score="0" Body="&lt;p&gt;You could do it all in one step, like this.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;CREATE PROCEDURE dbo.IncrementArtViews (@Slug varchar(250)) AS&#xA;&#xA;UPDATE a&#xA;SET ArtViews = ArtViews + 1&#xA;OUTPUT a.ArtID, a.ArtUserID, a.ArtTitle, a.ArtHtml, a.ArtDescription,&#xA; a.ArtKeywords, a.ArtLicenseID, l.licTitle, a.ArtViews, a.ArtCreated, &#xA; a.ArtUpdated, s.SubID, s.SubTitle, c.CatID, c.CatTitle, sec.SecID, &#xA; sec.SecTitle, u.UsrDisplayName AS UserName&#xA;FROM dbo.Article a&#xA; INNER JOIN dbo.Subcategory s ON a.ArtSubcategoryID = s.SubID&#xA; INNER JOIN dbo.Category c ON s.SubCatID = c.CatID&#xA; INNER JOIN dbo.[Section] sec ON c.CatSectionID = sec.SecID&#xA; INNER JOIN dbo.[User] u ON a.ArtUserID = u.UsrID&#xA; INNER JOIN dbo.License l ON a.ArtLicenseID = l.LicID&#xA;WHERE a.ArtSlugHash = CHECKSUM(@Slug)&#xA; AND a.ArtSlug = @Slug&#xA; AND a.ArtApproved = 1&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2169" LastEditorUserId="2169" LastEditDate="2011-02-26T22:38:14.447" LastActivityDate="2011-02-26T22:38:14.447" CommentCount="1" />
  <row Id="1018" PostTypeId="2" ParentId="490" CreationDate="2011-02-26T23:37:52.180" Score="4" Body="&lt;p&gt;This looks like a good use for UNPIVOT. And you can use &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms175972.aspx&quot; rel=&quot;nofollow&quot;&gt;common table expressions&lt;/a&gt; to &lt;a href=&quot;http://en.wikipedia.org/wiki/Don%27t_repeat_yourself&quot; rel=&quot;nofollow&quot;&gt;avoid repeating yourself&lt;/a&gt;. Like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;WITH DIAGS AS&#xA;(&#xA;    SELECT DISTINCT VisitID as ID, Diags&#xA;    FROM &#xA;    (&#xA;        SELECT *&#xA;        FROM [AGH00]...[20110128 - AGH00#TXT]&#xA;    ) p&#xA;    UNPIVOT&#xA;    (&#xA;        Diags FOR DX IN&#xA;        (&#xA;            DX01, DX11, DX21, DX31&#xA;            , DX02, DX12, DX22, DX32&#xA;            , DX03, DX13, DX23, DX33&#xA;            , DX04, DX14, DX24, DX34&#xA;            , DX05, DX15, DX25, DX35&#xA;            , DX06, DX16, DX26, DX36&#xA;            , DX07, DX17, DX27, DX37&#xA;            , DX08, DX18, DX28, DX38&#xA;            , DX09, DX19, DX29, DX39&#xA;            , DX10, DX20, DX30, DX40&#xA;        )&#xA;    ) AS unpvt&#xA;),&#xA;A0 AS&#xA;(&#xA;    SELECT VisitID, DischDate, [Type], SubType&#xA;    FROM [AGH00]...[20110128 - AGH00#TXT]&#xA;),&#xA;AC AS&#xA;(&#xA;    SELECT VisitID, SUM(ChargsAmt) AS Charges&#xA;    FROM [AGH00]...[20110128 - AGH00Chg#TXT]&#xA;    GROUP BY VisitID&#xA;),&#xA;AP AS&#xA;(&#xA;    SELECT VisitID, SUM(Pmt) AS Payments&#xA;    FROM [AGH00]...[20110128 - AGH00Pmt#TXT]&#xA;    GROUP BY VisitID&#xA;)&#xA;VISITS AS&#xA;(&#xA;    SELECT SUBSTRING(A0.DischDate, 7, 4) + SUBSTRING(A0.DischDate, 1, 2) AS YYYYMM&#xA;        , A0.[Type]&#xA;        , A0.SubType&#xA;        , DIAGS.Diags&#xA;        , AC.Charges&#xA;        , AP.Payments&#xA;    FROM DIAGS&#xA;        LEFT JOIN A0 ON DIAGS.ID = A0.VisitID&#xA;        LEFT JOIN AC ON A0.VisitID = AC.VisitID&#xA;        LEFT JOIN AP ON A0.VisitID = AP.VisitID                &#xA;)&#xA;SELECT YYYYMM, [Type], SubType, Diags&#xA;    , COUNT(*) AS [Count]&#xA;    , SUM(Charges) AS Charges&#xA;    , SUM(Payments) AS Payments&#xA;FROM VISITS&#xA;GROUP BY YYYYMM, [Type], SubType, Diags&#xA;ORDER BY YYYYMM, [Type], SubType, Diags&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2169" LastActivityDate="2011-02-26T23:37:52.180" CommentCount="0" />
  <row Id="1019" PostTypeId="2" ParentId="1015" CreationDate="2011-02-27T10:32:40.323" Score="6" Body="&lt;p&gt;There is nothing really wrong with this but using a simple hash may be easier:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;module App&#xA;    @@settings = {&#xA;        :console =&amp;gt; true,&#xA;        :file =&amp;gt; []&#xA;    }&#xA;    def self.settings&#xA;        @@settings&#xA;    end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Your following code would then become:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;p App.settings[:console]&#xA;App.settings[:file] &amp;lt;&amp;lt; &quot;afile.rb&quot;&#xA;p App.settings[:file]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;There are several advantages to this approach:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;Hashes are easy to serialise and store in files using yaml/json/etc.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;require 'yaml'&#xA;p App.settings.to_yaml&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;You can reference App.settings in a local variable to avoid writing it out:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;s = App.settings&#xA;#do stuff with s&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Hash has many convenience methods for iterating over its values.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;App.settings.each do |key, value|&#xA;    #do something&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;You can add to/update it succinctly using the &lt;code&gt;merge!&lt;/code&gt; method. &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;App.settings.merge! :console =&amp;gt; false, :newsetting =&amp;gt; 'value', :etc =&amp;gt; '...'&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;To get functionality like this in your method would require you to write lots of methods yourself. It's better to just use the built in functionality that Ruby has instead of reinventing the wheel. &lt;/p&gt;&#xA;" OwnerUserId="2142" LastActivityDate="2011-02-27T10:32:40.323" CommentCount="3" />
  <row Id="1020" PostTypeId="2" ParentId="1015" CreationDate="2011-02-27T14:35:34.850" Score="3" Body="&lt;p&gt;Based on @david4dev solution, you can keep the old interface:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;module App&#xA;    @settings = {&#xA;        :console =&amp;gt; true,&#xA;        :file =&amp;gt; []&#xA;    }&#xA;    def @settings.method_missing(name, *a)&#xA;        name.to_s =~ /(.*)=/ ? self[$1.to_sym] = a[0] : self[name]&#xA;    end&#xA;    def self.settings&#xA;        @settings&#xA;    end&#xA;end&#xA;&#xA;p App.settings.console&#xA;App.settings.file &amp;lt;&amp;lt; &quot;afile.rb&quot;&#xA;p App.settings.file&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Additionally you can use Settings as a constant, as in your original code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;module App&#xA;    # ...&#xA;    def self.const_missing(name)&#xA;        name == :Settings ? @settings : super&#xA;    end&#xA;end&#xA;&#xA;p App::Settings.console&#xA;App::Settings.file &amp;lt;&amp;lt; &quot;afile.rb&quot;&#xA;p App::Settings.file&#xA;&#xA;require 'yaml'&#xA;p App::Settings.to_yaml&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2180" LastActivityDate="2011-02-27T14:35:34.850" CommentCount="3" />
  <row Id="1021" PostTypeId="1" AcceptedAnswerId="6288" CreationDate="2011-02-27T15:15:30.223" Score="4" ViewCount="427" Body="&lt;p&gt;I'm just wondering if the following is the best way to write a dao function.  Should I get the entity manager before the transaction and close it after the transaction every time?  Should I write transactions inside a dao?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public void sendBack(Long requestId,String comments){&#xA;    EntityManager em = getEntityManager();&#xA;    em.getTransaction().begin();&#xA;    String update = &quot;update CsRequestReceivers set activeInd = :activeInd,sendBackComments=:comments where requestId = :requestId and activeInd = :oldActiveInd&quot;;&#xA;    em.createQuery(update).setParameter(&quot;activeInd&quot;, 0l)&#xA;                          .setParameter(&quot;comments&quot;, comments)&#xA;                          .setParameter(&quot;requestId&quot;, requestId)&#xA;                          .setParameter(&quot;oldActiveInd&quot;, 1l)&#xA;                          .executeUpdate();&#xA;    em.getTransaction().commit();&#xA;    em.close();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2181" LastEditorUserId="22222" LastEditDate="2014-08-10T22:56:04.653" LastActivityDate="2014-08-10T22:56:04.653" Title="Dao function using hibernate" Tags="&lt;java&gt;&lt;hibernate&gt;" AnswerCount="1" CommentCount="1" FavoriteCount="2" />
  <row Id="1022" PostTypeId="1" AcceptedAnswerId="1038" CreationDate="2011-02-27T15:48:21.707" Score="12" ViewCount="1139" Body="&lt;p&gt;Here is my problem abstracted to &lt;code&gt;Bird&lt;/code&gt; classes. I know that number of &lt;code&gt;Bird&lt;/code&gt;s will increase on the future and new behaviors might be needed. With 10 Birds first design might not look so simple and lead to lots of duplicated code. On the other hand, second design can be perceived as &quot;class explosion&quot;. Which of these two designs would be considered best-practice?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Classic:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;&#xA;&#xA;class Bird&#xA;{&#xA;  public:&#xA;    virtual void Fly() const = 0;&#xA;    virtual void Speak() const = 0;&#xA;};&#xA;&#xA;class Eagle : public Bird&#xA;{&#xA;  public:&#xA;    virtual void Fly() const&#xA;    {&#xA;      std::cout &amp;lt;&amp;lt; &quot;Eagle shall fly now!&quot; &amp;lt;&amp;lt; std::endl;&#xA;    }&#xA;    virtual void Speak() const&#xA;    {&#xA;      std::cout &amp;lt;&amp;lt; &quot;Eagle speaking!&quot; &amp;lt;&amp;lt; std::endl;&#xA;    }&#xA;};&#xA;&#xA;&#xA;class Penguin : public Bird&#xA;{&#xA;  public:&#xA;    virtual void Fly() const&#xA;    {&#xA;      std::cout &amp;lt;&amp;lt; &quot;Penguin shall fly now!&quot; &amp;lt;&amp;lt; std::endl;&#xA;    }&#xA;    virtual void Speak() const&#xA;    {&#xA;      std::cout &amp;lt;&amp;lt; &quot;Penquin speaking!&quot; &amp;lt;&amp;lt; std::endl;&#xA;    }&#xA;};&#xA;&#xA;int main()&#xA;{&#xA;  std::cout &amp;lt;&amp;lt; &quot;...&quot; &amp;lt;&amp;lt; std::endl;&#xA;  Bird* bird = NULL;&#xA;&#xA;  bird = new Eagle();&#xA;  bird-&amp;gt;Fly();&#xA;  bird-&amp;gt;Speak();&#xA;  delete bird; bird = NULL;&#xA;&#xA;  bird = new Penguin();&#xA;  bird-&amp;gt;Fly();&#xA;  bird-&amp;gt;Speak();&#xA;  delete bird; bird = NULL;&#xA;&#xA;  return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;&quot;Better?&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;&#xA;#include &amp;lt;cassert&amp;gt;&#xA;&#xA;class FlyStyle&#xA;{&#xA;  public:&#xA;    virtual void Fly() const = 0;&#xA;};&#xA;&#xA;class FlyHigh : public FlyStyle&#xA;{&#xA;  virtual void Fly() const&#xA;  {&#xA;    std::cout &amp;lt;&amp;lt; &quot;Fly high!&quot; &amp;lt;&amp;lt; std::endl;&#xA;  }&#xA;};&#xA;&#xA;class NoFly : public FlyStyle&#xA;{&#xA;  virtual void Fly() const&#xA;  {&#xA;    std::cout &amp;lt;&amp;lt; &quot;No fly!&quot; &amp;lt;&amp;lt; std::endl;&#xA;  }&#xA;};&#xA;&#xA;class SpeakStyle&#xA;{&#xA;  public:&#xA;    virtual void Speak() const = 0;&#xA;};&#xA;&#xA;class SpeakLoud : public SpeakStyle&#xA;{&#xA;  virtual void Speak() const&#xA;  {&#xA;    std::cout &amp;lt;&amp;lt; &quot;Speak LAUD!!!!&quot; &amp;lt;&amp;lt; std::endl;&#xA;  }&#xA;};&#xA;&#xA;class NoSpeak : public SpeakStyle&#xA;{&#xA;  virtual void Speak() const&#xA;  {&#xA;    std::cout &amp;lt;&amp;lt; &quot;No speaking!&quot; &amp;lt;&amp;lt; std::endl;&#xA;  }&#xA;};&#xA;&#xA;class SuperBird&#xA;{&#xA;  public:&#xA;    SuperBird(FlyStyle* fly, SpeakStyle* speak)&#xA;      : flystyle(fly),&#xA;      speakstyle(speak)&#xA;  {&#xA;    assert(NULL != flystyle);&#xA;    assert(NULL != speakstyle);&#xA;  }&#xA;&#xA;    ~SuperBird() { delete flystyle; delete speakstyle;}&#xA;&#xA;    virtual void Fly() const&#xA;    {&#xA;      flystyle-&amp;gt;Fly();&#xA;    }&#xA;    virtual void Speak() const&#xA;    {&#xA;      speakstyle-&amp;gt;Speak();&#xA;    }&#xA;  protected:&#xA;    FlyStyle* flystyle;&#xA;    SpeakStyle* speakstyle;&#xA;};&#xA;&#xA;class SuperBirdFactory&#xA;{&#xA;  public:&#xA;    static SuperBird* createEagle()&#xA;    {&#xA;      return new SuperBird(new FlyHigh(), new SpeakLoud()); &#xA;    }&#xA;    static SuperBird* createPenguin()&#xA;    {&#xA;      return new SuperBird(new NoFly(), new NoSpeak()); &#xA;    }&#xA;};&#xA;&#xA;int main()&#xA;{&#xA;  SuperBird* bird = NULL;&#xA;&#xA;  bird = SuperBirdFactory::createEagle();&#xA;  bird-&amp;gt;Fly();&#xA;  bird-&amp;gt;Speak();&#xA;  delete bird; bird = NULL;&#xA;&#xA;  bird = SuperBirdFactory::createPenguin();&#xA;  bird-&amp;gt;Fly();&#xA;  bird-&amp;gt;Speak();&#xA;  delete bird; bird = NULL;&#xA;&#xA;  return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2182" LastEditorUserId="22222" LastEditDate="2013-12-26T18:04:06.397" LastActivityDate="2013-12-26T18:04:06.397" Title="Design dilemma: extensibility vs simplicity" Tags="&lt;c++&gt;&lt;inheritance&gt;&lt;polymorphism&gt;" AnswerCount="11" CommentCount="4" FavoriteCount="3" />
  <row Id="1023" PostTypeId="2" ParentId="415" CreationDate="2011-02-27T16:12:51.643" Score="1" Body="&lt;p&gt;Create a view. Update a row in the view, and output the columns.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;CREATE VIEW dbo.ArticleView AS&#xA;    SELECT a.ArtID, a.ArtUserID, a.ArtTitle, a.ArtHtml, a.ArtDescription,&#xA;        a.ArtKeywords, a.ArtLicenseID, l.licTitle, a.ArtViews, a.ArtCreated, &#xA;        a.ArtUpdated, s.SubID, s.SubTitle, c.CatID, c.CatTitle, sec.SecID, &#xA;        sec.SecTitle, u.UsrDisplayName AS [UserName]&#xA;    FROM dbo.Article a&#xA;        INNER JOIN dbo.Subcategory s ON a.ArtSubcategoryID = s.SubID&#xA;        INNER JOIN dbo.Category c ON s.SubCatID = c.CatID&#xA;        INNER JOIN dbo.[Section] sec ON c.CatSectionID = sec.SecID&#xA;        INNER JOIN dbo.[User] u ON a.ArtUserID = u.UsrID&#xA;        INNER JOIN dbo.License l ON a.ArtLicenseID = l.LicID&#xA;GO&#xA;&#xA;CREATE PROCEDURE dbo.IncrementArtViews (@Slug varchar(250)) AS&#xA;    UPDATE dbo.ArticleView&#xA;    SET ArtViews = ArtViews + 1&#xA;    OUTPUT ArtID, ArtUserID, ArtTitle, ArtHtml, ArtDescription,&#xA;        ArtKeywords, ArtLicenseID, licTitle, ArtViews, ArtCreated, &#xA;        ArtUpdated, SubID, SubTitle, CatID, CatTitle, SecID, &#xA;        SecTitle, [UserName]&#xA;    WHERE ArtSlugHash = CHECKSUM(@Slug)&#xA;        AND ArtSlug = @Slug&#xA;        AND ArtApproved = 1&#xA;GO&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2169" LastEditorUserId="2169" LastEditDate="2011-02-27T16:21:26.817" LastActivityDate="2011-02-27T16:21:26.817" CommentCount="0" />
  <row Id="1025" PostTypeId="2" ParentId="1022" CreationDate="2011-02-27T19:43:54.927" Score="2" Body="&lt;p&gt;The first one is definitely better. You should try to use as few classes as will get the job done and also favour lots of small methods over a few big methods. These will make your code easier to read, understand and maintain. I think you could improve on your first one a bit:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;&#xA;using namespace std;&#xA;&#xA;class Bird {&#xA;    public:&#xA;        void print(const char* str) {&#xA;            cout &amp;lt;&amp;lt; str &amp;lt;&amp;lt; endl;&#xA;        }&#xA;};&#xA;&#xA;class Eagle : public Bird {&#xA;    public:&#xA;        void fly() {&#xA;            print(&quot;Eagle shall fly now!&quot;);&#xA;        }&#xA;        void speak() {&#xA;            print(&quot;Eagle speaking!&quot;);&#xA;        }&#xA;};          &#xA;&#xA;int main() {&#xA;    Eagle* eagle = new Eagle();&#xA;    eagle-&amp;gt;fly();&#xA;    eagle-&amp;gt;speak();&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Basically, I'm saying 'An Eagle is a Bird' and would do the same with other birds. I'm keeping the specific parts (eg. what needs to be done for fly() and speak()) in the children classes (such as Eagle) and the general parts (eg. the ability to print to stdout) in the parent class (Bird).&lt;/p&gt;&#xA;" OwnerUserId="2142" LastEditorUserId="2142" LastEditDate="2011-02-27T20:11:38.207" LastActivityDate="2011-02-27T20:11:38.207" CommentCount="2" />
  <row Id="1026" PostTypeId="2" ParentId="1022" CreationDate="2011-02-27T19:46:35.323" Score="1" Body="&lt;p&gt;I really prefer the first as it's simpler. You can always mixin other interfaces later:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class Predator {&#xA;   public:&#xA;      virtual void attack();&#xA;}&#xA;&#xA;class Eagle: public Bird, public Predator {&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="110" LastEditorUserId="110" LastEditDate="2011-02-28T16:11:41.523" LastActivityDate="2011-02-28T16:11:41.523" CommentCount="4" />
  <row Id="1027" PostTypeId="2" ParentId="889" CreationDate="2011-02-27T19:50:54.160" Score="3" Body="&lt;p&gt;You should really look at the java validation standard, specifically JSR303.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://www.hibernate.org/subprojects/validator.html&quot; rel=&quot;nofollow&quot;&gt;Hibernate Validator&lt;/a&gt; is the reference implementation, take a look at &lt;a href=&quot;http://docs.jboss.org/hibernate/validator/4.2/reference/en-US/html/&quot; rel=&quot;nofollow&quot;&gt;their documentation&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To provide a simple example&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public class Foo {&#xA;    @NotNull(message = &quot;property bar must be provided&quot;)&#xA;    @Pattern(regexp = &quot;[a-z0-9]&quot;, message = &quot;property bar must contain only letters and numbers&quot;)&#xA;    private String bar;&#xA;}&#xA;&#xA;ValidatorFactory factory = Validation.buildDefaultValidatorFactory();&#xA;validator = factory.getValidator();&#xA;&#xA;Foo foo = new Foo();&#xA;&#xA;Set&amp;lt;ConstraintViolation&amp;lt;Foo&amp;gt;&amp;gt; constraintViolations = validator.validate(foo);&#xA;// now you have a Set of ConstraintViolations, if something is not working&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Use the existing standards, no need to reinvent the wheel.&lt;/p&gt;&#xA;" OwnerUserId="2188" LastActivityDate="2011-02-27T19:50:54.160" CommentCount="0" />
  <row Id="1028" PostTypeId="2" ParentId="1022" CreationDate="2011-02-27T19:55:02.303" Score="6" Body="&lt;p&gt;The fact that you have two completely different outputs from these two examples should be a huge clue as to the answer.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Eagle shall fly now!&#xA;Eagle speaking!&#xA;Penguin shall fly now!&#xA;Penguin speaking!&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;vs&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Fly high!&#xA;Speak LAUD!!!!&#xA;No fly!&#xA;No speaking!&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you want your Penguin class to fly like a Penguin, whatever that means, then you're probably right to go with the first example. If you want all non-flying birds to act the same way as each other when calling &lt;code&gt;fly()&lt;/code&gt;, the second is probably better.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;That said, I doubt I'd go as far as using a Factory class. I would rename &lt;code&gt;SuperBird&lt;/code&gt; as &lt;code&gt;Bird&lt;/code&gt; and continue to derive &lt;code&gt;Eagle&lt;/code&gt; and &lt;code&gt;Penguin&lt;/code&gt; from that, passing the relevant &lt;code&gt;FlyStyle&lt;/code&gt; and &lt;code&gt;SpeakStyle&lt;/code&gt; to the superclass's constructor, such as&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class Penguin : public Bird&#xA;{&#xA;    public:&#xA;        Penguin() : Bird(new NoFly(), new NoSpeak()) {}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This is attempting to follow &lt;a href=&quot;http://en.wikipedia.org/wiki/Single_responsibility_principle&quot; rel=&quot;nofollow&quot;&gt;Single Responsibility Principle&lt;/a&gt;, by saying &quot;if I want to change the action of all birds which do not fly, I shall change the &lt;code&gt;NoFly&lt;/code&gt; class accordingly, but if I want to make a &lt;code&gt;Penguin&lt;/code&gt; fly, I will change the &lt;code&gt;Penguin&lt;/code&gt; class.&quot;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The Factory Pattern is more appropriate to the opposing use case, where your calling code doesn't know or care which type of bird you wish to instantiate but does know enough information for the Factory class to make that decision, such as&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;bird = BirdFactory::create(CAN_FLY, MAKES_NOISE);&#xA;bird.Fly();&#xA;bird.Speak();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1416" LastEditorUserId="8891" LastEditDate="2012-02-01T06:46:01.830" LastActivityDate="2012-02-01T06:46:01.830" CommentCount="0" />
  <row Id="1029" PostTypeId="2" ParentId="1022" CreationDate="2011-02-27T21:34:26.797" Score="2" Body="&lt;p&gt;First option is best. It is readable and KISS-compliant. If you ever need to share a flight implementation, you can write a mixin. Also, unrelated, you should look into RAII and get rid of these assert/new/delete.&lt;/p&gt;&#xA;" OwnerUserId="2156" LastActivityDate="2011-02-27T21:34:26.797" CommentCount="9" />
  <row Id="1030" PostTypeId="1" AcceptedAnswerId="1109" CreationDate="2011-02-28T03:43:07.433" Score="4" ViewCount="287" Body="&lt;p&gt;Here's what I've right now:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python&#xA;# -*- coding: utf-8 -*-&#xA;import functools&#xA;import math&#xA;import time&#xA;&#xA;class Timer(object):&#xA;    def __init__(self):&#xA;        self.__values = []&#xA;&#xA;    def start(self):&#xA;        self.__start = time.time()&#xA;&#xA;        return self&#xA;&#xA;    def stop(self):&#xA;        self.__values.append(int(round((time.time() - self.__start) * 1000)))&#xA;        self.__start = None&#xA;&#xA;        return self&#xA;&#xA;    @property&#xA;    def average(self):&#xA;        return sum(self.__values) / len(self.__values) &#xA;&#xA;    @property&#xA;    def deviation(self):&#xA;        if self.average:&#xA;            return math.sqrt(sum((v - self.average) ** 2 for v in self.__values) / self.runs)&#xA;&#xA;        return 0&#xA;&#xA;    @property&#xA;    def elapsed(self):&#xA;        return sum(self.__values)&#xA;&#xA;    @property&#xA;    def runs(self):&#xA;        return len(self.__values)&#xA;&#xA;class Profiler(object):&#xA;    __timers = {}&#xA;&#xA;    @staticmethod&#xA;    def info(timer_id):&#xA;        if not Profiler.__timers.has_key(timer_id):&#xA;            raise Exception('Timer not started')&#xA;&#xA;        return Profiler.__timers[timer_id]&#xA;&#xA;    @staticmethod&#xA;    def profile(f):&#xA;        @functools.wraps(f)&#xA;        def wrap(self=None, *args, **kwargs):&#xA;            method = self.__class__.__name__ + '.' + f.func_name if self \&#xA;                     else f.func_name&#xA;&#xA;            Profiler.start(method)&#xA;            r = f(self, *args, **kwargs) if self else f(*args, **kwargs)&#xA;            Profiler.stop(method)&#xA;&#xA;            return r&#xA;&#xA;        return wrap&#xA;&#xA;    @staticmethod&#xA;    def reset(timer_id):&#xA;        Profiler.__timers[timer_id] = Timer()&#xA;&#xA;    @staticmethod&#xA;    def start(timer_id):&#xA;        if not Profiler.__timers.has_key(timer_id):&#xA;            Profiler.reset(timer_id)&#xA;&#xA;        Profiler.__timers[timer_id].start()&#xA;&#xA;    @staticmethod&#xA;    def stop(timer_id):&#xA;        if not Profiler.__timers.has_key(timer_id):&#xA;            raise Exception('Timer not started')&#xA;&#xA;        Profiler.__timers[timer_id].stop()&#xA;&#xA;if __name__ == '__main__':&#xA;    class Test(object):&#xA;        def isPrime(self, n):&#xA;            if n &amp;lt; 2 or (n % 2) == 0:&#xA;                return n == 2&#xA;&#xA;            f = 3&#xA;&#xA;            while (f * f) &amp;lt;= n:&#xA;                if (n % f) == 0:&#xA;                    return False&#xA;&#xA;                f += 2&#xA;&#xA;            return True&#xA;&#xA;        @Profiler.profile&#xA;        def run(self):&#xA;            return filter(self.isPrime, range(1, 1000001))&#xA;&#xA;    test = Test()&#xA;&#xA;    for x in range(5):&#xA;        test.run()&#xA;&#xA;    p = Profiler.info('Test.run')&#xA;    print 'runs = %d' % p.runs&#xA;    print 'elapsed = %d ms' % p.elapsed&#xA;    print 'average = %d ms' % p.average&#xA;    print 'deviation = %d ms' % p.deviation&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I'm looking for suggestions to improve it and you're welcome to suggest. :)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The Profiler.profile decorator supports both functions and class methods. I've wrote a small test to give you the idea behind my profiler.&lt;/p&gt;&#xA;" OwnerUserId="2195" LastEditorUserId="2195" LastEditDate="2011-02-28T04:48:12.797" LastActivityDate="2011-03-02T22:38:40.460" Title="Suggestions for a Profiler class in Python" Tags="&lt;python&gt;" AnswerCount="1" CommentCount="2" />
  <row Id="1031" PostTypeId="1" CreationDate="2011-02-28T05:25:48.470" Score="7" ViewCount="351" Body="&lt;p&gt;Originally, I had everything in the base method #read_wall(). I'm not sure what happened with the array, but when I tried:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;array = result + second + third + fourth&lt;/code&gt;. I was left with data from only the original result. So I created this working disaster. &lt;strong&gt;Can you please help me refactor this?&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;   # Gets the user's Wall&#xA;      def read_wall(fbuserid)&#xA;         result ||= graph.get_connections(fbuserid, 'feed')&#xA;      end&#xA;&#xA;  def second_wall(fbuserid)&#xA;     result ||= graph.get_connections(fbuserid, 'feed')&#xA;     second ||= result.next_page&#xA;  end&#xA;&#xA;  def third_wall(fbuserid)&#xA;       result ||= graph.get_connections(fbuserid, 'feed')&#xA;       second ||= result.next_page&#xA;       third ||= second.next_page&#xA;  end&#xA;&#xA;  def fourth_wall(fbuserid)&#xA;        result ||= graph.get_connections(fbuserid, 'feed')&#xA;        second ||= result.next_page&#xA;        third ||= second.next_page&#xA;        fourth ||= third.next_page&#xA;   end&#xA;&#xA;  # Collects your friends' wall Posts and puts the IDs into an array&#xA;  def get_post_ids(fbuserid)&#xA;     x ||= read_wall(fbuserid)&#xA;     var = []&#xA;     for i in 0..25&#xA;        if find_nil(x, [i,'id']).nil? == false&#xA;           var &amp;lt;&amp;lt; x[i]['id']&#xA;        end&#xA;     end&#xA;&#xA;     second_wall ||= second_wall(fbuserid)&#xA;       for i in 0..25&#xA;          if find_nil(second_wall, [i,'id']).nil? == false&#xA;             var &amp;lt;&amp;lt; second_wall[i]['id']&#xA;          end&#xA;       end&#xA;&#xA;      third_wall ||= third_wall(fbuserid)&#xA;        for i in 0..25&#xA;           if find_nil(third_wall, [i,'id']).nil? == false&#xA;              var &amp;lt;&amp;lt; third_wall[i]['id']&#xA;           end&#xA;        end&#xA;&#xA;      fourth_wall ||= fourth_wall(fbuserid)&#xA;         for i in 0..25&#xA;            if find_nil(fourth_wall, [i,'id']).nil? == false&#xA;                 var &amp;lt;&amp;lt; fourth_wall[i]['id']&#xA;            end&#xA;         end&#xA;&#xA;      @get_post_ids = var&#xA;  end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2197" LastEditorUserId="9357" LastEditDate="2015-05-03T01:23:49.180" LastActivityDate="2015-05-03T01:23:49.180" Title="Collecting friends' wall posts" Tags="&lt;ruby&gt;&lt;pagination&gt;" AnswerCount="1" CommentCount="3" />
  <row Id="1032" PostTypeId="2" ParentId="1022" CreationDate="2011-02-28T05:52:32.747" Score="4" Body="&lt;p&gt;If there will be different kinds of birds that share a flying or speaking style (&quot;strategy&quot; is what the Gang of Four calls this), then the second design makes sense. If all birds will have unique flying and speaking styles, stick with the first.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you don't know the answer yet, stick with the first design. In the absence of information, always prefer the simplest solution. It's easier to extend a simple design later than it is to simplify a needlessly extensible one.&lt;/p&gt;&#xA;" OwnerUserId="816" LastActivityDate="2011-02-28T05:52:32.747" CommentCount="0" />
  <row Id="1034" PostTypeId="2" ParentId="1022" CreationDate="2011-02-28T09:39:58.657" Score="0" Body="&lt;p&gt;This first one is simpler and you might want to use it if you do not need a lot of flexibility. If you ask yourself this question, I think it means you might need flexibility.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In this little example, the first method indeed have fewer classes but in general, if you need a lot of different combinations it might no be the case anymore. Take the second example, if your &quot;SuperBird&quot; is extended be compound of 5 different objects and for each one you have defined 5 abstract types: doing the same thing for the first example would need 3000 classes with a lot of boilerplate repeated in many classes.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;See the Gang of Four principle: favor object composition over class inheritance/&lt;/p&gt;&#xA;" OwnerDisplayName="user2201" LastActivityDate="2011-02-28T09:39:58.657" CommentCount="0" />
  <row Id="1035" PostTypeId="2" ParentId="916" CreationDate="2011-02-28T09:54:04.453" Score="4" Body="&lt;p&gt;It is certainly better. You can improve it further:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Use early exits to reduce arrow code.&lt;/li&gt;&#xA;&lt;li&gt;Use a JSON initializer for the result.&lt;/li&gt;&#xA;&lt;li&gt;Prefix boolean names with 'is'.&lt;/li&gt;&#xA;&lt;li&gt;Fix the 'user.lastEdited' bug.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function processResponse(data) {&#xA;    if (!data.query || !data.query.users || !data.query.users[0]) return {};&#xA;&#xA;    var user = data.query.users[0];&#xA;&#xA;    return {&#xA;        isInvalid: 'invalid' in user,&#xA;        isMissing: 'missing' in user,&#xA;        groups: user.groups || [],&#xA;        editCount: ('editcount' in user) ? user.editcount : null,&#xA;        registration: ('registration' in user) ? parseDate(user.registration) : null,&#xA;        isBlocked: 'blockexpiry' in user,&#xA;        gender: ('gender' in user &amp;amp;&amp;amp; user.gender != 'unknown') ? user.gender : null,&#xA;        lastEdited: (data.query.usercontrib&#xA;                             &amp;amp;&amp;amp; data.query.usercontribs[0] &#xA;                             &amp;amp;&amp;amp; data.query.usercontribs[0].timestamp)&#xA;                        ? parseDate(data.query.usercontribs[0].timestamp) : null&#xA;    };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2169" LastEditorUserId="2169" LastEditDate="2011-02-28T15:36:06.093" LastActivityDate="2011-02-28T15:36:06.093" CommentCount="0" />
  <row Id="1036" PostTypeId="2" ParentId="1031" CreationDate="2011-02-28T10:25:22.723" Score="13" Body="&lt;pre&gt;&lt;code&gt;def fourth_wall(fbuserid)&#xA;  result ||= graph.get_connections(fbuserid, 'feed')&#xA;  second ||= result.next_page&#xA;  third ||= second.next_page&#xA;  fourth ||= third.next_page&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;A couple of problems here: &lt;code&gt;result&lt;/code&gt;, &lt;code&gt;second&lt;/code&gt;, &lt;code&gt;third&lt;/code&gt; and &lt;code&gt;fourth&lt;/code&gt; are all local variables. This means they won't persist after the method call is finished and they will never persist after the method call is finished. So:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;You don't need to set the &lt;code&gt;fourth&lt;/code&gt; variable as you never use it in the method and it won't be available after&lt;/li&gt;&#xA;&lt;li&gt;You don't need &lt;code&gt;||=&lt;/code&gt; as the variables will never be set anyway.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;I.e. your code is equivalent to this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def fourth_wall(fbuserid)&#xA;  result = graph.get_connections(fbuserid, 'feed')&#xA;  second = result.next_page&#xA;  third = second.next_page&#xA;  third.next_page&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Or just:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def fourth_wall(fbuserid)&#xA;  graph.get_connections(fbuserid, 'feed').next_page.next_page.next_page&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The same goes for the other &lt;code&gt;wall&lt;/code&gt; methods.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Further your &lt;code&gt;fourth_wall&lt;/code&gt; method contains the entire code of the &lt;code&gt;third_wall&lt;/code&gt; method (which contains the entire &lt;code&gt;second_wall&lt;/code&gt; method and so on). This is bad style. Just let the methods call each other:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def fourth_wall(fbuserid)&#xA;  third_wall(fbuserid).next_page&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;(And again the same for the other &lt;code&gt;wall&lt;/code&gt; methods of course)&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;However since you seem to only call those functions together (i.e. you never use &lt;code&gt;fourth_wall&lt;/code&gt; without having used &lt;code&gt;third_wall&lt;/code&gt; before) it seems much more sensible to have one method which returns all for walls:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def four_walls(fbuserid)&#xA;  first = graph.get_connections(fbuserid, 'feed')&#xA;  # For more than 4 pages the following should be replaced by a loop&#xA;  second = first.next_page&#xA;  third = second.next_page&#xA;  fourth = third.next_page&#xA;  [first, second, third, fourth]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;In your &lt;code&gt;get_post_ids&lt;/code&gt; method you're repeating the same code four times. This is again bad style. You're also creating an empty array and then appending to it from a loop. This is often (but not always) a sign of bad code in ruby as well. Also using &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;var&lt;/code&gt; as variable names is not a good idea and having a variable name that starts with &lt;code&gt;@get_&lt;/code&gt; just seems weird and confusing.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'm also assuming that your &lt;code&gt;find_nil&lt;/code&gt; method is supposed to check whether either &lt;code&gt;wall[i]&lt;/code&gt; or &lt;code&gt;wall[i]['id']&lt;/code&gt; are nil. There are better ways to do this.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In this case you can use map on the walls and then the numbers from 0 to 25 to create an array of user ids for each wall, then use &lt;code&gt;compact&lt;/code&gt; to remove &lt;code&gt;nil&lt;/code&gt;s and &lt;code&gt;flatten&lt;/code&gt; to turn the array into one single array rather than an array of four subarray. Thus your whole &lt;code&gt;get_post_ids&lt;/code&gt; method can be replaced with this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def retrieve_post_ids(fbuserid)&#xA;  walls = four_walls(fbuserid)&#xA;  @post_ids = walls.map do |wall|&#xA;    # Iterate over the first 26 entries in wall&#xA;    (0..25).map do |i|&#xA;      wall[i] &amp;amp;&amp;amp; wall[i]['id']&#xA;     end.compact&#xA;  end.flatten&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Though if the &lt;code&gt;wall&lt;/code&gt;s allow slicing similar to arrays, this would be better:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def retrieve_post_ids(fbuserid)&#xA;  walls = four_walls(fbuserid)&#xA;  @post_ids = walls.map do |wall|&#xA;    # Iterate over the first 26 entries in wall&#xA;    wall[0..25].map do |entry|&#xA;      entry &amp;amp;&amp;amp; entry['id']&#xA;     end.compact&#xA;  end.flatten&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If the wall never contains more than 26 elements, you don't even need the &lt;code&gt;[0..25]&lt;/code&gt; and you can just use &lt;code&gt;well.map&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;However it occurs to me that the reason you needed the nil check at all was that each wall contains 25 elements and you got &lt;code&gt;nil&lt;/code&gt; for index &lt;code&gt;25&lt;/code&gt; because you did not realize that ranges using &lt;code&gt;..&lt;/code&gt; are inclusive. In that case you can just use:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;def retrieve_post_ids(fbuserid)&#xA;  walls = four_walls(fbuserid)&#xA;  @post_ids = walls.map do |wall|&#xA;    # Iterate over the entries in wall&#xA;    wall.map do |entry|&#xA;      entry['id']&#xA;     end&#xA;  end.flatten&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="128" LastEditorUserId="128" LastEditDate="2011-03-05T13:51:51.763" LastActivityDate="2011-03-05T13:51:51.763" CommentCount="2" />
  <row Id="1037" PostTypeId="1" AcceptedAnswerId="1040" CreationDate="2011-02-28T13:00:06.627" Score="1" ViewCount="7113" Body="&lt;p&gt;&lt;strong&gt;Option 1 - nice and simple&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private void GetFileReady()&#xA;{&#xA;    private StringBuilder fileContents = new StringBuilder();&#xA;    using (var sr = new StreamReader(&quot;C:\A big file.txt&quot;))&#xA;    {&#xA;        fileContents.Append(sr.ReadToEnd());              &#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Option 2 - less simple&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private void GetFileReady2()&#xA;{&#xA;   private StringBuilder fileContents = new StringBuilder();&#xA;   const int bufferSize = 1024;&#xA;   var buffer = new Char[bufferSize];&#xA;   var count = bufferSize;&#xA;&#xA;   using (var sr = new StreamReader(&quot;C:\A big file.txt&quot;))&#xA;   {                &#xA;       while (count &amp;gt; 0)&#xA;       {&#xA;           count = sr.Read(buffer, 0, bufferSize);&#xA;           fileContents.Append(buffer, 0, count);&#xA;       }&#xA;   }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Would option 2 be better for something esoteric like memory allocation?&lt;/p&gt;&#xA;" OwnerUserId="785" LastEditorUserId="22222" LastEditDate="2016-04-14T09:58:20.253" LastActivityDate="2016-04-14T09:58:20.253" Title="Reading file contents into a string" Tags="&lt;c#&gt;&lt;comparative-review&gt;&lt;io&gt;" AnswerCount="2" CommentCount="0" FavoriteCount="1" />
  <row Id="1038" PostTypeId="2" ParentId="1022" CreationDate="2011-02-28T13:10:20.720" Score="15" Body="&lt;p&gt;In my opinion, a better approach (along similar lines) is to avoid abstract base classes and instead use generic &quot;policy&quot; classes. You informally define an interface for each behaviour, and mix them into the class as template parameters. This avoids the need for dynamic memory allocation, and removes the overhead of virtual function calls; everything is resolved at compile time. Your example could be something like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;&#xA;&#xA;// Flying styles must have interfaces compatible with this&#xA;// struct FlyStyle&#xA;// {&#xA;//    void Fly() const;&#xA;// };&#xA;&#xA;struct FlyHigh&#xA;{&#xA;  void Fly() const&#xA;  {&#xA;    std::cout &amp;lt;&amp;lt; &quot;Fly high!&quot; &amp;lt;&amp;lt; std::endl;&#xA;  }&#xA;};&#xA;&#xA;struct NoFly&#xA;{&#xA;  void Fly() const&#xA;  {&#xA;    std::cout &amp;lt;&amp;lt; &quot;No fly!&quot; &amp;lt;&amp;lt; std::endl;&#xA;  }&#xA;};&#xA;&#xA;// Speaking styles must have interfaces compatible with this&#xA;// struct SpeakStyle&#xA;// {&#xA;//     void Speak() const;&#xA;// };&#xA;&#xA;struct SpeakLoud&#xA;{&#xA;  void Speak() const&#xA;  {&#xA;    std::cout &amp;lt;&amp;lt; &quot;Speak LAUD!!!!&quot; &amp;lt;&amp;lt; std::endl;&#xA;  }&#xA;};&#xA;&#xA;struct NoSpeak&#xA;{&#xA;  void Speak() const&#xA;  {&#xA;    std::cout &amp;lt;&amp;lt; &quot;No speaking!&quot; &amp;lt;&amp;lt; std::endl;&#xA;  }&#xA;};&#xA;&#xA;template &amp;lt;class FlyStyle, class SpeakStyle&amp;gt;&#xA;class SuperBird&#xA;{&#xA;  public:&#xA;    void Fly() const&#xA;    {&#xA;      flystyle.Fly();&#xA;    }&#xA;    void Speak() const&#xA;    {&#xA;      speakstyle.Speak();&#xA;    }&#xA;  private:&#xA;    FlyStyle flystyle;&#xA;    SpeakStyle speakstyle;&#xA;};&#xA;&#xA;typedef SuperBird&amp;lt;FlyHigh, SpeakLoud&amp;gt; Eagle;&#xA;typedef SuperBird&amp;lt;NoFly, NoSpeak&amp;gt; Penguin;&#xA;&#xA;int main()&#xA;{&#xA;  Eagle eagle;&#xA;  eagle.Fly();&#xA;  eagle.Speak();&#xA;&#xA;  Penguin penguin;&#xA;  penguin.Fly();&#xA;  penguin.Speak();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1594" LastEditorUserId="1594" LastEditDate="2011-03-05T20:59:43.853" LastActivityDate="2011-03-05T20:59:43.853" CommentCount="4" />
  <row Id="1039" PostTypeId="2" ParentId="1037" CreationDate="2011-02-28T13:20:45.400" Score="2" Body="&lt;p&gt;I don't think there's a significant difference between your two options when it comes to memory allocations.  In both cases, you're reading the entire file into memory, which trumps any minor differences that might exist in the number of objects allocated by the two options. (Though both options are also immediately discarding those contents since they are only stored in local variables, but I'm assuming that this is just a highly simplified example.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you're concerned about memory consumption when using a big file, you need to not read in the entire file all at once.  Instead, you should load chunks out of the file as needed by your application, and discard them when no longer needed so the memory can be reclaimed.&lt;/p&gt;&#xA;" OwnerUserId="1142" LastActivityDate="2011-02-28T13:20:45.400" CommentCount="0" />
  <row Id="1040" PostTypeId="2" ParentId="1037" CreationDate="2011-02-28T13:23:25.220" Score="9" Body="&lt;p&gt;Is the goal to get a string containing the content of the file? or to add the content of a file to an existing StringBuilder?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;if it's the former then Option 1 can drop the string builder altogether ... or better yet.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;string value = File.ReadAllText(&quot;C:\A big file.txt&quot;);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;if it's the latter then you might want to think about using &lt;code&gt;StringBuilder.EnsureCapacity()&lt;/code&gt; to avoid the overhead of resizing the buffer more then it needs to. &lt;/p&gt;&#xA;" OwnerUserId="1432" LastActivityDate="2011-02-28T13:23:25.220" CommentCount="1" />
  <row Id="1041" PostTypeId="1" CreationDate="2011-02-28T13:58:30.093" Score="3" ViewCount="309" Body="&lt;p&gt;It is an online learning application with different types of learnable items, that different users learn.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The users learn by spaced repetition (once right, wait a couple days, ask again), success is mirrored in stages and mistakes made.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I intend to use this for scientific data collection in the near future, so there is one table especially, user_terms_answers where data amasses at a granularity not currently used by the application.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I especially had trouble with figuring out how to arrange my learnable types, and I'm not sure if I chose the optimal solution.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Since this is potentially not understood just from looking at the chart, the two basic types are:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;known – unknown&lt;/strong&gt;: What year did Thomas Edison die? – [1931] - &lt;em&gt;one question &amp;amp; one answer&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;cloze tests&lt;/strong&gt; or &lt;strong&gt;gap texts&lt;/strong&gt;: Slow loris are of the genus [Nycticebus] and of the subfamily [Lorinae] - &lt;em&gt;one question &amp;amp; many answers&lt;/em&gt;!&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;h3&gt;My schema&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;The part in gray ships with the TankAuth component of CodeIgniter and I'm hoping that this is properly done already. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://i.stack.imgur.com/5kpjI.png&quot; rel=&quot;nofollow&quot;&gt;Database schema&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In response to a now-gone comment by l0bo, I &lt;a href=&quot;http://ul.dyden.de/schemaspy/d00fab60/index.html&quot; rel=&quot;nofollow&quot;&gt;visualized this in SchemaSpy&lt;/a&gt; as well.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Common queries&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;These the views that I have so far, they reflect quite well what the application will usually want.&lt;br&gt;&#xA;They also reflect how I run into trouble with the way I chose to implement &quot;languages&quot;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;CREATE VIEW `retrieve_user_term_or_gap` AS&#xA;SELECT &#xA;  u.id, u.learnable_id, u.user_id, u.stage, u.mistakes, u.time_due, u.added,&#xA;  terms.language, terms.field, terms.known, terms.unknown, terms.hint,&#xA;  gaps.cloze_id, gaps.gap,&#xA;  c.language AS cloze_language, c.field AS cloze_field, c.cloze, &#xA;  c.hint AS cloze_hint -- this is bad, not 3NF&#xA;FROM&#xA;  user_terms AS u&#xA;LEFT JOIN learnables AS l ON u.learnable_id = l.id&#xA;LEFT JOIN terms ON l.id = terms.learnable_id&#xA;LEFT JOIN gaps ON l.id =  gaps.learnable_id &#xA;LEFT JOIN clozetests AS c ON c.id = gaps.cloze_id&#xA;&#xA;CREATE VIEW `how_many_due` AS&#xA;SELECT COUNT(id) FROM user_terms&#xA;WHERE stage &amp;lt; 5 AND DATE(time_due) &amp;lt;= CURDATE()&#xA;&#xA;&#xA;CREATE VIEW `due_terms` AS&#xA;SELECT &#xA;  u.id, u.learnable_id, u.user_id, u.stage, u.mistakes, u.time_due, u.added,&#xA;  terms.language, terms.field, terms.known, terms.unknown, terms.hint,&#xA;  gaps.cloze_id, gaps.gap,&#xA;  c.language AS cloze_language, c.field AS cloze_field, c.cloze, &#xA;  c.hint AS cloze_hint -- this is bad, not 3NF&#xA;FROM&#xA;  user_terms AS u&#xA;LEFT JOIN learnables AS l ON u.learnable_id = l.id&#xA;LEFT JOIN terms ON l.id = terms.learnable_id&#xA;LEFT JOIN gaps ON l.id =  gaps.learnable_id &#xA;LEFT JOIN clozetests AS c ON c.id = gaps.cloze_id&#xA;WHERE DATE(u.time_due) &amp;lt;= CURDATE() AND u.stage &amp;lt; 5 &#xA;ORDER BY terms.language, terms.field, u.id&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="352" LastEditorUserId="22222" LastEditDate="2016-05-10T03:11:27.293" LastActivityDate="2016-05-10T03:11:27.293" Title="Database design for an online learning application" Tags="&lt;mysql&gt;&lt;sql&gt;&lt;codeigniter&gt;" AnswerCount="2" CommentCount="1" FavoriteCount="1" />
  <row Id="1043" PostTypeId="1" AcceptedAnswerId="1044" CreationDate="2011-02-28T14:05:07.063" Score="5" ViewCount="324" Body="&lt;p&gt;This a very simple function to expand the sizes between the given values.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For instance, if the input variable is &quot;S-XL&quot; then the function returns &quot;S, M, L, XL&quot;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Basically I'm not happy with this function.  I think it's too complex for its purpose. &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function sizexpander($sizes) {&#xA;    $sizearray=Array(&quot;XS&quot;, &quot;S&quot;, &quot;M&quot;, &quot;L&quot;, &quot;XL&quot;, &quot;XXL&quot;, &quot;XXXL&quot;);&#xA;    $size1=array_search(strstrb($sizes, &quot;-&quot;), $sizearray);&#xA;    $size2=array_search(substr(strstr($sizes, &quot;-&quot;),1), $sizearray);&#xA;    while ($size1 &amp;lt;= $size2) {&#xA;        $prodsizes.= $sizearray[$size1].&quot;, &quot;;&#xA;        $size1++;&#xA;    }&#xA;    return substr($prodsizes, 0, -2);&#xA;}&#xA;&#xA;function strstrb($h,$n){&#xA;    return array_shift(explode($n,$h,2));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1401" LastEditorUserId="22222" LastEditDate="2014-05-10T20:53:46.867" LastActivityDate="2014-05-10T20:55:20.030" Title="Expanding sizes between given values" Tags="&lt;php&gt;&lt;array&gt;" AnswerCount="3" CommentCount="0" />
  <row Id="1044" PostTypeId="2" ParentId="1043" CreationDate="2011-02-28T14:16:31.653" Score="6" Body="&lt;p&gt;You can use the function &lt;code&gt;array_slice&lt;/code&gt; to take the subarray which contains the sizes from &lt;code&gt;$size1&lt;/code&gt; to &lt;code&gt;size2&lt;/code&gt;. And then use &lt;code&gt;implode&lt;/code&gt; to turn this subarray into a comma-separated string. This will simplify your algorithm.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can also just use &lt;code&gt;explode&lt;/code&gt; instead of &lt;code&gt;substr&lt;/code&gt; and &lt;code&gt;strstr&lt;/code&gt; to split the range string into its parts.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In addition I would recommend changing the variable names of &lt;code&gt;$size1&lt;/code&gt; and &lt;code&gt;$size2&lt;/code&gt;. To me the name &lt;code&gt;$size1&lt;/code&gt; suggests that the variable contains the actual size while in fact it contains its index. Something like &lt;code&gt;index_of_size1&lt;/code&gt; or &lt;code&gt;index_from&lt;/code&gt; might be more appropriate.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If I were to write this function, it'd look something like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function sizexpander($size_range) {&#xA;    $sizearray=Array(&quot;XS&quot;, &quot;S&quot;, &quot;M&quot;, &quot;L&quot;, &quot;XL&quot;, &quot;XXL&quot;, &quot;XXXL&quot;);&#xA;    list($size_from, $size_to) = explode(&quot;-&quot;, $size_range);&#xA;    $index_from = array_search($size_from, $sizearray);&#xA;    $index_to = array_search($size_to, $sizearray);&#xA;    $subsizes = array_slice($sizearray, $index_from, $index_to-$index_from+1);&#xA;    return implode(&quot;, &quot;, $subsizes);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="128" LastEditorUserId="128" LastEditDate="2011-02-28T14:25:36.590" LastActivityDate="2011-02-28T14:25:36.590" CommentCount="0" />
  <row Id="1045" PostTypeId="1" CreationDate="2011-02-28T16:33:15.073" Score="2" ViewCount="1537" Body="&lt;p&gt;Here's a class that converts Hibernate proxies to normal classes. This is useful with GWT for example, when sending objects loaded from database to the GWT client.&#xA;Please review it.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package ru.minogin.core.server.hibernate;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Date;&#xA;import java.util.HashMap;&#xA;import java.util.HashSet;&#xA;import java.util.IdentityHashMap;&#xA;import java.util.LinkedHashMap;&#xA;import java.util.LinkedHashSet;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;import java.util.Set;&#xA;import java.util.TreeSet;&#xA;&#xA;import org.apache.log4j.Logger;&#xA;import org.hibernate.collection.PersistentBag;&#xA;import org.hibernate.collection.PersistentList;&#xA;import org.hibernate.collection.PersistentMap;&#xA;import org.hibernate.collection.PersistentSet;&#xA;import org.hibernate.collection.PersistentSortedSet;&#xA;import org.hibernate.proxy.HibernateProxy;&#xA;import org.hibernate.proxy.LazyInitializer;&#xA;&#xA;import ru.minogin.core.client.bean.Bean;&#xA;import ru.minogin.core.server.reflection.ReflectionUtils;&#xA;&#xA;/**&#xA; * Thread-safety: this class in not thread-safe.&#xA; *&#xA; * @author Andrey Minogin&#xA; * @version 1.0, 02/28/11&#xA; *&#xA; */&#xA;public class Dehibernator {&#xA;    private static final Logger logger = Logger.getLogger(Dehibernator.class);&#xA;&#xA;    private IdentityHashMap&amp;lt;Object, Object&amp;gt; processed;&#xA;&#xA;    @SuppressWarnings(&quot;unchecked&quot;)&#xA;    public &amp;lt;T&amp;gt; T clean(T object) {&#xA;        processed = new IdentityHashMap&amp;lt;Object, Object&amp;gt;();&#xA;&#xA;        logger.debug(&quot;Cleaning: &quot; + (object != null ? object.getClass() : null));&#xA;        return (T) doClean(object);&#xA;    }&#xA;&#xA;    @SuppressWarnings(&quot;unchecked&quot;)&#xA;    private Object doClean(Object dirty) {&#xA;        logger.debug(&quot;Do clean: &quot; + (dirty != null ? dirty.getClass() : null));&#xA;&#xA;        if (dirty == null)&#xA;            return null;&#xA;&#xA;        if (processed.containsKey(dirty)) {&#xA;            logger.debug(&quot;Object already cleaned, skipping.&quot;);&#xA;&#xA;            return processed.get(dirty);&#xA;        }&#xA;&#xA;        if (isPrimitive(dirty)) {&#xA;            logger.debug(&quot;Object is primitive, skipping.&quot;);&#xA;&#xA;            return dirty;&#xA;        }&#xA;&#xA;        if (dirty instanceof PersistentList) {&#xA;            logger.debug(&quot;Object is a PersistentList&quot;);&#xA;&#xA;            PersistentList dirtyList = (PersistentList) dirty;&#xA;            List&amp;lt;Object&amp;gt; cleanList = new ArrayList&amp;lt;Object&amp;gt;();&#xA;            processed.put(dirtyList, cleanList);&#xA;            if (dirtyList.wasInitialized()) {&#xA;                for (Object value : dirtyList) {&#xA;                    cleanList.add(doClean(value));&#xA;                }&#xA;            }&#xA;            return cleanList;&#xA;        }&#xA;&#xA;        if (dirty instanceof PersistentBag) {&#xA;            logger.debug(&quot;Object is a PersistentBag&quot;);&#xA;&#xA;            PersistentBag dirtyList = (PersistentBag) dirty;&#xA;            List&amp;lt;Object&amp;gt; cleanList = new ArrayList&amp;lt;Object&amp;gt;();&#xA;            processed.put(dirtyList, cleanList);&#xA;            if (dirtyList.wasInitialized()) {&#xA;                for (Object value : dirtyList) {&#xA;                    cleanList.add(doClean(value));&#xA;                }&#xA;            }&#xA;            return cleanList;&#xA;        }&#xA;&#xA;        if (dirty instanceof PersistentSortedSet) {&#xA;            logger.debug(&quot;Object is a PersistentSortedSet&quot;);&#xA;&#xA;            PersistentSortedSet dirtySet = (PersistentSortedSet) dirty;&#xA;            Set&amp;lt;Object&amp;gt; cleanSet = new TreeSet&amp;lt;Object&amp;gt;();&#xA;            processed.put(dirtySet, cleanSet);&#xA;            if (dirtySet.wasInitialized()) {&#xA;                for (Object value : dirtySet) {&#xA;                    cleanSet.add(doClean(value));&#xA;                }&#xA;            }&#xA;            return cleanSet;&#xA;        }&#xA;&#xA;        if (dirty instanceof PersistentSet) {&#xA;            logger.debug(&quot;Object is a PersistentSet&quot;);&#xA;&#xA;            PersistentSet dirtySet = (PersistentSet) dirty;&#xA;            Set&amp;lt;Object&amp;gt; cleanSet = new HashSet&amp;lt;Object&amp;gt;();&#xA;            processed.put(dirtySet, cleanSet);&#xA;            if (dirtySet.wasInitialized()) {&#xA;                for (Object value : dirtySet) {&#xA;                    cleanSet.add(doClean(value));&#xA;                }&#xA;            }&#xA;            return cleanSet;&#xA;        }&#xA;&#xA;        if (dirty instanceof PersistentMap) {&#xA;            logger.debug(&quot;Object is a PersistentMap&quot;);&#xA;&#xA;            PersistentMap dirtyMap = (PersistentMap) dirty;&#xA;            Map&amp;lt;Object, Object&amp;gt; cleanMap = new LinkedHashMap&amp;lt;Object, Object&amp;gt;();&#xA;            processed.put(dirtyMap, cleanMap);&#xA;            if (dirtyMap.wasInitialized()) {&#xA;                for (Object key : dirtyMap.keySet()) {&#xA;                    Object value = dirtyMap.get(key);&#xA;                    cleanMap.put(doClean(key), doClean(value));&#xA;                }&#xA;            }&#xA;            return cleanMap;&#xA;        }&#xA;&#xA;        if (dirty instanceof List) {&#xA;            logger.debug(&quot;Object is a List&quot;);&#xA;&#xA;            List&amp;lt;Object&amp;gt; dirtyList = (List&amp;lt;Object&amp;gt;) dirty;&#xA;            List&amp;lt;Object&amp;gt; cleanList = new ArrayList&amp;lt;Object&amp;gt;();&#xA;            processed.put(dirtyList, cleanList);&#xA;            for (Object value : dirtyList) {&#xA;                cleanList.add(doClean(value));&#xA;            }&#xA;            return cleanList;&#xA;        }&#xA;&#xA;        if (dirty instanceof LinkedHashMap) {&#xA;            logger.debug(&quot;Object is a LinkedHashMap&quot;);&#xA;&#xA;            Map&amp;lt;Object, Object&amp;gt; dirtyMap = (Map&amp;lt;Object, Object&amp;gt;) dirty;&#xA;            Map&amp;lt;Object, Object&amp;gt; cleanMap = new LinkedHashMap&amp;lt;Object, Object&amp;gt;();&#xA;            processed.put(dirtyMap, cleanMap);&#xA;            for (Object key : dirtyMap.keySet()) {&#xA;                Object value = dirtyMap.get(key);&#xA;                cleanMap.put(doClean(key), doClean(value));&#xA;            }&#xA;            return cleanMap;&#xA;        }&#xA;&#xA;        if (dirty instanceof HashMap) {&#xA;            logger.debug(&quot;Object is a HashMap&quot;);&#xA;&#xA;            Map&amp;lt;Object, Object&amp;gt; dirtyMap = (Map&amp;lt;Object, Object&amp;gt;) dirty;&#xA;            Map&amp;lt;Object, Object&amp;gt; cleanMap = new HashMap&amp;lt;Object, Object&amp;gt;();&#xA;            processed.put(dirtyMap, cleanMap);&#xA;            for (Object key : dirtyMap.keySet()) {&#xA;                Object value = dirtyMap.get(key);&#xA;                cleanMap.put(doClean(key), doClean(value));&#xA;            }&#xA;            return cleanMap;&#xA;        }&#xA;&#xA;        if (dirty instanceof LinkedHashSet&amp;lt;?&amp;gt;) {&#xA;            logger.debug(&quot;Object is a LinkedHashSet&quot;);&#xA;&#xA;            Set&amp;lt;Object&amp;gt; dirtySet = (LinkedHashSet&amp;lt;Object&amp;gt;) dirty;&#xA;            Set&amp;lt;Object&amp;gt; cleanSet = new LinkedHashSet&amp;lt;Object&amp;gt;();&#xA;            processed.put(dirtySet, cleanSet);&#xA;            for (Object value : dirtySet) {&#xA;                cleanSet.add(doClean(value));&#xA;            }&#xA;            return cleanSet;&#xA;        }&#xA;&#xA;        if (dirty instanceof HashSet&amp;lt;?&amp;gt;) {&#xA;            logger.debug(&quot;Object is a HashSet&quot;);&#xA;&#xA;            Set&amp;lt;Object&amp;gt; dirtySet = (HashSet&amp;lt;Object&amp;gt;) dirty;&#xA;            Set&amp;lt;Object&amp;gt; cleanSet = new HashSet&amp;lt;Object&amp;gt;();&#xA;            processed.put(dirtySet, cleanSet);&#xA;            for (Object value : dirtySet) {&#xA;                cleanSet.add(doClean(value));&#xA;            }&#xA;            return cleanSet;&#xA;        }&#xA;&#xA;        if (dirty instanceof TreeSet&amp;lt;?&amp;gt;) {&#xA;            logger.debug(&quot;Object is a TreeSet&quot;);&#xA;&#xA;            Set&amp;lt;Object&amp;gt; dirtySet = (TreeSet&amp;lt;Object&amp;gt;) dirty;&#xA;            Set&amp;lt;Object&amp;gt; cleanSet = new TreeSet&amp;lt;Object&amp;gt;();&#xA;            processed.put(dirtySet, cleanSet);&#xA;            for (Object value : dirtySet) {&#xA;                cleanSet.add(doClean(value));&#xA;            }&#xA;            return cleanSet;&#xA;        }&#xA;&#xA;        if (dirty instanceof HibernateProxy) {&#xA;            logger.debug(&quot;Object is a HibernateProxy&quot;);&#xA;&#xA;            HibernateProxy proxy = (HibernateProxy) dirty;&#xA;            LazyInitializer lazyInitializer = proxy.getHibernateLazyInitializer();&#xA;            if (lazyInitializer.isUninitialized()) {&#xA;                logger.debug(&quot;It is uninitialized, skipping&quot;);&#xA;&#xA;                processed.put(dirty, null);&#xA;                return null;&#xA;            }&#xA;            else {&#xA;                logger.debug(&quot;It is initialized, getting implementati&quot;);&#xA;&#xA;                dirty = lazyInitializer.getImplementation();&#xA;            }&#xA;        }&#xA;&#xA;        if (dirty instanceof Bean) {&#xA;            logger.debug(&quot;Object is a Bean&quot;);&#xA;&#xA;            Bean bean = (Bean) dirty;&#xA;            processed.put(bean, bean);&#xA;            for (String property : bean.getPropertyNames()) {&#xA;                bean.set(property, doClean(bean.get(property)));&#xA;            }&#xA;            return bean;&#xA;        }&#xA;&#xA;        processed.put(dirty, dirty);&#xA;        for (String property : ReflectionUtils.getProperties(dirty)) {&#xA;            logger.debug(&quot;Processing property &quot; + property);&#xA;&#xA;            Object value = ReflectionUtils.get(dirty, property);&#xA;            ReflectionUtils.setIfPossible(dirty, property, doClean(value));&#xA;        }&#xA;        return dirty;&#xA;    }&#xA;&#xA;    private boolean isPrimitive(Object object) {&#xA;        if (object instanceof String)&#xA;            return true;&#xA;&#xA;        if (object instanceof Date)&#xA;            return true;&#xA;&#xA;        if (object instanceof Enum)&#xA;            return true;&#xA;&#xA;        Class&amp;lt;? extends Object&amp;gt; xClass = object.getClass();&#xA;        if (xClass.isPrimitive())&#xA;            return true;&#xA;&#xA;        return false;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2208" LastEditorUserId="22222" LastEditDate="2014-07-26T15:22:57.853" LastActivityDate="2014-07-26T15:22:57.853" Title="Hibernate proxy converter for GWT" Tags="&lt;java&gt;&lt;converting&gt;&lt;hibernate&gt;&lt;proxy&gt;&lt;gwt&gt;" AnswerCount="1" CommentCount="0" FavoriteCount="1" />
  <row Id="1046" PostTypeId="2" ParentId="1022" CreationDate="2011-02-28T16:53:24.690" Score="3" Body="&lt;p&gt;Start with the first, refactor to the second.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The interface is the same in both situations. All of the code which is using these classes should not care which method you choose to implement. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;You should implement the first, simpler method. When it becomes useful, you should apply other techniques. For example, if you find yourself having a lot of flightless birds you might implement a FlightlessBird class which has the common logic. When speaking becomes too complicated, you  might want to break it out into its own object. In other words, implement parts of the second version as they become neccessary.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Your second version is attempting to have maximum flexibility. Attempting to do that has a strange tendency to result in lots of obtuse code and still lack the flexibility that you need. Therefore, in most situations its better to wait until you have a better idea of what you actually need rather then guessing ahead of time.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There is no significant benefit to implementing the flexible version now. There are definite benefits to implementing the simple version now. You only a basic idea of what the code will be required to do later. Attempting to implement that now will only produce a mess.&lt;/p&gt;&#xA;" OwnerUserId="1659" LastActivityDate="2011-02-28T16:53:24.690" CommentCount="0" />
  <row Id="1047" PostTypeId="2" ParentId="1045" CreationDate="2011-02-28T22:02:50.903" Score="1" Body="&lt;p&gt;&lt;code&gt;doClean()&lt;/code&gt; is crying out for decomposition. Compare&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if (dirty instanceof PersistentList) {&#xA;    logger.debug(&quot;Object is a PersistentList&quot;);&#xA;&#xA;    PersistentList dirtyList = (PersistentList) dirty;&#xA;    List&amp;lt;Object&amp;gt; cleanList = new ArrayList&amp;lt;Object&amp;gt;();&#xA;    processed.put(dirtyList, cleanList);&#xA;    if (dirtyList.wasInitialized()) {&#xA;        for (Object value : dirtyList) {&#xA;            cleanList.add(doClean(value));&#xA;        }&#xA;    }&#xA;    return cleanList;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;to&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if (dirty instanceof List) {&#xA;    logger.debug(&quot;Object is a List&quot;);&#xA;&#xA;    List&amp;lt;Object&amp;gt; dirtyList = (List&amp;lt;Object&amp;gt;) dirty;&#xA;    List&amp;lt;Object&amp;gt; cleanList = new ArrayList&amp;lt;Object&amp;gt;();&#xA;    processed.put(dirtyList, cleanList);&#xA;    for (Object value : dirtyList) {&#xA;        cleanList.add(doClean(value));&#xA;    }&#xA;    return cleanList;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The differences are&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;The types in the debug messages.&lt;/li&gt;&#xA;&lt;li&gt;The types in the casts.&lt;/li&gt;&#xA;&lt;li&gt;The types of the clean replacements.&lt;/li&gt;&#xA;&lt;li&gt;The check for &lt;code&gt;PersistentList.wasInitialized()&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;Similar patterns exist for maps, sets, sorted sets, etc. and can all be refactored into new methods, each handling a different collection interface.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if (dirty instanceof List) {&#xA;    return cleanList((List)dirty);&#xA;}&#xA;&#xA;...&#xA;&#xA;private cleanList(List dirty) {&#xA;    logger.debug(&quot;Object is a List&quot;);&#xA;    List clean = new ArrayList();&#xA;    processed.put(dirty, clean);&#xA;    if (shouldCopyValues(dirty)) {&#xA;        for (Object value : dirty) {&#xA;            clean.add(doClean(value));&#xA;        }&#xA;    }&#xA;    return clean;&#xA;}&#xA;&#xA;private shouldCopyValues(Collection dirty) {&#xA;    return (!(dirty instanceof Persistent) || ((Persistent)dirty).wasInitialized());&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note that there's no longer a need for a separate check in &lt;code&gt;doClean()&lt;/code&gt; for &lt;code&gt;PersistentList&lt;/code&gt;. One minor optimization here would be to calculate the size of the needed list ahead of time, setting it to zero if it's an uninitialized &lt;code&gt;PersistentList&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For the more complicated &lt;code&gt;Map&lt;/code&gt; and &lt;code&gt;Set&lt;/code&gt; types, you'll need a way to map from the dirty class to the appropriate clean class. I recommend putting this logic into &lt;code&gt;cleanSet()&lt;/code&gt; and &lt;code&gt;cleanMap()&lt;/code&gt; instead of &lt;code&gt;doClean()&lt;/code&gt;. You could take the same approach as you did above, using a series of &lt;code&gt;instanceof&lt;/code&gt; tests, or you could use a map.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Actually, only the persistent varieties need to use a different class type, so you may as well just check for those three specifically and otherwise create a new instance of the dirty collection.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Note: when copying values for &lt;code&gt;Map&lt;/code&gt;s you can use &lt;code&gt;Map.entrySet()&lt;/code&gt; to get the key/value pairs as &lt;code&gt;Map.Entry&lt;/code&gt; objects instead of calling &lt;code&gt;Map.get()&lt;/code&gt; on each key. It's a minor speed improvement.&lt;/p&gt;&#xA;" OwnerUserId="1635" LastActivityDate="2011-02-28T22:02:50.903" CommentCount="0" />
  <row Id="1048" PostTypeId="2" ParentId="1022" CreationDate="2011-03-01T04:09:13.033" Score="4" Body="&lt;p&gt;Let's see: you've gotten votes for the first and for the second. Hmm...how can I argue with both. Oh, I've got it: both designs must be wrong!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;From an abstract viewpoint, you have nothing to justify the Bird/Eagle/Penguin classes as &lt;em&gt;classes&lt;/em&gt; at all. In particular, even though you've defined a couple of virtual functions, the functions aren't really doing anything different at all. In all cases, they do exactly the same thing -- print out a string.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As such, you should probably just create birds, and when you create a bird you should specify the &quot;flyingstyle&quot; and &quot;speakingstyle&quot; as arguments to the constructor:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;string&amp;gt;&#xA;#include &amp;lt;iostream&amp;gt;&#xA;&#xA;class bird { &#xA;    std::string movingstyle;&#xA;    std::string speakingstyle;&#xA;public:&#xA;    bird(std::string const &amp;amp;ms, std::string const &amp;amp;ss) &#xA;        : movingstyle(ms), speakingstyle(ss)&#xA;    {}&#xA;&#xA;    void speak() { std::cout &amp;lt;&amp;lt; speakingstyle &amp;lt;&amp;lt; &quot;\n&quot;; }&#xA;    void move() { std::cout &amp;lt;&amp;lt; movingstyle &amp;lt;&amp;lt; &quot;\n&quot;; }&#xA;};&#xA;&#xA;int main() {&#xA;    bird birds[2] = {&#xA;        bird(&quot;Eagle Flying&quot;, &quot;Eagle speaking&quot;), &#xA;        bird(&quot;Penguin swimming&quot;, &quot;Penguin speaking&quot;)&#xA;    };&#xA;&#xA;    for (int i=0; i&amp;lt;2; i++) {&#xA;        birds[i].speak();&#xA;        birds[i].move();&#xA;    }&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Reserve separate classes for objects that truly have different behavior, not the same behavior with different values.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'd also note that I've halfway-repaired a basic flaw in your original hierarchy. By including &quot;fly&quot; in your base class, you've asserted that all birds can fly -- an outright falsehood. Here I've changed that the more abstract concept &quot;move&quot; instead. With this, you can have Penguins that swim, Ostriches that run, and Eagles that fly.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Something similar should probably be done with the &quot;speak&quot;. Some birds don't make sounds, so you should consider whether you want something like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class bird {};&#xA;&#xA;class speaking_bird : public bird {&#xA;public: &#xA;    virtual void speak() = 0;    &#xA;};&#xA;&#xA;class silent_bird : public bird {};&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This correctly models the fact that some birds &quot;speak&quot; and others don't. It also has a fundamental difference in behavior between &quot;speaking bird&quot; and &quot;silent bird&quot; that justifies using inheritance.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Alternatively, you could assert in the design that all birds can speak, but in the implementation say that some birds (that you can I know can't speak) should just never be asked to speak:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class bird {&#xA;    bool silent;&#xA;public:&#xA;    void speak() { if (silent) throw runtime_error(&quot;Cannot speak&quot;); }&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;There's a fair basis for saying this is a kludge, but in some cases, it's worth avoiding creating extra levels of inheritance (and such) just to cover obscure corner cases that you'll probably never care about in real use anyway. At the same time, this can lead to littering other code with checks for those corner cases to avoid invoking functions that won't work, and you'd generally rather avoid that as well. As such, you need to look at the specific situation to decide which is the least of the available evils.&lt;/p&gt;&#xA;" OwnerUserId="489" LastActivityDate="2011-03-01T04:09:13.033" CommentCount="0" />
  <row Id="1049" PostTypeId="2" ParentId="1043" CreationDate="2011-03-01T09:51:15.303" Score="2" Body="&lt;p&gt;My implementation would be pretty much the same as yours, but removing the &lt;code&gt;foreach&lt;/code&gt; loop.  It's not required as &lt;code&gt;array_slice&lt;/code&gt; can do the job with less code.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function sizexpander($sizes)&#xA;{&#xA;     //These should be in order!&#xA;     $range = array(&quot;XS&quot;, &quot;S&quot;, &quot;M&quot;, &quot;L&quot;, &quot;XL&quot;, &quot;XXL&quot;, &quot;XXXL&quot;);&#xA;&#xA;     //Split them into 2 segments, min / max + convert to upper&#xA;     $keys = explode(&quot;-&quot;,strtoupper($sizes));&#xA;&#xA;     //Get the initial index of min&#xA;     $min = array_search($keys[0],$range);&#xA;     $max = array_search($keys[1],$range);&#xA;&#xA;     //Slice the array and implode.&#xA;     return implode(&quot;,&quot;,array_slice($range,$min,($max - $min) + 1));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The main problem you had was that you had created a second function using string searching to find your segments.  This has been replaced by &lt;code&gt;explode&lt;/code&gt; which, as long as there is only ever 1 delimiter, then this would suffice.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also, the &lt;code&gt;while&lt;/code&gt; statement has been revoked, along with the string concatenation and been replaced with implode, which takes the found segments of the &lt;code&gt;sizearray&lt;/code&gt; and implode them by a delimiter.&lt;/p&gt;&#xA;" OwnerUserId="95" LastEditorUserId="22222" LastEditDate="2014-05-10T20:55:20.030" LastActivityDate="2014-05-10T20:55:20.030" CommentCount="2" />
  <row Id="1050" PostTypeId="2" ParentId="1043" CreationDate="2011-03-01T10:35:28.370" Score="2" Body="&lt;p&gt;Option A:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function sizexpander($sizes) {&#xA;    $sizeArray = array(&quot;XS&quot;, &quot;S&quot;, &quot;M&quot;, &quot;L&quot;, &quot;XL&quot;, &quot;XXL&quot;, &quot;XXXL&quot;);&#xA;    list($minSize, $maxSize) = split('-', $sizes);&#xA;&#xA;    $minIndex = array_search($minSize, $sizeArray);&#xA;    $maxIndex = array_search($maxSize, $sizeArray);&#xA;    return join(', ', array_slice($sizeArray, $minIndex, ++$maxIndex - $minIndex));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You can do this with array_filter but it's not as efficient.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you're uncomfortable with array operations or find the code unclear (i.e. not self documenting) you can do this with a simple enough loop.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function sizexpander2($sizes) {&#xA;    $sizeArray = array(&quot;XS&quot;, &quot;S&quot;, &quot;M&quot;, &quot;L&quot;, &quot;XL&quot;, &quot;XXL&quot;, &quot;XXXL&quot;);&#xA;    list($minSize, $maxSize) = split('-', $sizes);&#xA;    $tmp = array();&#xA;&#xA;    foreach($sizeArray as $size) {&#xA;        if($size == $minSize) {&#xA;             $tmp[] = $size;&#xA;        } else if(count($tmp)) {&#xA;             $tmp[] = $size;&#xA;             if($size == $maxSize) break;&#xA;        }&#xA;    }&#xA;&#xA;    return join(', ', $tmp);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1613" LastEditorUserId="1613" LastEditDate="2011-03-01T11:02:27.753" LastActivityDate="2011-03-01T11:02:27.753" CommentCount="0" />
  <row Id="1051" PostTypeId="2" ParentId="975" CreationDate="2011-03-01T10:42:21.720" Score="1" Body="&lt;p&gt;I chose for the closures: &lt;a href=&quot;http://jsfiddle.net/raXQT/4/&quot; rel=&quot;nofollow&quot;&gt;http://jsfiddle.net/raXQT/4/&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Now it's possible to safely and more easily access variables. Also I love the fact that Chrome supports JavaScript getters and setters like this (it's going to be Chrome-only anyway).&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var t=(function() {&#xA;    var a = 0;&#xA;    return {&#xA;        get val() {&#xA;            return a;&#xA;        },&#xA;        set val(v) {&#xA;            a = v;&#xA;        },&#xA;        alertA: function() {&#xA;            window.alert(&quot;alertA() shows a: &quot; + a);&#xA;        }&#xA;    }&#xA;})();&#xA;&#xA;alert(&quot;t.val: &quot; + t.val);&#xA;t.val = 2;&#xA;alert(&quot;t.val = 2\n\nt.val: &quot; + t.val);&#xA;t.alertA();&#xA;t.a = 6;&#xA;alert(&quot;t.a = 6\n\nt.val: &quot; + t.val);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2110" LastActivityDate="2011-03-01T10:42:21.720" CommentCount="0" />
  <row Id="1053" PostTypeId="1" CreationDate="2011-03-01T14:44:24.667" Score="2" ViewCount="242" Body="&lt;pre&gt;&lt;code&gt;namespace SharpDream.Api&#xA;{&#xA;    public enum SourceType&#xA;    {&#xA;        Test,&#xA;        Xml&#xA;    }&#xA;&#xA;    public class UserFinder&#xA;    {&#xA;        private IUserInformationSource _sourceType;&#xA;        private IParser _parserType;&#xA;        private string _source;&#xA;&#xA;        public UserFinder(SourceType sourceType)&#xA;        {&#xA;            switch (sourceType)&#xA;            {&#xA;                case SourceType.Test:&#xA;                    var testSource = new TestSource();&#xA;                    _sourceType = testSource;&#xA;                    break;&#xA;                case SourceType.Xml:&#xA;                    var xmlSource = new XmlSource();&#xA;                    var xmlParser = new XmlParser();&#xA;                    _sourceType = xmlSource;&#xA;                    _parserType = xmlParser;&#xA;                    break;&#xA;                default:&#xA;                    break;&#xA;            }&#xA;        }&#xA;&#xA;        /// &amp;lt;summary&amp;gt;&#xA;        /// Returns a User object loaded with information.&#xA;        /// &amp;lt;/summary&amp;gt;&#xA;        /// &amp;lt;param name=&quot;forumUserId&quot;&amp;gt;The DIC forum users ID number.&amp;lt;/param&amp;gt;&#xA;        /// &amp;lt;returns&amp;gt;A User object.&amp;lt;/returns&amp;gt;&#xA;        public User GetUserById(int forumUserId)&#xA;        {&#xA;            _source = _sourceType.GetResponseSource(forumUserId);&#xA;            return _parserType.ParseUserFromSource(_source);&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;What I'm aiming for:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;Separation of concerns. Which is working believe it or not! It's so refreshing to feel confident that your code won't break if you change something somewhere else. I finished this bit, and now I can work on the parsing area without having to put anything else in the mental buffer.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;Flexibility during usage. &lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Here is an example of how my library will be used:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;UserFinder userFinder = new UserFinder(SourceType.Xml);&#xA;var foundUser = userFinder.GetUserById(1);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Compare this to the old version of the library:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;//Let's create an XmlMemberFinder, since we'll use the XML api as our data source.&#xA;XmlMemberFinder xmlMemberFinder = new XmlMemberFinder();&#xA;&#xA;//MemberList is the class you'll use in your application to get anything you need &#xA;//relating to members.&#xA;MemberLister memberList = new MemberLister(xmlMemberFinder);&#xA;&#xA;//This is an example of fetching and listing a user.&#xA;var member = memberList.FindMember(1);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I think I have made improvements, but there is always someone smarter out there. :) &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Thanks for your time!&lt;/p&gt;&#xA;" OwnerDisplayName="Sergio Tapia" LastEditorUserId="1029" LastEditDate="2011-09-15T08:19:17.800" LastActivityDate="2011-09-15T08:19:17.800" Title="Majorly refactored my code, is this good enough?" Tags="&lt;c#&gt;&lt;api&gt;" AnswerCount="3" CommentCount="1" />
  <row Id="1054" PostTypeId="2" ParentId="1053" CreationDate="2011-03-01T15:42:37.800" Score="0" Body="&lt;p&gt;This is looking pretty good to me. The main thing that stands out that I woudl change is that the UserFinder() method is somewhat large, and it isn't immediately understandable to me what each piece does. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;I would try to break that up into several smaller, descriptively named methods:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;public UserFinder(SourceType sourceType)        &#xA;{            &#xA;    if (requestIsTest())            &#xA;    {                &#xA;        createTestSource();&#xA;    }&#xA;    else&#xA;    {&#xA;        createXmlSource();&#xA;    }&#xA;}&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Your original is more compact but less readable in my book. In six months when you come back to it, will you be able to remember what it does, or will you have to spend 10 minutes parsing it out and figuring out what it does?&lt;/p&gt;&#xA;" OwnerUserId="2196" LastActivityDate="2011-03-01T15:42:37.800" CommentCount="1" />
  <row Id="1055" PostTypeId="2" ParentId="1053" CreationDate="2011-03-01T16:00:39.290" Score="8" Body="&lt;p&gt;Personally I'd make the &lt;code&gt;UserFinder&lt;/code&gt; class source-independent.&lt;br&gt;&#xA;This could be either by seeing the Xml and Test sources as a mapper and the &lt;code&gt;UserFinder&lt;/code&gt; as a model (some kind of &lt;a href=&quot;http://martinfowler.com/eaaCatalog/dataMapper.html&quot; rel=&quot;nofollow&quot;&gt;DataMapper&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public interface UserMapperInterface {}&#xA;public class XmlSource : UserMapperInterface { // ... }&#xA;public class TestSource : UserMapperInterface { // ... }&#xA;&#xA;public class UserFinder {&#xA;     public UserFinder(UserMapperInterface $source) { // ... }&#xA;     public UserFinder() { // use default source }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This way you make the &lt;code&gt;GetUserById&lt;/code&gt; method source-independent. Basic usage would be:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;UserFinder t = new UserFinder(new TestSource());&#xA;// UserFinder t = new UserFinder(); // using the default source&#xA;t.GetUserById(43);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This way you seperate the source logic from the operations and you can easily add new sources without touching the &lt;code&gt;UserFinder&lt;/code&gt; class. &lt;/p&gt;&#xA;" OwnerUserId="98" LastActivityDate="2011-03-01T16:00:39.290" CommentCount="3" />
  <row Id="1056" PostTypeId="1" CreationDate="2011-03-01T16:03:01.533" Score="3" ViewCount="2490" Body="&lt;p&gt;How can I improve on this rather ugly method that builds an HTML unordered list from an XML file?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I maintain a collection of ASP.NET webforms that all need to pull in the same site navigation as our main website. The forms have a master page that mimics the main site template, and we want any changes to the main navigation to flow through to the forms automatically. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;The main site uses an XML document to generate the navigation, and the document uses inconsistent formatting for the links (some have &quot;http://mysite.com&quot; hardcoded, and some are relative to the main site &quot;/subsite&quot;). &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here's what I have right now: &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private void LoadNavigation()&#xA;{&#xA;    string urlPrefix = &quot;http://mysite.com&quot;;&#xA;    string xmlFilePath = ConfigurationManager.AppSettings[&quot;NavigationUrl&quot;].ToString();&#xA;    XmlDocument doc = new XmlDocument();&#xA;    doc.Load(xmlFilePath);&#xA;    XmlNodeList navigationItems = doc.DocumentElement.FirstChild.ChildNodes;&#xA;&#xA;    foreach (XmlNode item in navigationItems)&#xA;    {&#xA;        if (item.Attributes.GetNamedItem(&quot;url&quot;).Value.Contains(&quot;http://&quot;)) // link is hard coded&#xA;        {&#xA;            navList.InnerHtml += &quot;&amp;lt;li&amp;gt; &amp;lt;a href=&quot; + '&quot;' + item.Attributes.GetNamedItem(&quot;url&quot;).Value&#xA;                + '&quot;' + &quot;&amp;gt;&quot; + item.Attributes.GetNamedItem(&quot;title&quot;).Value + &quot;&amp;lt;/a&amp;gt;|&amp;lt;/li&amp;gt;&quot;;&#xA;        }&#xA;&#xA;        else&#xA;        {&#xA;            navList.InnerHtml += &quot;&amp;lt;li&amp;gt; &amp;lt;a href=&quot; + '&quot;' + urlPrefix + item.Attributes.GetNamedItem(&quot;url&quot;).Value&#xA;                + '&quot;' + &quot;&amp;gt;&quot; + item.Attributes.GetNamedItem(&quot;title&quot;).Value; //relative link&#xA;&#xA;            if (item.NextSibling == null)&#xA;            {&#xA;                navList.InnerHtml += &quot;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&quot;; //last item in list&#xA;            }&#xA;            else&#xA;            {&#xA;                navList.InnerHtml += &quot;&amp;lt;/a&amp;gt;|&amp;lt;/li&amp;gt;&quot;; //not the last item in list&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Believe it or not, this is an improvement over the original, which included a hardcoded URL for the XML file and got the values out of the XML document like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;XmlNodeList nodeList = doc.ChildNodes[1].ChildNodes[0].ChildNodes;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;But it still needs a lot of work. Please have at it.&lt;/p&gt;&#xA;" OwnerUserId="2196" LastEditorUserId="128" LastEditDate="2011-03-01T17:08:03.110" LastActivityDate="2011-03-03T23:39:21.880" Title="Elegant approach to building unordered list from XML" Tags="&lt;c#&gt;&lt;asp.net&gt;" AnswerCount="3" CommentCount="7" FavoriteCount="1" />
  <row Id="1057" PostTypeId="1" AcceptedAnswerId="2201" CreationDate="2011-03-01T16:10:38.723" Score="26" ViewCount="30470" Body="&lt;p&gt;Here's the code which I use for my Android custom cursor adapter which I use to bind data to my list view.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public class MessageAdapter extends CursorAdapter {&#xA;   private Cursor mCursor;&#xA;   private Context mContext;&#xA;   private final LayoutInflater mInflater;&#xA;&#xA;&#xA;    public MessageAdapter(Context context, Cursor c) {&#xA;        super(context, c);&#xA;        mInflater=LayoutInflater.from(context);&#xA;    mContext=context;&#xA;    }&#xA;&#xA;    @Override&#xA;    public void bindView(View view, Context context, Cursor cursor) {&#xA;&#xA;        TextView mobileNo=(TextView)view.findViewById(R.id.mobileNolistitem);&#xA;        mobileNo.setText(cursor.getString(cursor.getColumnIndex(TextMeDBAdapter.KEY_MOBILENO)));&#xA;&#xA;        TextView frequency=(TextView)view.findViewById(R.id.frequencylistitem);&#xA;        frequency.setText(cursor.getString(cursor.getColumnIndex(TextMeDBAdapter.KEY_FREQUENCY)));&#xA;&#xA;        TextView rowid=(TextView)view.findViewById(R.id.rowidlistitem);&#xA;        rowid.setText(cursor.getString(cursor.getColumnIndex(TextMeDBAdapter.KEY_ID)));&#xA;&#xA;    }&#xA;&#xA;    @Override&#xA;    public View newView(Context context, Cursor cursor, ViewGroup parent) {&#xA;        final View view=mInflater.inflate(R.layout.message_list_item,parent,false); &#xA;        return view;&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I know that there's another efficient way to do this which reuses the list item instantiated.  Can someone tell me how?&lt;/p&gt;&#xA;" OwnerUserId="2157" LastEditorUserId="22222" LastEditDate="2014-04-07T07:08:18.213" LastActivityDate="2014-04-07T07:08:25.133" Title="Custom CursorAdapter Design" Tags="&lt;java&gt;&lt;android&gt;" AnswerCount="2" CommentCount="2" FavoriteCount="14" />
  <row Id="1058" PostTypeId="2" ParentId="1041" CreationDate="2011-03-01T16:17:16.343" Score="2" Body="&lt;p&gt;You do have the field &lt;code&gt;languages&lt;/code&gt; several times as a string. I'd create a general table &lt;code&gt;languages&lt;/code&gt; with all language-related informations and have 1:m or n:m relations to other tables. &lt;/p&gt;&#xA;" OwnerUserId="98" LastActivityDate="2011-03-01T16:17:16.343" CommentCount="5" />
  <row Id="1059" PostTypeId="1" AcceptedAnswerId="1069" CreationDate="2011-03-01T17:23:45.270" Score="2" ViewCount="669" Body="&lt;p&gt;I'm working on a managed OpenGL game engine for C#, and here's how I'm managing shader parameters (uniforms). Is it &quot;alright&quot;? Could it be better? I'm a bit unsure about using generics in this case.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public abstract class ShaderParameter&#xA;{&#xA;    public readonly string Name;&#xA;    internal readonly int Location;&#xA;    internal readonly Shader Parent;&#xA;&#xA;    internal ShaderParameter(string name, int location, Shader parent)&#xA;    {&#xA;        Name = name;&#xA;        Location = location;&#xA;        Parent = parent;&#xA;    }&#xA;    //Ensures that the value is set on the shader,&#xA;    //this should be called before using the parent shader&#xA;    internal abstract void EnsureSet();&#xA;    //Gives a value to this shader paramerter&#xA;    public abstract void SetValue&amp;lt;T&amp;gt;(T value);&#xA;}&#xA;&#xA;&#xA;&#xA;//A shader paramater of type float&#xA;public sealed class ShaderParamFloat : ShaderParameter&#xA;{&#xA;    float value = 0;&#xA;    bool valueChanged = false; //If the value has changed since the last time it was set on the shader&#xA;&#xA;    internal ShaderParamFloat(string name, int location, Shader parent)&#xA;        : base(name, location, parent)&#xA;    { }&#xA;    internal override void EnsureSet()&#xA;    {&#xA;        if (valueChanged)&#xA;        {&#xA;            //Hands over a single value to OpenGL.&#xA;            GL.Uniform1(Location, value);&#xA;            valueChanged = false;&#xA;        }&#xA;    }&#xA;    //Gives a value to this shader parameter&#xA;    public override void SetValue&amp;lt;T&amp;gt;(T value)&#xA;    {&#xA;        if (typeof(T) != typeof(float))&#xA;            throw new ArgumentException(&quot;Value is of type: &quot; + typeof(T).ToString() + &quot;, expected: float&quot;, &quot;value&quot;);&#xA;&#xA;        this.value = (float)(object)value;&#xA;        valueChanged = true;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The reason for using inheritance is because other &lt;code&gt;ShaderParameter&lt;/code&gt; classes behave differently in &lt;code&gt;EnsureSet()&lt;/code&gt;. For example, &lt;code&gt;ShaderParamVector3&lt;/code&gt; uses &lt;code&gt;GL.Uniform3(...)&lt;/code&gt;, and &lt;code&gt;ShaderParamTexture&lt;/code&gt; needs to ensure that the texture is valid and set on the graphics card.&lt;/p&gt;&#xA;" OwnerUserId="2229" LastEditorUserId="22222" LastEditDate="2016-11-08T00:19:02.943" LastActivityDate="2016-11-08T00:19:02.943" Title="Shader parameters in managed OpenGL" Tags="&lt;c#&gt;&lt;opengl&gt;" AnswerCount="1" CommentCount="0" FavoriteCount="1" />
  <row Id="1061" PostTypeId="2" ParentId="1056" CreationDate="2011-03-01T17:38:42.253" Score="2" Body="&lt;p&gt;The part that looks most problematic in your code is the &lt;code&gt;if&lt;/code&gt; statement: the code in the &lt;code&gt;if&lt;/code&gt; part and the &lt;code&gt;else&lt;/code&gt; part is almost the same except that you prepend &lt;code&gt;urlPrefix&lt;/code&gt; to the URL if it is relative. (Also you're only checking whether the node is the last if the URL is relative, which does not seem right). At the very least I'd factor this out into a helper method, which takes the absolute URL as a parameter to remove the code duplication.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;However there's an even better way: .net already comes with the &lt;code&gt;System.Uri&lt;/code&gt; class, which can take care of making the URL absolute for you.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private void LoadNavigation()&#xA;{&#xA;    Uri urlPrefix = new Uri(&quot;http://mysite.com&quot;);&#xA;    string xmlFilePath = ConfigurationManager.AppSettings[&quot;NavigationUrl&quot;].ToString();&#xA;    XmlDocument doc = new XmlDocument();&#xA;    doc.Load(xmlFilePath);&#xA;    XmlNodeList navigationItems = doc.DocumentElement.FirstChild.ChildNodes;&#xA;&#xA;    foreach (XmlNode item in navigationItems)    &#xA;    {&#xA;        Url fullUrl = new Uri(urlPrefix, item.Attributes.GetNamedItem(&quot;url&quot;).Value);&#xA;        String title = item.Attributes.GetNamedItem(&quot;title&quot;).Value;&#xA;        navList.InnerHtml += &quot;&amp;lt;li&amp;gt; &amp;lt;a href=\&quot;&quot; + fullUrl + &quot;\&quot;&amp;gt;&quot; + title + &quot;&amp;lt;/a&amp;gt;&quot;;&#xA;&#xA;        if (item.NextSibling == null)&#xA;        {&#xA;            navList.InnerHtml += &quot;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&quot;; //last item in list&#xA;        }&#xA;        else&#xA;        {&#xA;            navList.InnerHtml += &quot;&amp;lt;/a&amp;gt;|&amp;lt;/li&amp;gt;&quot;; //not the last item in list&#xA;        }&#xA;    }    &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="128" LastActivityDate="2011-03-01T17:38:42.253" CommentCount="4" />
  <row Id="1062" PostTypeId="2" ParentId="1056" CreationDate="2011-03-01T18:44:16.657" Score="3" Body="&lt;p&gt;I would look into using XSLT to transform the XML into the required HTML.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So the code above becomes much simpler and would just have to load the XML file, load the XSL file, apply the transform and the result would be the HTML you require.&lt;br/&gt;&#xA;Another advantage is that if one day you decide to change the resulting HTML, this code will not need to change, only the XSL file will change.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A quick search yields a lot of useful resources including an article that seems to explain what I was suggesting: &lt;a href=&quot;http://www.xmlfiles.com/articles/sample_chapters/sams_xmlforaspnet/default.asp&quot; rel=&quot;nofollow&quot;&gt;Transforming XML with XSLT and ASP&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Another useful resource I'd recommend in case you are not familiar with XSLT is the &lt;a href=&quot;http://www.w3schools.com/xsl/default.asp&quot; rel=&quot;nofollow&quot;&gt;XSLT Tutorial&lt;/a&gt; at W3Schools.&lt;/p&gt;&#xA;" OwnerUserId="1840" LastActivityDate="2011-03-01T18:44:16.657" CommentCount="1" />
  <row Id="1063" PostTypeId="2" ParentId="1001" CreationDate="2011-03-01T18:45:19.620" Score="1" Body="&lt;p&gt;Here's another option. For the key function, it specifies a lambda that takes a two-item sequence, and unpacks the two items into &quot;s&quot; and &quot;l&quot;, and returns &quot;l&quot;. This avoids poking around each (string, length) pair by magic number, and also enforces a bit of a type constraint on the items to sort. Also, it breaks lines in convenient places, which is perfectly legal in Python:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;sorted([(p, len(p)) for p &#xA;       in (&quot;something&quot;, &#xA;           &quot;something else&quot;, &#xA;           &quot;blah&quot;, &#xA;           &quot;a string&quot;)], &#xA;       key=lambda (s, l): l)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And here is a version that uses a generator comprehension instead of a list comprehension. Generator expressions are evaluated as items are pulled from them, rather than all at once. In this example there's no advantage, but when using expressions where items are expensive to create, or where iteration could terminate early (like database queries), generators are a big win:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;sorted(((p, len(p)) for p &#xA;       in (&quot;something&quot;, &#xA;           &quot;something else&quot;, &#xA;           &quot;blah&quot;, &#xA;           &quot;a string&quot;)), &#xA;       key=lambda (s, l): l)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And this version deterministically handles cases where there is some ambiguity on sorting only by length:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;sorted(((p, len(p)) for p &#xA;       in (&quot;something&quot;, &#xA;           &quot;something else&quot;, &#xA;           &quot;four things&quot;, &#xA;           &quot;five things&quot;, &#xA;           &quot;a string&quot;)), &#xA;       key=lambda (s, l): (l, s))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="328" LastActivityDate="2011-03-01T18:45:19.620" CommentCount="0" />
  <row Id="1066" PostTypeId="1" AcceptedAnswerId="1067" CreationDate="2011-03-01T19:54:35.770" Score="7" ViewCount="490" Body="&lt;p&gt;I'm creating a game in C#, and I've created a &lt;code&gt;ScreenManager&lt;/code&gt; so I can call&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;ScreenManager.MoveToScreen(typeof(ScreenClassHere))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;to move to other game states. However, I feel that my method of creating an instance of the class is... not very optimal. See for yourself.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    public static void MoveToScreen(Type s)&#xA;    {&#xA;        if (currentscreen != null) currentscreen.Remove();&#xA;&#xA;        currentscreen = (Screen)s.GetConstructor(System.Type.EmptyTypes).Invoke(null);&#xA;        currentscreen.Init();&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Does anyone know if there's a better way to create an instance of a certain class from a &lt;code&gt;Type&lt;/code&gt;?&lt;/p&gt;&#xA;" OwnerUserId="2238" LastEditorUserId="29371" LastEditDate="2015-02-27T07:49:32.910" LastActivityDate="2015-02-27T07:49:32.910" Title="Moving to other game states with ScreenManager" Tags="&lt;c#&gt;" AnswerCount="3" CommentCount="0" />
  <row Id="1067" PostTypeId="2" ParentId="1066" CreationDate="2011-03-01T19:58:47.140" Score="19" Body="&lt;p&gt;You could use generics&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public static void MoveToScreen&amp;lt;T&amp;gt;() where T : Screen, new()&#xA;{&#xA;    if (currentscreen != null) currentscreen.Remove();&#xA;&#xA;    currentscreen = new T();&#xA;    currentscreen.Init();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In this case, you'd have to call the method as&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;ScreenManager.MoveToScreen&amp;lt;ScreenClassHere&amp;gt;();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1416" LastEditorUserId="1416" LastEditDate="2011-03-01T20:13:26.923" LastActivityDate="2011-03-01T20:13:26.923" CommentCount="6" />
  <row Id="1068" PostTypeId="2" ParentId="1066" CreationDate="2011-03-01T20:04:23.033" Score="4" Body="&lt;p&gt;Nitpicky, but I would change &lt;code&gt;if (currentscreen != null) currentscreen.Remove();&lt;/code&gt; to&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if (currentscreen != null) {&#xA;   currentscreen.Remove();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I second pdr on using generics.&lt;/p&gt;&#xA;" OwnerUserId="110" LastActivityDate="2011-03-01T20:04:23.033" CommentCount="2" />
  <row Id="1069" PostTypeId="2" ParentId="1059" CreationDate="2011-03-01T22:32:32.777" Score="4" Body="&lt;p&gt;The biggest thing here is that you should make the ShaderParam class itself generic, not just its SetValue method.  This will get rid of your type check and double cast (any time you have a type check or a double cast, chances are you're using the type system incorrectly).  It will also get rid of the ShaderParamFloat class completely.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public class ShaderParam&amp;lt;T&amp;gt;&#xA;{&#xA;    private T value;&#xA;&#xA;    ... (other code here)&#xA;&#xA;    public void SetValue(T value)&#xA;    {&#xA;        this.value = value;&#xA;        ...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You can now use this for floats by instantiating a &lt;code&gt;ShaderParam&amp;lt;float&amp;gt;&lt;/code&gt;, plus it works just as well for other types.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Some other comments:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Don't write comments that just duplicate the code.  A variable named &lt;code&gt;valueChanged&lt;/code&gt; doesn't need a comment saying &quot;If the value has changed&quot; - that much is obvious from the name.  More importantly in this code, the method named &lt;code&gt;EnsureSet()&lt;/code&gt; should have a comment explaining its purpose and why it should be called, not just a comment that expands the name into a longer sentence.  I'm not an OpenGL user so I don't know what &lt;code&gt;GL.Uniform1()&lt;/code&gt; does, but that code is surprising to me and a comment to explain why it's written that way would be useful.&lt;/li&gt;&#xA;&lt;li&gt;I take it you have good reasons for making some things public and others internal.  To me, those choices seem pretty arbitrary.  If it works in your situation, consider making the class itself internal and all members public.&lt;/li&gt;&#xA;&lt;li&gt;I don't personally like making fields public/internal, though given that they are readonly, I could live with it.  I might personally still change this to use properties and a readonly backing field.  That gives you the added benefit of being able to set breakpoints later if you ever need to debug.&lt;/li&gt;&#xA;&lt;li&gt;Not relevant if you make the first change above, but why is &lt;code&gt;ShaderParamFloat&lt;/code&gt; still abstract?&lt;/li&gt;&#xA;&lt;li&gt;The private fields in &lt;code&gt;ShaderParamFloat&lt;/code&gt; should be explicitly marked private.&lt;/li&gt;&#xA;&lt;li&gt;There is no need to initialize &lt;code&gt;value&lt;/code&gt; to 0 or &lt;code&gt;valueChanged&lt;/code&gt; to false.  Those are their default values.&lt;/li&gt;&#xA;&lt;li&gt;I would personally call the class &lt;code&gt;ShaderParameter&lt;/code&gt; instead of &lt;code&gt;ShaderParam&lt;/code&gt;.  Your abbreviation is pretty obvious in this case, but I tend to stay away from all but the most commonly used abbreviations.  In particular, if using the abbreviation improves the readability of the code, then it makes sense.  I don't think that applies here.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;EDIT:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Based on your updated question, I would still recommend a solution like I mentioned above, where the base &lt;code&gt;ShaderParameter&lt;/code&gt; is a generic class.  However, it does make sense for you to derive classes from that with different implementations of &lt;code&gt;EnsureSet&lt;/code&gt;.  For example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public abstract class ShaderParameter&amp;lt;T&amp;gt;&#xA;{&#xA;    private T value;&#xA;&#xA;    public abstract void EnsureSet();&#xA;&#xA;    public void SetValue(T value)&#xA;    {&#xA;        this.value = value;&#xA;    }&#xA;}&#xA;&#xA;public class FloatShaderParameter : ShaderParameter&amp;lt;float&amp;gt;&#xA;{&#xA;    public override void EnsureSet()&#xA;    {&#xA;        ...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And you can then derive similar classes for the other types of parameters.  Note that you only need a single implementation of &lt;code&gt;SetValue&lt;/code&gt; in the base, and it works for all derived classes.&lt;/p&gt;&#xA;" OwnerUserId="1142" LastEditorUserId="1142" LastEditDate="2011-03-02T11:18:41.253" LastActivityDate="2011-03-02T11:18:41.253" CommentCount="2" />
  <row Id="1070" PostTypeId="1" AcceptedAnswerId="1646" CreationDate="2011-03-02T02:55:01.627" Score="8" ViewCount="15342" Body="&lt;p&gt;As far as I know the standard &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.delegate.createdelegate.aspx&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;Delegate.CreateDelegate()&lt;/code&gt;&lt;/a&gt; which allows to create a delegate by using reflection, doesn't allow doing something as follows when the first parameter of &lt;code&gt;method&lt;/code&gt; isn't &lt;strong&gt;exactly&lt;/strong&gt; of type &lt;code&gt;object&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public class Bleh&#xA;{&#xA;    public void SomeMethod( string s ) { }&#xA;}&#xA;...&#xA;object bleh = new Bleh(); &#xA;MethodInfo method = bleh.GetType().GetMethod(&quot;SomeMethod&quot;);    &#xA;// Starting from here, all knowledge about Bleh is unknown. &#xA;// Only bleh and method are available.&#xA;Action&amp;lt;object&amp;gt; a = (Action&amp;lt;object&amp;gt;)Delegate.CreateDelegate(&#xA;    typeof( Action&amp;lt;object&amp;gt; ), bleh, method );&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Which is why I now have an implementation which allows the following:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Action&amp;lt;object&amp;gt; compatibleExecute =&#xA;    DelegateHelper.CreateCompatibleDelegate&amp;lt;Action&amp;lt;object&amp;gt;&amp;gt;( bleh, method );&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;method&lt;/code&gt; can be any method, with or without return type, and with as many parameters as desired. I need to create an &lt;code&gt;Action&amp;lt;T&amp;gt;&lt;/code&gt;, since other code is dependant on this strong typed delegate.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In this example, I &lt;strong&gt;know&lt;/strong&gt; the method is at least an &lt;code&gt;Action&amp;lt;object&amp;gt;&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The following code improves on the original &lt;code&gt;CreateDelegate&lt;/code&gt; in two ways:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;It is generic now, instead of passing type as a first parameter.&lt;/li&gt;&#xA;&lt;li&gt;It does conversion to suitable lower types when possible.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;This is the first time for me working with expression trees, so I don't know whether what I'm doing is correct or the best approach. I based this implementation on &lt;a href=&quot;http://msmvps.com/blogs/jon_skeet/archive/2008/08/09/making-reflection-fly-and-exploring-delegates.aspx&quot; rel=&quot;nofollow&quot;&gt;an article by Jon Skeet&lt;/a&gt; (without fully understanding it :)), but the code seems to be working!&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/// &amp;lt;summary&amp;gt;&#xA;///   A generic helper class to do common&#xA;///   &amp;lt;see cref = &quot;System.Delegate&quot;&amp;gt;Delegate&amp;lt;/see&amp;gt; operations.&#xA;/// &amp;lt;/summary&amp;gt;&#xA;/// &amp;lt;author&amp;gt;Steven Jeuris&amp;lt;/author&amp;gt;&#xA;public static class DelegateHelper&#xA;{&#xA;    /// &amp;lt;summary&amp;gt;&#xA;    ///   The name of the Invoke method of a Delegate.&#xA;    /// &amp;lt;/summary&amp;gt;&#xA;    const string InvokeMethod = &quot;Invoke&quot;;&#xA;&#xA;    /// &amp;lt;summary&amp;gt;&#xA;    ///   Get method info for a specified delegate type.&#xA;    /// &amp;lt;/summary&amp;gt;&#xA;    /// &amp;lt;param name = &quot;delegateType&quot;&amp;gt;The delegate type to get info for.&amp;lt;/param&amp;gt;&#xA;    /// &amp;lt;returns&amp;gt;The method info for the given delegate type.&amp;lt;/returns&amp;gt;&#xA;    public static MethodInfo MethodInfoFromDelegateType( Type delegateType )&#xA;    {&#xA;        Contract.Requires&amp;lt;ArgumentException&amp;gt;(&#xA;            delegateType.IsSubclassOf( typeof( MulticastDelegate ) ),&#xA;            &quot;Given type should be a delegate.&quot; );&#xA;&#xA;        return delegateType.GetMethod( InvokeMethod );&#xA;    }&#xA;&#xA;    /// &amp;lt;summary&amp;gt;&#xA;    ///   Creates a delegate of a specified type that represents the specified&#xA;    ///   static or instance method, with the specified first argument.&#xA;    ///   Conversions are done when possible.&#xA;    /// &amp;lt;/summary&amp;gt;&#xA;    /// &amp;lt;typeparam name = &quot;T&quot;&amp;gt;The type for the delegate.&amp;lt;/typeparam&amp;gt;&#xA;    /// &amp;lt;param name = &quot;firstArgument&quot;&amp;gt;&#xA;    ///   The object to which the delegate is bound,&#xA;    ///   or null to treat method as static&#xA;    /// &amp;lt;/param&amp;gt;&#xA;    /// &amp;lt;param name = &quot;method&quot;&amp;gt;&#xA;    ///   The MethodInfo describing the static or&#xA;    ///   instance method the delegate is to represent.&#xA;    /// &amp;lt;/param&amp;gt;&#xA;    public static T CreateCompatibleDelegate&amp;lt;T&amp;gt;(&#xA;       object firstArgument,&#xA;       MethodInfo method )&#xA;    {&#xA;        MethodInfo delegateInfo = MethodInfoFromDelegateType( typeof( T ) );&#xA;&#xA;        ParameterInfo[] methodParameters = method.GetParameters();&#xA;        ParameterInfo[] delegateParameters = delegateInfo.GetParameters();&#xA;&#xA;        // Convert the arguments from the delegate argument type&#xA;        // to the method argument type when necessary.&#xA;        ParameterExpression[] arguments =&#xA;            (from delegateParameter in delegateParameters&#xA;             select Expression.Parameter( delegateParameter.ParameterType ))&#xA;             .ToArray();&#xA;        Expression[] convertedArguments =&#xA;            new Expression[methodParameters.Length];&#xA;        for ( int i = 0; i &amp;lt; methodParameters.Length; ++i )&#xA;        {&#xA;            Type methodType = methodParameters[ i ].ParameterType;&#xA;            Type delegateType = delegateParameters[ i ].ParameterType;&#xA;            if ( methodType != delegateType )&#xA;            {&#xA;                convertedArguments[ i ] =&#xA;                    Expression.Convert( arguments[ i ], methodType );&#xA;            }&#xA;            else&#xA;            {&#xA;                convertedArguments[ i ] = arguments[ i ];&#xA;            }&#xA;        }&#xA;&#xA;        // Create method call.&#xA;        ConstantExpression instance = firstArgument == null&#xA;            ? null&#xA;            : Expression.Constant( firstArgument );&#xA;        MethodCallExpression methodCall = Expression.Call(&#xA;            instance,&#xA;            method,&#xA;            convertedArguments&#xA;            );&#xA;&#xA;        // Convert return type when necessary.&#xA;        Expression convertedMethodCall = &#xA;            delegateInfo.ReturnType == method.ReturnType&#xA;                ? (Expression)methodCall&#xA;                : Expression.Convert( methodCall, delegateInfo.ReturnType );&#xA;&#xA;        return Expression.Lambda&amp;lt;T&amp;gt;(&#xA;            convertedMethodCall,&#xA;            arguments&#xA;            ).Compile();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;So, did I do this the easiest/best way? Am I doing something completely unnecessary? Thanks!&lt;/p&gt;&#xA;" OwnerUserId="2254" LastEditorUserId="59161" LastEditDate="2016-01-16T11:16:12.097" LastActivityDate="2016-01-16T11:16:12.097" Title="Generic advanced Delegate.CreateDelegate using expression trees" Tags="&lt;c#&gt;&lt;expression-trees&gt;" AnswerCount="3" CommentCount="4" FavoriteCount="4" />
  <row Id="1071" PostTypeId="1" AcceptedAnswerId="1075" CreationDate="2011-03-02T04:43:32.600" Score="11" ViewCount="1043" Body="&lt;p&gt;I've just given this as a response to an absolute beginner on SO, and I'm wondering how terrible it is.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Output for an odd number of lines:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;&#xA;&amp;gt;&amp;gt;&amp;gt;&#xA;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&#xA;&amp;gt;&amp;gt;&amp;gt;&#xA;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Output for an even number of lines:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;&#xA;&amp;gt;&amp;gt;&amp;gt;&#xA;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&#xA;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&#xA;&amp;gt;&amp;gt;&amp;gt;&#xA;&amp;gt; &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;int lines = 7;&#xA;int half = lines/2;&#xA;String carat = &quot;&amp;gt;&quot;;&#xA;int i;&#xA;&#xA;//better to declare first or does it not matter?         &#xA;&#xA;if(lines%2==0){boolean even = true;}&#xA;else{boolean even = false;}&#xA;&#xA;for(i=1;i&amp;lt;=lines;i++){&#xA;        System.out.println(carat + &quot;\n&quot;);&#xA;        if(i==half &amp;amp;&amp;amp; even){System.out.println(carat+&quot;\n&quot;);}&#xA;        if(((i&amp;gt;=half &amp;amp;&amp;amp; even) || (i&amp;gt;=half+1)) &amp;amp;&amp;amp; i!=lines){&#xA;                carat = carat.substring(0,carat.length()-2);&#xA;        }else{&#xA;                carat = carat + &quot;&amp;gt;&amp;gt;&quot;;&#xA;        }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This code just seems so ugly, not considering the fact that there is no method that takes number of lines and that it is abusing integer rounding. &lt;/p&gt;&#xA;" OwnerUserId="2258" LastEditorUserId="22222" LastEditDate="2014-07-02T23:46:35.600" LastActivityDate="2014-07-02T23:46:35.600" Title="Different character outputs using loops and strings" Tags="&lt;java&gt;&lt;strings&gt;" AnswerCount="4" CommentCount="0" FavoriteCount="1" />
  <row Id="1072" PostTypeId="2" ParentId="1066" CreationDate="2011-03-02T05:00:45.017" Score="5" Body="&lt;p&gt;I don't like the naming of a &lt;code&gt;Remove&lt;/code&gt; method, it suggests that you remove something from the &lt;code&gt;currentScreen&lt;/code&gt; but really it's the method that is called when the &lt;code&gt;currentScreen&lt;/code&gt; itself is being removed, if I got it right.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also, other people suggesting generics are correct, you should use it. But if you once again find yourself in need of creating an instance knowing its type, don't go &lt;code&gt;GetConstructors&lt;/code&gt; way. Use &lt;code&gt;Activator.CreateInstance&lt;/code&gt; for that.&lt;/p&gt;&#xA;" OwnerUserId="1776" LastEditorUserId="1776" LastEditDate="2011-03-02T10:21:26.660" LastActivityDate="2011-03-02T10:21:26.660" CommentCount="1" />
  <row Id="1073" PostTypeId="2" ParentId="1053" CreationDate="2011-03-02T05:04:19.850" Score="1" Body="&lt;p&gt;Fge's answer (along with Mongus Pong's comment) really notes the major issue with your design.  In general, you will want to avoid:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Using enumerations in the place of polymorphism.&lt;/li&gt;&#xA;&lt;li&gt;Leaking the details of how you test a type into the type itself. You are doing this by explicitly referencing &lt;code&gt;TestSource&lt;/code&gt; in &lt;code&gt;UserFinder&lt;/code&gt;. Doing this complicates the core type with test code and/or test types that don't belong in it.  Note that there are times when you'll have to break this &quot;rule&quot;; for example, when there is no other way to test the object in question, but generally you can avoid it. &lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;Fge's answer provides a great fix for both of these issues (though the &lt;code&gt;UserMapperInterface&lt;/code&gt; interface should really be named &lt;code&gt;IUserMapper&lt;/code&gt;, but that's just nitpicking).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Once you get this pattern of IoC and Dependency Injection down you're on the cusp of something that can really transform how you write and test code: Mocking.  A great introduction on the how and why of mocking can be found &lt;a href=&quot;http://stephenwalther.com/blog/archive/2008/03/23/tdd-introduction-to-rhino-mocks.aspx&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Hope this helps.&lt;/p&gt;&#xA;" OwnerUserId="67" LastActivityDate="2011-03-02T05:04:19.850" CommentCount="0" />
  <row Id="1074" PostTypeId="2" ParentId="731" CreationDate="2011-03-02T06:23:11.870" Score="2" Body="&lt;p&gt;You want to use what Rails calls eager loading. This is done with the &lt;code&gt;:include&lt;/code&gt; parameter in your &lt;code&gt;AR&lt;/code&gt; call. Add it to your lambda block.&lt;/p&gt;&#xA;" OwnerUserId="2260" LastEditorUserId="59481" LastEditDate="2015-12-14T01:55:53.510" LastActivityDate="2015-12-14T01:55:53.510" CommentCount="0" />
  <row Id="1075" PostTypeId="2" ParentId="1071" CreationDate="2011-03-02T07:03:15.253" Score="16" Body="&lt;blockquote&gt;&#xA;  &lt;p&gt;better to declare first or does it not matter?&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;No. These days most people believe variables should be declared as late as possible, right by where they are used.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;This code just seems so ugly.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;It is. A little whitespace in there would help a lot. Which is easier to read:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// This:&#xA;if(i==half &amp;amp;&amp;amp; even){System.out.println(carat+&quot;\n&quot;);}&#xA;&#xA;// Or this:&#xA;if (i == half &amp;amp;&amp;amp; even) {&#xA;  System.out.println(carat+&quot;\n&quot;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;that it is abusing integer rounding. &lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;There's no abuse, and it's not rounding. Truncation on integer arithmetic is a specified part of the language. Feel free to use it. In this case, it does exactly what you want.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If I were writing this, I'd do:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;printCarats(int numLines) {    &#xA;  for (int line = 0; line &amp;lt; numLines; line++) {&#xA;    // Mirror vertically across center line.&#xA;    int halfLine = line;&#xA;    if (line &amp;gt; numLines / 2) halfLine = numLines - line - 1;&#xA;&#xA;    int numCarats = 1 + halfLine * 2;&#xA;    for (int i = 0; i &amp;lt; numCarats; i++) {&#xA;      System.out.print(&quot;&amp;gt;&quot;);&#xA;    }&#xA;    System.out.println();&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="816" LastEditorUserId="1581" LastEditDate="2011-03-02T10:54:46.770" LastActivityDate="2011-03-02T10:54:46.770" CommentCount="1" />
  <row Id="1076" PostTypeId="1" AcceptedAnswerId="1078" CreationDate="2011-03-02T09:03:55.197" Score="5" ViewCount="467" Body="&lt;p&gt;I have 3 simple similar event handler functions that I would like to refactor. Any suggestions?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private void btnBuildingList_Click(object sender, EventArgs e)&#xA;    {&#xA;        selectedExportType = (int)ExportType.Building;&#xA;        path = csvFilePath + String.Format(&quot;{0:yyyy-MM-dd}&quot;, datDate.DateTime) + &quot;-BuildingList.csv&quot;;&#xA;        Export();&#xA;    }&#xA;&#xA;    private void btnOwnerList_Click(object sender, EventArgs e)&#xA;    {&#xA;        selectedExportType = (int)ExportType.Persons;&#xA;        path = csvFilePath + String.Format(&quot;{0:yyyy-MM-dd}&quot;, datDate.DateTime) + &quot;-OwnerList.csv&quot;;&#xA;        Export();&#xA;    }&#xA;&#xA;    private void btnFacts_Click(object sender, EventArgs e)&#xA;    {&#xA;        selectedExportType = (int)ExportType.Facts;&#xA;        path = csvFilePath + String.Format(&quot;{0:yyyy-MM-dd}&quot;, datDate.DateTime) + &quot;-FactsData.csv&quot;;&#xA;        Export();&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1283" LastEditorUserId="22222" LastEditDate="2015-11-21T17:50:24.147" LastActivityDate="2015-11-21T17:50:24.147" Title="Similar event handlers for buttons" Tags="&lt;c#&gt;&lt;event-handling&gt;" AnswerCount="3" CommentCount="0" FavoriteCount="1" />
  <row Id="1077" PostTypeId="1" AcceptedAnswerId="1083" CreationDate="2011-03-02T09:25:23.180" Score="8" ViewCount="448" Body="&lt;p&gt;A fully functional demo URL: &lt;code&gt;http://69.24.73.172/demos/index.html&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Note that in FireFox there is a small horizontal scrollbar bug which I have fixed at home.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;HTML:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&#xA;&amp;lt;html&amp;gt;  &#xA;&#xA;&amp;lt;head&amp;gt;    &#xA;    &amp;lt;meta charset=&quot;UTF-8&quot; /&amp;gt;    &#xA;    &amp;lt;title&amp;gt;Welcome to Scirra.com&amp;lt;/title&amp;gt;    &#xA;    &amp;lt;meta name=&quot;description&quot; content=&quot;Construct 2, the HTML5 games creator.&quot; /&amp;gt;    &#xA;    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;css/default.css&quot; type=&quot;text/css&quot; /&amp;gt;     &#xA;    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;plugins/coin-slider/coin-slider-styles.css&quot; type=&quot;text/css&quot; /&amp;gt;    &#xA;    &amp;lt;script type=&quot;text/javascript&quot; src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;    &#xA;    &amp;lt;script type=&quot;text/javascript&quot; src=&quot;js/common.js&quot;&amp;gt;&amp;lt;/script&amp;gt;    &#xA;    &amp;lt;script type=&quot;text/javascript&quot; src=&quot;plugins/coin-slider/coin-slider.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;    &#xA;    &amp;lt;script type=&quot;text/javascript&quot; src=&quot;js/homepage.js&quot;&amp;gt;&amp;lt;/script&amp;gt;    &#xA;&amp;lt;/head&amp;gt;  &#xA;&#xA;&amp;lt;body&amp;gt;   &#xA;&#xA;&amp;lt;div class=&quot;topBar&quot;&amp;gt;&amp;lt;/div&amp;gt;    &#xA;&amp;lt;div class=&quot;mainBox&quot;&amp;gt;    &#xA;    &amp;lt;div class=&quot;headWrapper&quot;&amp;gt;   &#xA;        &amp;lt;div class=&quot;searchWrapper&quot;&amp;gt;    &#xA;            &amp;lt;div class=&quot;searchBox&quot;&amp;gt;    &#xA;                &amp;lt;input type=&quot;text&quot; id=&quot;SearchBox&quot; /&amp;gt;    &#xA;                &amp;lt;div class=&quot;s searchIco&quot;&amp;gt;&amp;lt;/div&amp;gt;    &#xA;            &amp;lt;/div&amp;gt;    &#xA;        &amp;lt;/div&amp;gt;      &#xA;    &amp;lt;/div&amp;gt;  &#xA;&#xA;&#xA;    &amp;lt;div class=&quot;topMenu&quot;&amp;gt;    &#xA;        &amp;lt;a href=&quot;#&quot; class=&quot;topSelWrapper&quot;&amp;gt;Home&amp;lt;/a&amp;gt;    &#xA;        &amp;lt;a href=&quot;#&quot; class=&quot;topNormal&quot;&amp;gt;Forum&amp;lt;/a&amp;gt;    &#xA;        &amp;lt;a href=&quot;#&quot; class=&quot;topNormal&quot;&amp;gt;Contruct&amp;lt;/a&amp;gt;    &#xA;        &amp;lt;a href=&quot;#&quot; class=&quot;topNormal&quot;&amp;gt;Arcade&amp;lt;/a&amp;gt;    &#xA;        &amp;lt;a href=&quot;#&quot; class=&quot;topNormal&quot;&amp;gt;Manual&amp;lt;/a&amp;gt;    &#xA;        &amp;lt;a href=&quot;#&quot; class=&quot;topNormal&quot;&amp;gt;Support&amp;lt;/a&amp;gt;    &#xA;        &amp;lt;a href=&quot;#&quot; class=&quot;topNormal&quot;&amp;gt;Contact&amp;lt;/a&amp;gt;    &#xA;    &amp;lt;/div&amp;gt;&#xA;&#xA;    &amp;lt;div class=&quot;subMenu&quot;&amp;gt;    &#xA;        &amp;lt;a href=&quot;#&quot; class=&quot;subSelWrapper&quot;&amp;gt;Homepage&amp;lt;/a&amp;gt;      &#xA;        &amp;lt;a href=&quot;#&quot; class=&quot;subNormal&quot;&amp;gt;Construct&amp;lt;/a&amp;gt;    &#xA;        &amp;lt;a href=&quot;#&quot; class=&quot;subNormal&quot;&amp;gt;Products&amp;lt;/a&amp;gt;    &#xA;        &amp;lt;a href=&quot;#&quot; class=&quot;subNormal&quot;&amp;gt;Community Forum&amp;lt;/a&amp;gt;    &#xA;        &amp;lt;a href=&quot;#&quot; class=&quot;subNormal&quot;&amp;gt;Contact Us&amp;lt;/a&amp;gt;    &#xA;    &amp;lt;/div&amp;gt;&#xA;&#xA;&#xA;&#xA;    &amp;lt;div class=&quot;contentWrapper&quot;&amp;gt;    &#xA;        &amp;lt;div class=&quot;wideCol&quot;&amp;gt;    &#xA;            &amp;lt;div id='coin-slider' class=&quot;slideShowWrapper&quot;&amp;gt;    &#xA;                &amp;lt;a href=&quot;#&quot; target=&quot;_blank&quot;&amp;gt;    &#xA;                    &amp;lt;img src='images/screenshot1.jpg' &amp;gt;    &#xA;                    &amp;lt;span&amp;gt;    &#xA;                        Scirra software allows you to bring your imagination to life    &#xA;                    &amp;lt;/span&amp;gt;    &#xA;                &amp;lt;/a&amp;gt;    &#xA;                &amp;lt;a href=&quot;#&quot;&amp;gt;    &#xA;                    &amp;lt;img src='images/screenshot2.jpg' &amp;gt;    &#xA;                    &amp;lt;span&amp;gt;    &#xA;                        Export your creations to HTML5 pages    &#xA;                    &amp;lt;/span&amp;gt;    &#xA;                &amp;lt;/a&amp;gt;        &#xA;                &amp;lt;a href=&quot;#&quot;&amp;gt;    &#xA;                    &amp;lt;img src='images/screenshot3.jpg' &amp;gt;    &#xA;                    &amp;lt;span&amp;gt;    &#xA;                        Another description of some image    &#xA;                    &amp;lt;/span&amp;gt;    &#xA;                &amp;lt;/a&amp;gt;    &#xA;                &amp;lt;a href=&quot;#&quot;&amp;gt;    &#xA;                    &amp;lt;img src='images/screenshot4.jpg' &amp;gt;    &#xA;                    &amp;lt;span&amp;gt;    &#xA;                        Something motivational to tell people    &#xA;                    &amp;lt;/span&amp;gt;    &#xA;                &amp;lt;/a&amp;gt;    &#xA;            &amp;lt;/div&amp;gt;      &#xA;            &amp;lt;div class=&quot;newsWrapper&quot;&amp;gt;    &#xA;                &amp;lt;h1&amp;gt;Latest from Twitter&amp;lt;/h1&amp;gt;    &#xA;                &amp;lt;div id=&quot;twitterFeed&quot;&amp;gt;  &#xA;                &amp;lt;p&amp;gt;The news on the block is this.  Something has happened some news or something. &amp;lt;span class=&quot;smallDate&quot;&amp;gt;About 6 hours ago&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;    &#xA;                &amp;lt;p&amp;gt;Another thing has happened lets tell the world some news or something. Lots to think about.  Lots to do.&amp;lt;span class=&quot;smallDate&quot;&amp;gt;About 6 hours ago&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;    &#xA;                &amp;lt;p&amp;gt;Shocker!  Santa Claus is not real.  This is breaking news, we must spread it. &amp;lt;span class=&quot;smallDate&quot;&amp;gt;About 6 hours ago&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;   &#xA;                &amp;lt;/div&amp;gt;    &#xA;            &amp;lt;/div&amp;gt;    &#xA;        &amp;lt;/div&amp;gt;    &#xA;        &amp;lt;div class=&quot;thinCol&quot;&amp;gt;    &#xA;            &amp;lt;h1&amp;gt;Main Heading&amp;lt;/h1&amp;gt;    &#xA;            &amp;lt;p&amp;gt;Some paragraph goes here.  It tells you about the picture.  Cool!  Have you thought about downloading Construct 2?  Well you can download it with the link below.  This column will expand vertically.&amp;lt;/p&amp;gt;    &#xA;            &amp;lt;h2&amp;gt;Help Me!&amp;lt;/h2&amp;gt;    &#xA;            &amp;lt;p&amp;gt;This column will keep expanging and expanging.  It pads stuff out to make other things look good imo.&amp;lt;/p&amp;gt;    &#xA;            &amp;lt;h2&amp;gt;Why Download?&amp;lt;/h2&amp;gt;    &#xA;            &amp;lt;p&amp;gt;As well as other features, we also have some other features.  Check out our &amp;lt;a href=&quot;#&quot;&amp;gt;other features&amp;lt;/a&amp;gt;.  Each of our other features is really cool and there to help everyone suceed.&amp;lt;/p&amp;gt;&#xA;                &amp;lt;a href=&quot;#&quot; class=&quot;s downloadBox&quot;&amp;gt;    &#xA;                &amp;lt;div class=&quot;downloadHead&quot;&amp;gt;Download&amp;lt;/div&amp;gt;    &#xA;                &amp;lt;div class=&quot;downloadSize&quot;&amp;gt;24.5 MB&amp;lt;/div&amp;gt;    &#xA;            &amp;lt;/a&amp;gt;            &#xA;        &amp;lt;/div&amp;gt;    &#xA;        &amp;lt;div class=&quot;clear&quot;&amp;gt;&amp;lt;/div&amp;gt;      &#xA;&#xA;        &amp;lt;h1&amp;gt;This Weeks Spotlight&amp;lt;/h1&amp;gt;       &#xA;        &amp;lt;div class=&quot;halfColWrapper&quot;&amp;gt;    &#xA;            &amp;lt;img src=&quot;images/spotlight1.png&quot; class=&quot;spotLightImg&quot; /&amp;gt;    &#xA;            &amp;lt;p&amp;gt;Our spotlight member this week is Pooh-Bah.  He writes good stuff.  Read it.&amp;lt;/p&amp;gt;    &#xA;            &amp;lt;a class=&quot;moreInfoLink&quot; href=&quot;#&quot;&amp;gt;Learn More&amp;lt;/a&amp;gt;    &#xA;        &amp;lt;/div&amp;gt;    &#xA;        &amp;lt;div class=&quot;halfColSpacer&quot;&amp;gt;&amp;amp;nbsp;&amp;lt;/div&amp;gt;    &#xA;        &amp;lt;div class=&quot;halfColWrapper&quot;&amp;gt;    &#xA;            &amp;lt;img src=&quot;images/spotlight2.png&quot; class=&quot;spotLightImg&quot; /&amp;gt;    &#xA;            &amp;lt;p&amp;gt;Killer Bears is a scary ass game from JimmyJones.  How many bears can you escape from?&amp;lt;/p&amp;gt;    &#xA;            &amp;lt;a class=&quot;moreInfoLink&quot; href=&quot;#&quot;&amp;gt;Learn More&amp;lt;/a&amp;gt;    &#xA;        &amp;lt;/div&amp;gt;    &#xA;        &amp;lt;div class=&quot;clear&quot;&amp;gt;&amp;lt;/div&amp;gt;    &#xA;    &amp;lt;/div&amp;gt;    &#xA;&amp;lt;/div&amp;gt;       &#xA;&#xA;&amp;lt;div class=&quot;footerWrapper&quot;&amp;gt;    &#xA;    &amp;lt;div class=&quot;footerBox&quot;&amp;gt;     &#xA;        &amp;lt;div class=&quot;footerItem&quot;&amp;gt;    &#xA;            &amp;lt;h3&amp;gt;Community&amp;lt;/h3&amp;gt;    &#xA;            &amp;lt;a href=&quot;#&quot;&amp;gt;The Blog&amp;lt;/a&amp;gt;&amp;lt;br /&amp;gt;    &#xA;            &amp;lt;a href=&quot;#&quot;&amp;gt;Community Forum&amp;lt;/a&amp;gt;&amp;lt;br /&amp;gt;    &#xA;            &amp;lt;a href=&quot;#&quot;&amp;gt;RSS Feed&amp;lt;/a&amp;gt;&amp;lt;br /&amp;gt;    &#xA;            &amp;lt;a class=&quot;s footIco facebook&quot; href=&quot;http://www.facebook.com/ScirraOfficial&quot; target=&quot;_blank&quot;&amp;gt;&amp;lt;/a&amp;gt;    &#xA;            &amp;lt;a class=&quot;s footIco twitter&quot; href=&quot;http://twitter.com/Scirra&quot; target=&quot;_blank&quot;&amp;gt;&amp;lt;/a&amp;gt;    &#xA;            &amp;lt;a class=&quot;s footIco youtube&quot; href=&quot;http://www.youtube.com/user/ScirraVideos&quot; target=&quot;_blank&quot;&amp;gt;&amp;lt;/a&amp;gt;    &#xA;        &amp;lt;/div&amp;gt;    &#xA;        &amp;lt;div class=&quot;footerItem&quot;&amp;gt;    &#xA;            &amp;lt;h3&amp;gt;About Us&amp;lt;/h3&amp;gt;    &#xA;            &amp;lt;a href=&quot;#&quot;&amp;gt;Contact Information&amp;lt;/a&amp;gt;&amp;lt;br /&amp;gt;    &#xA;            &amp;lt;a href=&quot;#&quot;&amp;gt;Advertising&amp;lt;/a&amp;gt;&amp;lt;br /&amp;gt;    &#xA;            &amp;lt;a href=&quot;#&quot;&amp;gt;History&amp;lt;/a&amp;gt;&amp;lt;br /&amp;gt;    &#xA;            &amp;lt;a href=&quot;#&quot;&amp;gt;Privacy Policy&amp;lt;/a&amp;gt;&amp;lt;br /&amp;gt;    &#xA;            &amp;lt;a href=&quot;#&quot;&amp;gt;Terms and Conditions&amp;lt;/a&amp;gt;    &#xA;        &amp;lt;/div&amp;gt;&#xA;&#xA;        &amp;lt;div class=&quot;footerItem&quot;&amp;gt;    &#xA;            &amp;lt;h3&amp;gt;Want to Help?&amp;lt;/h3&amp;gt;    &#xA;            You can contribute to the community &amp;lt;a href=&quot;#&quot;&amp;gt;in lots of ways&amp;lt;/a&amp;gt;.  We have a large active friendly community, and there are lots of ways to join in!&amp;lt;br /&amp;gt;    &#xA;            &amp;lt;div class=&quot;ralign&quot;&amp;gt;    &#xA;            &amp;lt;a href=&quot;#&quot;&amp;gt;&amp;lt;strong&amp;gt;Learn More&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt;    &#xA;            &amp;lt;/div&amp;gt;    &#xA;        &amp;lt;/div&amp;gt;    &#xA;        &amp;lt;div class=&quot;clear&quot;&amp;gt;&amp;lt;/div&amp;gt;       &#xA;    &amp;lt;/div&amp;gt;    &#xA;&amp;lt;/div&amp;gt;&#xA;&#xA;&amp;lt;div class=&quot;copyright&quot;&amp;gt;    &#xA;    Copyright &amp;amp;copy; 2011 Scirra.com.  All rights reserved.    &#xA;&amp;lt;/div&amp;gt;   &#xA;&#xA;&amp;lt;/body&amp;gt;&#xA;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;(Note head wrapper div is empty at the moment, this will have a logo at a later date).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;CSS:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    /* Main Layout Elements */&#xA;    body{&#xA;        margin: 0;&#xA;        padding: 0;&#xA;        font-family: Arial, Helvetica, Verdana;&#xA;        background: #fff url(../images/background.png) repeat-x;&#xA;        color:#444;&#xA;    }&#xA;    p {&#xA;        margin: 0 0 20px 8px;&#xA;    }&#xA;    a{&#xA;        color: #0066FF;&#xA;    }&#xA;    .smallDate{&#xA;        float:right;&#xA;        color: #339900;&#xA;    }&#xA;    .topBar{&#xA;        position:absolute;&#xA;        background-color: #339900;&#xA;        height: 30px;&#xA;        border-bottom:2px solid #3FBF00;&#xA;        width: 100%;&#xA;        z-index:1;&#xA;        -moz-box-shadow: 0px 0px 5px #555;&#xA;        -webkit-box-shadow: 0px 0px 5px #555;&#xA;        box-shadow: 0px 0px 5px #555;&#xA;    }&#xA;    h1{&#xA;        margin:0;&#xA;        margin-bottom:5px;&#xA;        font-size:35px;&#xA;        color: #339900;&#xA;        font-weight:normal;&#xA;    }&#xA;    h2{&#xA;&#xA;&#xA;margin:0 0 5px 0;&#xA;    font-size:22px;&#xA;    color: #339900;&#xA;    font-weight:normal;&#xA;}&#xA;h3{&#xA;    text-shadow: black 0.1em 0.1em 0.2em;&#xA;    text-transform: uppercase;&#xA;    font-size: 17px;&#xA;    font-weight: bold;&#xA;    margin-bottom: 3px;&#xA;}&#xA;.ralign{&#xA;    text-align:right;&#xA;}&#xA;.clear{&#xA;    clear:both;&#xA;}&#xA;&#xA;/* Sprite definitions and positioning */&#xA;.s{&#xA;    background-image:url(../images/sprites.png);&#xA;    background-repeat:no-repeat;&#xA;}&#xA;.facebook{&#xA;    background-position: 0 0;&#xA;}&#xA;.twitter{&#xA;    background-position: 0 -40px;&#xA;}&#xA;.slideShowWrapper{&#xA;    height:261px;&#xA;    overflow:hidden;&#xA;    -moz-box-shadow: 0px 0px 5px #555;&#xA;    -webkit-box-shadow: 0px 0px 5px #555;&#xA;    box-shadow: 0px 0px 5px #555;&#xA;}&#xA;&#xA;.youtube{&#xA;    background-position: 0 -80px;&#xA;}&#xA;&#xA;/* Main Wrappers */&#xA;.contentWrapper{&#xA;    padding: 10px;&#xA;}&#xA;.headWrapper{&#xA;    height: 120px;&#xA;}&#xA;.footerWrapper{&#xA;    position:relative;&#xA;    z-index:1;&#xA;    top: -20px;&#xA;    height:155px;&#xA;    padding-top: 15px;&#xA;    background-image: url(../images/background-footer.png);&#xA;    background-repeat:repeat-x;&#xA;    margin-bottom: -20px;&#xA;overflow: hidden;&#xA;}&#xA;.mainBox{&#xA;    -moz-box-shadow: 0px 0px 12px #444;&#xA;    -webkit-box-shadow: 0px -20px 28px #c0c0c0;&#xA;    box-shadow: 0px 0px 12px #444;&#xA;    margin: 0 auto;&#xA;    width: 770px;&#xA;    border:0;&#xA;    z-index:2;&#xA;    position:relative;&#xA;    background-color: #ffffff;&#xA;    -moz-border-radius-bottomright: 10px;&#xA;    border-bottom-right-radius:  10px;&#xA;    -moz-border-radius-bottomleft: 10px;&#xA;    border-bottom-left-radius:  10px;&#xA;}&#xA;&#xA;/* Footer */&#xA;.footerBox&#xA;{&#xA;    color: white;&#xA;    font-size: 13px;&#xA;    margin: 0 auto;&#xA;    width: 700px;&#xA;    margin-top:5px;&#xA;}&#xA;.footerItem{&#xA;    float: left;&#xA;    width: 33%;&#xA;}&#xA;.footerItem a{&#xA;    font-size:13px;&#xA;    color:white;&#xA;}&#xA;.footerItem a:hover{&#xA;    color: #ffaa00;&#xA;}&#xA;.copyright&#xA;{&#xA;    color: white;&#xA;    text-align:center;&#xA;    background-color: #000000;&#xA;    font-size: 12px;&#xA;    padding: 3px;&#xA;}&#xA;.footIco{&#xA;    height: 40px;&#xA;    width: 32px;&#xA;    float: left;&#xA;    margin-top: 7px;&#xA;    position:relative;&#xA;    left: -4px;&#xA;    display:block;&#xA;}&#xA;&#xA;/* Search */&#xA;.searchWrapper{&#xA;    float:right;&#xA;    background-color: #339900;&#xA;    width: 250px;&#xA;    height:53px;&#xA;    position:relative;&#xA;    left: 50px;&#xA;    -moz-border-radius-bottomright: 10px;&#xA;    border-bottom-right-radius:  10px;&#xA;    -moz-border-radius-bottomleft: 10px;&#xA;    border-bottom-left-radius:  10px;&#xA;    text-align:center;&#xA;    line-height:50px;   &#xA;}&#xA;.searchBox{&#xA;    position:Relative;&#xA;    left:12px;&#xA;}&#xA;.searchBox input{&#xA;    height:20px;&#xA;    padding-left:10px;&#xA;    color: #c0c0c0;&#xA;    line-height:20px;&#xA;    padding-right:25px;&#xA;}&#xA;.searchIco{&#xA;    height: 37px;&#xA;    width: 36px;&#xA;    float: right;&#xA;    background-position: -40px 0;&#xA;    position:relative;&#xA;    left:-33px;&#xA;    top:11px;&#xA;}&#xA;&#xA;/* Menus */&#xA;.topMenu{&#xA;    height:38px;&#xA;    background-color: #339900;&#xA;    font-size: 15px;&#xA;    font-weight: bold;&#xA;    line-height:38px;&#xA;}&#xA;.topMenu a{&#xA;    text-shadow: #114400 1px 1px 1px;&#xA;    display: block;&#xA;    float:left;&#xA;    padding-left: 8px;&#xA;    padding-right: 8px;&#xA;    color:white;&#xA;}&#xA;.subMenu{&#xA;    height: 33px;&#xA;    background-color: #1B5300;&#xA;    font-size: 13px;&#xA;    line-height:33px;&#xA;}&#xA;.subMenu a{&#xA;    display: block;&#xA;    float:left;&#xA;    padding-left: 8px;&#xA;    padding-right: 8px;&#xA;    color:white;&#xA;    text-decoration: none;&#xA;}&#xA;.subLinkLImg{&#xA;    float:left;&#xA;    width:11px;&#xA;    height:23px;&#xA;    background-position: -80px 0;&#xA;}&#xA;.subLinkSelected{&#xA;    background-color:#123700;&#xA;    float:left;&#xA;    height:22px;&#xA;    line-height:22px;&#xA;}&#xA;.subSelWrapper{&#xA;    text-decoration: none;&#xA;    margin-right: -20px;&#xA;    margin-left: 5px;&#xA;}&#xA;.subNormal{&#xA;    margin-left: 25px;&#xA;}   &#xA;.subNormal:hover{&#xA;    background-color:#123700;&#xA;    text-decoration: none;&#xA;}   &#xA;.ssOrient{&#xA;    position:relative;&#xA;    top:6px;&#xA;}&#xA;.subLinkRImg{&#xA;    float:right;&#xA;    width:11px;&#xA;    height:23px;&#xA;    background-repeat:no-repeat;&#xA;    background-position: -91px 0;&#xA;}&#xA;.topSelWrapper{&#xA;    text-decoration: none;&#xA;    margin-right: -20px;&#xA;    margin-left: 5px;&#xA;}&#xA;.topLinkLImg{&#xA;    float:left;&#xA;    width:11px;&#xA;    height:33px;&#xA;    background-position: -105px 0;&#xA;}&#xA;.topLinkRImg{&#xA;    float:right;&#xA;    width:11px;&#xA;    height:33px;&#xA;    background-position: -116px 0;&#xA;}&#xA;.topLinkSelected{&#xA;    background-color:#1B5300;&#xA;    float:left;&#xA;    height:33px;&#xA;    line-height:33px;&#xA;}&#xA;.tlOrient{&#xA;    position:relative;&#xA;    top:5px;&#xA;}&#xA;.topNormal{&#xA;    margin-left: 25px;&#xA;    text-decoration: none;&#xA;}&#xA;.topNormal:hover{&#xA;    background-color:#2B8200;&#xA;}&#xA;&#xA;/* Download box link */&#xA;.downloadBox{&#xA;    display: block;&#xA;    background-position: -134px 0;&#xA;    width: 215px;&#xA;    height: 55px;&#xA;    margin: 0 auto;&#xA;    text-align:right;&#xA;    color:white;&#xA;    text-transform: uppercase;&#xA;    text-decoration: none;&#xA;}&#xA;.downloadHead{&#xA;    font-weight:bold;&#xA;    font-size:17px;&#xA;    padding-top:14px;&#xA;    padding-right: 15px;&#xA;}&#xA;.downloadSize{&#xA;    padding-right: 15px;&#xA;    font-size:14px;&#xA;    margin-top: -3px;&#xA;}&#xA;&#xA;/* Other */&#xA;.moreInfoLink{&#xA;    display:block;&#xA;    color:white;&#xA;    font-size:12px;&#xA;    font-weight:bold;&#xA;    text-decoration: none;&#xA;    float:right;&#xA;    height:17px;&#xA;    background-color:#3366CC;&#xA;    text-align:center;&#xA;    padding:0 12px 0 12px;&#xA;    line-height:17px;&#xA;    min-width:100px;&#xA;    -moz-border-radius: 10px;&#xA;    border-radius:  10px;&#xA;    margin-top:-12px;&#xA;    margin-bottom:10px;&#xA;    clear:both;&#xA;}&#xA;.moreInfoLink:hover{&#xA;    text-decoration:underline;&#xA;    background-color: #537DD5;&#xA;}&#xA;.thinCol{&#xA;    float:left;&#xA;    width:270px;&#xA;}&#xA;.wideCol{&#xA;    float:left;&#xA;    margin-right:10px;&#xA;    width:470px;&#xA;}&#xA;.newsWrapper{&#xA;    position:relative;&#xA;    top: 5px;&#xA;}&#xA;.halfColSpacer{&#xA;    width:4%;&#xA;    float:left;&#xA;}&#xA;.halfColWrapper{&#xA;    float:left;&#xA;    width:48%;  &#xA;}&#xA;.spotLightImg{&#xA;    float:left;&#xA;    margin-right:15px;&#xA;    -moz-border-radius: 10px;&#xA;    border-radius:  10px;&#xA;    -moz-box-shadow: 3px 3px 3px #444;&#xA;    -webkit-box-shadow: 3px 3px 3px #444;&#xA;    box-shadow: 3px 3px 3px #444;&#xA;    width: 90px;&#xA;    height: 90px;&#xA;}&#xA;.slideShowWrapper img{&#xA;    width:470px;&#xA;    height: 261px;&#xA;    border: 0;&#xA;}&#xA;.slideShowWrapper a{&#xA;    text-decoration: none;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I've tried really hard to design this with progressive enhancement in mind, so I think it degrades quite nicely.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;IE7 and below aren't supported.  I am completely fine with taking that decision.  I'm considering adding some sort of notification though.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It's tested in Safari, FF, IE8 and Chrome.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I've used a sprite image to improve load speed.  CSS isn't compressed/optimised yet, I'll do that later.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Comments on CSS/HTML/JS are all welcome.  I really want to nail this as being as near to perfect as possible.  Main areas of importance are:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;SEO friendly&lt;/li&gt;&#xA;&lt;li&gt;Fast and responsive&lt;/li&gt;&#xA;&lt;li&gt;Accessible&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="154" LastEditorUserId="54718" LastEditDate="2015-05-02T19:32:01.893" LastActivityDate="2015-05-02T19:32:01.893" Title="Demo of advertisment website" Tags="&lt;javascript&gt;&lt;css&gt;&lt;html&gt;" AnswerCount="3" CommentCount="0" FavoriteCount="0" />
  <row Id="1078" PostTypeId="2" ParentId="1076" CreationDate="2011-03-02T09:44:47.063" Score="15" Body="&lt;ol&gt;&#xA;&lt;li&gt;&lt;p&gt;You can use an &lt;em&gt;Extract Method&lt;/em&gt; refactoring to get rid of the duplicate code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private static string GetExportFilePath(string csvFilePath, DateTime date, string fileSuffix)&#xA;{&#xA;    return string.Format(&quot;{0}{1:yyyy-MM-dd}-{2}.csv&quot;, csvFilePath, date, fileSuffix);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;I would add those &lt;code&gt;selectedExportType&lt;/code&gt; and &lt;code&gt;path&lt;/code&gt; variables as parameters to the &lt;code&gt;Export()&lt;/code&gt; method. I hope they are not used anywhere. It is usually pretty subjective whether to add something as method parameters or leave it as class member, but here I would definitely pass them as parameters. I assume this class is a “View” since you have button click event handlers, and I also tend to move such methods out from the views.&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;If we use these two ideas, your event handlers would be simplified to:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private void btnBuildingList_Click(object sender, EventArgs e)&#xA;{&#xA;    var path = GetExportFilePath(csvFilePath, datDate.DateTime, &quot;BuildingList.csv&quot;);&#xA;    Export((int)ExportType.Building, path);&#xA;}&#xA;&#xA;private void btnOwnerList_Click(object sender, EventArgs e)&#xA;{&#xA;    var path = GetExportFilePath(csvFilePath, datDate.DateTime, &quot;OwnerList.csv&quot;);&#xA;    Export((int)ExportType.Persons, path);&#xA;}&#xA;&#xA;private void btnFacts_Click(object sender, EventArgs e)&#xA;{&#xA;    var path = GetExportFilePath(csvFilePath, datDate.DateTime, &quot;FactsData.csv&quot;);&#xA;    Export((int)ExportType.Facts, path);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="645" LastEditorUserId="21609" LastEditDate="2015-11-21T17:43:30.967" LastActivityDate="2015-11-21T17:43:30.967" CommentCount="0" />
  <row Id="1079" PostTypeId="2" ParentId="1076" CreationDate="2011-03-02T10:06:12.983" Score="8" Body="&lt;p&gt;In addition to what @Snowbear suggests. I thought you should know that all button's click event can be pointed to the same event handler. You can then distinguish each one using the sender parameter.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I prefer @Snowbear's recommendation but I mention this because many people don't seem to know this can be done.&lt;/p&gt;&#xA;" OwnerUserId="2263" LastActivityDate="2011-03-02T10:06:12.983" CommentCount="0" />
  <row Id="1081" PostTypeId="2" ParentId="828" CreationDate="2011-03-02T11:23:35.747" Score="19" Body="&lt;p&gt;Console.Write is horribly slow. I mean it's not &lt;em&gt;that&lt;/em&gt; bad, but it's worse than you might think.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Try something like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if((numberToCheck + 1) % 1000 == 0)&#xA;   Console.Write(&quot;Processing: &quot; + numberToCheck);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I've had many cases where updating the console less often resulted in a massive speed boost. A good rule is not to update the console more than a few times per second.&lt;/p&gt;&#xA;" OwnerUserId="2229" LastActivityDate="2011-03-02T11:23:35.747" CommentCount="3" />
  <row Id="1082" PostTypeId="1" CreationDate="2011-03-02T11:26:32.510" Score="3" ViewCount="423" Body="&lt;p&gt;I have the following code which is a private method inside the form and retrieve all context menus from the form. I feel, that it is not that concise as it should be. Would be grateful for any suggestions.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;  private IEnumerable&amp;lt;ContextMenuStrip&amp;gt; GetContextMenus()&#xA;    {&#xA;        var type = this.GetType();&#xA;        var fields = type.GetFields(BindingFlags.NonPublic | BindingFlags.Instance);&#xA;        var contextMenus = fields.Where(f =&amp;gt; f.GetValue(this).GetType() == typeof(ContextMenuStrip));&#xA;        var menus = contextMenus.Select(f=&amp;gt; f.GetValue(this));&#xA;        return menus.Cast&amp;lt;ContextMenuStrip&amp;gt;();        &#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerDisplayName="user2264" LastActivityDate="2013-10-24T09:15:47.003" Title="Retrieving context menus from the form" Tags="&lt;c#&gt;&lt;.net&gt;&lt;winforms&gt;" AnswerCount="1" CommentCount="1" />
  <row Id="1083" PostTypeId="2" ParentId="1077" CreationDate="2011-03-02T11:39:08.193" Score="5" Body="&lt;p&gt;I didn't have a look in detail, but some ideas/observations/remarks:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;You might save some &lt;code&gt;div&lt;/code&gt; elements with using the &lt;code&gt;float&lt;/code&gt; style (especially in your header). Try to avoid using &lt;code&gt;div&lt;/code&gt;s for styling only and use the logical corresponding tags (for example in &lt;code&gt;&amp;lt;div class=&quot;downloadHead&quot;&amp;gt;Download&amp;lt;/div&amp;gt;&lt;/code&gt;).&lt;/li&gt;&#xA;&lt;li&gt;Menus should be lists (&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;) from a logic point of view (e.g. &lt;a href=&quot;http://www.webdesignerwall.com/tutorials/css-menu-list-design/&quot;&gt;like here&lt;/a&gt;)&lt;/li&gt;&#xA;&lt;li&gt;Try to put all javascript includes at the end where possible (this has some disadvantages though, &lt;a href=&quot;http://ncsuwebdev.ning.com/forum/topics/javascript-in-the-body-at-the&quot;&gt;(one of many discussions about that topic)&lt;/a&gt;)&lt;/li&gt;&#xA;&lt;li&gt;As long as your code doesn't become more complicated it should render fast. I think your biggest problem will be the underlying application (assuming the site is not static). &lt;a href=&quot;http://developer.yahoo.com/performance/rules.html&quot;&gt;Yahoo&lt;/a&gt; has some great guidelines on how to speed up websites. &lt;/li&gt;&#xA;&lt;li&gt;Accssible: You're missing a lot of &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;alt&lt;/code&gt; tags which are especially important for screen-readers (they also require the elements to be in a logical order, how to optimize a website for them is out of scope here). &lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="98" LastActivityDate="2011-03-02T11:39:08.193" CommentCount="2" />
  <row Id="1084" PostTypeId="2" ParentId="1082" CreationDate="2011-03-02T11:46:17.413" Score="2" Body="&lt;p&gt;I can't imagine why do you do this via Reflection, I believe the same can be done by walking through &lt;code&gt;Controls&lt;/code&gt; tree. Your method will not work if context menu has property &lt;code&gt;Generate member&lt;/code&gt; set to &lt;code&gt;false&lt;/code&gt; in designer.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var contextMenus = fields.Where(f =&amp;gt; f.GetValue(this).GetType() == typeof(ContextMenuStrip));&#xA;var menus = contextMenus.Select(f=&amp;gt; f.GetValue(this));&#xA;return menus.Cast&amp;lt;ContextMenuStrip&amp;gt;(); &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Can be replaced with:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;return fields.Select(f =&amp;gt; f.GetValue(this)).OfType&amp;lt;ContextMenuStrip&amp;gt;();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="645" LastActivityDate="2011-03-02T11:46:17.413" CommentCount="1" />
  <row Id="1085" PostTypeId="2" ParentId="1071" CreationDate="2011-03-02T12:56:34.607" Score="10" Body="&lt;pre&gt;&lt;code&gt;    if(lines%2==0){boolean even = true;}     &#xA;    else{boolean even = false;} &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Does this work for you?  First, it looks like this makes the &lt;em&gt;even&lt;/em&gt; variable only have scope in the decision block.  You shouldn't be able to reference this further down in the code if you are declaring it in the braces.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also, you can probably get rid of the if/else by just using the logic test to define the &lt;em&gt;even&lt;/em&gt; variable:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;boolean even = (lines%2 == 0); //parens for clarity&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="122" LastActivityDate="2011-03-02T12:56:34.607" CommentCount="0" />
  <row Id="1086" PostTypeId="2" ParentId="1077" CreationDate="2011-03-02T13:37:56.763" Score="4" Body="&lt;p&gt;Regarding speed, I don't think you have anything to worry about. As @Fgo mentioned, that typically has more to do with your application - not your static pages (unless they're enormous with tons of pictures and the like).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;When you're speaking of SEO and accessibility, those are really two sides to the same coin. It's important to know how your site will look in a text-only browser. Your page example will be usable, but a tad confusing without images or layout tags.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;First of all, only one &lt;code&gt;&amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt;&lt;/code&gt; should appear on any single page. It should also typically be similar to your page title. I also noticed that you don't have a &lt;code&gt;&amp;lt;meta keywords=&quot;&quot; /&amp;gt;&lt;/code&gt; tag (important). Additionally, I usually like to include my &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; and my page's main and most important &lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt; immediately after the open &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag. Wrap this in a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; and you can place it wherever you want later.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;@Fgo recommended that you should place your menu in an &lt;code&gt;&amp;lt;ul&amp;gt;&amp;lt;/ul&amp;gt;&lt;/code&gt; which I think is a stylistic preference, and it's also pretty common practice. It's my opinion that a site's navigation belongs right below the first group of body text and again at the bottom of the page. This too can be moved wherever you want later in your CSS. Search engines want to see the meat-and-potatoes of your site as soon as possible and then branch off quickly without obstruction.&lt;/p&gt;&#xA;" OwnerUserId="1706" LastEditorUserId="1706" LastEditDate="2011-03-03T03:42:06.217" LastActivityDate="2011-03-03T03:42:06.217" CommentCount="0" />
  <row Id="1089" PostTypeId="1" AcceptedAnswerId="1090" CreationDate="2011-03-02T14:39:16.883" Score="5" ViewCount="235" Body="&lt;p&gt;I have 3 methods(* BindingSource are bindingsources, context is data context, cache* -are some List for cache operations):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; private void AddUpdateRowDocuments()&#xA;        {&#xA;            try&#xA;            {&#xA;                tRANSMITDOCDOCUMENTSRELATIONSBindingSource.EndEdit();&#xA;                var t = tRANSMITDOCDOCUMENTSRELATIONSBindingSource.Current as WcfDataServiceReference.TRANSMIT_DOC_DOCUMENTS_RELATIONS;&#xA;                if (t.TRANSMIT_DOC_ID == 0)&#xA;                {&#xA;                    if (!cachetddrList.Contains(t))&#xA;                    {&#xA;                        cachetddrList.Add(t);&#xA;                    }&#xA;                    return;&#xA;                }&#xA;                context.UpdateObject(t);&#xA;            }&#xA;            catch (Exception ex)&#xA;            {&#xA;                logger.ErrorException(string.Empty, ex);&#xA;            }&#xA;        }&#xA;private void AddUpdateRowOrganizations()&#xA;    {&#xA;        try&#xA;        {&#xA;            tRANSMITDOCORGANIZATIONRELATIONSBindingSource.EndEdit();&#xA;            var t = tRANSMITDOCORGANIZATIONRELATIONSBindingSource.Current as WcfDataServiceReference.TRANSMIT_DOC_ORGANIZATION_RELATIONS;&#xA;            if (t.TRANSMIT_DOC_ID == 0)&#xA;            {&#xA;                if (!cachetdorList.Contains(t))&#xA;                {&#xA;                    cachetdorList.Add(t);&#xA;                }&#xA;                return;&#xA;            }&#xA;            context.UpdateObject(t);&#xA;        }&#xA;        catch (Exception ex)&#xA;        {&#xA;            logger.ErrorException(string.Empty, ex);&#xA;        }&#xA;    }&#xA;private void AddUpdateRowPartators()&#xA;        {&#xA;            try&#xA;            {&#xA;                tRANSMITDOCPARTATORRELATIONSBindingSource.EndEdit();&#xA;                var t = tRANSMITDOCPARTATORRELATIONSBindingSource.Current as WcfDataServiceReference.TRANSMIT_DOC_PARTATOR_RELATIONS;&#xA;                if (t.TRANSMIT_DOC_ID == 0)&#xA;                {&#xA;                    if (!cachetdprList.Contains(t))&#xA;                    {&#xA;                        cachetdprList.Add(t);&#xA;                    }&#xA;                    return;&#xA;                }&#xA;                context.UpdateObject(t);&#xA;            }&#xA;            catch (Exception ex)&#xA;            {&#xA;                logger.ErrorException(string.Empty, ex);&#xA;            }&#xA;        }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Any thoughts on how to improve them? My inner sense says that they can be turned into one generic method, but i have little experience with generics, so cant say if i am right.&lt;/p&gt;&#xA;" OwnerUserId="2268" LastEditorUserId="2268" LastEditDate="2011-03-02T15:06:15.270" LastActivityDate="2011-03-02T15:11:04.493" Title="Suggest how to extract method" Tags="&lt;c#&gt;&lt;linq&gt;" AnswerCount="1" CommentCount="0" />
  <row Id="1090" PostTypeId="2" ParentId="1089" CreationDate="2011-03-02T14:48:11.667" Score="4" Body="&lt;p&gt;Something along the lines of this. Generics aren't that difficult. Just replace every occurance of 'some desired type' with the generic identifier.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private void AddUpdateRow&amp;lt;T&amp;gt;(BindingSource bindingSource, List&amp;lt;T&amp;gt; cachedList)&#xA;    where T : ITransmitDocId&#xA;{&#xA;    try&#xA;    {&#xA;        bindingSource.EndEdit();&#xA;        T t = bindingSource.Current as T;&#xA;        if (t.TRANSMIT_DOC_ID == 0)&#xA;        {&#xA;            if (!cachedList.Contains(t))&#xA;            {&#xA;                cachedList.Add(t);&#xA;            }&#xA;            return;&#xA;        }&#xA;        context.UpdateObject(t);&#xA;    }&#xA;    catch (Exception ex)&#xA;    {&#xA;        logger.ErrorException(string.Empty, ex);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The where constraint in the function definition should indicate a common interface/class in which &lt;code&gt;TRANSMIT_DOC_ID&lt;/code&gt; is defined.&lt;/p&gt;&#xA;" OwnerUserId="2254" LastEditorUserId="2254" LastEditDate="2011-03-02T15:11:04.493" LastActivityDate="2011-03-02T15:11:04.493" CommentCount="7" />
  <row Id="1091" PostTypeId="1" AcceptedAnswerId="1092" CreationDate="2011-03-02T14:54:17.263" Score="8" ViewCount="435" Body="&lt;p&gt;How can I use a more generic method to clean up the redundancy in the switch statement below?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'm working on an ASP.NET webforms app that will have five identical user controls that I will be showing and hiding based on the value of a dropdown list. (I have already been down the path of trying to add and remove the controls dynamically--the issue of managing the view states for the controls would have been very complicated, so in the interest of shipping I'm opting for a fixed number of controls.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The approach I'm currently using works but isn't very elegant: &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;protected void DisplayUserControls(int numberOfControls)&#xA;{&#xA;    switch (numberOfControls)&#xA;    {&#xA;        case 2:&#xA;            UserControl1.Visible = true;&#xA;            UserControl2.Visible = true;&#xA;            UserControl3.Visible = false;&#xA;            break;&#xA;&#xA;        case 3:&#xA;            UserControl1.Visible = true;&#xA;            UserControl2.Visible = true;&#xA;            UserControl3.Visible = true;&#xA;            break;&#xA;&#xA;        default:&#xA;            UserControl1.Visible = true;&#xA;            UserControl2.Visible = false;&#xA;            UserControl3.Visible = false;&#xA;            break;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;What are some options here? The best I can come up with is using numberOfControls to build the name of the control, but that seems hacky. Suggestions appreciated.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;EDIT: I implemented a solution similar to the accepted answer below. I'm stuck on loading up the controls in the list. The commented out code is more along the lines of what I'd like to do but can't get it working. The uncommented code works. Suggestions? &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private List&amp;lt;ShiftControl&amp;gt; PopulateShiftControlList()&#xA;{&#xA;    ShiftControl shiftControlList = new List&amp;lt;ShiftControl&amp;gt;();&#xA;&#xA;    //ControlCollection panelControls = ShiftPanel.Controls;&#xA;&#xA;    //foreach (ShiftControl control in panelControls)&#xA;    //{&#xA;    //    shiftControlList.Add(control);&#xA;    //}&#xA;&#xA;    shiftControlList.Add(ShiftControl1);&#xA;    shiftControlList.Add(ShiftControl2);&#xA;    shiftControlList.Add(ShiftControl3);&#xA;    shiftControlList.Add(ShiftControl4);&#xA;&#xA;    return shiftControlList;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2196" LastEditorUserId="2196" LastEditDate="2011-03-02T20:13:21.527" LastActivityDate="2011-03-03T01:24:29.500" Title="Cleaning up a redundant switch statement" Tags="&lt;c#&gt;&lt;asp.net&gt;" AnswerCount="3" CommentCount="2" FavoriteCount="1" />
  <row Id="1092" PostTypeId="2" ParentId="1091" CreationDate="2011-03-02T14:58:59.523" Score="8" Body="&lt;p&gt;I would create a list of usercontrols. Based on the amount of controls that need to be visible, traverse the list and set x controls to visible.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;protected void DisplayUserControls(List&amp;lt;UserControl&amp;gt; controls, int numberOfControls)&#xA;{&#xA;    Contract.Requires( numberOfControls &amp;gt;= 0 &amp;amp;&amp;amp; numberOfControls &amp;lt;= controls.Count );&#xA;&#xA;    for ( int i = 0; i &amp;lt; numberOfControls; ++i )&#xA;    {&#xA;        controls[ i ].Visible = true;&#xA;    }&#xA;    for ( int i = numberofControls; i &amp;lt; controls.Count; ++i )&#xA;    {&#xA;        controls[ i ].Visible = false;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Or rather in one go:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;protected void DisplayUserControls(List&amp;lt;UserControl&amp;gt; controls, int numberOfControls)&#xA;{&#xA;    Contract.Requires( numberOfControls &amp;gt;= 0 &amp;amp;&amp;amp; numberOfControls &amp;lt;= controls.Count );&#xA;&#xA;    for ( int i = 0; i &amp;lt; controls.Count; ++i )&#xA;    {&#xA;        controls[ i ].Visible = i &amp;lt; numberOfControls;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2254" LastActivityDate="2011-03-02T14:58:59.523" CommentCount="6" />
  <row Id="1093" PostTypeId="2" ParentId="1091" CreationDate="2011-03-02T14:59:01.140" Score="1" Body="&lt;p&gt;First thought:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;UserControl1.Visible = true;&#xA;UserControl2.Visible = true;&#xA;UserControl3.Visible = true;&#xA;&#xA;switch (numberOfControls)&#xA;{&#xA;   case 1:&#xA;      UserControl2.Visible = false;&#xA;      UserControl3.Visible = false;&#xA;      break;&#xA;   case 2:&#xA;      UserControl3.Visible = false;&#xA;      break;&#xA;   case 3:&#xA;} &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;EDIT: New idea:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Arraylist controls;&#xA;&#xA;for (int x=0; x&amp;lt;numberOfControls; x++)&#xA;{&#xA;   ((Control)controls.get(x)).Visible = true;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="110" LastEditorUserId="110" LastEditDate="2011-03-02T15:14:04.823" LastActivityDate="2011-03-02T15:14:04.823" CommentCount="0" />
  <row Id="1094" PostTypeId="2" ParentId="1076" CreationDate="2011-03-02T15:17:33.177" Score="3" Body="&lt;p&gt;I would push the path formatting code down into the &quot;Export&quot; function. Creating a path formatting function merely adds noise to the program.  I would modify the &quot;Export&quot; function to take one parameter of type ExportType.  This parameter can be used to determine the type of export as well as the file prefix string by putting the file prefixes in a string array in which the strings are ordered the same as the class constants or enumeration.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Note: this example assumes that BuildingList resolves to 0, OwnerList resolves to 1, and FactsData resolves to 2.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private void Export( ExportType typeOfExport )&#xA;{&#xA;&#xA;    string[] exportPrefixes = { &quot;BuildingList&quot;, &quot;OwnerList&quot;, &quot;FactsData&quot; };&#xA;&#xA;    string path = csvFilePath + String.Format(&quot;{0:yyyy-MM-dd}&quot;, datDate.DateTime) + &quot;-&quot; +  exportPrefixes[(int)typeOfExport] + &quot;.csv&quot;;&#xA;&#xA;   ...&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;As Shiv Kumar mentioned, one can create a single event and use the parameter &quot;sender&quot; to determine the caller.  In this case, we would have something like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; private void unified_Click(object sender, EventArgs e)&#xA; {&#xA;     if (sender is btnBuildingList)&#xA;         Export(ExportType.Building);&#xA;     else if (sender is btnOwnderList)&#xA;         Export(ExportType.Owner);&#xA;     else if (sender is btnFacts)&#xA;         Export(ExportType.Facts);&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Whether or not, you feel that a unified approach is cleaner is up to you.&lt;/p&gt;&#xA;" OwnerUserId="2274" LastEditorUserId="2274" LastEditDate="2011-03-02T18:14:17.237" LastActivityDate="2011-03-02T18:14:17.237" CommentCount="0" />
  <row Id="1095" PostTypeId="1" AcceptedAnswerId="1096" CreationDate="2011-03-02T18:09:03.227" Score="4" ViewCount="309" Body="&lt;p&gt;Is this, technically, a recursive function? It only gets called once by itself, but it cleaned up my code quite a bit, I think.  Or, does it needlessly complicate the code?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;sub check_backlog {&#xA;    my $topic        = shift;&#xA;    my $prev_backlog = shift;&#xA;    my $backlog      = undef;&#xA;    my @status = `$CMD -topicstat $topic`;&#xA;    foreach (@status) {&#xA;        if (/Message count: (\d+)/) {&#xA;            $backlog = $LAST_PAREN_MATCH;&#xA;            if ( !$prev_backlog &amp;amp;&amp;amp; $backlog &amp;gt; 1 ) {&#xA;                sleep $topic_wait_time;&#xA;                check_backlog( $topic, $backlog );&#xA;            }&#xA;            elsif ( $backlog &amp;gt; $prev_backlog ) {&#xA;                check_over_thresholds($backlog);&#xA;            }&#xA;        }&#xA;    }&#xA;    return $backlog;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2002" LastEditorUserId="7076" LastEditDate="2012-01-27T15:16:00.400" LastActivityDate="2012-01-27T15:16:00.400" Title="Is calling a function only twice a good use of recursion?" Tags="&lt;perl&gt;&lt;subroutine&gt;" AnswerCount="2" CommentCount="6" />
  <row Id="1096" PostTypeId="2" ParentId="1095" CreationDate="2011-03-02T18:11:50.977" Score="3" Body="&lt;p&gt;Yes, every function which calls itself is considered a &lt;a href=&quot;http://en.wikipedia.org/wiki/Recursion_%28computer_science%29&quot; rel=&quot;nofollow&quot;&gt;recursive function&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Recursion is really useful when traversing trees and such.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As I don't fully understand Perl, I can't really tell whether this case is proper use of recursion, perhaps also provide the intent of your code.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;UPDATE&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you simply want to see whether data is passing (or not passing) through a queue, I wouldn't find recursion to be a suitable implemention.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I would expect a function which returns either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; after a given amount of time, or immediately when data is passing through.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Consider the following pseudo code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function isDataPassing( queue, time )&#xA;{&#xA;   headOfQueue = queue.peek();&#xA;   dataPassing = false;&#xA;   while ( timePassed &amp;lt; time )&#xA;   {&#xA;       if ( headOfQueue != queue.peek() )&#xA;       {&#xA;           dataPassing = true;&#xA;           break;&#xA;       }&#xA;   }&#xA;&#xA;   return dataPassing;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I can't help you with how you would go about implementing this in Perl. StackOverflow is a better location to ask such a question.&lt;/p&gt;&#xA;" OwnerUserId="2254" LastEditorUserId="10387" LastEditDate="2012-01-27T15:14:18.440" LastActivityDate="2012-01-27T15:14:18.440" CommentCount="2" />
  <row Id="1097" PostTypeId="2" ParentId="1095" CreationDate="2011-03-02T18:49:46.403" Score="1" Body="&lt;p&gt;I don't know Perl well enough, but this looks suspicious to me. On the one hand, you return a value from &lt;code&gt;check_backlog&lt;/code&gt; with:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;return $backlog;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;But when calling &lt;code&gt;check_backlog&lt;/code&gt; you don't use the return value at all!&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;check_backlog( $topic, $backlog );&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The only result of the recursive call is that it may &lt;code&gt;sleep&lt;/code&gt; some time, but it will not affect returned value.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But again, I know only a little Perl, so I might be wrong.&lt;/p&gt;&#xA;" OwnerUserId="1492" LastEditorUserId="10387" LastEditDate="2012-01-27T15:14:10.950" LastActivityDate="2012-01-27T15:14:10.950" CommentCount="2" />
  <row Id="1098" PostTypeId="2" ParentId="558" CreationDate="2011-03-02T20:16:47.237" Score="3" Body="&lt;p&gt;There is a memory leak in &lt;code&gt;Grid::row_iter()&lt;/code&gt;, et al. Why use &lt;code&gt;new&lt;/code&gt; in this case? I'd prefer&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;RowIterator row_iter(int row){return RowIterator(this, row);}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2286" LastActivityDate="2011-03-02T20:16:47.237" CommentCount="1" />
  <row Id="1099" PostTypeId="1" CreationDate="2011-03-02T19:47:02.693" Score="7" ViewCount="4103" Body="&lt;p&gt;This is a simple linked list program which creates a list by appending an object at the tail. It compiles and runs perfectly.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Is the coding style, logic etc are fine? How can I improve this program?  Is there anything redundant or did I miss out some important things?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;&#xA;#include&amp;lt;string&amp;gt;&#xA;using namespace std;&#xA;class Link_list {&#xA;private:&#xA;    string name;&#xA;    Link_list *next_node;&#xA;public:&#xA;    void add_item(Link_list *);&#xA;    void add_item();&#xA;    friend void show(Link_list *sptr)&#xA;    {&#xA;        while(sptr) {&#xA;        cout &amp;lt;&amp;lt; sptr-&amp;gt;name &amp;lt;&amp;lt; endl;&#xA;        sptr = sptr-&amp;gt;next_node;&#xA;        }&#xA;     }&#xA;};&#xA;&#xA;void Link_list::add_item()&#xA;{&#xA;    cin &amp;gt;&amp;gt; name;&#xA;    next_node = NULL;&#xA;}&#xA;void Link_list::add_item(Link_list *pptr)&#xA;{&#xA;    cin &amp;gt;&amp;gt; name;&#xA;    next_node = NULL;&#xA;     pptr-&amp;gt;next_node = this;&#xA; }&#xA;&#xA;&#xA;int main()&#xA;{&#xA;    Link_list *str_ptr = NULL;&#xA;    Link_list *curr_ptr = str_ptr;&#xA;    Link_list *prev_ptr;&#xA;    char ch = 'y';&#xA;&#xA;    str_ptr = new(Link_list);&#xA;    str_ptr-&amp;gt;add_item();&#xA;    curr_ptr = str_ptr;&#xA;    do&#xA;    {&#xA;        prev_ptr = curr_ptr;&#xA;        curr_ptr = new(Link_list);&#xA;        curr_ptr-&amp;gt;add_item(prev_ptr);&#xA;        cout &amp;lt;&amp;lt;&quot;Do you want to add the item&quot; &amp;lt;&amp;lt; endl;&#xA;        cin &amp;gt;&amp;gt; ch;&#xA;    }while(ch != 'n');&#xA;    show(str_ptr);&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2305" OwnerDisplayName="user634615" LastEditorUserId="22222" LastEditDate="2014-05-20T17:56:01.430" LastActivityDate="2014-05-20T17:56:01.430" Title="Linked List program" Tags="&lt;c++&gt;&lt;linked-list&gt;" AnswerCount="6" CommentCount="4" />
  <row Id="1101" PostTypeId="2" ParentId="1099" CreationDate="2011-03-02T19:56:47.923" Score="3" Body="&lt;p&gt;You should use std::list...&#xA;But if you only wanna learn how the Linked List works, i suggest the using of templates classes and functions for make the code more generic as possible...&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It isnt very difficult:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;template &amp;lt;typename T&amp;gt; &#xA;&#xA;class List&#xA;{&#xA;public:&#xA;    //Example declare the &quot;get&quot; and return a T element&#xA;    //where T is a generic element or data type&#xA;    T get_front() const;&#xA;private:&#xA;    T data;&#xA;    List&amp;lt;T&amp;gt; *firt_Ptr;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In the main file:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;int main()&#xA;{&#xA;    ...&#xA;    List&amp;lt; int &amp;gt; listofints;&#xA;    List&amp;lt; double &amp;gt; listofdoubles;&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerDisplayName="fbin" LastActivityDate="2011-03-02T20:03:19.943" CommentCount="0" />
  <row Id="1102" PostTypeId="2" ParentId="1099" CreationDate="2011-03-02T19:56:53.363" Score="5" Body="&lt;p&gt;You can't remove elements from it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There is no search feature.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;All you can do is add stuff to it and then have its contents streamed to STDOUT.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It can only hold strings.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Blocking for user-input in the List class itself seems odd; usually you'd request the input in the calling scope and then pass the resultant new string to your &lt;code&gt;add&lt;/code&gt; member function.&lt;/p&gt;&#xA;" OwnerUserId="2503" OwnerDisplayName="Tomalak Geret'kal" LastActivityDate="2011-03-02T19:56:53.363" CommentCount="2" />
  <row Id="1103" PostTypeId="2" ParentId="1099" CreationDate="2011-03-02T20:04:12.117" Score="3" Body="&lt;p&gt;In &lt;code&gt;main()&lt;/code&gt; you are managing resources. Since the program manages resources( i.e., using &lt;code&gt;new&lt;/code&gt; operator ), it should also return resources using &lt;code&gt;delete&lt;/code&gt; operator. So, you should start deallocating the resources from the end point of the list before program termination. Else memory leaks prevail. &lt;/p&gt;&#xA;" OwnerUserId="2703" OwnerDisplayName="Mahesh" LastActivityDate="2011-03-02T20:04:12.117" CommentCount="0" />
  <row Id="1104" PostTypeId="2" ParentId="1099" CreationDate="2011-03-02T20:07:51.123" Score="1" Body="&lt;p&gt;Adding to Tomalak answer : &lt;/p&gt;&#xA;&#xA;&lt;p&gt;=&gt; destructor &lt;/p&gt;&#xA;&#xA;&lt;p&gt;You create your linked list but how do you plan to delete it ? &lt;/p&gt;&#xA;&#xA;&lt;p&gt;=&gt; You can only iterate in one way&lt;/p&gt;&#xA;&#xA;&lt;p&gt;When you have 1000 element and you want the last...&lt;/p&gt;&#xA;" OwnerUserId="2291" OwnerDisplayName="Errata" LastActivityDate="2011-03-02T20:12:56.877" CommentCount="1" />
  <row Id="1105" PostTypeId="2" ParentId="1099" CreationDate="2011-03-02T20:08:02.667" Score="4" Body="&lt;p&gt;I'm just going to comment on this from a high level since others have called out other details...&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Calling the object a &lt;code&gt;link_list&lt;/code&gt; is misleading, since it isn't actually the list, but just a node in the full list.  You might want to think about refactoring it so that you have an actual &lt;code&gt;list&lt;/code&gt;, that has &lt;code&gt;list_node&lt;/code&gt;'s internal to it.  Your inserts also shouldn't expose those nodes directly, but have the ability to just take the data they want to insert.  There's no need to expose the behavior of the list to the user.&lt;/p&gt;&#xA;" OwnerUserId="55" OwnerDisplayName="Mark Loeser" LastActivityDate="2011-03-02T20:08:02.667" CommentCount="0" />
  <row Id="1106" PostTypeId="2" ParentId="419" CreationDate="2011-03-02T20:37:43.683" Score="1" Body="&lt;p&gt;I think you invoke undefined behavior in this section:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;std::wstring r(len, L'\0');&#xA;MultiByteToWideChar(CP_ACP, 0, s.c_str(), slength, &amp;amp;r[0], len);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;when you pass &lt;code&gt;&amp;amp;r[0]&lt;/code&gt; as the output parameter to MB2WC.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I don't have the standard handy, but here is what &lt;a href=&quot;http://www.cplusplus.com/reference/string/string/operator%5b%5d/&quot; rel=&quot;nofollow&quot;&gt;cplusplus.com&lt;/a&gt; has to say:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;&lt;code&gt;string::operator[]&lt;/code&gt;&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;The function actually returns &lt;code&gt;data()[ pos ]&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;and&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;&lt;code&gt;string::data&lt;/code&gt;&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;The returned array points to an internal location which should &#xA;  not be modified directly in the program.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;" OwnerUserId="2286" LastActivityDate="2011-03-02T20:37:43.683" CommentCount="0" />
  <row Id="1107" PostTypeId="1" AcceptedAnswerId="1165" CreationDate="2011-03-02T20:38:17.347" Score="6" ViewCount="607" Body="&lt;p&gt;Just as a refresher I put together a simple Map implementation and I would love to get some feedback on it.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;open System&#xA;open System.Collections.Generic&#xA;&#xA;type Node&amp;lt;'a, 'b when 'a : comparison&amp;gt; = {&#xA;    key : 'a&#xA;    value : 'b&#xA;    left : option&amp;lt;Node&amp;lt;'a, 'b&amp;gt;&amp;gt;   &#xA;    right : option&amp;lt;Node&amp;lt;'a, 'b&amp;gt;&amp;gt;&#xA;}&#xA;&#xA;type Map&amp;lt;'a, 'b when 'a : comparison&amp;gt;(root : option&amp;lt;Node&amp;lt;'a, 'b&amp;gt;&amp;gt;) =&#xA;&#xA;    let comparer = LanguagePrimitives.FastGenericComparer&amp;lt;'a&amp;gt;&#xA;&#xA;    let rec add (key : 'a) (value : 'b) (node : Node&amp;lt;'a, 'b&amp;gt;) =&#xA;        match comparer.Compare (key, node.key) with&#xA;        | r when r &amp;lt; 0 -&amp;gt;&#xA;            match node.left with&#xA;            | Some n -&amp;gt;&#xA;                match comparer.Compare (key, n.key) with&#xA;                | r when r &amp;gt; 0 -&amp;gt;&#xA;                    let left = Some { &#xA;                        key = key&#xA;                        value = value &#xA;                        left = node.left &#xA;                        right = None &#xA;                    }&#xA;                    Some { node with left = left }&#xA;                | _ -&amp;gt;&#xA;                    Some { node with left = add key value n }&#xA;            | None -&amp;gt;&#xA;                let left = Some { &#xA;                    key = key&#xA;                    value = value &#xA;                    left = None &#xA;                    right = None &#xA;                }&#xA;                Some { node with left = left }&#xA;        | r when r &amp;gt; 0 -&amp;gt;&#xA;            match node.right with&#xA;            | Some n -&amp;gt;&#xA;                match comparer.Compare (key, n.key) with&#xA;                | r when r &amp;lt; 0 -&amp;gt;&#xA;                    let right = Some { &#xA;                        key = key&#xA;                        value = value &#xA;                        left = None &#xA;                        right = node.right &#xA;                    }&#xA;                    Some { node with right = right }&#xA;                | _ -&amp;gt;&#xA;                    Some { node with right = add key value n }&#xA;            | None -&amp;gt;&#xA;                let right = Some { &#xA;                    key = key&#xA;                    value = value &#xA;                    left = None &#xA;                    right = None &#xA;                }&#xA;                Some { node with right = right }    &#xA;        | _ -&amp;gt; &#xA;            Some { node with value = value }&#xA;&#xA;    let rec find (key : 'a) (node : Node&amp;lt;'a, 'b&amp;gt;) =&#xA;        match comparer.Compare (key, node.key) with&#xA;        | r when r &amp;lt; 0 -&amp;gt;&#xA;            match node.left with&#xA;            | Some node -&amp;gt; find key node&#xA;            | None -&amp;gt; raise (KeyNotFoundException())&#xA;        | r when r &amp;gt; 0 -&amp;gt;&#xA;            match node.right with&#xA;            | Some node -&amp;gt; find key node&#xA;            | None -&amp;gt; raise (KeyNotFoundException())&#xA;        | _ -&amp;gt; node.value      &#xA;&#xA;    member x.Item key =&#xA;        match root with&#xA;        | Some node -&amp;gt; &#xA;            find key node&#xA;        | None -&amp;gt; raise (KeyNotFoundException())            &#xA;&#xA;    member x.Add (key : 'a, value : 'b) =&#xA;        match root with&#xA;        | Some node -&amp;gt; &#xA;            Map (add key value node)&#xA;        | None -&amp;gt;&#xA;            let node = Some { &#xA;                key = key &#xA;                value = value &#xA;                left = None&#xA;                right = None &#xA;            } &#xA;            Map node&#xA;&#xA;    static member Empty = Map&amp;lt;'a, 'b&amp;gt;(None)&#xA;&#xA;    static member FromSeq (s:seq&amp;lt;'a * 'b&amp;gt;) =&#xA;        s &#xA;        |&amp;gt; Seq.fold &#xA;            (fun (m:Map&amp;lt;'a, 'b&amp;gt;) (k, v) -&amp;gt; m.Add (k, v)) &#xA;            Map&amp;lt;'a, 'b&amp;gt;.Empty&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;After running some basic tests I found my implementation is comparable to the &lt;code&gt;FSharpMap&lt;/code&gt;class in performance and sometimes better. Obviously I don't have the time/desire to test this extensively so take that with a grain of salt. I'm wondering if anyone can spot a characteristic of this code that will cause a performance breakdown under certain conditions or for certain types of keys.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Improved Version&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;open System&#xA;open System.Collections.Generic&#xA;&#xA;type Node&amp;lt;'a, 'b when 'a : comparison&amp;gt; = {&#xA;    key : 'a&#xA;    value : 'b&#xA;    height : int&#xA;    left : option&amp;lt;Node&amp;lt;'a, 'b&amp;gt;&amp;gt;   &#xA;    right : option&amp;lt;Node&amp;lt;'a, 'b&amp;gt;&amp;gt;&#xA;}&#xA;&#xA;type Map&amp;lt;'a, 'b when 'a : comparison&amp;gt;(root : option&amp;lt;Node&amp;lt;'a, 'b&amp;gt;&amp;gt;) =&#xA;&#xA;    let comparer = LanguagePrimitives.FastGenericComparer&amp;lt;'a&amp;gt;    &#xA;&#xA;    let height node =&#xA;        match node with&#xA;        | Some node -&amp;gt; node.height&#xA;        | None -&amp;gt; 0  &#xA;&#xA;    let make key value left right =&#xA;        let h = &#xA;            match height left, height right with&#xA;            | l, r when l &amp;gt;= r -&amp;gt; l + 1&#xA;            | l, r -&amp;gt; r + 1&#xA;        Some { &#xA;            key = key; &#xA;            value = value; &#xA;            height = h; &#xA;            left = left; &#xA;            right = right &#xA;        }  &#xA;&#xA;    let balance key value left right =&#xA;        match height left, height right with&#xA;        | l, r when r &amp;gt; l + 2 -&amp;gt;&#xA;            match right with&#xA;            | Some rn -&amp;gt;&#xA;                match height rn.left with&#xA;                | rl when rl &amp;lt;= l + 1 -&amp;gt;&#xA;                    let left = make key value left rn.left &#xA;                    make rn.key rn.value left rn.right&#xA;                | _ -&amp;gt;&#xA;                    match rn.left with&#xA;                    | Some rnl -&amp;gt;&#xA;                        let left = make key value left rnl.left&#xA;                        let right = make rn.key rn.value rnl.right rn.right&#xA;                        make rnl.key rnl.value left right&#xA;                    | None -&amp;gt;&#xA;                        make key value left right&#xA;            | None -&amp;gt; &#xA;                make key value left right&#xA;        | l, r when l &amp;lt;= r + 2 -&amp;gt; &#xA;            make key value left right&#xA;        | l, r -&amp;gt;&#xA;            match left with&#xA;            | Some ln -&amp;gt;&#xA;                match height ln.right with&#xA;                | rl when rl &amp;lt;= l + 1 -&amp;gt;&#xA;                    let right = make key value ln.right right &#xA;                    make ln.key ln.value ln.left right&#xA;                | _ -&amp;gt;&#xA;                    match ln.right with&#xA;                    | Some lnr -&amp;gt;&#xA;                        let left = make ln.key ln.value ln.left lnr.left&#xA;                        let right = make key value lnr.right right&#xA;                        make lnr.key lnr.value left right&#xA;                    | None -&amp;gt;&#xA;                        make key value left right&#xA;            | None -&amp;gt; &#xA;                make key value left right&#xA;&#xA;    let rec add key value node =&#xA;        match comparer.Compare (key, node.key) with&#xA;        | r when r &amp;lt; 0 -&amp;gt;&#xA;            match node.left with&#xA;            | Some n -&amp;gt; &#xA;                balance node.key node.value (add key value n) node.right&#xA;            | None -&amp;gt;&#xA;                let left = Some { &#xA;                    key = key&#xA;                    value = value&#xA;                    height = node.height + 1&#xA;                    left = None&#xA;                    right = None &#xA;                }&#xA;                balance node.key node.value left node.right&#xA;        | r when r &amp;gt; 0 -&amp;gt;&#xA;            match node.right with&#xA;            | Some n -&amp;gt;&#xA;                balance node.key node.value node.left (add key value n)&#xA;            | None -&amp;gt;&#xA;                let right = Some { &#xA;                    key = key&#xA;                    value = value&#xA;                    height = node.height + 1&#xA;                    left = None&#xA;                    right = None &#xA;                }&#xA;                balance node.key node.value node.left right&#xA;        | _ -&amp;gt; &#xA;            Some { node with value = value }&#xA;&#xA;    let rec find key node =&#xA;        match comparer.Compare (key, node.key) with&#xA;        | r when r &amp;lt; 0 -&amp;gt;&#xA;            match node.left with&#xA;            | Some node -&amp;gt; find key node&#xA;            | None -&amp;gt; raise (KeyNotFoundException())&#xA;        | r when r &amp;gt; 0 -&amp;gt;&#xA;            match node.right with&#xA;            | Some node -&amp;gt; find key node&#xA;            | None -&amp;gt; raise (KeyNotFoundException())&#xA;        | _ -&amp;gt; node.value        &#xA;&#xA;    member x.Item key =&#xA;        match root with&#xA;        | Some node -&amp;gt; &#xA;            find key node&#xA;        | None -&amp;gt; raise (KeyNotFoundException())          &#xA;&#xA;    member x.Add (key, value) =&#xA;        match root with&#xA;        | Some node -&amp;gt; &#xA;            Map (add key value node)&#xA;        | None -&amp;gt;&#xA;            let node = Some { &#xA;                key = key &#xA;                value = value &#xA;                height = 1&#xA;                left = None&#xA;                right = None &#xA;            } &#xA;            Map node&#xA;&#xA;    static member Empty = Map&amp;lt;'a, 'b&amp;gt;(None)&#xA;&#xA;    static member OfSeq (s:seq&amp;lt;'a * 'b&amp;gt;) =&#xA;        s &#xA;        |&amp;gt; Seq.fold &#xA;            (fun (m:Map&amp;lt;'a, 'b&amp;gt;) (k, v) -&amp;gt; m.Add (k, v)) &#xA;            Map&amp;lt;'a, 'b&amp;gt;.Empty&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1795" LastEditorUserId="22222" LastEditDate="2016-09-23T05:07:59.240" LastActivityDate="2016-09-23T05:07:59.240" Title="Map implementation in F#" Tags="&lt;f#&gt;&lt;hash-map&gt;" AnswerCount="1" CommentCount="0" FavoriteCount="1" />
  <row Id="1108" PostTypeId="2" ParentId="1022" CreationDate="2011-03-02T20:44:59.503" Score="0" Body="&lt;p&gt;It's much more important to be able to change design in future that to select &quot;the correct design&quot; from the start.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The simple way to have this ability is to hide as much as possible.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Are users happy with one class with virtual function? Hide the knowledge that different birds have or have not separate classes.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Are users OK with delegating creation of bird to your module? Hide all constructors of Bird (or make it abstract).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Internally - use whatever is good for current purposes, and change the internal design once it will become inconvenient.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Thus interface may be the following:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class Bird&#xA;{&#xA;public:&#xA;  virtual void Fly()=0;&#xA;  virtual void Speak()=0;&#xA;};&#xA;class BirdFactory&#xA;{&#xA;public:&#xA;  static Bird *CreateEagle();&#xA;  ...&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Everything other should be hidden either as a private stuff of some class or surrounded with other hints about being internal (namespace &quot;detail&quot;, directory &quot;internal&quot;, etc).&lt;/p&gt;&#xA;" OwnerUserId="2290" LastActivityDate="2011-03-02T20:44:59.503" CommentCount="0" />
  <row Id="1109" PostTypeId="2" ParentId="1030" CreationDate="2011-03-02T22:38:40.460" Score="6" Body="&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python&#xA;# -*- coding: utf-8 -*-&#xA;import functools&#xA;import math&#xA;import time&#xA;&#xA;class Timer(object):&#xA;    def __init__(self):&#xA;        self.__values = []&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You are using prefix __ to denote private attributess. This is perfectly valid and has special support within python. Having said that, I'm not a fan of it. Its designed for use when you are subclassing objects to prevent accidents. I think that if you are not designing your object to be subclassed, you should stick with single underscores.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    def start(self):&#xA;        self.__start = time.time()&#xA;&#xA;        return self&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Some frameworks do make use of this return self paradigm. However, its kinda unusual and will lead to code being confusing if you are not used to it. As it is you don't seem to be making use of this. I'd just get rid of return self. This doesn't seem to be the type of object which works well with the pattern anyways.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    def stop(self):&#xA;        self.__values.append(int(round((time.time() - self.__start) * 1000)))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The operations being performed here are just long enough to come across as awkward, I'd write it as&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;seconds_elapsed = time.time() - self.__start&#xA;milliseconds_elapsed = int(round(seconds_elapsed*1000))&#xA;self.__values.append(milliseconds_elapsed)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;As another note, don't be afraid of floats. You'd probably be better off storing a list of floating point seconds rather then integer milliseconds. The code would be clearer and there is probably no noticeable difference in efficiency. &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;        self.__start = None&#xA;&#xA;        return self&#xA;&#xA;    @property&#xA;    def average(self):&#xA;        return sum(self.__values) / len(self.__values) &#xA;&#xA;    @property&#xA;    def deviation(self):&#xA;        if self.average:&#xA;            return math.sqrt(sum((v - self.average) ** 2 for v in self.__values) / self.runs)&#xA;&#xA;        return 0&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I recommend using the numpy library which has functions to calculate average/stdev/pretty much everything. The math done in numpy will be much more efficient then your python versions. &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    @property&#xA;    def elapsed(self):&#xA;        return sum(self.__values)&#xA;&#xA;    @property&#xA;    def runs(self):&#xA;        return len(self.__values)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I don't like the name Timer for the class because it spends most of its effort keeping track of values not measuring time.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class Profiler(object):&#xA;    __timers = {}&#xA;&#xA;    @staticmethod&#xA;    def info(timer_id):&#xA;        if not Profiler.__timers.has_key(timer_id):&#xA;            raise Exception('Timer not started')&#xA;&#xA;        return Profiler.__timers[timer_id]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you are going to store state on your class object, use classmethod like so:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    @classmethod&#xA;    def info(cls, timer_id):&#xA;        if not cls.__timers.has_key(timer_id):&#xA;            raise Exception('Timer not started')&#xA;&#xA;        return cls.__timers[timer_id]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;There also does not appear to be a good reason to be storing this state statically. I suggest that you really should implement this as a normal object. There are few cases where storing state on a static object is justified.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    def info(self, timer_id):&#xA;        if not self.__timers.has_key(timer_id):&#xA;            raise Exception('Timer not started')&#xA;&#xA;        return self.__timers[timer_id]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Additionally, don't be afraid of exceptions. In python you shouldn't (in general) try to detect whether an exception will be thrown before attempting an operation. Just perform the operation and catch the exception. The above version ends up locating an element in a dictionary twice, which is just a waste. The above function should be implemented as: &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    def info(self, timer_id):&#xA;        try:&#xA;            return self.__timers[timer_id]                 &#xA;        except KeyError:&#xA;            raise Exception('Timer not started')&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Similar comments apply to your other functions.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    @staticmethod&#xA;    def profile(f):&#xA;        @functools.wraps(f)&#xA;        def wrap(self=None, *args, **kwargs):&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You assume that your first parameter will be self (if it exists). Depending on how this is called, self may actually already be bundled into f as a method object. Also, if you are calling a function which is not a method something else will come in there. You shouldn't capture self this way, just let all parameters go into *args&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;            method = self.__class__.__name__ + '.' + f.func_name if self \&#xA;                     else f.func_name&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;As mentioned, you shouldn't capture self the way you do. The correct place to find the class is f.im_class. Be careful! That attribute won't be there on non-methods.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;            Profiler.start(method)&#xA;            r = f(self, *args, **kwargs) if self else f(*args, **kwargs)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I recomment calling r, return_value for better clarity. Also by eliminating self, you'll make this bit of code cleaner&#xA;                Profiler.stop(method)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is actually wrong in the case of recursion as another commenter has pointed out. Also, since Timer is really concerned with keeping track of times, perhaps calculating time spent would be better here. &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;            return r&#xA;&#xA;        return wrap&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Your API is counterintuitive on this point. I'd except a function called profile to profile a function, not return a new function which I then have to call in order to profile it. For what the function does it should be called profiled. &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    @staticmethod&#xA;    def reset(timer_id):&#xA;        Profiler.__timers[timer_id] = Timer()&#xA;&#xA;    @staticmethod&#xA;    def start(timer_id):&#xA;        if not Profiler.__timers.has_key(timer_id):&#xA;            Profiler.reset(timer_id)&#xA;&#xA;        Profiler.__timers[timer_id].start()&#xA;&#xA;    @staticmethod&#xA;    def stop(timer_id):&#xA;        if not Profiler.__timers.has_key(timer_id):&#xA;            raise Exception('Timer not started')&#xA;&#xA;        Profiler.__timers[timer_id].stop()&#xA;&#xA;if __name__ == '__main__':&#xA;    class Test(object):&#xA;        def isPrime(self, n):&#xA;            if n &amp;lt; 2 or (n % 2) == 0:&#xA;                return n == 2&#xA;&#xA;            f = 3&#xA;&#xA;            while (f * f) &amp;lt;= n:&#xA;                if (n % f) == 0:&#xA;                    return False&#xA;&#xA;                f += 2&#xA;&#xA;            return True&#xA;&#xA;        @Profiler.profile&#xA;        def run(self):&#xA;            return filter(self.isPrime, range(1, 1000001))&#xA;&#xA;    test = Test()&#xA;&#xA;    for x in range(5):&#xA;        test.run()&#xA;&#xA;    p = Profiler.info('Test.run')&#xA;    print 'runs = %d' % p.runs&#xA;    print 'elapsed = %d ms' % p.elapsed&#xA;    print 'average = %d ms' % p.average&#xA;    print 'deviation = %d ms' % p.deviation&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I think a better API to implement would be one that works like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    class Test(object):&#xA;        def isPrime(self, n):&#xA;            if n &amp;lt; 2 or (n % 2) == 0:&#xA;                return n == 2&#xA;&#xA;            f = 3&#xA;&#xA;            while (f * f) &amp;lt;= n:&#xA;                if (n % f) == 0:&#xA;                    return False&#xA;&#xA;                f += 2&#xA;&#xA;            return True&#xA;&#xA;        @profiled&#xA;        def run(self):&#xA;            return filter(self.isPrime, range(1, 1000001))&#xA;&#xA;    test = Test()&#xA;&#xA;    for x in range(5):&#xA;        test.run()&#xA;&#xA;    stats = Test.run.stats&#xA;    print 'runs = %d' % stats.runs&#xA;    print 'elapsed = %d ms' % stats.elapsed&#xA;    print 'average = %d ms' % stats.average&#xA;    print 'deviation = %d ms' % stats.deviation&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Essentially, store your Timer object on the function object itself. That will simplify your code considerably because you are using python's name resolution rather then your own.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As a final note, there are plenty of good profiling tools out there for python. You are probably best off using one one of those.&lt;/p&gt;&#xA;" OwnerUserId="1659" LastActivityDate="2011-03-02T22:38:40.460" CommentCount="0" />
  <row Id="1110" PostTypeId="2" ParentId="1091" CreationDate="2011-03-03T01:24:29.500" Score="3" Body="&lt;p&gt;Man, all of these answers are way overkill for this. Just do:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;protected void DisplayUserControls(int numberOfControls)&#xA;{&#xA;    UserControl1.Visible = numberOfControls &amp;gt; 0;&#xA;    UserControl2.Visible = numberOfControls &amp;gt; 1;&#xA;    UserControl3.Visible = numberOfControls &amp;gt; 2;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Simple is good.&lt;/p&gt;&#xA;" OwnerUserId="816" LastActivityDate="2011-03-03T01:24:29.500" CommentCount="3" />
  <row Id="1111" PostTypeId="1" AcceptedAnswerId="1112" CreationDate="2011-03-03T01:47:57.990" Score="1" ViewCount="130" Body="&lt;p&gt;I have a function that returns an array and I want to check that a certain value is not set in the array.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function testFunction() {&#xA;    return array('key' =&amp;gt; 404)&#xA;}&#xA;&#xA;if (testFunction()['key'] &amp;lt; 404) {&#xA;    // stay calm and carry on&#xA;}&#xA;else {&#xA;    // uh oh&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I understand that the above will not work in php 5.3 (or anything below), however, I'd like to know what I should do in the above case. That is - what should I call the temporary array I create for the if statement? Or is there another way of dealing with this situation?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The following is what I would roughly do currently:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function testFunction() {&#xA;    return array('key' =&amp;gt; 404)&#xA;}&#xA;&#xA;$test_array = testFunction();&#xA;&#xA;if ($test_array['key'] &amp;lt; 404) {&#xA;    // stay calm and carry on&#xA;}&#xA;else {&#xA;    // uh oh&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Is this an acceptable thing to do?&lt;/p&gt;&#xA;" OwnerUserId="2300" LastEditorUserId="2300" LastEditDate="2011-03-03T03:01:22.727" LastActivityDate="2011-03-03T03:20:04.437" Title="Best way to use an array that is returned from a function immediately in PHP" Tags="&lt;php&gt;" AnswerCount="2" CommentCount="0" />
  <row Id="1112" PostTypeId="2" ParentId="1111" CreationDate="2011-03-03T02:01:13.710" Score="3" Body="&lt;p&gt;So, .. you want to simply check whether a certain key in an array is set to a certain value.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can't do this directly on the function call because &lt;a href=&quot;http://stackoverflow.com/q/2282051/590790&quot;&gt;older PHP versions don't support array dereferencing&lt;/a&gt;. You are right when saying you'll need an intermediate variable.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The only question remaining is what to name it. Considering that the variable will probably be situated in a really small scope, don't worry about it too much. There is a saying which says, &lt;strong&gt;the bigger the scope, the bigger the name&lt;/strong&gt;. You could just name it &lt;code&gt;$list&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Old replies:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Your code does something else as what&#xA;  you describe? If you want to see&#xA;  whether a given value is present in&#xA;  the array, use &lt;a href=&quot;http://php.net/manual/en/function.in-array.php&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;in_array()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;UPDATE:&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;I believe I understand what you are&#xA;  trying to accomplish now. You just&#xA;  want to see whether the key is set?&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;&lt;a href=&quot;http://php.net/manual/en/function.array-key-exists.php&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;array_key_exists()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;PHP has got a pretty good online API,&#xA;  be sure to check it for existing&#xA;  implementations when looking for a&#xA;  solution.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;" OwnerUserId="2254" LastEditorUserId="2254" LastEditDate="2011-03-03T03:20:04.437" LastActivityDate="2011-03-03T03:20:04.437" CommentCount="4" />
  <row Id="1113" PostTypeId="2" ParentId="1111" CreationDate="2011-03-03T02:43:51.290" Score="1" Body="&lt;p&gt;Your question does not match your code. You ask to check that a key does not exist in the array, yet you are actually testing &lt;em&gt;the value mapped to that key&lt;/em&gt; against some other value, presumably doing something else if the key doesn't exist.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$result = testFunction();&#xA;if (!isset($result['key']) || $result['key'] &amp;lt; 404) {&#xA;    // ok&#xA;}&#xA;else {&#xA;    // panic&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You can create a helper method with a suggestive name that does the full check and use that in your &lt;code&gt;if&lt;/code&gt; clause.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function omgWeGotTheDreaded404() {&#xA;    $result = testFunction();&#xA;    return isset($result['key'] &amp;amp;&amp;amp; $result['key'] &amp;gt;= 404;&#xA;}&#xA;&#xA;...&#xA;&#xA;if (omgWeGotTheDreaded404()) ...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1635" LastActivityDate="2011-03-03T02:43:51.290" CommentCount="2" />
  <row Id="1114" PostTypeId="1" AcceptedAnswerId="1169" CreationDate="2011-03-03T04:13:02.420" Score="5" ViewCount="1968" Body="&lt;p&gt;I would really appreciate it if someone could review my quicksort implementation.  Additionally, I generated my list dynamically and wrote a couple of tests.  Of course, I realize that the tests are not complete, but I decided to stop where I was and see if I could get some feedback.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(defun categorize_list(pivot thelist less more)&#xA;    (let ((comparee (car thelist)) (therest (cdr thelist)))&#xA;      (if (null thelist)&#xA;            (list less more)&#xA;        (if (&amp;lt; comparee pivot)&#xA;          (categorize_list pivot therest (append less (list comparee)) more)&#xA;          (categorize_list pivot therest less (append more (list comparee)))&#xA;        )&#xA;        )&#xA;      )&#xA;  )&#xA;&#xA;(defun quicksort(thelist)&#xA;  (if (null thelist)&#xA;    ()&#xA;      (let (&#xA;            (pivot (car thelist))&#xA;            (therest (cdr thelist))&#xA;        )&#xA;        (let ((categorized_list (categorize_list pivot therest () ())))&#xA;&#xA;            (append (quicksort (nth 0 categorized_list)) (list pivot) (quicksort (nth 1 categorized_list)))&#xA;        )&#xA;        )&#xA;      )&#xA;  )&#xA;&#xA;&#xA;(defun make_list(thelist remaininglength)&#xA;  (if (eq remaininglength 0)&#xA;    thelist&#xA;    (make_list (append (list (random 25)) thelist) (- remaininglength 1))&#xA;  )&#xA;  )&#xA;&#xA;(defun should_be_least_to_greatest(thelist)&#xA;  (if (&amp;lt; (length thelist) 2)&#xA;       nil &#xA;      (if (&amp;lt;= (nth 0 thelist) (nth 1 thelist))&#xA;        (should_be_least_to_greatest (cdr thelist))&#xA;        (error &quot;Out of order: ~d !&amp;lt; ~d ~%&quot; (nth 0 thelist) (nth 1 thelist))&#xA;        )&#xA;      )&#xA;  )&#xA;&#xA;(defun test_should_become_in_order(thelist)&#xA;  (let ((sortedList (quicksort thelist)))&#xA;    (format t &quot;IN: ~a ~% SD: ~a ~% Testing sort.~%&quot; thelist sortedList)&#xA;    (should_be_least_to_greatest sortedList)&#xA;    )&#xA;  )&#xA;&#xA;(defun test_should_maintain_length(thelist)&#xA;  (if (not (eql (length thelist) (length (quicksort thelist))))&#xA;    (error &quot;The sorted list is a different length than the original list! ~%&quot;)&#xA;    )&#xA;  )&#xA;&#xA;(let ((thelist (make_list () 10)))&#xA;    (test_should_become_in_order thelist)&#xA;    (test_should_maintain_length thelist)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2355" OwnerDisplayName="Joshua Aresty" LastEditorUserId="22222" LastEditDate="2014-09-03T05:29:22.690" LastActivityDate="2014-09-03T05:29:22.690" Title="Lisp quicksort code" Tags="&lt;lisp&gt;&lt;quick-sort&gt;&lt;common-lisp&gt;" AnswerCount="3" CommentCount="1" FavoriteCount="1" />
  <row Id="1115" PostTypeId="2" ParentId="1114" CreationDate="2011-03-03T07:12:43.093" Score="8" Body="&lt;p&gt;Your formatting is weird.  It's going to be a lot easier for other programmers to read your code if you use a more standard style.  For example, you have lots of lines with nothing but a hanging parenthesis.  Your functions have no docstrings.  Sometimes you &lt;code&gt;use_underscores&lt;/code&gt; and sometimes you use &lt;code&gt;compoundwords&lt;/code&gt; but the Lisp style is &lt;code&gt;hypenated-words&lt;/code&gt;.  Your indentation is inconsistent: learn the command in your text editor to indent your source code for you, and use it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Instead of:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(if (not (eql (length thelist) (length (quicksort thelist))))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Using EQL for numbers seems odd.  I think = would be preferred.  An IF with only one branch is strange, too: WHEN or UNLESS tends to be preferred.  Thus:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(unless (= (length thelist) (length (quicksort thelist)))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In another place, you do a comparison with:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(eq remaininglength 0)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The behavior of EQ with integers is undefined.  You can use = or in this case:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(zerop remaininglength)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You're using recursion a lot even when it's not needed, e.g., in &lt;code&gt;make_list&lt;/code&gt; and &lt;code&gt;should_be_least_to_greatest&lt;/code&gt;.  Common Lisp doesn't require tail-call optimization, and it's not generally common style.  LOOP (or ITERATE) would probably be simpler and more efficient here.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You walk a list applying &lt;code&gt;&amp;lt;=&lt;/code&gt;.  Lisp's &lt;code&gt;&amp;lt;=&lt;/code&gt; already takes any number of arguments, so if you don't need to know the specific elements which are out of order, you can just apply it once.&lt;/p&gt;&#xA;" OwnerUserId="2306" LastActivityDate="2011-03-03T07:12:43.093" CommentCount="0" />
  <row Id="1118" PostTypeId="1" AcceptedAnswerId="1120" CreationDate="2011-03-03T14:08:45.567" Score="15" ViewCount="653" Body="&lt;p&gt;What it does is:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Reads from a RSS feed using Google Feed API&lt;/li&gt;&#xA;&lt;li&gt;Shows the list in an unordered list&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;How good/bad is the code snippet?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$(document).ready(function(){&#xA;var FeedManager = {&#xA;        config : {&#xA;            feedContainer : $('#feedContainer'),&#xA;            feedUrl : 'http://rss.bdnews24.com/rss/english/home/rss.xml',&#xA;            feedLimit : 10&#xA;        },  &#xA;        init: function(){&#xA;            var feed = new google.feeds.Feed(FeedManager.config.feedUrl);&#xA;            feed.setNumEntries(FeedManager.config.feedLimit) ;&#xA;            feed.load(function(result) {&#xA;                if (!result.error) {&#xA;                    FeedManager.$feedContainer = FeedManager.config.feedContainer;&#xA;                    for (var i = 0; i &amp;lt; result.feed.entries.length; i++) {&#xA;                        var entry = result.feed.entries[i];&#xA;                        $('&amp;lt;li/&amp;gt;').append(&#xA;                            $('&amp;lt;a&amp;gt;'+entry.title+'&amp;lt;/a&amp;gt;').attr(&#xA;                                {&#xA;                                    'title': entry.title,&#xA;                                    'href': entry.link&#xA;                                }&#xA;                            ).bind('click',FeedManager.showStory)&#xA;                        ).appendTo(FeedManager.$feedContainer);&#xA;                    }&#xA;                }&#xA;                else{&#xA;                        FeedManager.handleError(result.error.message);&#xA;                }&#xA;            });&#xA;        },&#xA;        showStory: function(){&#xA;              var href = event.currentTarget.href;&#xA;              FeedManager.showURL(href);&#xA;              event.preventDefault();&#xA;        },&#xA;        showURL: function(url){&#xA;             if (url.indexOf(&quot;http:&quot;) != 0 &amp;amp;&amp;amp; url.indexOf(&quot;https:&quot;) != 0) {&#xA;                return;&#xA;            }&#xA;            chrome.tabs.create({&#xA;                url: url&#xA;            });&#xA;        },&#xA;        handleError: function(errorText){&#xA;            $('&amp;lt;li/&amp;gt;')&#xA;                .css(&quot;color&quot;,&quot;red&quot;)&#xA;                .append(&quot;Error:&quot;+errorText)&#xA;                .appendTo(FeedManager.config.feedContainer);&#xA;        }&#xA;    };&#xA;&#xA;    FeedManager.init();&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;At the 2nd stage, I wanted to add custom accordion feature and news snippet:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;processFeedResult: function(result) {&#xA;    if (result.error) {&#xA;        FeedManager.handleError(result.error.message);&#xA;        return;&#xA;    }&#xA;    FeedManager.$feedContainer = FeedManager.config.feedContainer;&#xA;    $.each(result.feed.entries, function() {&#xA;        $('&amp;lt;li/&amp;gt;').append(&#xA;            $('&amp;lt;a&amp;gt;', {  // this should not be an anchor tag,right? TBD &#xA;                title: 'Published at: '+this.publishedDate,&#xA;                text: this.title&#xA;            })&#xA;        ).append($('&amp;lt;div&amp;gt;', {&#xA;            text: this.contentSnippet,&#xA;            css : {'display':'none',&#xA;                'padding-top':'2px'}&#xA;            }).append(&#xA;                $('&amp;lt;a&amp;gt;', {&#xA;                    text: '[more..]',&#xA;                    href: this.link,&#xA;                    click: FeedManager.showStory&#xA;                })) &#xA;        )&#xA;        .bind('click',FeedManager.showSnippet)&#xA;        .appendTo(FeedManager.$feedContainer);&#xA;    });&#xA;},&#xA;showSnippet: function() {&#xA;    var $obj = $(event.currentTarget),&#xA;    $snippetDiv = $obj.find('div').slideDown('normal');&#xA;&#xA;    if(FeedManager.$lastOpenedDiv === undefined){&#xA;        FeedManager.$lastOpenedDiv = $snippetDiv ;&#xA;    }&#xA;    else{&#xA;        FeedManager.$lastOpenedDiv.slideUp('normal');&#xA;        FeedManager.$lastOpenedDiv = $snippetDiv ;&#xA;    }&#xA;    }   &#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I feel that I have put some tightly coupled code in my &lt;code&gt;processFeedResult&lt;/code&gt; such as text and CSS.  I also wanted to know if my &lt;code&gt;showSnippet&lt;/code&gt; function good enough or not.  However, it works, and I know that there are 3rd party good accordion available, but I wanted to learn it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So far I've kept the anchor tag to show the news title and I used anchor title as a tooltip that shows the time.  Maybe there is a good alternate, like span or paragraph? &lt;/p&gt;&#xA;" OwnerUserId="2314" LastEditorUserId="22222" LastEditDate="2016-03-31T00:18:50.443" LastActivityDate="2016-03-31T00:18:50.443" Title="Displaying RSS feeds from Google Feed API as HTML list" Tags="&lt;javascript&gt;&lt;jquery&gt;&lt;css&gt;&lt;rss&gt;" AnswerCount="3" CommentCount="2" />
  <row Id="1119" PostTypeId="1" AcceptedAnswerId="1161" CreationDate="2011-03-03T14:23:53.130" Score="4" ViewCount="890" Body="&lt;pre&gt;&lt;code&gt;class Pool(type):&#xA;    pool = dict()&#xA;    def __new__(clas, *a, **k):&#xA;        def __del__(self):&#xA;            Pool.pool[self.__class__] = Pool.pool.get(self.__class__, []) + [self]&#xA;        a[-1]['__del__'] = __del__&#xA;        return type.__new__(clas, *a, **k)&#xA;&#xA;    def __call__(clas, *a, **k):&#xA;        if Pool.pool.get(clas):&#xA;            print('Pool.pool is not empty: return an already allocated instance')&#xA;            r = Pool.pool[clas][0]&#xA;            Pool.pool[clas] = Pool.pool[clas][1:]&#xA;            return r&#xA;        else:&#xA;            print('Pool.pool is empty, allocate new instance')&#xA;            return type.__call__(clas, *a, **k)&#xA;&#xA;class Foo(metaclass=Pool):&#xA;    def __init__(self):&#xA;        print('Foo &amp;gt; .', self)&#xA;    def foo(self):&#xA;        print('Foo &amp;gt; foo:', self)&#xA;&#xA;f1 = Foo()&#xA;f1.foo()&#xA;&#xA;print('## now deleting f1')&#xA;del f1&#xA;&#xA;print('## now create f2')&#xA;f2 = Foo()&#xA;f2.foo()&#xA;&#xA;print('## now create f3')&#xA;f3 = Foo()&#xA;f3.foo()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;what do you think about this piece of code?&lt;/p&gt;&#xA;" OwnerUserId="1703" LastActivityDate="2011-03-04T16:52:56.807" Title="python object pool with metaclasses" Tags="&lt;python&gt;&lt;design-patterns&gt;" AnswerCount="2" CommentCount="2" />
  <row Id="1120" PostTypeId="2" ParentId="1118" CreationDate="2011-03-03T15:25:31.210" Score="13" Body="&lt;p&gt;Looks ok, to be honest. A few minor changes I would make:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I would pull this code out into a function&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function ProcessFeedResult(result) {&#xA;    if (!result.error) {&#xA;        FeedManager.$feedContainer = FeedManager.config.feedContainer;&#xA;        for (var i = 0; i &amp;lt; result.feed.entries.length; i++) {&#xA;            var entry = result.feed.entries[i];&#xA;            $('&amp;lt;li/&amp;gt;').append(&#xA;                $('&amp;lt;a&amp;gt;'+entry.title+'&amp;lt;/a&amp;gt;').attr(&#xA;                {&#xA;                    'title': entry.title,&#xA;                    'href': entry.link&#xA;                }&#xA;                ).bind('click',FeedManager.showStory)&#xA;            ).appendTo(FeedManager.$feedContainer);&#xA;        }&#xA;    }&#xA;    else{&#xA;        FeedManager.handleError(result.error.message);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then I would reverse the condition and return, to reduce the level of indent a bit&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function ProcessFeedResult(result) {&#xA;    if (result.error) {&#xA;        FeedManager.handleError(result.error.message);&#xA;        return;&#xA;    }&#xA;&#xA;    FeedManager.$feedContainer = FeedManager.config.feedContainer;&#xA;    for (var i = 0; i &amp;lt; result.feed.entries.length; i++) {&#xA;        var entry = result.feed.entries[i];&#xA;        $('&amp;lt;li/&amp;gt;').append(&#xA;            $('&amp;lt;a&amp;gt;'+entry.title+'&amp;lt;/a&amp;gt;').attr(&#xA;            {&#xA;                'title': entry.title,&#xA;                'href': entry.link&#xA;            }&#xA;            ).bind('click',FeedManager.showStory)&#xA;        ).appendTo(FeedManager.$feedContainer);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Further, I would replace the loop with jQuery's &lt;code&gt;$.each()&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function ProcessFeedResult(result) {&#xA;    if (result.error) {&#xA;        FeedManager.handleError(result.error.message);&#xA;        return;&#xA;    }&#xA;&#xA;    FeedManager.$feedContainer = FeedManager.config.feedContainer;&#xA;    $.each(result.feed.entries, function() {&#xA;        $('&amp;lt;li/&amp;gt;').append(&#xA;            $('&amp;lt;a&amp;gt;' + this.title + '&amp;lt;/a&amp;gt;').attr(&#xA;            {&#xA;                'title': this.title,&#xA;                'href': this.link&#xA;            }&#xA;            ).bind('click',FeedManager.showStory)&#xA;        ).appendTo(FeedManager.$feedContainer);&#xA;    });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You can do any or all of these, I don't think any of it is vastly important. I can read your intent easily enough, it just looks a bit neater to me after refactoring.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Thinking about your later comment a bit, I would also be tempted to append the title, rather than stringing it together.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function ProcessFeedResult(result) {&#xA;    if (result.error) {&#xA;        FeedManager.handleError(result.error.message);&#xA;        return;&#xA;    }&#xA;&#xA;    FeedManager.$feedContainer = FeedManager.config.feedContainer;&#xA;    $.each(result.feed.entries, function() {&#xA;        $('&amp;lt;li/&amp;gt;').append(&#xA;            $('&amp;lt;a/&amp;gt;').append(this.title).attr(&#xA;            {&#xA;                'title': this.title,&#xA;                'href': this.link&#xA;            }&#xA;            ).bind('click',FeedManager.showStory)&#xA;        ).appendTo(FeedManager.$feedContainer);&#xA;    });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Otherwise this is the correct approach to generating elements, as far as I know.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As a final step, I would tidy up the braces around the attributes, for consistency&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function ProcessFeedResult(result) {&#xA;    if (result.error) {&#xA;        FeedManager.handleError(result.error.message);&#xA;        return;&#xA;    }&#xA;&#xA;    FeedManager.$feedContainer = FeedManager.config.feedContainer;&#xA;    $.each(result.feed.entries, function() {&#xA;        $('&amp;lt;li/&amp;gt;').append(&#xA;            $('&amp;lt;a/&amp;gt;').append(this.title).attr({&#xA;                'title': this.title,&#xA;                'href': this.link&#xA;            }).bind('click',FeedManager.showStory)&#xA;        ).appendTo(FeedManager.$feedContainer);&#xA;    });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I really don't think you're going to get it any cleaner than that.&lt;/p&gt;&#xA;" OwnerUserId="1416" LastEditorUserId="1416" LastEditDate="2011-03-03T19:03:49.237" LastActivityDate="2011-03-03T19:03:49.237" CommentCount="7" />
  <row Id="1121" PostTypeId="1" AcceptedAnswerId="1140" CreationDate="2011-03-03T16:05:48.193" Score="5" ViewCount="3682" Body="&lt;p&gt;This takes an array of numbers then splits it into all possible combinations of the number array of size 4 then in another array puts the leftovers.  As I want to take the difference in averages of the first column and the second.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import itertools&#xA;&#xA;#defines the array of numbers and the two columns&#xA;number = [53, 64, 68, 71, 77, 82, 85]&#xA;col_one = []&#xA;col_two = []&#xA;&#xA;#creates an array that holds the first four&#xA;results = itertools.combinations(number,4)&#xA;&#xA;for x in results:&#xA;    col_one.append(list(x))&#xA;&#xA;#attempts to go through and remove those numbers in the first array&#xA;#and then add that array to col_two&#xA;for i in range(len(col_one)):&#xA;    holder = list(number)&#xA;    for j in range(4):&#xA;        holder.remove(col_one[i][j])&#xA;    col_two.append(holder)  &#xA;&#xA;col_one_average = []&#xA;col_two_average = []&#xA;&#xA;for k in col_one:&#xA;    col_one_average.append(sum(k)/len(k))&#xA;&#xA;for l in col_two:&#xA;    col_two_average.append(sum(l)/len(l))&#xA;&#xA;dif = []&#xA;&#xA;for i in range(len(col_one_average)):&#xA;    dif.append(col_one_average[i] - col_two_average[i])&#xA;&#xA;print dif&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;So for example, if I have&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;a = [1,2,3]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;and I want to split it into an array of size 2 and 1, I get&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;col_one[0] = [1,2]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;and&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;col_two[0] = [3]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;then&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;col_one[1] = [1,3]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;and&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;col_two[1] = [2]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;After I get all those I find the average of &lt;code&gt;col_one[0]&lt;/code&gt; - average of &lt;code&gt;col_two[0]&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I hope that makes sense.  I'm trying to do this for a statistics class, so if there is a 'numpy-y' solution, I'd love to hear it.&lt;/p&gt;&#xA;" OwnerUserId="2317" LastEditorUserId="22222" LastEditDate="2014-05-10T20:46:34.700" LastActivityDate="2014-05-10T20:46:34.700" Title="Splitting an array of numbers into all possible combinations" Tags="&lt;python&gt;&lt;array&gt;&lt;combinatorics&gt;" AnswerCount="2" CommentCount="0" FavoriteCount="1" />
  <row Id="1122" PostTypeId="1" AcceptedAnswerId="1125" CreationDate="2011-03-03T16:20:24.897" Score="41" ViewCount="78153" Body="&lt;p&gt;Is there a simple way to create a comma delimited string from a list of items &lt;strong&gt;without&lt;/strong&gt; adding an extra &quot;, &quot; to the end of the string?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I frequently need to take an ASP.NET CheckBoxList and format the selected values as a string for insertion into an e-mail. It's straightforward to loop over the selected checkboxes, get the values, and add them to a StringBuilder with a &quot;, &quot; separating them, but the Count property returns the number of items in the list total, not the number of items that are actually selected. So it's hard to know when you've reached the last item, and you end up with a stray &quot;, &quot; on the end. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;I've played around with several different approaches to this problem. Lately I've been doing something like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private string ConcatenateCheckBoxListItems()&#xA;{&#xA;    StringBuilder sb = new StringBuilder();&#xA;    char[] characters = new char[] {&quot; &quot;, &quot;,&quot;};&#xA;    String trimmedString;&#xA;&#xA;    foreach (ListItem item in MyList)&#xA;    {&#xA;        sb.Append(item.Value + &quot;, &quot;);&#xA;    }&#xA;&#xA;    trimmedString = sb.ToString().TrimEnd(characters);&#xA;    return trimmedString;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;But it's definitely clunky. So do the various for loop approaches I've tried. Any suggestions for a cleaner implementation?&lt;/p&gt;&#xA;" OwnerUserId="2196" LastEditorUserId="1029" LastEditDate="2011-09-15T08:20:53.867" LastActivityDate="2013-08-29T06:23:20.360" Title="Comma delimited string from list of items" Tags="&lt;c#&gt;&lt;asp.net&gt;" AnswerCount="4" CommentCount="3" FavoriteCount="13" />
  <row Id="1123" PostTypeId="2" ParentId="1114" CreationDate="2011-03-03T16:21:39.193" Score="1" Body="&lt;p&gt;You have several negative conditionals, which is a bad idea in any language.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(if (null thelist)&#xA;   ()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I'd change it to:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(defun quicksort(thelist)&#xA;   (unless (null thelist)&#xA;      ; Sort list&#xA;   ) ; Pardon the dangling ), but there's a comment on the last line&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="110" LastEditorUserId="110" LastEditDate="2011-03-03T16:28:56.330" LastActivityDate="2011-03-03T16:28:56.330" CommentCount="1" />
  <row Id="1124" PostTypeId="2" ParentId="1122" CreationDate="2011-03-03T16:30:48.030" Score="1" Body="&lt;p&gt;As &lt;a href=&quot;http://codereview.stackexchange.com/questions/1122/comma-delimited-string-from-list-of-items/1125#1125&quot;&gt;&lt;strong&gt;pdr&lt;/strong&gt;&lt;/a&gt; has pointed out, it's best to use &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/57a79xd0.aspx&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;String.Join&lt;/code&gt;&lt;/a&gt;, instead of doing it yourself as I stated earlier.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Maybe I'm missing something, but can't&#xA;  you just do the following?    &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private string ConcatenateCheckBoxListItems()&#xA;{&#xA;    StringBuilder sb = new StringBuilder();&#xA;&#xA;    for ( int i = 0; i &amp;lt; MyList.Items.Count; ++i )&#xA;    {&#xA;        ListItem item = MyList.Items[ i ];&#xA;        sb.Append( item.Value );&#xA;        if ( i &amp;lt; MyList.Items.Count - 1 )&#xA;        {&#xA;            sb.Append( &quot;, &quot; );&#xA;        }&#xA;    }&#xA;&#xA;    return sb.ToString();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;  &#xA;  &lt;p&gt;UPDATE:&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;As a sidenote, I know it's easy to&#xA;  quickly lose the overview of the&#xA;  intent with code like this. That's why&#xA;  I've been working on an experimental&#xA;  class which allows to do the&#xA;  following.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;StringBuilder sb = new StringBuilder();&#xA;Loop loop = Loop.ForEach( MyList.Items, i =&amp;gt; sb.Append( i.Value ) );&#xA;loop.After.AllButLast( () =&amp;gt; sb.Append( &quot;, &quot; ) );&#xA;loop.Run();&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;  &#xA;  &lt;p&gt;I'm still deciding whether or not I&#xA;  like this solution. :) Haven't used it&#xA;  that often.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;" OwnerUserId="2254" LastEditorUserId="2254" LastEditDate="2011-03-03T16:48:10.033" LastActivityDate="2011-03-03T16:48:10.033" CommentCount="6" />
  <row Id="1125" PostTypeId="2" ParentId="1122" CreationDate="2011-03-03T16:35:02.877" Score="51" Body="&lt;p&gt;Would this not suffice?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private string ConcatenateCheckBoxListItems()&#xA;{&#xA;    return string.Join(&quot;, &quot;, from item in MyList select item.Value);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1416" LastActivityDate="2011-03-03T16:35:02.877" CommentCount="6" />
  <row Id="1127" PostTypeId="2" ParentId="1122" CreationDate="2011-03-03T16:36:14.263" Score="21" Body="&lt;p&gt;Why not &lt;code&gt;string.Join()&lt;/code&gt;?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var result = string.Join(&quot;, &quot;, MyList.Items.Select(i =&amp;gt; i.Value));&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="645" LastActivityDate="2011-03-03T16:36:14.263" CommentCount="1" />
  <row Id="1128" PostTypeId="2" ParentId="1121" CreationDate="2011-03-03T17:05:32.897" Score="5" Body="&lt;p&gt;Not using numpy or scipy, but there are several things that can be improved about your code:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;This is minor, but in your comments you call your lists arrays, but it in python they're called lists&lt;/li&gt;&#xA;&lt;li&gt;Variable names like &lt;code&gt;col_one&lt;/code&gt; and &lt;code&gt;col_two&lt;/code&gt; aren't very meaningful. Maybe you should call them &lt;code&gt;combinations&lt;/code&gt; and &lt;code&gt;rests&lt;/code&gt; or something like that.&lt;/li&gt;&#xA;&lt;li&gt;You should definitely refactor your code into functions&lt;/li&gt;&#xA;&lt;li&gt;You often use index-based loops where it is not necessary. Where possible you should iterate by element, not by index.&lt;/li&gt;&#xA;&lt;li&gt;You're also often setting lists to the empty list and then appending to them in a loop. It is generally more pythonic and often faster to use list comprehensions for this.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;If I were to write the code, I'd write something like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import itertools&#xA;&#xA;def average(lst):&#xA;    &quot;&quot;&quot;Returns the average of a list or other iterable&quot;&quot;&quot;&#xA;&#xA;    return sum(lst)/len(lst)&#xA;&#xA;def list_difference(lst1, lst2):&#xA;    &quot;&quot;&quot;Returns the difference between two iterables, i.e. a list containing all&#xA;    elements of lst1 that are not in lst2&quot;&quot;&quot;&#xA;&#xA;    result = list(lst1)&#xA;    for x in lst2:&#xA;        result.remove(x)&#xA;    return result&#xA;&#xA;def differences(numbers, n):&#xA;    &quot;&quot;&quot;Returns a list containing the difference between a combination and the remaining&#xA;    elements of the list for all combinations of size n of the given list&quot;&quot;&quot;&#xA;&#xA;    # Build lists containing the combinations of size n and the rests&#xA;    combinations = list(itertools.combinations(numbers, n))&#xA;    rests = [list_difference(numbers, row) for row in col_one]&#xA;&#xA;    # Create a lists of averages of the combinations and the rests&#xA;    combination_averages = [average(k) for k in combinations]&#xA;    rest_averages = [average(k) for k in rests]&#xA;&#xA;    # Create a list containing the differences between the averages&#xA;    # using zip to iterate both lists in parallel&#xA;    diffs = [avg1 - avg2 for avg1, avg2 in zip(combination_averages, rest_averages)]&#xA;    return diffs&#xA;&#xA;print differences([53, 64, 68, 71, 77, 82, 85], 4)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="128" LastActivityDate="2011-03-03T17:05:32.897" CommentCount="0" />
  <row Id="1129" PostTypeId="1" AcceptedAnswerId="1133" CreationDate="2011-03-03T18:06:40.230" Score="7" ViewCount="237" Body="&lt;pre&gt;&lt;code&gt;$privilegeStrings = array_filter($privileges, function ($s) { return is_string($s); } );&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Is there a better way to specify that I want just the string values in the given array?&lt;/p&gt;&#xA;" OwnerUserId="22" LastActivityDate="2011-03-03T18:54:44.490" Title="Do nothing lamda..." Tags="&lt;php&gt;&lt;callback&gt;" AnswerCount="1" CommentCount="0" />
  <row Id="1130" PostTypeId="2" ParentId="892" CreationDate="2011-03-03T18:11:29.457" Score="-1" Body="&lt;p&gt;Other features which may be convenient and are missing: &lt;code&gt;isEmpty()&lt;/code&gt;, &lt;code&gt;size()&lt;/code&gt;, &lt;code&gt;addAll()&lt;/code&gt;, &lt;code&gt;removeAll()&lt;/code&gt;, set view of the keys, subset views based on input key. Also even if it is not your primary concern the lookup time seems to be in logarithmic magnitude which can reduce its interest.&lt;/p&gt;&#xA;" OwnerUserId="2321" LastEditorUserId="8891" LastEditDate="2012-02-01T22:10:57.597" LastActivityDate="2012-02-01T22:10:57.597" CommentCount="2" />
  <row Id="1132" PostTypeId="1" AcceptedAnswerId="1135" CreationDate="2011-03-03T18:31:46.363" Score="4" ViewCount="313" Body="&lt;p&gt;I've been using FlexLib for its dockable toolbar feature.  When you shrink the window, it will try to wrap rows if the stage width is less than the row width.  Unfortunately, it won't reverse the process when you expand the window.  To get around that, I wrote the following method to add to the class (the caller is responsible for looping through all current toolbar rows and calling this method on them).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It does the job, but it's not quite as fast as I'd like.  I'm hoping for suggestions to improve both performance and code style, if possible.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/**&#xA; *  @private&#xA; *  Moves ToolBars to the previous row if there is sufficient space in that row to display&#xA; *  another ToolBar properly.&#xA; */&#xA;private function unwrapRow(row:HBox, rowIndex:int, toolbar:VBox):void&#xA;{&#xA;    if (rowIndex == 0) {&#xA;        return;&#xA;    }&#xA;    var prevRow:HBox = HBox(toolbar.getChildAt(rowIndex-1));&#xA;    var prevRowW:int = 0;&#xA;    var totalW:int = 0;&#xA;&#xA;    //First, get the width of the previous row&#xA;    for (var j:int = 0; j &amp;lt; prevRow.numChildren; j++)&#xA;    {   &#xA;        var ch:DockableToolBar = DockableToolBar(prevRow.getChildAt(j));&#xA;        prevRowW += ch.measuredWidth;&#xA;    }&#xA;    //Second, cycle through the children of the &quot;row of interest&quot;, moving them&#xA;    //up to the previous row if there's room.&#xA;    for (var k:int = 0; k &amp;lt; row.numChildren; k++)&#xA;    {   &#xA;        var child:DockableToolBar = DockableToolBar(row.getChildAt(k));&#xA;        if ((prevRowW + child.measuredWidth) &amp;gt;= toolbar.width) {&#xA;            break;&#xA;        }&#xA;        //Move child.&#xA;        child.parent.removeChild(child);&#xA;        prevRow.addChild(child);&#xA;        prevRowW += child.measuredWidth;&#xA;        --k;&#xA;    }&#xA;    if (row.numChildren == 0) {&#xA;        toolbar.removeChild(row);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You can see the rest of this class &lt;a href=&quot;http://code.google.com/p/flexlib/source/browse/trunk/src/flexlib/containers/Docker.as&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt; (that listing doesn't include my code; I plan to submit this as a patch once it's in good enough shape).&lt;/p&gt;&#xA;" OwnerUserId="2076" LastEditorUserId="22222" LastEditDate="2014-04-29T20:13:29.243" LastActivityDate="2014-04-29T20:13:29.243" Title="Getting better speed from adjusting rows in a DockableToolBar" Tags="&lt;actionscript-3&gt;&lt;actionscript&gt;&lt;flex&gt;" AnswerCount="1" CommentCount="0" />
  <row Id="1133" PostTypeId="2" ParentId="1129" CreationDate="2011-03-03T18:38:30.947" Score="11" Body="&lt;p&gt;You could do:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$privilegeStrings = array_filter($privileges, 'is_string');&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;array_filter&lt;/code&gt; passes every value of the array to the specified function. So you can just specify the function name and everything will be taken care of.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://php.net/manual/en/function.array-filter.php&quot;&gt;Reference&lt;/a&gt;&lt;/p&gt;&#xA;" OwnerUserId="110" LastEditorUserId="110" LastEditDate="2011-03-03T18:54:44.490" LastActivityDate="2011-03-03T18:54:44.490" CommentCount="2" />
  <row Id="1134" PostTypeId="2" ParentId="1119" CreationDate="2011-03-03T18:38:36.483" Score="2" Body="&lt;p&gt;Name your arguments. If you know enough about what you'll have passed in to take item -1 of the positional argument list, you know enough to give it a name.&lt;/p&gt;&#xA;" OwnerUserId="328" LastActivityDate="2011-03-03T18:38:36.483" CommentCount="0" />
  <row Id="1135" PostTypeId="2" ParentId="1132" CreationDate="2011-03-03T18:41:51.487" Score="5" Body="&lt;p&gt;I have one little suggestion with regard to style. It is much better to invert your conditions to have the simpler code run first when it involves yielding control. It also helps you avoid excessive indentation. &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var child:DockableToolBar = DockableToolBar(row.getChildAt(k));&#xA;&#xA;//Skip the rest of the row if we can't move the first child up.&#xA;if (prevRowW + child.measuredWidth &amp;gt;= toolbar.width) {&#xA;    break;&#xA;}&#xA;&#xA;//Move child.&#xA;child.parent.removeChild(child);&#xA;prevRow.addChild(child);&#xA;prevRowW += child.measuredWidth;&#xA;--k;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1795" LastActivityDate="2011-03-03T18:41:51.487" CommentCount="0" />
  <row Id="1140" PostTypeId="2" ParentId="1121" CreationDate="2011-03-03T21:28:33.287" Score="7" Body="&lt;pre&gt;&lt;code&gt;import itertools&#xA;import numpy&#xA;&#xA;number = [53, 64, 68, 71, 77, 82, 85]&#xA;&#xA;&#xA;results = itertools.combinations(number,4)&#xA;# convert the combination iterator into a numpy array&#xA;col_one = numpy.array(list(results))&#xA;&#xA;# calculate average of col_one&#xA;col_one_average = numpy.mean(col_one, axis = 1).astype(int)&#xA;&#xA;# I don't actually create col_two, as I never figured out a good way to do it&#xA;# But since I only need the sum, I figure that out by subtraction&#xA;col_two_average = (numpy.sum(number) - numpy.sum(col_one, axis = 1)) / 3&#xA;&#xA;dif = col_one_average - col_two_average&#xA;&#xA;print dif&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1659" LastEditorUserId="1659" LastEditDate="2011-03-03T22:26:19.297" LastActivityDate="2011-03-03T22:26:19.297" CommentCount="1" />
  <row Id="1141" PostTypeId="2" ParentId="1070" CreationDate="2011-03-03T22:12:40.773" Score="4" Body="&lt;p&gt;I feel like naming your first argument &lt;code&gt;firstArgument&lt;/code&gt; will cause more confusion than it's worth. I would offer 2 overloads for this method.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// This overload will simply pass null to the main overload &#xA;// for the sake of convenience.&#xA;public static T CreateCompatibleDelegate&amp;lt;T&amp;gt;(MethodInfo method)&#xA;&#xA;// I feel like the name 'instance' really makes it clear&#xA;// what the parameter means.&#xA;public static T CreateCompatibleDelegate&amp;lt;T&amp;gt;(object instance, MethodInfo method)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1795" LastActivityDate="2011-03-03T22:12:40.773" CommentCount="1" />
  <row Id="1142" PostTypeId="1" AcceptedAnswerId="1143" CreationDate="2011-03-03T23:03:22.930" Score="8" ViewCount="10867" Body="&lt;p&gt;I often see this for custom events:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;void InvokeCustomEvent(EventArgs e)&#xA;{&#xA;    var handler = CustomEvent;&#xA;    if (handler != null) handler(this, e);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;But is creating the handler variable required, best practice, or superfluous, when compared to:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;void InvokeCustomEvent(EventArgs e)&#xA;{&#xA;    if (CustomEvent != null) CustomEvent(this, e);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;?&lt;/p&gt;&#xA;" OwnerUserId="1908" LastActivityDate="2011-03-03T23:55:17.750" Title="Checking if an event is not null before firing it in C#" Tags="&lt;c#&gt;" AnswerCount="2" CommentCount="2" FavoriteCount="3" />
  <row Id="1143" PostTypeId="2" ParentId="1142" CreationDate="2011-03-03T23:13:36.620" Score="15" Body="&lt;blockquote&gt;&#xA;  &lt;p&gt;But is creating the handler variable required, best practice, or superfluous, when compared to:&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Yes, it is needed. Otherwise, &lt;code&gt;CustomEvent&lt;/code&gt; could be set to &lt;code&gt;null&lt;/code&gt; after you've checked for &lt;code&gt;null&lt;/code&gt;, but before you've invoked it. This can happen if it gets set in another thread, or if one of the event handlers unregisters itself or another one.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I usually have this declared somewhere in my codebase:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public static class EventExtensions&#xA;{&#xA;    public static void Raise&amp;lt;T&amp;gt;(this EventHandler&amp;lt;T&amp;gt; handler, T args) {&#xA;        if (handler != null) handler(args);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now, with any event handler, you can just do:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;handler.Raise(args);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You can call an extension method with a &lt;code&gt;null&lt;/code&gt; this, so it will do the right thing even if &lt;code&gt;handler&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;. Furthermore, by copying &lt;code&gt;handler&lt;/code&gt; into the local variable used by &lt;code&gt;Raise&lt;/code&gt;, you automatically get the copy you need to make sure the handler won't disappear under you. Works like a charm.&lt;/p&gt;&#xA;" OwnerUserId="816" LastActivityDate="2011-03-03T23:13:36.620" CommentCount="5" />
  <row Id="1145" PostTypeId="2" ParentId="1056" CreationDate="2011-03-03T23:39:21.880" Score="2" Body="&lt;p&gt;I'd build upon @sepp2k's modification by separating the concerns of 1) getting the link data, 2) building the links, 3) combining links into a bulleted list, and 4) adding the bullets to navList as follows:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private void LoadNavigation()&#xA;{&#xA;    Uri urlPrefix = new Uri(&quot;http://mysite.com&quot;);&#xA;    string xmlFilePath = ConfigurationManager.AppSettings[&quot;NavigationUrl&quot;].ToString();&#xA;    XmlDocument doc = new XmlDocument();&#xA;    doc.Load(xmlFilePath);&#xA;    XmlNodeList navigationItems = doc.DocumentElement.FirstChild.ChildNodes;&#xA;&#xA;    var links = navigationItems&#xA;        .Cast&amp;lt;XmlNode&amp;gt;()&#xA;        .Select(x =&amp;gt; new&#xA;            {&#xA;                FullUrl = new Uri(urlPrefix, x.Attributes.GetNamedItem(&quot;url&quot;).Value) , &#xA;                Title = x.Attributes.GetNamedItem(&quot;title&quot;).Value&#xA;            })&#xA;        .Select(x =&amp;gt; String.Format(&quot;&amp;lt;a href=\&quot;{0}\&quot;&amp;gt;{1}&amp;lt;/a&amp;gt;&quot;, x.FullUrl, x.Title))&#xA;        .ToArray();&#xA;&#xA;    var bulletedLinks = &quot;&amp;lt;li&amp;gt;&quot; + String.Join(&quot;|&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&quot;, links) + &quot;&amp;lt;/li&amp;gt;&quot;;&#xA;    navList.InnerHtml += bulletedLinks;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Next I'd separate the concerns of 1) getting the xmlFilePath from the ConfigurationManager, and 2) loading the navigations items, from the process of updating navList. I'd also pass in the urlPrefix string or fetch it from an application configuration setting instead of hard coding it.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private string GetNavigationUrlXmlFilePath()&#xA;{&#xA;    string xmlFilePath = ConfigurationManager.AppSettings[&quot;NavigationUrl&quot;].ToString();&#xA;    return xmlFilePath;&#xA;}&#xA;&#xA;private IEnumerable&amp;lt;XmlNode&amp;gt; LoadNavigationItems()&#xA;{&#xA;    var xmlFilePath = GetNavigationUrlXmlFilePath();&#xA;    XmlDocument doc = new XmlDocument();&#xA;    doc.Load(xmlFilePath);&#xA;    XmlNodeList navigationItems = doc.DocumentElement.FirstChild.ChildNodes;&#xA;    return navigationItems.Cast&amp;lt;XmlNode&amp;gt;();&#xA;}&#xA;&#xA;private void LoadNavigation(Uri urlPrefix)&#xA;{&#xA;    var links = LoadNavigationItems()&#xA;        .Select(x =&amp;gt; new&#xA;            {&#xA;                FullUrl = new Uri(urlPrefix, x.Attributes.GetNamedItem(&quot;url&quot;).Value) , &#xA;                Title = x.Attributes.GetNamedItem(&quot;title&quot;).Value&#xA;            })&#xA;        .Select(x =&amp;gt; String.Format(&quot;&amp;lt;a href=\&quot;{0}\&quot;&amp;gt;{1}&amp;lt;/a&amp;gt;&quot;, x.FullUrl, x.Title))&#xA;        .ToArray();&#xA;&#xA;    var bulletedLinks = &quot;&amp;lt;li&amp;gt;&quot; + String.Join(&quot;|&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&quot;, links) + &quot;&amp;lt;/li&amp;gt;&quot;;&#xA;    navList.InnerHtml += bulletedLinks;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I'd also pull &quot;NavigationUrl&quot; out to a single location so I wouldn't have to change a bunch of code when I want to change the key name.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public static class ApplicationConfigurationSettingsKeys&#xA;{&#xA;    public static class MySite&#xA;    {&#xA;        public static readonly string NavigationUrl = &quot;NavigationUrl&quot;;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then I'd put GetNavigationUrlXmlFilePath and LoadNavigationItems behind interfaces so that they can be tested independently and LoadNavigation can be tested without having to go to the disk. &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public interface IApplicationConfigurationSettingsProvider&#xA;{&#xA;    string GetSetting(string key);&#xA;}&#xA;&#xA;public class ApplicationConfigurationSettingsProvider : IApplicationConfigurationSettingsProvider&#xA;{&#xA;    public string GetSetting(string key)&#xA;    {&#xA;        return ConfigurationManager.AppSettings[key].ToString();&#xA;    }&#xA;}&#xA;&#xA;public interface INavigationLoader&#xA;{&#xA;    IEnumerable&amp;lt;XmlNode&amp;gt; LoadNavigationItems();&#xA;}&#xA;&#xA;public class NavigationLoader : INavigationLoader&#xA;{&#xA;    private readonly IApplicationConfigurationSettingsProvider _applicationConfigurationSettingsProvider;&#xA;&#xA;    public NavigationLoader(IApplicationConfigurationSettingsProvider applicationConfigurationSettingsProvider)&#xA;    {&#xA;        _applicationConfigurationSettingsProvider = applicationConfigurationSettingsProvider;&#xA;    }&#xA;&#xA;    public IEnumerable&amp;lt;XmlNode&amp;gt; LoadNavigationItems()&#xA;    {&#xA;        var xmlFilePath = _applicationConfigurationSettingsProvider&#xA;            .GetSetting(ApplicationConfigurationSettingsKeys.MySite.NavigationUrl);&#xA;        var doc = new XmlDocument();&#xA;        doc.Load(xmlFilePath);&#xA;        var navigationItems = doc.DocumentElement.FirstChild.ChildNodes;&#xA;        return navigationItems.Cast&amp;lt;XmlNode&amp;gt;();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;leaving:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private readonly INavigationLoader _navigationLoader;&#xA;private void LoadNavigation(Uri urlPrefix)&#xA;{&#xA;    var links = _navigationLoader.LoadNavigationItems()&#xA;        .Select(x =&amp;gt; new&#xA;            {&#xA;                FullUrl = new Uri(urlPrefix, x.Attributes.GetNamedItem(&quot;url&quot;).Value) , &#xA;                Title = x.Attributes.GetNamedItem(&quot;title&quot;).Value&#xA;            })&#xA;        .Select(x =&amp;gt; String.Format(&quot;&amp;lt;a href=\&quot;{0}\&quot;&amp;gt;{1}&amp;lt;/a&amp;gt;&quot;, x.FullUrl, x.Title))&#xA;        .ToArray();&#xA;&#xA;    var bulletedLinks = &quot;&amp;lt;li&amp;gt;&quot; + String.Join(&quot;|&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&quot;, links) + &quot;&amp;lt;/li&amp;gt;&quot;;&#xA;    navList.InnerHtml += bulletedLinks;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Next I'd pull the conversion of XmlNode data to an HTML link out where it can be tested independently, possibly to an extension method:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public static class XmlNodeExtensions&#xA;{&#xA;    public static string ToHtmlLink(this XmlNode node, Uri urlPrefix)&#xA;    {&#xA;        var fullUrl = new Uri(urlPrefix, node.Attributes.GetNamedItem(&quot;url&quot;).Value);&#xA;        var title = node.Attributes.GetNamedItem(&quot;title&quot;).Value;&#xA;        return String.Format(&quot;&amp;lt;a href=\&quot;{0}\&quot;&amp;gt;{1}&amp;lt;/a&amp;gt;&quot;, fullUrl, title);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;leaving:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private void LoadNavigation(Uri urlPrefix)&#xA;{&#xA;    var links = _navigationLoader.LoadNavigationItems()&#xA;        .Select(x =&amp;gt; x.ToHtmlLink(urlPrefix))&#xA;        .ToArray();&#xA;&#xA;    var bulletedLinks = &quot;&amp;lt;li&amp;gt;&quot; + String.Join(&quot;|&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&quot;, links) + &quot;&amp;lt;/li&amp;gt;&quot;;&#xA;    navList.InnerHtml += bulletedLinks;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Finally, I'd pull out another method, possibly an extension, for building the bulleted list&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public static class StringExtensions&#xA;{&#xA;    public static string ToHtmlBullets(this IEnumerable&amp;lt;string&amp;gt; items, string suffix)&#xA;    {&#xA;        var bulleted = &quot;&amp;lt;li&amp;gt;&quot;+String.Join((suffix??&quot;&quot;)+&quot;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&quot;,items.ToArray())+&quot;&amp;lt;/li&amp;gt;&quot;;&#xA;        return bulleted;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;leaving only:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private void LoadNavigation(Uri urlPrefix)&#xA;{&#xA;    var links = _navigationLoader.LoadNavigationItems()&#xA;        .Select(x =&amp;gt; x.ToHtmlLink(urlPrefix))&#xA;        .ToHtmlBullets(&quot;|&quot;);&#xA;&#xA;    navList.InnerHtml += links;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This method might now be more accurately named something like AddNavigationLinks. I'm also inclined to make this method side-effect free by passing navList into the method, I just don't happen to know what its type is.&lt;/p&gt;&#xA;" OwnerUserId="2341" LastActivityDate="2011-03-03T23:39:21.880" CommentCount="0" />
  <row Id="1146" PostTypeId="2" ParentId="1122" CreationDate="2011-03-03T23:43:50.257" Score="4" Body="&lt;p&gt;&lt;code&gt;string.Join()&lt;/code&gt; is a good answer, but I prefer to create an extension method:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;namespace StringExtensions&#xA;{&#xA;    static class _&#xA;    {&#xA;        public static string JoinString&amp;lt;T&amp;gt;(this IEnumerable&amp;lt;T&amp;gt; source, string seperator = &quot;&quot;)&#xA;        {&#xA;            return string.Join(seperator, source);&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;which is used like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;return MyList.Select(i =&amp;gt; i.Value).JoinString(&quot;, &quot;);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;(I'm using my unconventional method of organizing extension methods, which you can read about here: &lt;a href=&quot;http://jbazuzicode.blogspot.com/2009/01/way-to-manage-extension-methods-in-c.html&quot; rel=&quot;nofollow&quot;&gt;http://jbazuzicode.blogspot.com/2009/01/way-to-manage-extension-methods-in-c.html&lt;/a&gt;).&lt;/p&gt;&#xA;" OwnerUserId="316" LastActivityDate="2011-03-03T23:43:50.257" CommentCount="3" />
  <row Id="1147" PostTypeId="2" ParentId="1142" CreationDate="2011-03-03T23:55:17.750" Score="8" Body="&lt;p&gt;You actually don't need the null check at all if you use the following trick.  Simply create a default, empty handler that is always registered, so the event is guaranteed to never be null.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Declare your event like so (notice the &lt;code&gt;= delegate { }&lt;/code&gt; bit)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public event EventHandler CustomEvent = delegate { };&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And you can then invoke it without any null checks.&lt;/p&gt;&#xA;" OwnerUserId="1142" LastActivityDate="2011-03-03T23:55:17.750" CommentCount="1" />
  <row Id="1148" PostTypeId="2" ParentId="536" CreationDate="2011-03-03T23:57:57.193" Score="2" Body="&lt;p&gt;Consider using &lt;a href=&quot;http://topshelf-project.com/documentation/getting-started/&quot; rel=&quot;nofollow&quot;&gt;TopShelf&lt;/a&gt; to manage the whole install/uninstall/configure service task. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;This has the wonderful feature of allowing you to debug your code from the command line instead of having to attach to a windows service.&lt;/p&gt;&#xA;" OwnerUserId="2341" LastEditorUserId="2341" LastEditDate="2011-03-04T16:00:45.020" LastActivityDate="2011-03-04T16:00:45.020" CommentCount="0" />
  <row Id="1150" PostTypeId="1" AcceptedAnswerId="1153" CreationDate="2011-03-04T05:37:50.993" Score="4" ViewCount="764" Body="&lt;p&gt;In answering a question on SO, I provided this example.  The intention was to provide a thread safe service that queues requests to make directories.  I figured I could definitely use some review on my use of threading, singletons and general Java skills.  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package mkdir;&#xA;&#xA;import java.io.File;&#xA;import java.util.concurrent.ConcurrentLinkedQueue;&#xA;&#xA;public class MkDirService implements Runnable {&#xA;&#xA;    private static MkDirService service;&#xA;    private static ConcurrentLinkedQueue&amp;lt;File&amp;gt; pendingDirs;&#xA;&#xA;&#xA;    private MkDirService() {&#xA;        pendingDirs = new ConcurrentLinkedQueue&amp;lt;File&amp;gt;();&#xA;    }&#xA;&#xA;    public static MkDirService getService() {&#xA;        if (service == null) {&#xA;            service = new MkDirService();&#xA;            new Thread(service).start();&#xA;        }&#xA;        return service;&#xA;&#xA;    }&#xA;&#xA;    public void makeDir(File dir) {&#xA;        pendingDirs.add(dir);&#xA;    }&#xA;&#xA;    @Override&#xA;    public void run() {&#xA;        while (true) {&#xA;            while (!pendingDirs.isEmpty())&#xA;            {&#xA;                File curDir = pendingDirs.poll();&#xA;                if (curDir !=null &amp;amp;&amp;amp; !curDir.exists()) {&#xA;                    curDir.mkdir();&#xA;                }&#xA;            }&#xA;            try {&#xA;                Thread.sleep(100);&#xA;            } catch (InterruptedException e) {&#xA;                e.printStackTrace();&#xA;            }&#xA;        }&#xA;&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2359" LastActivityDate="2011-03-04T18:49:49.143" Title="Thread Safe Service to Perform Tasks in a Queue" Tags="&lt;java&gt;&lt;thread-safety&gt;" AnswerCount="2" CommentCount="0" FavoriteCount="1" />
  <row Id="1152" PostTypeId="2" ParentId="1001" CreationDate="2011-03-04T07:07:35.007" Score="5" Body="&lt;p&gt;If you don't want to call &lt;code&gt;len&lt;/code&gt; twice for each item (if, for example, you need to call some expensive function instead of &lt;code&gt;len&lt;/code&gt;), you can sort by the second item without lambdas by using &lt;code&gt;itemgetter&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;from operator import itemgetter    &#xA;&#xA;data = [&quot;something&quot;, &quot;something else&quot;, &quot;blah&quot;, &quot;a string&quot;]&#xA;l = [(s, len(s)) for s in data]&#xA;l.sort(key = itemgetter(1))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;However, if the order of members is not important, it would be better to place the length first in the tuple, because the default behaviour for sorting tuples is to compare the elements in order.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;data = [&quot;something&quot;, &quot;something else&quot;, &quot;blah&quot;, &quot;a string&quot;]&#xA;l = sorted((len(s), s) for s in data)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;You can then switch them around during output if you want:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for length, item in l:&#xA;    print item, length&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1530" LastActivityDate="2011-03-04T07:07:35.007" CommentCount="0" />
  <row Id="1153" PostTypeId="2" ParentId="1150" CreationDate="2011-03-04T07:44:32.383" Score="2" Body="&lt;p&gt;&lt;code&gt;pendingDirs&lt;/code&gt; should not be static. It's one thing to maintain a static instance to implement a singleton, but that object should interact with its state using normal instance variables. And you may as well initialize it in its declaration instead of the constructor.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The service should create the thread itself instead of creating it in &lt;code&gt;getService()&lt;/code&gt; to make it self-contained. This allows another implementation to use a thread pool for parallel directory creation and easier testing.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;getService()&lt;/code&gt; is not thread-safe and could allow two or more instances to be created.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Use a &lt;a href=&quot;http://download.oracle.com/javase/1.5.0/docs/api/java/util/concurrent/BlockingQueue.html&quot; rel=&quot;nofollow&quot;&gt;blocking queue&lt;/a&gt;, so you don't have to poll and sleep. The thread will be put to sleep if the queue is empty and be awoken once a new directory is added to the queue. This will shrink your run loop to a few lines and allow you to rely on the well-tested thread-management in &lt;code&gt;java.util.concurrent&lt;/code&gt;.&lt;/p&gt;&#xA;" OwnerUserId="1635" LastActivityDate="2011-03-04T07:44:32.383" CommentCount="3" />
  <row Id="1154" PostTypeId="2" ParentId="698" CreationDate="2011-03-04T10:47:32.863" Score="0" Body="&lt;p&gt;If I had to do anything like that I'd just use &lt;code&gt;java.lang.reflect.Proxy&lt;/code&gt; and generate the wrappers on the fly. You an check if the methods of Foo and EasyFoo are matching properly and disallow the EasyFoo impl (both interfaces should have the same method signatures but EasyFoo, no declared exceptions). In the end you have a reusable library to do dirty stuff. The invocation through the proxy will be slower but who cares.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So basically you need one class the generates proxies and one designated exception for the wrapping. You should wrap exceptions that are declared only.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Overall the code is synthetic sugar to me, though. You can always live w/ throws declaration instead. Even possible, I guess altering the compiler is not very feasible but the runtime verifier doesn't care of the exception declarations.&lt;/p&gt;&#xA;" OwnerUserId="2365" LastActivityDate="2011-03-04T10:47:32.863" CommentCount="0" />
  <row Id="1156" PostTypeId="1" AcceptedAnswerId="1158" CreationDate="2011-03-04T11:46:01.330" Score="10" ViewCount="477" Body="&lt;p&gt;I have the following code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private ScatterViewItem FindScatterViewOfSourceFile(SourceFile find)&#xA;{&#xA;   foreach (ScatterViewItem svi in classScatterViews)&#xA;   {&#xA;      if ((svi.Tag as SourceFile).Equals(find))&#xA;      {&#xA;         return svi;&#xA;      }&#xA;   }&#xA;   return null;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now I'm asking myself if this is valid or if I should better use:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private ScatterViewItem FindScatterViewOfSourceFile(SourceFile find)&#xA;{&#xA;   ScatterViewItem result = null;&#xA;   foreach (ScatterViewItem svi in classScatterViews)&#xA;   {&#xA;      if ((svi.Tag as SourceFile).Equals(find))&#xA;      {&#xA;         result = svi;&#xA;         break;&#xA;      }&#xA;   }&#xA;   return result;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Is there any common practive which one to use? And are both loops doing the same?&lt;/p&gt;&#xA;" OwnerUserId="40" LastEditorUserId="22222" LastEditDate="2016-08-06T02:33:12.280" LastActivityDate="2016-08-06T02:33:12.280" Title="Is this a valid loop?" Tags="&lt;c#&gt;&lt;algorithm&gt;" AnswerCount="2" CommentCount="0" />
  <row Id="1157" PostTypeId="2" ParentId="1156" CreationDate="2011-03-04T11:57:44.817" Score="9" Body="&lt;p&gt;So you have heard about the good practice that a method should only have one return statement.&#xA;This is generally true, but in your case I find it not to be necessary because the method is so small. The main reason for this 'rule' is readability, so you know what is going on. Both code samples are equally clear. When you have several places where a &lt;code&gt;return&lt;/code&gt; would occur, it's best to use the second approach.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;However, I would rewrite it by using LINQ. I believe this should work:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private ScatterViewItem FindScatterViewOfSourceFile(SourceFile find)&#xA;{&#xA;    return classScatterViews.FirstOrDefault( svi =&amp;gt; svi.Tag.Equals(find) );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;UPDATE:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also note that the cast to the specific type to call the &lt;code&gt;Equals()&lt;/code&gt; is dropped. This is redundant as the correct Equals() will be called anyhow.&lt;/p&gt;&#xA;" OwnerUserId="2254" LastEditorUserId="2254" LastEditDate="2011-03-04T12:23:03.060" LastActivityDate="2011-03-04T12:23:03.060" CommentCount="9" />
  <row Id="1158" PostTypeId="2" ParentId="1156" CreationDate="2011-03-04T12:03:06.917" Score="22" Body="&lt;p&gt;First one is hundred times better then the second one. I would avoid defining a variable if you don't really need to. Also I don't believe in &lt;code&gt;one return&lt;/code&gt; methods. Especially I don't believe that they improve readability. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;LINQ would definitely improve it:  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;return classScatterViews.FirstOrDefault(v =&amp;gt; v.Tag.Equals(find));&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Also I would not use &lt;code&gt;as&lt;/code&gt; operator if I do not check result for &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;&#xA;" OwnerUserId="645" LastEditorUserId="645" LastEditDate="2011-03-04T14:18:27.440" LastActivityDate="2011-03-04T14:18:27.440" CommentCount="2" />
  <row Id="1159" PostTypeId="1" AcceptedAnswerId="1737" CreationDate="2011-03-04T12:27:51.577" Score="12" ViewCount="11228" Body="&lt;p&gt;I'm currently creating an &lt;a href=&quot;http://oauth.net/core/1.0a/&quot; rel=&quot;nofollow&quot;&gt;OAuth&lt;/a&gt; provider in Java using &lt;a href=&quot;http://jersey.java.net/&quot; rel=&quot;nofollow&quot;&gt;Jersey&lt;/a&gt;. To the best of my knowledge Jersey does not provide a method to create oauth tokens so I'm creating my own.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For those unfamiliar with OAuth, the tokens will be used in a somewhat similar fashion to public/private keys to sign and verify all requests to the server.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A String is formed &lt;a href=&quot;http://hueniverse.com/2008/10/beginners-guide-to-oauth-part-iv-signing-requests/&quot; rel=&quot;nofollow&quot;&gt;(Process description)&lt;/a&gt; using a token issued by the server (me) and then encrypted with that token secret (which only the server &amp;amp; the application know). The signature is then sent to the server and verified.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Each token must be;&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;non-sequential&lt;/li&gt;&#xA;&lt;li&gt;non-guessable&lt;/li&gt;&#xA;&lt;li&gt;unique (the tokens will be stored in a database so uniqueness can be verified)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;This is the code I'm thinking of using to generate the keys:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public String generateToken() {&#xA;    SecureRandom secureRandom = SecureRandom.getInstance(&quot;SHA1PRNG&quot;);&#xA;    MessageDigest digest = MessageDigest.getInstance(&quot;SHA-256&quot;);&#xA;    secureRandom.setSeed(secureRandom.generateSeed(128));&#xA;    return new String(digest.digest((secureRandom.nextLong() + &quot;&quot;).getBytes()));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I'm generating a &lt;code&gt;Long&lt;/code&gt; using Java's SecureRandom with SHA-1-PRNG.&#xA;Using a 128 bit seed again generated by SecureRandom.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I'm then using SHA-256 to hash the resulting &lt;code&gt;Long&lt;/code&gt; to get a 32 character Unicode String as the token&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Is anyone able to see any issues with this style of token generation?&lt;/li&gt;&#xA;&lt;li&gt;If multiple tokens were requested in a row, is there a chance of predicting the next one?&lt;/li&gt;&#xA;&lt;li&gt;I assume that 32 characters is more than enough for this kind of request signing.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="2368" LastEditorUserId="22222" LastEditDate="2015-03-01T06:39:32.163" LastActivityDate="2015-03-01T06:39:32.163" Title="OAuth Provider token generation" Tags="&lt;java&gt;&lt;random&gt;&lt;oauth&gt;" AnswerCount="1" CommentCount="1" FavoriteCount="2" />
  <row Id="1161" PostTypeId="2" ParentId="1119" CreationDate="2011-03-04T15:33:11.150" Score="3" Body="&lt;pre&gt;&lt;code&gt;class Pool(type):&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The defaultdict class will automatically create my list when I access it&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    pool = collection.defaultdict(list)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The python style guide suggests using the form class_ rather then clas&#xA;It is also not clear why you are capturing the incoming arguments as variable.&#xA;This being a metaclass it is going to have consistent parameters&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    def __new__(class_, name, bases, classdict):&#xA;        def __del__(self):&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Since pool now automatically creates the list, we can just append to it&#xA;                Pool.pool[self.&lt;strong&gt;class&lt;/strong&gt;].append(self)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Getting rid of the variable arguments also makes this much clearer.                &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;        classdict['__del__'] = __del__&#xA;        return type.__new__(class_, name, bases, classdict)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;args and kwargs are often used as the names for variable parameters. I recommend using them to make code clearer&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    def __call__(class_, *args, **kwargs):&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Thanks to the use of defaultdict above we can make this code quite a bit cleaner. Also, this code doesn't pretend its using a functional programming language. Your code created lists by adding them together, slicing, etc. That is not a really efficient or clear way to use python.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;        instances = Pool.pool[class_]&#xA;        if instances:&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;There is a subtle and dangerous problem here. When you create a new instance, you pass along your parameters.&#xA;However, if an instance is already created, you return that ignoring what the parameters were doing.&#xA;This means that you might get an object back which was created using different parameters then you just passed.&#xA;I haven't done anything to fix that here&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;            print('Pool.pool is not empty: return an already allocated instance')&#xA;            return instances.pop()&#xA;        else:&#xA;            print('Pool.pool is empty, allocate new instance')&#xA;            return type.__call__(class_, *args, **kwargs)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Your technique is to install a &lt;code&gt;__del__&lt;/code&gt; method on the objects so that you can detect when they are no longer being used and keep them in your list for the next person who asks for them. the &lt;code&gt;__del__&lt;/code&gt; method is invoked when the object is about to be deleted. You prevent the deletion by storing a reference to the object in your list. This is allowed but the python documentation indicates that it is not recommended.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;__del__&lt;/code&gt; has a number of gotchas. If an exception is caused while running the &lt;code&gt;__del__&lt;/code&gt; method it will be ignored. Additionally, it will tend to cause objects in references cycles to not be collectable. If your code is ever run on Jython/IronPython then you can't be sure that &lt;code&gt;__del__&lt;/code&gt; will be called in a timely manner. For these reasons I generally avoid use of &lt;code&gt;__del__&lt;/code&gt;. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;You are using a metaclass so the fact that the given object is pooled is hidden from the user. I don't really think this is a good idea. I think it is far better to be explict about something like pooling. You also lose flexibility doing it this way. You cannot create multiple pools, etc.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The interface that I would design for this would be:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;pool = Pool(Foo, 1, 2, alpha = 5) # the pool gets the arguments that will be used to construct Foo&#xA;with pool.get() as f1:&#xA;    # as long as I'm in the with block, I have f1, it'll be returned when I exit the block&#xA;    f1.foo()&#xA;with pool.get() as f2:&#xA;    f2.foo()&#xA;    with pool.get() as f3:&#xA;        f3.foo()&#xA;&#xA;f4 = pool.get()&#xA;f4.foo()&#xA;pool.repool(f4)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1659" LastEditorUserId="1659" LastEditDate="2011-03-04T16:52:56.807" LastActivityDate="2011-03-04T16:52:56.807" CommentCount="6" />
  <row Id="1162" PostTypeId="1" AcceptedAnswerId="1166" CreationDate="2011-03-04T17:20:48.717" Score="15" ViewCount="4307" Body="&lt;p&gt;I'm using &lt;em&gt;Entity Framework Code First CTP 5&lt;/em&gt; for a current project. There is still no enum support in Entity Framework so this is what I am using in order to avoid having magic numbers or casts littered throughout my code.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Simplified Example:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Domain Model Consumed by Code First&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public class Address&#xA;{&#xA;    // This would normally be an enum&#xA;    public int Type { get; set; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Repository&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public class AddressRepository&#xA;{&#xA;    public Add(Address address)&#xA;    {&#xA;        // Compare using enum semantics&#xA;        if (address.Type == AddressType.Home)&#xA;            // Do something&#xA;&#xA;        context.Add(address);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;View Model&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public class AddressVM&#xA;{&#xA;    // Using the AddressType class for the view model&#xA;    public AddressType Type { get; set; }     &#xA;&#xA;    public AddressVM(Address address)&#xA;    {&#xA;        this.Type = address.Type;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Enum Replacement Class&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public interface IEnumClass&#xA;{&#xA;    List&amp;lt;string&amp;gt; Properties { get; }&#xA;}&#xA;&#xA;public class AddressType : IEnumClass&#xA;{&#xA;    public static int Home { get { return 0; } }&#xA;    public static int Work { get { return 1; } }&#xA;&#xA;    public List&amp;lt;string&amp;gt; Properties { get { return properties; } }&#xA;&#xA;    private List&amp;lt;string&amp;gt; properties;&#xA;    private int id;&#xA;&#xA;    public AddressType()&#xA;    {&#xA;        SetProperties();&#xA;    }&#xA;    public AddressType(int id)&#xA;    {&#xA;        this.id = id;&#xA;        SetProperties();&#xA;    }&#xA;&#xA;    private void SetProperties()&#xA;    {&#xA;        properties = this.GetType().GetProperties(BindingFlags.Public|BindingFlags.Static)&#xA;            .Select(x =&amp;gt; x.Name).ToList();&#xA;    }&#xA;&#xA;    public static implicit operator AddressType(int id)&#xA;    {&#xA;        return new AddressType(id);&#xA;    }&#xA;&#xA;    public static implicit operator String(AddressType addressType)&#xA;    {&#xA;        return addressType.properties[addressType.id];&#xA;    }&#xA;&#xA;    public static implicit operator int(AddressType addressType)&#xA;    {&#xA;        return addressType.id;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;My Personal Assessment&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Pros:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Allows me to write business rules without using magic numbers&lt;/li&gt;&#xA;&lt;li&gt;Uses the same semantics/syntax as enums for easy refactoring down the road&lt;/li&gt;&#xA;&lt;li&gt;Allows for an implicit conversion to a string for the view model&lt;/li&gt;&#xA;&lt;li&gt;My select list factory class can easily be made to accept any &lt;code&gt;IEnumClass&lt;/code&gt; and generate a select list for the view model&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Cons:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;A little verbose&lt;/li&gt;&#xA;&lt;li&gt;As far as I can tell it is impossible to use a nice abstract generic class because all the actual work uses implicit type casting&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;I'm asking for feedback here because I'm a total novice programmer so I want to solicit some critiques before implementing something I just came up with!&lt;/p&gt;&#xA;" OwnerUserId="2374" LastEditorUserId="22222" LastEditDate="2014-09-07T00:43:16.470" LastActivityDate="2014-09-07T00:43:16.470" Title="Dealing with Entity Framework's lack of enum support" Tags="&lt;c#&gt;&lt;beginner&gt;&lt;entity-framework&gt;" AnswerCount="2" CommentCount="1" FavoriteCount="3" />
  <row Id="1163" PostTypeId="2" ParentId="1150" CreationDate="2011-03-04T18:49:49.143" Score="2" Body="&lt;p&gt;Also to create even one thread it is recommended to use concurrent package:&#xA;Executors.newSingleThreadExecutor().submit(new MkDirService());&lt;/p&gt;&#xA;" OwnerUserId="2321" LastActivityDate="2011-03-04T18:49:49.143" CommentCount="0" />
  <row Id="1165" PostTypeId="2" ParentId="1107" CreationDate="2011-03-04T20:29:50.683" Score="7" Body="&lt;h3&gt;Second revision&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Ok, first of all it would really help if you added some comments. I would also suggest giving your variables names which have more than one letter.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In particular it would be a good idea to describe the algorithms being used. In particular you should document what kind of tree and balancing algorithm you're using.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Speaking of: your tree kind of looks like an AVL tree except that in AVL trees the maximum difference between heights is 1, while you allow a difference of 2. Since you never said that you were trying to implement an AVL tree, I'm not sure whether that's intentional or not.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Some notes on particular pieces of code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;match height left, height right with&#xA;| l, r when l &amp;gt;= r -&amp;gt; l + 1&#xA;| l, r -&amp;gt; r + 1&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;That's just a cumbersome way to write &lt;code&gt;max (height left) (height right)&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Some {&#xA;    key = key&#xA;    value = value&#xA;    height = node.height + 1&#xA;    left = None&#xA;    right = None&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This looks like a mistake. If both the subtrees are empty, then clearly the height is 1 and not dependent on &lt;code&gt;node&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;I would also recommend that instead of using &lt;code&gt;Node option&lt;/code&gt;s you define an actual tree type like this: &lt;code&gt;type ('a * 'b) tree = Node of ('a, 'b) Node | EmptyTree&lt;/code&gt;. This way you can refer to empty trees as &lt;code&gt;EmptyTree&lt;/code&gt; rather than &lt;code&gt;None&lt;/code&gt; and to nodes as &lt;code&gt;Node {...}&lt;/code&gt; rather than &lt;code&gt;Some {...}&lt;/code&gt;. Of course that's just cosmetics, but I do think it reads much nicer.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;h3&gt;First revision&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;One minor style point is that you might want to call your &lt;code&gt;FromSeq&lt;/code&gt; method &lt;code&gt;ofSeq&lt;/code&gt; instead as that is what the equivalent function of F#'s &lt;code&gt;Map&lt;/code&gt; module is called.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Regarding performance the most obvious problem is that your tree is not balanced in any way. If you create a map from a sorted list of keys, it will degenerate into a linked list and have much worse performance than F#'s standard map class. Just compare the time it takes to create your map from &lt;code&gt;Seq.zip [1..500000] [1..500000]&lt;/code&gt; to the time the standard Map needs for the same input.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To address this, you should implement some kind of balancing. For example you may use &lt;a href=&quot;http://en.wikipedia.org/wiki/Red_black_trees&quot;&gt;red-black trees&lt;/a&gt;, which is what F#'s standard map uses.&lt;/p&gt;&#xA;" OwnerUserId="128" LastEditorUserId="128" LastEditDate="2011-03-06T00:02:07.787" LastActivityDate="2011-03-06T00:02:07.787" CommentCount="3" />
  <row Id="1166" PostTypeId="2" ParentId="1162" CreationDate="2011-03-05T01:23:39.497" Score="5" Body="&lt;p&gt;I think the biggest drawback to your approach is that you're adding complexity but not really getting the main benefit you're after, which is to avoid magic numbers.  This code doesn't prevent you from using magic numbers since it automatically converts from any &lt;code&gt;int&lt;/code&gt; to an &lt;code&gt;AddressType&lt;/code&gt;, and it still exposes its values as an &lt;code&gt;int&lt;/code&gt;.  So I would suggest one of the following two approaches.  The first one is very simple but seems to give the same benefits as your code.  The second one is more along the lines of what you're after, so there's some complexity, but has some added benefits as well.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Simple solution&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I think the simplest thing would be to just have a static class with constants defined in it, like so:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public static class AddressType&#xA;{&#xA;    public const int Home = 1;&#xA;    public const int Work = 2;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;(Note: as with any enum, 0 should not be a valid value)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You would then store your values as &lt;code&gt;int&lt;/code&gt; on your entities, but always compare them against these constants.  This would give you the same usage pattern as you showed in your question.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;More complicated solution&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Alternatively, if you want to go with your approach, you should restrict it to only allow you to instantiate an &lt;code&gt;AddressType&lt;/code&gt; with known values, which will prevent the use of magic numbers and make it more strongly typed than using a plain &lt;code&gt;int&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So for example, something like the following:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public class AddressType&#xA;{&#xA;    public static readonly AddressType Home = new AddressType(1);&#xA;    public static readonly AddressType Work = new AddressType(2);&#xA;&#xA;    private int value;&#xA;&#xA;    private AddressType(int value)&#xA;    {&#xA;        this.value = value;&#xA;    }&#xA;&#xA;    public override bool Equals(object obj)&#xA;    {&#xA;        AddressType rhs = obj as AddressType;&#xA;        return&#xA;            rhs != null &amp;amp;&amp;amp;&#xA;            this.value == rhs.value;&#xA;    }&#xA;&#xA;    public override int GetHashCode()&#xA;    {&#xA;        return this.value.GetHashCode();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In your model, you would use it like so:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public class Address&#xA;{&#xA;    public AddressType AddressType { get; set; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now assigning and comparing these &lt;code&gt;AddressType&lt;/code&gt; values looks just like an enum, but explicitly prevents you from using any magic numbers.  If you really need it, you can also add conversions to/from &lt;code&gt;int&lt;/code&gt;, but only allow it if they are known values.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You could use something like the following, though if you have more than 2 values you'll probably want to use a dictionary to map from &lt;code&gt;int&lt;/code&gt; to &lt;code&gt;AddressType&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public static implicit operator AddressType(int value)&#xA;{&#xA;    if (value == AddressType.Home.value)&#xA;    {&#xA;        return AddressType.Home;&#xA;    }&#xA;    else if (value == AddressType.Work.value)&#xA;    {&#xA;        return AddressType.Work;&#xA;    }&#xA;&#xA;    throw new InvalidCastException();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1142" LastActivityDate="2011-03-05T01:23:39.497" CommentCount="1" />
  <row Id="1167" PostTypeId="2" ParentId="1118" CreationDate="2011-03-05T02:46:12.990" Score="5" Body="&lt;p&gt;You can use jQuery 1.4's &lt;a href=&quot;http://api.jquery.com/jquery/#jQuery2&quot; rel=&quot;nofollow&quot;&gt;new element creation syntax&lt;/a&gt; to shorten things a little (rewriting pdr's answer): &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$('&amp;lt;li&amp;gt;').append(&#xA;    $('&amp;lt;a&amp;gt;', {&#xA;        title: this.title,&#xA;        text: this.title,&#xA;        href: this.link,&#xA;        click: FeedManager.showStory&#xA;    })&#xA;).appendTo(FeedManager.$feedContainer);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And the same can be done with the element created in the &lt;code&gt;handleError&lt;/code&gt; function &lt;/p&gt;&#xA;" OwnerUserId="697" LastEditorUserId="697" LastEditDate="2011-03-05T14:15:29.387" LastActivityDate="2011-03-05T14:15:29.387" CommentCount="0" />
  <row Id="1168" PostTypeId="2" ParentId="1118" CreationDate="2011-03-05T10:06:13.977" Score="1" Body="&lt;p&gt;There is no comments.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;What it does is:&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;Reads from a RSS feed using google&#xA;  feed API shows the list in an&#xA;  unordered list.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Should be a comment somewhere in top of the code&lt;/p&gt;&#xA;" OwnerUserId="2388" LastActivityDate="2011-03-05T10:06:13.977" CommentCount="0" />
  <row Id="1169" PostTypeId="2" ParentId="1114" CreationDate="2011-03-05T16:26:23.327" Score="5" Body="&lt;p&gt;I don't know what the policy is about where/how to put subsequent code reviews, since the Stackexchange system doesn't really seem well-suited to their threadlike nature.  Anyway, here goes.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(let ((pivot (car the-list)) (the-rest (cdr the-list)))&#xA;  (let ((categorized-list (categorize-list pivot the-rest () ())))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Look up &lt;code&gt;LET*&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(let ((the-list ()))&#xA;    (loop for l from 1 to length do (setq the-list (append the-list (list (random 25))))) the-list))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This seems pretty awkward.  It's just:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(loop for l from 1 to length collect (random 25))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And here:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(loop for l from 0 to (- (length the-list) 2) do&#xA;  (unless (&amp;lt;= (nth l the-list) (nth (+ l 1) the-list)) (error &quot;Out of order: ~d &amp;lt; ~d ~%&quot; (nth l the-list) (nth (+ l 1) the-list)))))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Every call to &lt;code&gt;LENGTH&lt;/code&gt; or &lt;code&gt;NTH&lt;/code&gt; has to walk the linked list.  You don't want to do that in a loop.  (I think you should not often need &lt;code&gt;NTH&lt;/code&gt; with lists, and almost never in a loop.)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(loop for p on the-list while (second p)&#xA;      when (&amp;lt; (second p) (first p))&#xA;      do (error &quot;Out of order: ~d &amp;lt; ~d~%&quot; (second p) (first p)))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you're going to be writing Common Lisp code, it pays to learn the &lt;code&gt;LOOP&lt;/code&gt; DSL (or &lt;code&gt;ITERATE&lt;/code&gt;, its spiritual successor).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Other random things:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Your code has gotten a lot ... wider.  While I appreciate taking fewer lines, there's a limit.  I don't often see multiple &lt;code&gt;LET&lt;/code&gt; bindings on one line, for example.&lt;/li&gt;&#xA;&lt;li&gt;You sometimes still leave out the space before a paren, like &lt;code&gt;list(pivot&lt;/code&gt;, which looks funny to me.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="2306" LastActivityDate="2011-03-05T16:26:23.327" CommentCount="0" />
  <row Id="1170" PostTypeId="1" CreationDate="2011-03-05T16:34:40.530" Score="6" ViewCount="540" Body="&lt;p&gt;I've been spending a long time working on this template, I'd like to know if its CSS/HTML is good, and mainly if it is speedy to load, accessible, semantic and SEO friendly.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I've tested it in IE7+, Chrome, FF and Safari and am happy with the output in each.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://69.24.73.172/demos/newDemo&quot; rel=&quot;nofollow&quot;&gt;Working URL&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot;&gt;&#xD;&#xA;&lt;div class=&quot;snippet-code&quot;&gt;&#xD;&#xA;&lt;pre class=&quot;snippet-code-css lang-css prettyprint-override&quot;&gt;&lt;code&gt;/* Main Layout Elements */&#xA;body{&#xA;    margin: 0;&#xA;    padding: 0;&#xA;    font-family: Arial, Helvetica, Verdana;&#xA;    background: #EAFDE6 url(../images/background.png) repeat-x;&#xA;    color:#444;&#xA;}&#xA;label{&#xA;    cursor: pointer;&#xA;}&#xA;p {&#xA;    margin: 0 0 20px 8px;&#xA;    position:relative;&#xA;}&#xA;.news-wrapper p&#xA;{&#xA;    margin: 0 0 10px 8px;&#xA;}&#xA;a{&#xA;    color: #1B676B;&#xA;}&#xA;.time-ago{&#xA;    float:right;&#xA;    color: #1B676B;&#xA;}&#xA;.top-bar{&#xA;    position:absolute;&#xA;    top:0;&#xA;    left:0;&#xA;    background-color: #519548;&#xA;    height: 30px;&#xA;    border-bottom:2px solid #3E7236;&#xA;    width: 100%;&#xA;    z-index:1;&#xA;}&#xA;h1{&#xA;    margin:0;&#xA;    margin-bottom:5px;&#xA;    font-size:35px;&#xA;    color: #519548;&#xA;    font-weight:normal;&#xA;}&#xA;h2{&#xA;    margin:0;&#xA;    margin-bottom:5px;&#xA;    font-size:35px;&#xA;    color: #519548;&#xA;    font-weight:normal;&#xA;}&#xA;h3{&#xA;    margin:0 0 5px 0;&#xA;    font-size:22px;&#xA;    color: #519548;&#xA;    font-weight:normal;&#xA;}&#xA;h3 a&#xA;{&#xA;    color: #519548;&#xA;    text-decoration:underline;&#xA;}&#xA;h3 a:hover&#xA;{&#xA;    color: #1B676B;&#xA;    text-decoration:none;&#xA;}&#xA;h4{&#xA;    text-shadow: black 0.1em 0.1em 0.2em;&#xA;    text-transform: uppercase;&#xA;    font-size: 17px;&#xA;    font-weight: bold;&#xA;    margin-bottom: 3px;&#xA;    margin-top: 30px;&#xA;}&#xA;a.ralign{&#xA;    text-align:right;&#xA;    display: block;&#xA;}&#xA;.clear{&#xA;    clear:both;&#xA;}&#xA;&#xA;/* Sprite definitions and positioning */&#xA;.s{&#xA;    background-image:url(../images/sprites.png);&#xA;    background-repeat:no-repeat;&#xA;}&#xA;.facebook{&#xA;    background-position: 0 0;&#xA;}&#xA;.twitter{&#xA;    background-position: 0 -40px;&#xA;}&#xA;.slideshow-wrapper{&#xA;    height:261px;&#xA;    overflow:hidden;&#xA;    -moz-box-shadow: 0px 0px 5px #555;&#xA;    -webkit-box-shadow: 0px 0px 5px #555;&#xA;    box-shadow: 0px 0px 5px #555;&#xA;}&#xA;&#xA;.youtube{&#xA;    background-position: 0 -80px;&#xA;}&#xA;&#xA;/* Main Wrappers */&#xA;.content-wrapper{&#xA;    width:750px;&#xA;    margin: 0 auto;&#xA;}&#xA;.head-wrapper{&#xA;    height: 120px;&#xA;    padding-left:11px;&#xA;}&#xA;.footer-wrapper{&#xA;    position:relative;&#xA;    z-index:1;&#xA;    top: -35px;&#xA;    height:155px;&#xA;    background-image: url(../images/background-footer.png);&#xA;    background-repeat:repeat-x;&#xA;    margin-bottom: -35px;&#xA;    overflow: hidden;&#xA;}&#xA;.main-wrapper{&#xA;    margin: 0 auto;&#xA;    width: 792px;&#xA;    background-image: url(../images/mainbox-background.png);&#xA;    z-index:2;&#xA;    position:relative;&#xA;    padding: 0 0 0px 0;&#xA;}&#xA;.main-end{&#xA;    width: 786px;&#xA;    background-image: url(../images/mainbox-background-bottom.png);&#xA;    background-color:transparent;&#xA;    height:32px;&#xA;    position:relative;&#xA;    z-index:2;&#xA;    margin: 0 auto;&#xA;    padding:0;&#xA;}&#xA;&#xA;/* Footer */&#xA;.footer-inner-wrapper&#xA;{&#xA;    color: white;&#xA;    font-size: 13px;&#xA;    margin: 0 auto;&#xA;    width: 700px;&#xA;    margin-top:5px;&#xA;}&#xA;.footer-item{&#xA;    float: left;&#xA;    width: 33%;&#xA;}&#xA;.footer-item ul{&#xA;    list-style-type: none;&#xA;    margin: 0;&#xA;    padding: 0;&#xA;}&#xA;.footer-item p{&#xA;    padding: 0;&#xA;    margin: 0;&#xA;}&#xA;.footer-item a{&#xA;    font-size:13px;&#xA;    color:white;&#xA;}&#xA;.footer-item a:hover{&#xA;    color: #ffaa00;&#xA;}&#xA;.copyright&#xA;{&#xA;    color: #9FCAD5;&#xA;    text-align:center;&#xA;    background-color: #2A525A;&#xA;    background-image: url(../images/copyright-background.png);&#xA;    font-size: 14px;&#xA;    line-height:35px;&#xA;    height:35px;&#xA;    text-shadow: 0px 1px 1px #2A525A;&#xA;}&#xA;.social-icon{&#xA;    height: 40px;&#xA;    width: 32px;&#xA;    float: left;&#xA;    margin-top: 7px;&#xA;    position:relative;&#xA;    left: -4px;&#xA;    display:block;&#xA;}&#xA;&#xA;/* Search */&#xA;.search-wrapper{&#xA;    background-position: -46px -70px;&#xA;    width: 259px;&#xA;    height:62px;&#xA;    position:absolute;&#xA;    right: -50px;&#xA;    top: 0;&#xA;    text-align:center;&#xA;    line-height:50px;   &#xA;}&#xA;.search-wrapper input{&#xA;    height:24px;&#xA;    padding-left:15px;&#xA;    color: #c0c0c0;&#xA;    line-height:24px;&#xA;    padding-right:25px;&#xA;    border: 0;&#xA;    position:absolute;&#xA;    top: 15px;&#xA;    left:30px;&#xA;}&#xA;.search-icon{&#xA;    height: 37px;&#xA;    width: 36px;&#xA;    background-position: -40px 0;&#xA;    position:absolute;&#xA;    left:205px;&#xA;    top:13px;&#xA;}&#xA;&#xA;/* Menus */&#xA;.menu-main{&#xA;    height:38px;&#xA;    background-color: #88C425;&#xA;    font-size: 15px;&#xA;    font-weight: bold;&#xA;    line-height:38px;&#xA;    margin:0;&#xA;    padding: 0;&#xA;    padding-left: 20px;&#xA;}&#xA;.menu-wrapper{&#xA;    width: 770px;&#xA;    padding-left:11px;&#xA;    margin-bottom:10px;&#xA;}&#xA;.menu-main li{&#xA;    margin: 0;&#xA;    list-style-type: none;&#xA;    float:left; &#xA;}&#xA;.menu-main a{&#xA;    text-shadow: #114400 1px 1px 1px;&#xA;    display: block;&#xA;    padding-left: 20px;&#xA;    padding-right: 20px;&#xA;    color:white;&#xA;    text-decoration: none;&#xA;}&#xA;.menu-main a:hover{&#xA;    background-color:#3E7236;&#xA;}&#xA;a.main-item-selected{&#xA;    background-color:#519548;&#xA;}&#xA;.main-item-selected a:hover{&#xA;    background-color:#519548 !important;    /* Stupid firefox bug */&#xA;}&#xA;.mainSelLPan{&#xA;    float:left;&#xA;    width:11px;&#xA;    height:33px;&#xA;    background-position: -105px 0;&#xA;    margin-left: -11px;&#xA;}&#xA;.mainSelPos{&#xA;    position:relative;&#xA;    top: 5px;&#xA;}&#xA;.mainSelRPan{&#xA;    float:left;&#xA;    width:11px;&#xA;    height:33px;&#xA;    background-repeat:no-repeat;&#xA;    background-position: -116px 0;&#xA;    margin-right: -11px;&#xA;}&#xA;.mainSelTxt{&#xA;    float:left;&#xA;    background-color:#519548;&#xA;    height:33px;&#xA;    line-height:33px;&#xA;}&#xA;.sub-menu{&#xA;    height: 33px;&#xA;    background-color: #519548;&#xA;    font-size: 13px;&#xA;    line-height:33px;&#xA;    margin: 0;&#xA;    padding: 0;&#xA;    padding-left:20px;&#xA;}&#xA;.sub-menu li{&#xA;    margin: 0;&#xA;    list-style-type: none;&#xA;    float:left;&#xA;}&#xA;.sub-menu a{&#xA;    display: block;&#xA;    padding-left: 20px;&#xA;    padding-right: 20px;&#xA;    color:white;&#xA;    text-decoration: none;&#xA;}&#xA;a.sub-item-selected{&#xA;    background-color:#3E7236;&#xA;    color: white !important;&#xA;}&#xA;.sub-menu a:hover{&#xA;    background-color:#3E7236;&#xA;}&#xA;.underSelLPan{&#xA;    float:left;&#xA;    width:11px;&#xA;    height:33px;&#xA;    background-position: -78px 0;&#xA;    margin-left: -11px;&#xA;}&#xA;.underSelPos{&#xA;    position:relative;&#xA;    top: 6px;&#xA;}&#xA;.underSelRPan{&#xA;    float:left;&#xA;    width:11px;&#xA;    height:23px;&#xA;    background-repeat:no-repeat;&#xA;    background-position: -91px 0;&#xA;    margin-right: -11px;&#xA;}&#xA;.underSelTxt{&#xA;    float:left;&#xA;    background-color:#3E7236;&#xA;    height:22px;&#xA;    line-height:22px;&#xA;}&#xA;&#xA;/* Download box link */&#xA;.download{&#xA;    display: block;&#xA;    background-position: -134px 0;&#xA;    width: 215px;&#xA;    height: 55px;&#xA;    margin: 0 auto;&#xA;    text-align:right;&#xA;    color:white;&#xA;    text-transform: uppercase;&#xA;    text-decoration: none;&#xA;}&#xA;.download-title{&#xA;    font-weight:bold;&#xA;    font-size:17px;&#xA;    padding-top:14px;&#xA;    padding-right: 15px;&#xA;}&#xA;.download-size{&#xA;    padding-right: 15px;&#xA;    font-size:14px;&#xA;    margin-top: -3px;&#xA;}&#xA;&#xA;/* Other */&#xA;.moreInfoLink{&#xA;    display:block;&#xA;    color:white;&#xA;    font-size:12px;&#xA;    font-weight:bold;&#xA;    text-decoration: none;&#xA;    float:right;&#xA;    height:17px;&#xA;    background-color:#1B676B;&#xA;    text-align:center;&#xA;    padding:0 12px 0 12px;&#xA;    line-height:17px;&#xA;    min-width:100px;&#xA;    -moz-border-radius: 10px;&#xA;    border-radius:  10px;&#xA;    position:absolute;&#xA;    bottom: 0;&#xA;    right: 0;&#xA;}&#xA;.moreInfoLink:hover{&#xA;    text-decoration:underline;&#xA;    background-color: #23868B;&#xA;}&#xA;.column-thin{&#xA;    float:left;&#xA;    width:270px;&#xA;}&#xA;.column-wide{&#xA;    float:left;&#xA;    margin-right:10px;&#xA;    width:470px;&#xA;}&#xA;.news-wrapper{&#xA;    position:relative;&#xA;    top: -25px;&#xA;    margin-bottom:-25px;&#xA;}&#xA;.column-half{&#xA;    float:left;&#xA;    width:48%;  &#xA;    position:relative;&#xA;}&#xA;.r{&#xA;    float:right;&#xA;}&#xA;.spotlight{&#xA;    float:left;&#xA;    margin-right:15px;&#xA;    width: 90px;&#xA;    height: 90px;&#xA;    position:relative;  &#xA;}&#xA;.spotlight img{&#xA;    position:absolute;&#xA;}&#xA;.slideshow-wrapper img{&#xA;    width:470px;&#xA;    height: 261px;&#xA;    border: 0;&#xA;}&#xA;.slideshow-wrapper a{&#xA;    text-decoration: none;&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;pre class=&quot;snippet-code-html lang-html prettyprint-override&quot;&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&#xA;&#xA;&amp;lt;html lang=&quot;en&quot;&amp;gt;&#xA;&#xA;&amp;lt;head&amp;gt;&#xA;    &amp;lt;meta charset=&quot;UTF-8&quot; /&amp;gt;&#xA;    &amp;lt;title&amp;gt;Make Games with Scirra Software&amp;lt;/title&amp;gt;&#xA;    &amp;lt;meta name=&quot;description&quot; content=&quot;Game making with Construct.&quot; /&amp;gt;&#xA;    &amp;lt;meta name=&quot;keywords&quot; content=&quot;game maker, game builder, html5, create games, games creator&quot; /&amp;gt;&#xA;    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;css/default.css&quot; /&amp;gt; &#xA;    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;plugins/coin-slider/coin-slider-styles.css&quot; /&amp;gt;&#xA;    &amp;lt;link rel=&quot;shortcut icon&quot; href=&quot;images/favicon.ico&quot; /&amp;gt;&#xA;    &amp;lt;link rel=&quot;apple-touch-icon&quot; href=&quot;images/favicon_apple.png&quot; /&amp;gt;&#xA;    &amp;lt;script src=&quot;js/googleAnalytics.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;/head&amp;gt;&#xA;&#xA;&amp;lt;body&amp;gt;&#xA;&#xA;&#xA;&amp;lt;div class=&quot;top-bar&quot;&amp;gt;&amp;lt;/div&amp;gt;&#xA;&amp;lt;div class=&quot;main-wrapper&quot;&amp;gt;&#xA;    &amp;lt;header&amp;gt;&#xA;        &amp;lt;div class=&quot;head-wrapper&quot;&amp;gt;      &#xA;            &amp;lt;div class=&quot;s search-wrapper&quot;&amp;gt;&#xA;                &amp;lt;input type=&quot;text&quot; name=&quot;SearchBox&quot; id=&quot;SearchBox&quot; tabindex=&quot;1&quot; /&amp;gt;&#xA;                &amp;lt;div class=&quot;s search-icon&quot; title=&quot;Search Scirra&quot;&amp;gt;&amp;lt;/div&amp;gt;&#xA;            &amp;lt;/div&amp;gt;&#xA;            &amp;lt;!-- Logo placeholder --&amp;gt;       &#xA;        &amp;lt;/div&amp;gt;      &#xA;        &amp;lt;div class=&quot;menu-wrapper&quot;&amp;gt;&#xA;            &amp;lt;nav&amp;gt;&#xA;                &amp;lt;ul class=&quot;menu-main&quot;&amp;gt;&#xA;                    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot; class=&quot;main-item-selected&quot;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xA;                    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Forum&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xA;                    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Construct&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xA;                    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Arcade&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xA;                    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Manual&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xA;                &amp;lt;/ul&amp;gt;&#xA;                &amp;lt;ul class=&quot;sub-menu&quot;&amp;gt;&#xA;                    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Homepage&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;   &#xA;                    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot; class=&quot;sub-item-selected&quot;&amp;gt;Construct&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xA;                    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Products&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xA;                    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Community Forum&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xA;                    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Contact Us&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xA;                &amp;lt;/ul&amp;gt;&#xA;            &amp;lt;/nav&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;    &amp;lt;/header&amp;gt;&#xA;&#xA;    &amp;lt;div class=&quot;content-wrapper&quot;&amp;gt;&#xA;        &amp;lt;div class=&quot;column-wide&quot;&amp;gt;&#xA;            &amp;lt;div id=&quot;coin-slider&quot; class=&quot;slideshow-wrapper&quot;&amp;gt;&#xA;                &amp;lt;a href=&quot;#&quot; title=&quot;Features for making your games&quot; target=&quot;_blank&quot;&amp;gt;&#xA;                    &amp;lt;img src=&quot;images/screenshot1.jpg&quot; alt=&quot;Features to help you make your games&quot; /&amp;gt;&#xA;                    &amp;lt;span&amp;gt;&#xA;                        Packed with hundreds of exciting features&#xA;                    &amp;lt;/span&amp;gt;&#xA;                &amp;lt;/a&amp;gt;&#xA;                &amp;lt;a href=&quot;#&quot; title=&quot;Functional and intuitive games editor&quot;&amp;gt;&#xA;                    &amp;lt;img src=&quot;images/screenshot2.jpg&quot; alt=&quot;Games editing has never been easier&quot; /&amp;gt;&#xA;                    &amp;lt;span&amp;gt;&#xA;                        Construct's intuitive editor means it's never been easier to create&#xA;                    &amp;lt;/span&amp;gt;&#xA;                &amp;lt;/a&amp;gt;    &#xA;                &amp;lt;a href=&quot;#&quot; title=&quot;High performance optimised games&quot;&amp;gt;&#xA;                    &amp;lt;img src=&quot;images/screenshot3.jpg&quot; alt=&quot;Screenshot&quot; alt=&quot;Optimised for performance&quot; /&amp;gt;&#xA;                    &amp;lt;span&amp;gt;&#xA;                        Squeeze every drop of performance from your platforms&#xA;                    &amp;lt;/span&amp;gt;&#xA;                &amp;lt;/a&amp;gt;&#xA;                &amp;lt;a href=&quot;#&quot; title=&quot;Professional and stunning game making&quot;&amp;gt;&#xA;                    &amp;lt;img src=&quot;images/screenshot4.jpg&quot; alt=&quot;Make stunning professionally finished games&quot; /&amp;gt;&#xA;                    &amp;lt;span&amp;gt;&#xA;                        Design stunning and professionally finished games&#xA;                    &amp;lt;/span&amp;gt;&#xA;                &amp;lt;/a&amp;gt;&#xA;            &amp;lt;/div&amp;gt;  &#xA;            &amp;lt;div class=&quot;news-wrapper&quot;&amp;gt;&#xA;                &amp;lt;h2&amp;gt;Latest from Scirra&amp;lt;/h2&amp;gt;&#xA;                &amp;lt;section&amp;gt;&#xA;                    &amp;lt;h3&amp;gt;New from our &amp;lt;a href=&quot;http://twitter.com/Scirra&quot; title=&quot;Construct game making on Twitter&quot;&amp;gt;Twitter&amp;lt;/a&amp;gt; feed&amp;lt;/h3&amp;gt; &#xA;                    &amp;lt;p&amp;gt;The news on the block is this.  Something has happened some news or something. &amp;lt;span class=&quot;time-ago&quot;&amp;gt;About 1 hour ago&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&#xA;                    &amp;lt;p&amp;gt;Another thing has happened lets tell the world some news or something. Lots to think about.  Lots to do.&amp;lt;span class=&quot;time-ago&quot;&amp;gt;About 6 hours ago&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&#xA;                &amp;lt;/section&amp;gt;&#xA;                &amp;lt;section&amp;gt;&#xA;                    &amp;lt;h3&amp;gt;Scirra's &amp;lt;a href=&quot;#&quot; title=&quot;Developement blog&quot;&amp;gt;Developer Blog&amp;lt;/a&amp;gt;&amp;lt;/h3&amp;gt;&#xA;                    &amp;lt;p&amp;gt;Tom describes why he thinks Adobe Flash is on the out, and HTML5 is going to take over the web.&amp;lt;span class=&quot;time-ago&quot;&amp;gt;About 1 day ago&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&#xA;                &amp;lt;/section&amp;gt;&#xA;            &amp;lt;/div&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;        &amp;lt;div class=&quot;column-thin&quot;&amp;gt;&#xA;            &amp;lt;h1&amp;gt;Make Games&amp;lt;/h1&amp;gt;&#xA;            &amp;lt;p&amp;gt;Game making has never been easier with &amp;lt;a href=&quot;#&quot; title=&quot;Make games with Construct&quot;&amp;gt;Construct&amp;lt;/a&amp;gt;.  Design unique worlds where only your imagination is the limit.  Want to get more involved?  Visit our &amp;lt;a href=&quot;#&quot; title=&quot;Plugins for Construct&quot;&amp;gt;plugin library&amp;lt;/a&amp;gt;, and throw yourself into our active &amp;lt;a href=&quot;#&quot; title=&quot;Visit the helpful Scirra community&quot;&amp;gt;community&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#xA;            &amp;lt;h3&amp;gt;Export in Multiple Formats&amp;lt;/h3&amp;gt;&#xA;            &amp;lt;p&amp;gt;The &amp;lt;a href=&quot;#&quot; title=&quot;Alternative to Flash&quot;&amp;gt;HTML5 Exporter&amp;lt;/a&amp;gt; allows you to export your games to a web page, a truly multi platform solution.  With an &amp;lt;a href=&quot;#&quot; &quot;Construct executable exporter&quot;&amp;gt;EXE Exporter&amp;lt;/a&amp;gt; and &amp;lt;a href=&quot;#&quot; title=&quot;Construct mobile phone exporter&quot;&amp;gt;Mobile Exporters&amp;lt;/a&amp;gt; planned you will soon be able to save your games for the mobile and desktop platforms.  &amp;lt;a class=&quot;moreInfoLink&quot; href=&quot;#&quot; title=&quot;Exporting your games&quot;&amp;gt;Learn More&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#xA;            &amp;lt;h3&amp;gt;Packed with Features&amp;lt;/h3&amp;gt;&#xA;            &amp;lt;p&amp;gt;Hundreds of exciting &amp;lt;a href=&quot;#&quot; title=&quot;Features of game making in Construct&quot;&amp;gt;features&amp;lt;/a&amp;gt;, designed to aid you in every way as you make your games and develop your projects.  Get involved today.&amp;lt;/p&amp;gt;&#xA;            &amp;lt;a href=&quot;#&quot; class=&quot;s download&quot; title=&quot;Download Construct 2 Now&quot;&amp;gt;&#xA;                &amp;lt;div class=&quot;download-title&quot;&amp;gt;Download&amp;lt;/div&amp;gt;&#xA;                &amp;lt;div class=&quot;download-size&quot;&amp;gt;24.5 MB&amp;lt;/div&amp;gt;&#xA;            &amp;lt;/a&amp;gt;            &#xA;        &amp;lt;/div&amp;gt;&#xA;        &amp;lt;div class=&quot;clear&quot;&amp;gt;&amp;lt;/div&amp;gt;   &#xA;&#xA;        &amp;lt;section&amp;gt;&#xA;            &amp;lt;h2&amp;gt;This Weeks Spotlight&amp;lt;/h2&amp;gt;   &#xA;            &amp;lt;div class=&quot;column-half&quot;&amp;gt;&#xA;                &amp;lt;div class=&quot;spotlight&quot;&amp;gt;&amp;lt;img src=&quot;images/spotlight1.png&quot; alt=&quot;Spotlight member&quot; /&amp;gt;&amp;lt;img src=&quot;images/spotlight-mask.png&quot; alt=&quot;Mask&quot; /&amp;gt;&amp;lt;/div&amp;gt;&#xA;                &amp;lt;p&amp;gt;Our spotlight member this week is Pooh-Bah.  He writes good stuff.  Read it. &amp;lt;a class=&quot;moreInfoLink&quot; href=&quot;#&quot;&amp;gt;Learn More&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#xA;            &amp;lt;/div&amp;gt;&#xA;            &amp;lt;div class=&quot;column-half r&quot;&amp;gt;&#xA;                &amp;lt;div class=&quot;spotlight&quot;&amp;gt;&amp;lt;img src=&quot;images/spotlight2.png&quot; alt=&quot;Spotlight game&quot; /&amp;gt;&amp;lt;img src=&quot;images/spotlight-mask.png&quot; alt=&quot;Mask&quot; /&amp;gt;&amp;lt;/div&amp;gt;&#xA;                &amp;lt;p&amp;gt;Killer Bears is a scary ass game from JimmyJones.  Escape is mandatory! &amp;lt;a class=&quot;moreInfoLink&quot; href=&quot;#&quot;&amp;gt;Learn More&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#xA;            &amp;lt;/div&amp;gt;&#xA;        &amp;lt;/section&amp;gt;&#xA;        &amp;lt;div class=&quot;clear&quot;&amp;gt;&amp;lt;/div&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;&amp;lt;/div&amp;gt;&#xA;&amp;lt;div class=&quot;main-end&quot;&amp;gt;&amp;lt;/div&amp;gt;    &#xA;&#xA;&amp;lt;footer&amp;gt;&#xA;    &amp;lt;div class=&quot;footer-wrapper&quot;&amp;gt;&#xA;        &amp;lt;div class=&quot;footer-inner-wrapper&quot;&amp;gt;  &#xA;            &amp;lt;div class=&quot;footer-item&quot;&amp;gt;&#xA;                &amp;lt;h4&amp;gt;Community&amp;lt;/h4&amp;gt;&#xA;                &amp;lt;ul&amp;gt;&#xA;                    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot; title=&quot;Scirra developers blog&quot;&amp;gt;The Blog&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xA;                    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot; title=&quot;Game making community&quot;&amp;gt;Community Forum&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xA;                    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot; title=&quot;Scirra's available RSS feeds&quot;&amp;gt;RSS Feeds&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xA;                    &amp;lt;li&amp;gt;&#xA;                        &amp;lt;a class=&quot;s social-icon facebook&quot; href=&quot;http://www.facebook.com/ScirraOfficial&quot; target=&quot;_blank&quot; title=&quot;Visit Scirra on Facebook&quot;&amp;gt;&amp;lt;/a&amp;gt;&#xA;                        &amp;lt;a class=&quot;s social-icon twitter&quot; href=&quot;http://twitter.com/Scirra&quot; target=&quot;_blank&quot; title=&quot;Follow Scirra on Twitter&quot;&amp;gt;&amp;lt;/a&amp;gt;&#xA;                        &amp;lt;a class=&quot;s social-icon youtube&quot; href=&quot;http://www.youtube.com/user/ScirraVideos&quot; target=&quot;_blank&quot; title=&quot;Visit Scirra on Youtube&quot;&amp;gt;&amp;lt;/a&amp;gt;&#xA;                    &amp;lt;/li&amp;gt;&#xA;                &amp;lt;/ul&amp;gt;&#xA;            &amp;lt;/div&amp;gt;&#xA;            &amp;lt;div class=&quot;footer-item&quot;&amp;gt;&#xA;                &amp;lt;h4&amp;gt;About Us&amp;lt;/h4&amp;gt;           &#xA;                &amp;lt;ul&amp;gt;&#xA;                    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot; title=&quot;Contact Scirra&quot;&amp;gt;Contact Information&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xA;                    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot; title=&quot;Advertise on Scirra&quot;&amp;gt;Advertising&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xA;                    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot; title=&quot;Scirra's History&quot;&amp;gt;History&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xA;                    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot; title=&quot;Scirra's Privacy Policies&quot;&amp;gt;Privacy Policy&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xA;                    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot; title=&quot;Scirra's Terms and Conditions&quot;&amp;gt;Terms and Conditions&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xA;                &amp;lt;/ul&amp;gt;       &#xA;            &amp;lt;/div&amp;gt;&#xA;            &amp;lt;div class=&quot;footer-item&quot;&amp;gt;&#xA;                &amp;lt;h4&amp;gt;Want to Help?&amp;lt;/h4&amp;gt;&#xA;                &amp;lt;p&amp;gt;You can contribute to the community &amp;lt;a href=&quot;#&quot; title=&quot;Ways to contribute&quot;&amp;gt;in lots of ways&amp;lt;/a&amp;gt;.  We have a large active friendly community, and there are lots of ways to join in!&amp;lt;/p&amp;gt;&#xA;                &amp;lt;a href=&quot;#&quot; class=&quot;ralign&quot; title=&quot;Involve yourself in the game making community&quot;&amp;gt;&amp;lt;strong&amp;gt;Learn More&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt;&#xA;            &amp;lt;/div&amp;gt;&#xA;            &amp;lt;div class=&quot;clear&quot;&amp;gt;&amp;lt;/div&amp;gt;   &#xA;        &amp;lt;/div&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;    &amp;lt;div class=&quot;copyright&quot;&amp;gt;&#xA;        Copyright &amp;amp;copy; 2011 Scirra.com.  All rights reserved.&#xA;    &amp;lt;/div&amp;gt;&#xA;&amp;lt;/footer&amp;gt;&#xA;&#xA;&amp;lt;script src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;script src=&quot;js/common.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;script src=&quot;plugins/coin-slider/coin-slider.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;script src=&quot;js/homepage.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&#xA;&amp;lt;/body&amp;gt;&#xA;&#xA;&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;/p&gt;&#xA;" OwnerUserId="154" LastEditorUserId="62429" LastEditDate="2015-12-14T03:57:10.073" LastActivityDate="2015-12-14T03:57:10.073" Title="Web-page template" Tags="&lt;html&gt;&lt;css&gt;" AnswerCount="2" CommentCount="0" FavoriteCount="1" />
  <row Id="1171" PostTypeId="1" AcceptedAnswerId="2520" CreationDate="2011-03-05T18:58:37.233" Score="8" ViewCount="3682" Body="&lt;p&gt;I've used jQuery for a long time, and now I'm going to do some animations with vanilla JS. Here's my code so far:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var box = document.getElementById('box'),&#xA;    a1end,&#xA;    a2end,&#xA;    cdend,&#xA;    a3end,&#xA;    a4end,&#xA;    animate1 = setInterval(function() {&#xA;        if (box.style.top === (window.innerHeight - 120) + 'px') {&#xA;            clearInterval(animate1);&#xA;            a1end = true;&#xA;        }&#xA;        box.style.top = (&#xA;            +box.style.top.replace('px', '') + 1&#xA;        ) + 'px';&#xA;    }, 1),&#xA;    animate2 = setInterval(function() {&#xA;        if (box.style.left === (window.innerWidth - 120) + 'px') {&#xA;            clearInterval(animate2);&#xA;            a2end = true;&#xA;        }&#xA;        box.style.left = (&#xA;            +box.style.left.replace('px', '') + 1&#xA;        ) + 'px';&#xA;    }, 1);&#xA;&#xA;checkEnd1(function() {&#xA;    box.style.background = 'greenyellow';&#xA;    box.innerText = 'Next stage starts in 5 seconds';&#xA;    var i = 4,&#xA;        cd = setInterval(function() {&#xA;            if (!i) {&#xA;                clearInterval(cd);&#xA;                cdend = true;&#xA;            }&#xA;            box.innerText = 'Next stage starts in ' + i + ' seconds';&#xA;            i--;&#xA;        }, 1000);&#xA;&#xA;});&#xA;checkEnd2(function() {&#xA;    box.style.background = 'white';&#xA;    box.innerText = '';&#xA;    var animate3 = setInterval(function() {&#xA;        if (box.style.left === '20px') {&#xA;            clearInterval(animate3);&#xA;            a3end = true;&#xA;        }&#xA;        box.style.left = (&#xA;            +box.style.left.replace('px', '') - 1&#xA;        ) + 'px';&#xA;    }, 1);&#xA;});&#xA;checkEnd3(function() {&#xA;    var animate4 = setInterval(function() {&#xA;        if (box.style.top === '20px') {&#xA;            clearInterval(animate4);&#xA;            a4end = true;&#xA;        }&#xA;        box.style.top = (&#xA;            +box.style.top.replace('px', '') - 1&#xA;        ) + 'px';&#xA;    }, 1);&#xA;});&#xA;checkEnd4(function() {&#xA;    box.style.background = 'lightcyan';&#xA;    box.innerText = 'Animation complete';&#xA;});&#xA;&#xA;function checkEnd1(fn) {&#xA;    (a1end &amp;amp;&amp;amp; a2end) ? fn() : setTimeout(function() {&#xA;        checkEnd1(fn);&#xA;    }, 200);&#xA;}&#xA;function checkEnd2(fn) {&#xA;    (cdend) ? fn() : setTimeout(function() {&#xA;        checkEnd2(fn);&#xA;    }, 200);&#xA;}&#xA;function checkEnd3(fn) {&#xA;    (a3end) ? fn() : setTimeout(function() {&#xA;        checkEnd3(fn);&#xA;    }, 200);&#xA;}&#xA;function checkEnd4(fn) {&#xA;    (a4end) ? fn() : setTimeout(function() {&#xA;        checkEnd4(fn);&#xA;    }, 200);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/stGcj/3/embedded/result,js&quot; rel=&quot;nofollow&quot;&gt;jsFiddle demo&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I've also noticed that the first animation isn't working as excepted. Out of curiousity, I tried it with jQuery's &lt;code&gt;.animate()&lt;/code&gt; and it worked as excepted:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$('#box').animate({&#xA;    top: window.innerHeight - 120,&#xA;    left: window.innerWidth - 120&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: please don't tell me to use jQuery or other libs, I want to use vanilla.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;h2&gt;Bounty Edit&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Currently, the animation goes diagonally for a while, then when it reaches the bottom, it continues to go sideways. If you tell me how to make it go diagonally all the time, I'll give you a bounty.&lt;/p&gt;&#xA;" OwnerUserId="688" LastEditorUserId="7585" LastEditDate="2013-11-24T12:55:13.973" LastActivityDate="2013-11-24T12:55:13.973" Title="Animations with vanilla JS" Tags="&lt;javascript&gt;" AnswerCount="2" CommentCount="2" FavoriteCount="4" />
  <row Id="1174" PostTypeId="2" ParentId="1170" CreationDate="2011-03-06T06:33:22.960" Score="5" Body="&lt;p&gt;My first point is that you have no :focus style for your links. If you navigate the page with the keyboard that would really help a lot to see where you are. Take this rule for example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;h3 a:hover&#xA;{&#xA;    color: #1B676B;&#xA;    text-decoration:none;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Just add:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;h3 a:hover, h3 a:focus&#xA;{&#xA;    color: #1B676B;&#xA;    text-decoration:none;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Another thing that is nice to do for people navigating with the keyboard is to place a hidden link with a text similar to &quot;Skip to content&quot; or something like that close to the top. This link should be a shortcut to the content and only show on :focus. The reason for that is that it takes a lot of tabbing to get through the menu otherwise. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Another tip that doesn't have to do with this question is that vertically aligning your content often creates a more resful reading experience. Indenting the paragraphs make it look more chaotic then it would be they were properly aligned.&lt;/p&gt;&#xA;" OwnerUserId="2405" LastActivityDate="2011-03-06T06:33:22.960" CommentCount="2" />
  <row Id="1175" PostTypeId="2" ParentId="702" CreationDate="2011-03-06T11:55:35.760" Score="2" Body="&lt;p&gt;1) Your code doesn't handle &lt;code&gt;number=0&lt;/code&gt; properly anyway (it will throw on &lt;code&gt;int squareWidth = rectangleWidth / nSquaresInColumn;&lt;/code&gt;) so I would start your first loops (&lt;code&gt;i&lt;/code&gt;,&lt;code&gt;j&lt;/code&gt; iterators) from 1 since 0 rows/columns won't fit anyway.  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;2) You do not actually need &lt;code&gt;j&lt;/code&gt; loop. Instead of:  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    for (int i = 0; i &amp;lt;= numberOfSquares; i++)&#xA;    {&#xA;        for (int j = 0; j &amp;lt;= numberOfSquares; j++)&#xA;        {&#xA;            if (i * j == numberOfSquares) { ... }&#xA;        }&#xA;    }  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It can simplified to (and taking into account my #1):  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    for (int i = 1; i &amp;lt;= numberOfSquares; i++)&#xA;    {&#xA;        int j = numberOfSquares / i;&#xA;        if (i * j == numberOfSquares) { ... }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;3) You don't need to iterate up to &lt;code&gt;numberOfSquares&lt;/code&gt; here: &lt;code&gt;for (int i = 1; i &amp;lt;= numberOfSquares; i++)&lt;/code&gt;. Since &lt;code&gt;i=2,j=6&lt;/code&gt; is the same as &lt;code&gt;i=6,j=2&lt;/code&gt; and you're looking only for first one you can iterate up to root square of &lt;code&gt;numberOfSquares&lt;/code&gt;:  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;int maxI = (int)Math.Sqrt(numberOfSquares);&#xA;for (int i = 1; i &amp;lt;= maxI; i++)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;4) Since you're looking for minimal &lt;code&gt;i-j&lt;/code&gt; difference you should start iterating from closest one and stop iterating as soon as you will find matching pair. Original:  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    int maxI = (int)Math.Sqrt(numberOfSquares);&#xA;    for (int i = 1; i &amp;lt;= maxI; i++)&#xA;    {&#xA;        int j = numberOfSquares / i;&#xA;        if (i * j == numberOfSquares)&#xA;        {&#xA;            if (Math.Abs(i - j) &amp;lt; minDistance)&#xA;            {&#xA;                minDistance = Math.Abs(i - j);&#xA;                nSquaresInRow = i;&#xA;                nSquaresInColumn = j;&#xA;            }&#xA;        }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Modified:  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    int maxI = (int)Math.Sqrt(numberOfSquares);&#xA;    for (int i = maxI; i &amp;gt;= 1; i--) // looping in reverse order&#xA;    {&#xA;        int j = numberOfSquares / i;&#xA;        if (i * j == numberOfSquares)&#xA;        {&#xA;            // if (Math.Abs(i - j) &amp;lt; minDistance) we do not need this check anymore&#xA;            {&#xA;                minDistance = Math.Abs(i - j);&#xA;                nSquaresInRow = i;&#xA;                nSquaresInColumn = j;&#xA;                break;&#xA;            }&#xA;        }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;5) With my #3 change you do not need &lt;code&gt;Math.Abs&lt;/code&gt; anymore since &lt;code&gt;i&lt;/code&gt; is always less or equal than &lt;code&gt;j&lt;/code&gt;:  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;minDistance = j - i;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now let's go to second loop:  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;6) &lt;code&gt;int xSquareCenter = (((r + 1) * 2) - 1) * (squareWidth / 2);&lt;/code&gt; here &lt;strong&gt;double&lt;/strong&gt; maths should be used otherwise you're loosing precision here.  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;7) Also this line is a little bit difficult to understand. I would introduce &lt;code&gt;row&lt;/code&gt; and &lt;code&gt;column&lt;/code&gt; variables to make it more clear:  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;int column = r % nSquaresInRow;&#xA;double xSquareCenter = (column + 0.5) * squareWidth;&#xA;int row = r / nSquaresInRow;&#xA;double ySquareCenter = (row + 0.5) * squareHeight;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;8) Last thing, I would replace both loops with Linq. Final result:  &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public static List&amp;lt;Point&amp;gt; getCenters(int number, double width, double height)&#xA;{&#xA;    List&amp;lt;Point&amp;gt; points = new List&amp;lt;Point&amp;gt;();&#xA;    int originalNumberOfSquares = number;&#xA;    int numberOfSquares = number;&#xA;    if (numberOfSquares % 2 == 1)&#xA;    {&#xA;        numberOfSquares++;&#xA;    }&#xA;    int rectangleWidth = Convert.ToInt32(width);&#xA;    int rectangleHeight = Convert.ToInt32(height);&#xA;&#xA;    int nSquaresInRow = -1;&#xA;    int nSquaresInColumn = -1;&#xA;&#xA;    int maxI = (int)Math.Sqrt(numberOfSquares);&#xA;    int nSquaresInRow&#xA;            = Enumerable.Range(1, maxI)&#xA;                 .Reverse()&#xA;                 .First(i =&amp;gt; numberOfSquares % i == 0);&#xA;    int nSquaresInColumn = numberOfSquares / nSquaresInRow;&#xA;&#xA;    int squareWidth = rectangleWidth / nSquaresInColumn;&#xA;    int squareHeight = rectangleHeight / nSquaresInRow;&#xA;&#xA;    return Enumerable.Range(0, originalNumberOfSquares)&#xA;              .Select(r =&amp;gt; new { Column = r % nSquaresInRow, Row = r / nSquaresInRow})&#xA;              .Select(p =&amp;gt; new { &#xA;                       xSquareCenter = (p.Column + 0.5) * squareWidth,&#xA;                       ySquareCenter = (p.Row + 0.5) * squareHeight})&#xA;              .Select(p =&amp;gt; new Point(p.xSquareCenter, p.ySquareCenter))&#xA;              .ToList();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="645" LastActivityDate="2011-03-06T11:55:35.760" CommentCount="0" />
  <row Id="1176" PostTypeId="1" AcceptedAnswerId="1177" CreationDate="2011-03-06T12:05:18.200" Score="14" ViewCount="530" Body="&lt;p&gt;This is going to be rather long and generic, so apologies in advance.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I've been reading a lot about Haskell lately, but I've never really programmed anything with it beyond simple experiments in ghci. So, I wanted to finally try and do some coding excercise that was easy but non-trivial and ended up choosing the &quot;Recluse&quot; problem from a book called Eloquent JavaScript. The aim is to make a program that takes a text document with simple, custom markup and formats it into HTML according to the following rules:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Paragraphs are separated by blank lines.&lt;/li&gt;&#xA;&lt;li&gt;A paragraph that starts with a '%' symbol is a header. The more '%' symbols, the smaller the header.&lt;/li&gt;&#xA;&lt;li&gt;Inside paragraphs, pieces of text can be emphasised by putting them between asterisks.&lt;/li&gt;&#xA;&lt;li&gt;Footnotes are written between braces.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;So for example, the text document&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;% Heading&#xA;&#xA;%% Sub-heading&#xA;&#xA;Text with *emphasis*.&#xA;&#xA;Another {an example footnote} paragraph.&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;would be formatted as&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&amp;lt;h1&amp;gt;Heading&amp;lt;/h1&amp;gt;&#xA;&amp;lt;h2&amp;gt;Sub-heading&amp;lt;/h2&amp;gt;&#xA;&amp;lt;p&amp;gt;Text with &amp;lt;i&amp;gt;emphasis&amp;lt;/i&amp;gt;.&amp;lt;/p&amp;gt;&#xA;&amp;lt;p&amp;gt;Another &amp;lt;a href=&amp;quot;#footnote1&amp;quot;&amp;gt;&amp;lt;sup&amp;gt;1&amp;lt;/sup&amp;gt;&amp;lt;/a&amp;gt; paragraph.&amp;lt;/p&amp;gt;&#xA;&amp;lt;p&amp;gt;&amp;lt;small&amp;gt;&amp;lt;a name=&amp;quot;footnote1&amp;quot;&amp;gt;1. an example footnote&amp;lt;/a&amp;gt;&amp;lt;/small&amp;gt;&amp;lt;/p&amp;gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The main program should read the text document from stdin and output the HTML to stdout.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This seemed like a simple enough task at first (I'd estimate that using Python, a language I have a lot of experience with, I could've finished it in about 15-30 minutes), but as I got deeper into the implementation, I realized I have no clue how to do something like this in Haskell. The footnotes seemed particularily challenging, as you kind of have to accumulate them on the side while building the rest of the document, and I didn't have any idea how to express that in functional terms (at least not without dragging an extra footnotes argument in every single function call).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I hacked at the problem for a few evenings, re-reading Haskell tutorials and perusing the standard library reference, and finally ended up with a solution that works correctly, with some assumptions (for example, nested markup is not supported). However, my solution feels like it's over-complicated for such a simple problem and it consumes relatively high amounts of memory.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So, my question is: how could I simplify the program and turn it into more idiomatic Haskell? The &lt;code&gt;formatText&lt;/code&gt; function especially is something that turned out really ugly in my opinion. I'm not expecting anyone to rewrite the whole program, but small fixes here and there would be greatly appreciated.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Secondly, how would I make the program more memory efficient? The current implementation allocates about 400KB of heap for every 1KB of input text, which isn't really a problem for this program, but I think it indicates that I'm doing something stupid. I've read articles about reducing memory consumption by forcing strictness, but it's not readily apparent to me where strictness should be applied in my program for the best effect.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Thanks!&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import Char&#xA;import Data.List&#xA;import Control.Monad.State&#xA;&#xA;data Footnote   = Footnote  Int String&#xA;data Footnotes  = Footnotes Int [Footnote]&#xA;type TrackNotes = State Footnotes&#xA;type HTML       = String&#xA;&#xA;-- |Enclose content in the given HTML element&#xA;--  e.g. html &amp;quot;span&amp;quot; &amp;quot;foo&amp;quot; -&amp;gt; &amp;quot;&amp;lt;span&amp;gt;foo&amp;lt;/span&amp;gt;&amp;quot;&#xA;html :: String -&amp;gt; String -&amp;gt; HTML&#xA;html tag content = foldl1' (++) [&amp;quot;&amp;lt;&amp;quot;, tag, &amp;quot;&amp;gt;&amp;quot;, content, &amp;quot;&amp;lt;/&amp;quot;, tag, &amp;quot;&amp;gt;&amp;quot;]&#xA;&#xA;-- |Generate a HTML link element&#xA;ahref :: String -&amp;gt; String -&amp;gt; HTML&#xA;ahref link txt = foldl1' (++) [&amp;quot;&amp;lt;a href=\&amp;quot;&amp;quot;, link, &amp;quot;\&amp;quot;&amp;gt;&amp;quot;, txt, &amp;quot;&amp;lt;/a&amp;gt;&amp;quot;]&#xA;&#xA;-- |Replace &amp;lt;, &amp;gt; and &amp;amp; with HTML entities&#xA;htmlEscape :: String -&amp;gt; HTML&#xA;htmlEscape &amp;quot;&amp;quot;     = &amp;quot;&amp;quot;&#xA;htmlEscape (x:xs) = prefix $! htmlEscape xs&#xA;    where prefix = case x of&#xA;            '&amp;amp;' -&amp;gt; showString &amp;quot;&amp;amp;amp;&amp;quot;&#xA;            '&amp;lt;' -&amp;gt; showString &amp;quot;&amp;amp;lt;&amp;quot;&#xA;            '&amp;gt;' -&amp;gt; showString &amp;quot;&amp;amp;gt;&amp;quot;&#xA;            _   -&amp;gt; (x:)&#xA;&#xA;-- |Add a new footnote&#xA;addFootnote :: String -&amp;gt; TrackNotes Int&#xA;addFootnote s = State $ \(Footnotes i ns) -&amp;gt;(i, Footnotes (i+1) $ ns ++ [Footnote i s])&#xA;&#xA;-- |Format a text section into HTML&#xA;formatSection :: String -&amp;gt; TrackNotes HTML&#xA;formatSection s = case s of&#xA;    ('%'):xs -&amp;gt; formatHeading s&#xA;    _        -&amp;gt; formatParagraph s&#xA;&#xA;-- |Format a text heading into HTML heading&#xA;formatHeading :: String -&amp;gt; TrackNotes HTML&#xA;formatHeading s = liftM headingTag content&#xA;    where headingTag = html (&amp;quot;h&amp;quot; ++ show level)&#xA;          level      = length prefix&#xA;          content    = formatText $ htmlEscape $ dropWhile isSpace postfix&#xA;          (prefix,postfix) = span (=='%') s&#xA;&#xA;-- |Format a text paragraph into HTML paragraph&#xA;formatParagraph :: String -&amp;gt; TrackNotes HTML&#xA;formatParagraph = liftM (html &amp;quot;p&amp;quot;) . formatText . htmlEscape&#xA;&#xA;-- |Format inline markup in text contents, e.g. &amp;quot;*foo* bar&amp;quot; -&amp;gt; &amp;quot;&amp;lt;i&amp;gt;foo&amp;lt;/i&amp;gt; bar&amp;quot;&#xA;formatText :: String -&amp;gt; TrackNotes HTML&#xA;formatText &amp;quot;&amp;quot; = return &amp;quot;&amp;quot;&#xA;formatText s  = do&#xA;    (content,rest) &amp;lt;- processTag $ postfix&#xA;    rest' &amp;lt;- formatText $ rest&#xA;    return $ prefix ++ (content ++ rest')&#xA;&#xA;    where (prefix,postfix) = break (`elem` &amp;quot;*{&amp;quot;) s&#xA;&#xA;          processTag         &amp;quot;&amp;quot; = return (&amp;quot;&amp;quot;, &amp;quot;&amp;quot;)&#xA;          processTag (tag:rest) = do&#xA;            html' &amp;lt;- format $ between&#xA;            return (html', tail')&#xA;            where (format, endChar) = case tag of&#xA;                    '*' -&amp;gt; (formatEmph, '*')&#xA;                    '{' -&amp;gt; (formatNote, '}')&#xA;                  (between, _:tail') = break (==endChar) rest&#xA;&#xA;          formatEmph = return . html &amp;quot;i&amp;quot;&#xA;          formatNote s = do&#xA;            idx &amp;lt;- liftM show $ addFootnote s&#xA;            let link = &amp;quot;#footnote&amp;quot; ++ idx&#xA;            let text = html &amp;quot;sup&amp;quot; idx&#xA;            return $ ahref link text&#xA;&#xA;-- |Split a string into sections.&#xA;--  Two consecutive line breaks form a section break.&#xA;splitSections :: String -&amp;gt; [String]&#xA;splitSections = sections . lines&#xA;    where sections (x:[]:xs) = x : sections xs&#xA;          sections  (x:y:xs) = sections $ (x ++ ('\n' : y)) : xs&#xA;          sections         x = x&#xA;&#xA;-- | Format a footnote at the end of the document&#xA;formatFootnote :: Footnote -&amp;gt; HTML&#xA;formatFootnote (Footnote i s) = html &amp;quot;p&amp;quot; $ html &amp;quot;small&amp;quot; $ anchor&#xA;    where anchor = &amp;quot;&amp;lt;a name=\&amp;quot;footnote&amp;quot; ++ show i ++ &amp;quot;\&amp;quot;&amp;gt;&amp;quot; ++ text ++ &amp;quot;&amp;lt;/a&amp;gt;&amp;quot;&#xA;          text   = show i ++ &amp;quot;. &amp;quot; ++ s&#xA;&#xA;-- |Format a text document into HTML document&#xA;formatDocument :: String -&amp;gt; String&#xA;formatDocument txt   = unlines $ sections ++ footnotes&#xA;    where (sections, state) = runState stateMonad (Footnotes 1 [])&#xA;          stateMonad        = mapM formatSection $ splitSections txt&#xA;          Footnotes _ notes = state&#xA;          footnotes         = map formatFootnote notes&#xA;&#xA;main = interact formatDocument&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;UPDATE: I rewrote the program so that parsing and output are separate as per sepp2k's suggestion, and while that does make the program a bit longer, it keeps the individual functions a lot simpler. &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import Char&#xA;import Data.List&#xA;import Data.Maybe&#xA;import Control.Monad.State&#xA;&#xA;type HTML = String&#xA;type HeadingLevel = Int&#xA;&#xA;{----------------------------------------------------------------&#xA; Data types and functions for parsing the markup to a parse tree&#xA;-----------------------------------------------------------------}&#xA;data Section = Heading HeadingLevel [DocNode] | Paragraph [DocNode]&#xA;data DocNode = PlainText String | Emphasis [DocNode] | Footnote [DocNode]&#xA;&#xA;parseMarkup :: String -&amp;gt; [Section]&#xA;parseMarkup = mapMaybe parseSection . splitSections&#xA;&#xA;parseSection :: String -&amp;gt; Maybe Section&#xA;parseSection &amp;quot;&amp;quot; = Nothing&#xA;parseSection s  = case s of&#xA;    ('%':_) -&amp;gt; Just $ parseHeading s&#xA;    _       -&amp;gt; Just $ Paragraph $ parseNodes s&#xA;&#xA;parseHeading :: String -&amp;gt; Section&#xA;parseHeading s = Heading lvl nodes&#xA;    where lvl   = length prefix&#xA;          nodes = parseNodes $ dropWhile isSpace postfix&#xA;          (prefix,postfix) = span (=='%') s&#xA;&#xA;parseNodes :: String -&amp;gt; [DocNode]&#xA;parseNodes &amp;quot;&amp;quot; = []&#xA;parseNodes s  = fst $ parseNodes' Nothing $ zipper s&#xA;    where parseNodes' g ((i,(c:t)):_) | (g == Just c) = ([PlainText i], t)&#xA;          parseNodes' _  [(i,&amp;quot;&amp;quot;)]  = ([PlainText i], &amp;quot;&amp;quot;)&#xA;          parseNodes' g ((i,t):xs) = case t of&#xA;            ('*':_) -&amp;gt; continue Emphasis '*' i t&#xA;            ('{':_) -&amp;gt; continue Footnote '}' i t&#xA;            _       -&amp;gt; parseNodes' g xs&#xA;&#xA;          continue f end &amp;quot;&amp;quot; t = parseNonText f end $ tail t&#xA;          continue f end i t  = (PlainText i : moreNodes, rest)&#xA;            where (moreNodes, rest) = parseNonText f end $ tail t&#xA;&#xA;          parseNonText f end t = ((f nodes) : moreNodes, rest')&#xA;            where (nodes, rest)      = parseNodes' (Just end) $ zipper t&#xA;                  (moreNodes, rest') = parseNodes' Nothing $ zipper rest&#xA;&#xA;&#xA;{------------------------------------------------&#xA; Data types and functions for tracking footnotes&#xA;-------------------------------------------------}&#xA;data Footnotes  = Footnotes Int [String]&#xA;type TrackNotes = State Footnotes&#xA;&#xA;addFootnote :: String -&amp;gt; TrackNotes Int&#xA;addFootnote s = State $ \(Footnotes i ns) -&amp;gt;(i, Footnotes (i+1) $ ns ++ [s])&#xA;&#xA;{---------------------------------------&#xA; Functions for converting nodes to HTML&#xA;----------------------------------------}&#xA;docToHTML :: [Section] -&amp;gt; HTML&#xA;docToHTML ss = unlines $ sections ++ footnotes&#xA;    where (sections, state)   = runState stateMonad $ Footnotes 1 []&#xA;          stateMonad          = mapM sectionToHTML ss&#xA;          (Footnotes _ notes) = state&#xA;          footnotes           = map formatFootnote $ zip notes [1..]&#xA;&#xA;sectionToHTML :: Section -&amp;gt; TrackNotes HTML&#xA;sectionToHTML (Heading lvl nodes) = liftM htag $ nodesToHTML nodes&#xA;    where htag = html $ &amp;quot;h&amp;quot; ++ show lvl&#xA;sectionToHTML (Paragraph nodes) = liftM ptag $ nodesToHTML nodes&#xA;    where ptag = html &amp;quot;p&amp;quot;&#xA;&#xA;nodesToHTML :: [DocNode] -&amp;gt; TrackNotes HTML&#xA;nodesToHTML = liftM (foldl' (++) &amp;quot;&amp;quot;) . mapM nodeToHTML&#xA;&#xA;-- | Convert a single DocNode to HTML&#xA;nodeToHTML :: DocNode -&amp;gt; TrackNotes HTML&#xA;nodeToHTML (PlainText s)    = return s&#xA;nodeToHTML (Emphasis nodes) = liftM (html &amp;quot;i&amp;quot;) $ nodesToHTML nodes&#xA;nodeToHTML (Footnote nodes) = do&#xA;    content &amp;lt;- nodesToHTML nodes &#xA;    idx  &amp;lt;- liftM show $ addFootnote content&#xA;    let link = &amp;quot;#footnote&amp;quot; ++ idx&#xA;    let text = html &amp;quot;sup&amp;quot; idx&#xA;    return $ ahref link text&#xA;&#xA;-- | Format a footnote at the end of the document&#xA;formatFootnote :: (String, Int) -&amp;gt; HTML&#xA;formatFootnote (s,i) = html &amp;quot;p&amp;quot; $ html &amp;quot;small&amp;quot; $ anchor&#xA;    where anchor = &amp;quot;&amp;lt;a name=\&amp;quot;footnote&amp;quot; ++ show i ++ &amp;quot;\&amp;quot;&amp;gt;&amp;quot; ++ text ++ &amp;quot;&amp;lt;/a&amp;gt;&amp;quot;&#xA;          text   = show i ++ &amp;quot;. &amp;quot; ++ s&#xA;&#xA;-- |Enclose content in the given HTML element&#xA;--  e.g. html &amp;quot;span&amp;quot; &amp;quot;foo&amp;quot; -&amp;gt; &amp;quot;&amp;lt;span&amp;gt;foo&amp;lt;/span&amp;gt;&amp;quot;&#xA;html :: String -&amp;gt; String -&amp;gt; HTML&#xA;html tag content = foldl1' (++) [&amp;quot;&amp;lt;&amp;quot;, tag, &amp;quot;&amp;gt;&amp;quot;, content, &amp;quot;&amp;lt;/&amp;quot;, tag, &amp;quot;&amp;gt;&amp;quot;]&#xA;&#xA;-- |Generate a HTML link element&#xA;ahref :: String -&amp;gt; String -&amp;gt; HTML&#xA;ahref link txt = foldl1' (++) [&amp;quot;&amp;lt;a href=\&amp;quot;&amp;quot;, link, &amp;quot;\&amp;quot;&amp;gt;&amp;quot;, txt, &amp;quot;&amp;lt;/a&amp;gt;&amp;quot;]&#xA;&#xA;-- |Replace &amp;lt;, &amp;gt; and &amp;amp; with HTML entities&#xA;htmlEscape :: String -&amp;gt; HTML&#xA;htmlEscape &amp;quot;&amp;quot;     = &amp;quot;&amp;quot;&#xA;htmlEscape (x:xs) = prefix $! htmlEscape xs&#xA;    where prefix = case x of&#xA;            '&amp;amp;' -&amp;gt; showString &amp;quot;&amp;amp;amp;&amp;quot;&#xA;            '&amp;lt;' -&amp;gt; showString &amp;quot;&amp;amp;lt;&amp;quot;&#xA;            '&amp;gt;' -&amp;gt; showString &amp;quot;&amp;amp;gt;&amp;quot;&#xA;            _   -&amp;gt; (x:)&#xA;&#xA;{------------------------------&#xA; Miscellanous string utilities&#xA;-------------------------------}&#xA;&#xA;-- |Split a string into sections.&#xA;--  Two consecutive line breaks form a section break.&#xA;splitSections :: String -&amp;gt; [String]&#xA;splitSections = sections . lines&#xA;    where sections (x:[]:xs) = x : sections xs&#xA;          sections  (x:y:xs) = sections $ (x ++ ('\n' : y)) : xs&#xA;          sections         x = x&#xA;&#xA;-- | A &amp;quot;zipper&amp;quot; for navigating a string&#xA;--   Generates a list of (init,tail) pairs that traverse the list&#xA;--   E.g. zipper &amp;quot;foo&amp;quot; -&amp;gt; [(&amp;quot;&amp;quot;,&amp;quot;foo&amp;quot;), (&amp;quot;f&amp;quot;,&amp;quot;oo&amp;quot;), (&amp;quot;fo&amp;quot;,&amp;quot;o&amp;quot;), (&amp;quot;foo&amp;quot;,&amp;quot;&amp;quot;)]&#xA;zipper :: String -&amp;gt; [(String,String)]&#xA;zipper s = zip (inits s) (tails s)&#xA;&#xA;{-----&#xA; Main&#xA;------}&#xA;formatDoc :: String -&amp;gt; HTML&#xA;formatDoc = docToHTML . parseMarkup&#xA;&#xA;main = interact formatDoc&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1530" LastEditorUserId="128" LastEditDate="2011-03-07T19:37:51.480" LastActivityDate="2011-03-07T19:37:51.480" Title="Converting simple markup to HTML" Tags="&lt;functional-programming&gt;&lt;haskell&gt;" AnswerCount="1" CommentCount="1" FavoriteCount="1" />
  <row Id="1177" PostTypeId="2" ParentId="1176" CreationDate="2011-03-06T15:13:47.833" Score="7" Body="&lt;p&gt;One of Haskell's advantages is that there's a good number of high-quality parser libraries for it. Using one for this case might be a bit overkill, but since this is a learning exercise anyway it might be a good chance to pick up a parser library (e.g. parsec) as well. This could certainly come in handy later. Also using such a library, you could support nested markup without any trouble.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;About memory: Haskell strings, being (lazy) linked lists of characters, just aren't very memory efficient. For this reason it is often recommended to use bytestrings or &lt;code&gt;Data.Text&lt;/code&gt; in favor of plain strings if you need memory-efficient string handling.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;The footnotes seemed particularily challenging, as you kind of have to accumulate them on the side while building the rest of the document, and I didn't have any idea how to express that in functional terms (at least not without dragging an extra footnotes argument in every single function call).&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;As you already found out one solution to track state through the program without adding extra arguments is the State monad. However in this case I feel that it made the program more complicated than it needed to be.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I think an extra footnotes argument (and a second one to count them) would actually have been the simplest solution here.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;As a general design note, I think a two-step approach would make the code more manageable and extensible: First parse the string into an internal representation (I would call it a tree, except that until you support nested markup, it won't actually be a tree), and then write a function which turns that representation into HTML.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This way you separate the code that does the parsing from the code that produces the HTML, which is good style. It also allows you to add another output format later without having to duplicate any parsing code. It should also be easier to support nested markup using this approach and it also makes it easier to replace your manual parsing code with a parsing library should you decide to do so.&lt;/p&gt;&#xA;" OwnerUserId="128" LastActivityDate="2011-03-06T15:13:47.833" CommentCount="1" />
  <row Id="1179" PostTypeId="1" AcceptedAnswerId="1197" CreationDate="2011-03-07T02:14:47.887" Score="4" ViewCount="1198" Body="&lt;p&gt;I am doing a CS practice exercise in which you are supposed to sort exactly three numbers using only if statements.  I wrote the following code in LISP and would appreciate any suggestions how to improve on my code.  Thank you!&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(defun generate-three ()&#xA;  (loop for l from 1 to 3 collect (random 25)))&#xA;&#xA;(defun result (a b c) (format t &quot;The sorted result is (~d,~d,~d)~%&quot; a b c))&#xA;&#xA;(let (a b c (the-three (generate-three)))&#xA;    (format t &quot;~a ~%&quot; the-three)&#xA;    (setq a (first the-three) b (second the-three) c (third the-three))&#xA;    (if (&amp;lt; a b)&#xA;      (if (&amp;lt; b c) (result a b c)&#xA;        (if (&amp;lt; a c) (result a c b) (result c a b)))&#xA;      (if (&amp;lt; a c) (result b a c)&#xA;        (if (&amp;lt; b c) (result b c a) (result c b a)))))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Based on feedback from commenters, the revised code looks as follows:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(defun my-sort-3 (a b c)&#xA;    (if (&amp;lt; a b)&#xA;      (if (&amp;lt; b c) (list a b c)&#xA;        (if (&amp;lt; a c) (list a c b) (list c a b)))&#xA;      (if (&amp;lt; a c) (list b a c)&#xA;        (if (&amp;lt; b c) (list b c a) (list c b a)))))&#xA;&#xA;(destructuring-bind (a b c) (loop repeat 3 collect (random 25))&#xA;  (format t &quot;The sorted result of (~d,~d,~d) is ~a ~%&quot; a b c (my-sort-3 a b c)))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Latest iteration - note the changes in the final &quot;format&quot; statement:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(defun my-sort-3 (a b c)&#xA;    (if (&amp;lt; a b)&#xA;      (if (&amp;lt; b c) (list a b c)&#xA;        (if (&amp;lt; a c) (list a c b) (list c a b)))&#xA;      (if (&amp;lt; a c) (list b a c)&#xA;        (if (&amp;lt; b c) (list b c a) (list c b a)))))&#xA;&#xA;(destructuring-bind (a b c) (loop repeat 3 collect (random 25))&#xA;  (format t &quot;The sorted result of (~{~d~^, ~}) is (~{~d~^, ~})~%&quot; (list a b c) (my-sort-3 a b c)))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2355" LastEditorUserId="2355" LastEditDate="2011-03-09T04:00:19.203" LastActivityDate="2011-03-09T04:00:19.203" Title="Sorting numbers in LISP" Tags="&lt;lisp&gt;&lt;common-lisp&gt;" AnswerCount="3" CommentCount="0" />
  <row Id="1180" PostTypeId="1" AcceptedAnswerId="1193" CreationDate="2011-03-07T02:44:22.653" Score="10" ViewCount="447" Body="&lt;p&gt;I wrote the following Ruby script several years ago and have been using it often ever since on a Bioinformatics computer cluster.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It pulls out a list of hosts from the Torque queuing system &lt;code&gt;qnodes&lt;/code&gt;. It &lt;code&gt;ssh&lt;/code&gt;'es and runs a command on all the nodes. Then it prints the output and/or errors in a defined order (alphabetical sort of the hostnames).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A nice feature: results are printed immediately for the host that is next in the order.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&quot;http://i.stack.imgur.com/4cxca.png&quot; alt=&quot;on-all-nodes-run&quot;&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I would like to use it as an example for a Ruby workshop. Could you please suggest best-practice and design pattern improvements?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#!/usr/bin/ruby&#xA;&#xA;EXCLUDE = [/girkelab/, /biocluster/, /parrot/, /owl/] &#xA;&#xA;require &quot;open3&quot;&#xA;&#xA;# Non-interactive, no password asking, and seasonable timeouts&#xA;SSH_OPTIONS = [&quot;-o PreferredAuthentications=publickey,hostbased,gssapi,gssapi-with-mic&quot;,&#xA;               &quot;-o ForwardX11=no&quot;,&#xA;               &quot;-o BatchMode=yes&quot;,&#xA;               &quot;-o SetupTimeOut=5&quot;,&#xA;               &quot;-o ServerAliveInterval=5&quot;,&#xA;               &quot;-o ServerAliveCountMax=2&quot;&#xA;              ].join(&quot; &quot;)&#xA;&#xA;SSH    = &quot;/usr/bin/ssh #{SSH_OPTIONS}&quot;&#xA;MKDIR  = &quot;/bin/mkdir&quot;&#xA;&#xA;raise &quot;Pleae give this command at least one argument&quot; if ARGV.size &amp;lt; 1&#xA;COMMAND = ARGV[0..-1].join(' ')&#xA;&#xA;output_o = {}&#xA;output_e = {}&#xA;&#xA;&#xA;IO_CONNECTIONS_TO_REMOTE_PROCESSES = {}&#xA;&#xA;def on_all_nodes(&amp;amp;block)&#xA;  nodes = []&#xA;  Kernel.open('|qnodes | grep -v &quot;^ &quot; | grep -v &quot;^$&quot;') do |f|&#xA;    while line = f.gets&#xA;      i = line.split(' ').first&#xA;      nodes.push(i) if EXCLUDE.select{|x| i =~ x}.empty?&#xA;    end&#xA;  end&#xA;  nodes.sort.each {|n| block.call(n)}&#xA;end&#xA;&#xA;&#xA;# Create processes&#xA;on_all_nodes do |node|&#xA;  stdin, stdout, stderr = Open3.popen3(&quot;#{SSH} #{node} \&quot;#{COMMAND}\&quot;&quot;)&#xA;  IO_CONNECTIONS_TO_REMOTE_PROCESSES[node] = [stdin, stdout, stderr]&#xA;end&#xA;&#xA;&#xA;has_remote_errors = false&#xA;&#xA;# Collect results&#xA;on_all_nodes do |node|&#xA;  stdin, stdout, stderr = IO_CONNECTIONS_TO_REMOTE_PROCESSES[node]&#xA;&#xA;  stdin.close&#xA;&#xA;  e_thread = Thread.new do&#xA;    while line = stderr.gets&#xA;      line.chomp!&#xA;      STDERR.puts &quot;#{node} ERROR: #{line}&quot;&#xA;      has_remote_errors = true&#xA;    end&#xA;  end&#xA;&#xA;  o_thread = Thread.new do&#xA;    while line = stdout.gets&#xA;      line.chomp!&#xA;      puts &quot;#{node}      : #{line}&quot;&#xA;    end&#xA;  end&#xA;&#xA;  # Let the threads finish&#xA;  t1 = nil&#xA;  t2 = nil&#xA;  while [t1, t2].include? nil&#xA;    if t1.nil?&#xA;      t1 = e_thread.join(0.1) # Gives 1/10 of a second to STDERR&#xA;    end&#xA;    if t2.nil?&#xA;      t2 = o_thread.join(0.1) # Give 1/10 of a second to STDOUT&#xA;    end&#xA;  end&#xA;&#xA;end&#xA;&#xA;&#xA;exit(1) if has_remote_errors&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="492" LastEditorUserId="9357" LastEditDate="2014-04-05T06:17:37.673" LastActivityDate="2015-08-23T06:15:01.410" Title="Ruby script on-all-nodes-run not only for teaching" Tags="&lt;ruby&gt;&lt;multithreading&gt;&lt;networking&gt;&lt;child-process&gt;" AnswerCount="2" CommentCount="0" FavoriteCount="2" />
  <row Id="1181" PostTypeId="2" ParentId="1179" CreationDate="2011-03-07T02:48:44.740" Score="2" Body="&lt;p&gt;It's been a while since I've used lisp, so I can't really critique your code for style or any common lisp gotchas.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;That said, the biggest thing I notice here is that the code for generating the 3 numbers, sorting them, and printing the result are all tightly coupled with each other.  I would suggest defining a separate function that takes three numbers and returns them in sorted order, which can then be combined with your existing functions for generating three numbers and printing three numbers to give the desired output.  The added benefit, of course, is that this sort function can later be used to sort any three numbers, not just the three in this bit of code.&lt;/p&gt;&#xA;" OwnerUserId="1142" LastActivityDate="2011-03-07T02:48:44.740" CommentCount="0" />
  <row Id="1182" PostTypeId="1" AcceptedAnswerId="1201" CreationDate="2011-03-07T04:23:33.903" Score="4" ViewCount="952" Body="&lt;p&gt;This is a simple LISP program to read in three sides of a triangle and report what kind of triangle it is (or isn't).  Any feedback would be much appreciated.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(defun read-side (side) (format t &quot;Enter a value for side ~d: ~%&quot; side) (read))&#xA;&#xA;(defun is-a-triangle (a b c) (if (and (&amp;lt; a (+ b c)) (&amp;lt; b (+ a c)) (&amp;lt; c (+ a b))) t nil))&#xA;&#xA;(defun is-equilateral (a b c) (if (and (= a b c)) t nil))&#xA;&#xA;(defun is-isoceles (a b c) (if (or (= a b) (= b c)) t nil))&#xA;&#xA;(defun is-right-triangle (a b c) &#xA;  (let ((square-of-short-sides-sum 0) (short-sides ()) (large-side 0) (sides (list a b c))) &#xA;    (loop for p in sides do &#xA;      (if (&amp;gt; p large-side) &#xA;        (progn (if (/= 0 large-side) (setq short-sides (append short-sides (list large-side)))) &#xA;        (setq large-side p))&#xA;        (setq short-sides (append short-sides (list p)))))&#xA;    (format t &quot;short-sides: ~a ~%&quot; short-sides)&#xA;    (format t &quot;large-side: ~a ~%&quot; large-side)&#xA;    (loop for p in short-sides do &#xA;      (setq square-of-short-sides-sum (+ square-of-short-sides-sum (expt p 2))))&#xA;    (if (= (expt large-side 2) square-of-short-sides-sum) t nil)))&#xA;&#xA;(defun status-message (message a b c) (format t &quot;The shape ~d,~d,~d ~a ~%&quot; a b c message))&#xA;&#xA;(let ((a (read-side 1)) (b (read-side 2)) (c (read-side 3)))&#xA;  (status-message &quot;is being checked...&quot; a b c)&#xA;  (if (is-equilateral a b c) (status-message &quot;is an equilateral triangle.&quot; a b c)&#xA;      (if (is-a-triangle a b c)&#xA;        (progn (if (is-isoceles a b c) (status-message &quot;is an isoceles triangle.&quot; a b c)&#xA;            (if (is-right-triangle a b c) (status-message &quot;is a right triangle.&quot; a b c)&#xA;                (status-message &quot;is a non-isoceles, non-equilateral, non-right triangle.&quot; a b c))))&#xA;        (status-message &quot;is not a triangle.&quot; a b c))))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Thanks to the previous commenters for your suggestions.  I have since modified the code based on the feedback I have received and am posting the revised code below.  If you have any further feedback on this new revision, it is welcome.  Thank you!&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(defun read-side (side) (format t &quot;Enter a value for side ~d: ~%&quot; side) (read))&#xA;&#xA;(defun triangle-p (a b c) (and (&amp;lt; a (+ b c)) (&amp;lt; b (+ a c)) (&amp;lt; c (+ a b))))&#xA;&#xA;(defun equilateral-p (a b c) (= a b c))&#xA;&#xA;(defun isoceles-p (a b c) (or (= a b) (= b c)))&#xA;&#xA;(defun right-triangle-p (a b c) &#xA;  (destructuring-bind (long-side &amp;amp;rest short-sides) (sort (list a b c) #'&amp;gt;)&#xA;    (= (expt long-side 2) (+ (expt (first short-sides) 2) (expt (second short-sides) 2)))))&#xA;&#xA;(defun status-message (message a b c) (format t &quot;The shape ~d,~d,~d ~a ~%&quot; a b c message))&#xA;&#xA;(defun classify-triangle (a b c)&#xA;  (cond ((not (triangle-p a b c)))&#xA;    ((right-triangle-p a b c) 'right)&#xA;    ((equilateral-p a b c) 'equilateral)&#xA;    ((isoceles-p a b c) 'isoceles)&#xA;    (t 'triangle)))&#xA;&#xA;(let (triangle-type (a (read-side 1)) (b (read-side 2)) (c (read-side 3)))&#xA;  (format t &quot;classify triangle says ~a ~%&quot; (classify-triangle a b c))&#xA;  (setq triangle-type (classify-triangle a b c))&#xA;  (cond ((eq 'right triangle-type) (status-message &quot;is a right triangle.&quot; a b c))&#xA;    ((eq 'equilateral triangle-type) (status-message &quot;is an equilateral triangle.&quot; a b c))&#xA;    ((eq 'isoceles triangle-type) (status-message &quot;is an isoceles triangle.&quot; a b c))&#xA;    ((eq 'triangle triangle-type) (status-message &quot;is a non-right, non-isoceles, non-equilateral triangle.&quot; a b c))&#xA;    (t (status-message &quot;is not a triangle.&quot; a b c))))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Here is the latest revision:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(defun read-side (side) (format t &quot;Enter a value for side ~d: ~%&quot; side) (read))&#xA;&#xA;(defun triangle-p (a b c) (and (&amp;lt; a (+ b c)) (&amp;lt; b (+ a c)) (&amp;lt; c (+ a b))))&#xA;&#xA;(defun equilateral-p (a b c) (= a b c))&#xA;&#xA;(defun isoceles-p (a b c) (or (= a b) (= b c)))&#xA;&#xA;(defun right-triangle-p (a b c) &#xA;  (destructuring-bind (long-side &amp;amp;rest short-sides) (sort (list a b c) #'&amp;gt;)&#xA;    (= (expt long-side 2) (+ (expt (first short-sides) 2) (expt (second short-sides) 2)))))&#xA;&#xA;(defun status-message (message a b c) (format t &quot;The shape ~d,~d,~d ~a ~%&quot; a b c message))&#xA;&#xA;(defun classify-triangle (a b c)&#xA;  (cond ((not (triangle-p a b c)))&#xA;    ((right-triangle-p a b c) 'right)&#xA;    ((equilateral-p a b c) 'equilateral)&#xA;    ((isoceles-p a b c) 'isoceles)&#xA;    (t 'triangle)))&#xA;&#xA;(let* ((a (read-side 1)) (b (read-side 2)) (c (read-side 3)) (triangle-type (classify-triangle a b c)))&#xA;  (format t &quot;classify triangle says ~a ~%&quot; triangle-type)&#xA;  (cond ((eq 'right triangle-type) (status-message &quot;is a right triangle.&quot; a b c))&#xA;    ((eq 'equilateral triangle-type) (status-message &quot;is an equilateral triangle.&quot; a b c))&#xA;    ((eq 'isoceles triangle-type) (status-message &quot;is an isoceles triangle.&quot; a b c))&#xA;    ((eq 'triangle triangle-type) (status-message &quot;is a non-right, non-isoceles, non-equilateral triangle.&quot; a b c))&#xA;    (t (status-message &quot;is not a triangle.&quot; a b c))))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;After reading through your suggestion on my sorting question and then reading up on 'format', I tried to write a format statement to simplify the logic at the bottom of the code.  I couldn't figure out how to do a format conditional based on a symbol, so instead I defined the triangle types as global variables with 'defineparameter' (is there a better way to define constants?).  I also used the format loop which you described in your response to the my-sort-3 question to shorten the expression. The new code is as follows:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(defparameter *right* 0)&#xA;(defparameter *equilateral* 1)&#xA;(defparameter *isoceles* 2)&#xA;(defparameter *triangle* 3)&#xA;(defparameter *non-triangle* 4)&#xA;(defun read-side (side) (format t &quot;Enter a value for side ~d: ~%&quot; side) (read))&#xA;&#xA;(defun triangle-p (a b c) (and (&amp;lt; a (+ b c)) (&amp;lt; b (+ a c)) (&amp;lt; c (+ a b))))&#xA;&#xA;(defun equilateral-p (a b c) (= a b c))&#xA;&#xA;(defun isoceles-p (a b c) (or (= a b) (= b c) (= a c)))&#xA;&#xA;(defun right-triangle-p (a b c) &#xA;  (destructuring-bind (long-side &amp;amp;rest short-sides) (sort (list a b c) #'&amp;gt;)&#xA;    (= (expt long-side 2) (+ (expt (first short-sides) 2) (expt (second short-sides) 2)))))&#xA;&#xA;(defun status-message (message a b c) (format t &quot;The shape ~d,~d,~d ~a ~%&quot; a b c message))&#xA;&#xA;(defun classify-triangle (a b c)&#xA;  (cond ((not (triangle-p a b c)) *non-triangle*)&#xA;    ((right-triangle-p a b c) *right*)&#xA;    ((equilateral-p a b c) *equilateral*)&#xA;    ((isoceles-p a b c) *isoceles*)&#xA;    (t *triangle*)))&#xA;&#xA;(let* ((a (read-side 1)) (b (read-side 2)) (c (read-side 3)) (triangle-type (classify-triangle a b c)))&#xA;  (format t &quot;classify triangle says ~a ~%&quot; triangle-type)&#xA;  (format t &quot;The shape (~{~d~^,  ~}) is ~[a right~;an equilateral~;an isoceles~;a non-right, non-isoceles, non-equilateral~;not a~] triangle.&quot; (list a b c) triangle-type))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Thanks, everyone, for your continued feedback.  Here is the latest revision.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(defun read-side (side) (format t &quot;Enter a value for side ~d: ~%&quot; side) (read))&#xA;&#xA;(defun triangle-p (a b c) (and (&amp;lt; a (+ b c)) (&amp;lt; b (+ a c)) (&amp;lt; c (+ a b))))&#xA;&#xA;(defun equilateral-p (a b c) (= a b c))&#xA;&#xA;(defun isoceles-p (a b c) (or (= a b) (= b c)))&#xA;&#xA;(defun right-triangle-p (a b c) &#xA;    (destructuring-bind (long-side short-side-1 short-side-2) (sort (list a b c) #'&amp;gt;)&#xA;          (= (expt long-side 2) (+ (expt short-side-1 2) (expt short-side-2 2)))))&#xA;&#xA;(defun status-message (message a b c) (format t &quot;The shape ~d,~d,~d ~a ~%&quot; a b c message))&#xA;&#xA;(defun classify-triangle (a b c)&#xA;    (cond ((not (triangle-p a b c)) nil)&#xA;          ((right-triangle-p a b c) 'right)&#xA;              ((equilateral-p a b c) 'equilateral)&#xA;              ((isoceles-p a b c) 'isoceles)&#xA;                  (t 'triangle)))&#xA;&#xA;(let* ((a (read-side 1)) (b (read-side 2)) (c (read-side 3)) &#xA;    (triangle-type (classify-triangle a b c))&#xA;    (article (if (member triangle-type '(isoceles equilateral)) &quot;an&quot; &quot;a&quot;))&#xA;    (tri-name (if (eq triangle-type 'triangle) &quot;non-right, non-isoceles, non-equilateral&quot; triangle-type)))&#xA;    (format t &quot;The shape (~d, ~d, ~d) is ~:[not a triangle~;~a ~(~a~) triangle~].&quot; a b c triangle-type article tri-name))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2355" LastEditorUserId="2355" LastEditDate="2011-03-10T00:56:59.470" LastActivityDate="2013-06-12T04:23:08.270" Title="Determine type of triangle in LISP" Tags="&lt;lisp&gt;&lt;common-lisp&gt;" AnswerCount="5" CommentCount="0" />
  <row Id="1186" PostTypeId="2" ParentId="1182" CreationDate="2011-03-07T15:06:33.653" Score="1" Body="&lt;p&gt;Keep in mind that every form in lisp returns something. &lt;code&gt;(and foo bar baz)&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;foo&lt;/code&gt;, &lt;code&gt;bar&lt;/code&gt; or &lt;code&gt;baz&lt;/code&gt; evaluates to &lt;code&gt;nil&lt;/code&gt;, and &lt;code&gt;t&lt;/code&gt; if all of them evaluate to non-&lt;code&gt;nil&lt;/code&gt;. This means that anywhere you write &lt;code&gt;(if (and ...) t nil)&lt;/code&gt;, you can just write &lt;code&gt;(and ...)&lt;/code&gt; with the same effect. The same applies to &lt;code&gt;(if (or ...) t nil)&lt;/code&gt; and &lt;code&gt;(or ...)&lt;/code&gt;, as well as &lt;code&gt;(if (= ...) t nil)&lt;/code&gt; and &lt;code&gt;(= ...)&lt;/code&gt;. Your &lt;code&gt;is-equilateral&lt;/code&gt; is a particularly egregious violation of this; it can be written as simply &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(defun equilateral-p (a b c) (= a b c))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;The most common convention for predicates in Common Lisp is ending the function name with &lt;code&gt;p&lt;/code&gt; or &lt;code&gt;-p&lt;/code&gt;, rather than prefixing it with &lt;code&gt;is-&lt;/code&gt; (personally, I end predicate names with &lt;code&gt;?&lt;/code&gt;, in line with Scheme convention, but this is not the standard).&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Your &lt;code&gt;is-right-triangle&lt;/code&gt; function can be simplified &lt;strong&gt;a lot&lt;/strong&gt; by removing the stateful operations and using a more functional approach. I would have written it like so:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(defun right-triangle-p (a b c)&#xA;  (destructuring-bind (long-side &amp;amp;rest short-sides) (sort (list a b c) #'&amp;gt;)&#xA;    (= (expt large-side 2) &#xA;       (+ (expt (car short-sides) 2) (expt (cadr short-sides 2))))))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;As a rule, whenever you use &lt;code&gt;loop&lt;/code&gt; to assign values to intermediate variables through &lt;code&gt;setq&lt;/code&gt;, double check that you need the loop at all. I've found that it's frequently (though not always) superfluous.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;EDIT: If you take my advice about defining your other assignment as a function, you can instead write&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;...&#xA;(destructuring-bind (long-side &amp;amp;rest short-sides) (my-sort-3 a b c)&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;The final &lt;code&gt;let&lt;/code&gt; structure can be simplified by using &lt;code&gt;cond&lt;/code&gt; instead of nested &lt;code&gt;if&lt;/code&gt;s, and slightly re-arranging the clauses.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(let ((a (read-side 1)) (b (read-side 2)) (c (read-side 3)))&#xA;  (cond ((not (triangle-p a b c)) (status-message &quot;is not a triangle.&quot; a b c))&#xA;        ((equilateral-triangle-p a b c) (status-message &quot;is an equilateral triangle.&quot; a b c))&#xA;        ((isoceles-triangle-p a b c) (status-message &quot;is an isoceles triangle.&quot; a b c))&#xA;        ((right-triangle-p a b c) (status-message &quot;is a right triangle.&quot; a b c))&#xA;        (t (status-message &quot;is a non-isoceles, non-equilateral, non-right triangle.&quot; a b c))))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;You might want to re-write that final &lt;code&gt;let&lt;/code&gt; statement as a function that returns a type of triangle (so like &lt;code&gt;'isoceles&lt;/code&gt; instead of printing &lt;code&gt;&quot;The shape a,b,c is an isoceles triangle.\n&quot;&lt;/code&gt;) so that you can reuse it more easily. This is basically the same advice I gave you on your sorting function.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;On a slightly more general note, you might want to be explicit about which Lisp you're using. It's unambiguous in this case, since I'm pretty sure &lt;code&gt;loop&lt;/code&gt; is a CL construct, but keep in mind that &quot;Lisp&quot; is a fairly large family of languages,&lt;/p&gt;&#xA;" OwnerUserId="104" LastEditorUserId="104" LastEditDate="2011-03-07T19:30:50.757" LastActivityDate="2011-03-07T19:30:50.757" CommentCount="0" />
  <row Id="1187" PostTypeId="2" ParentId="1179" CreationDate="2011-03-07T17:08:17.143" Score="1" Body="&lt;p&gt;Since you have to use &lt;code&gt;if&lt;/code&gt;s, I won't comment on that other than to say that &lt;code&gt;cond&lt;/code&gt; (or, more likely, a recursive call) is probably the right choice here.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;The &lt;code&gt;loop&lt;/code&gt; you use in &lt;code&gt;generate-three&lt;/code&gt; is slightly more complicated than you need it to be. You can specify what you need with &lt;code&gt;(loop repeat 3 collect (random 25))&lt;/code&gt;. That's short enough that you won't need an intermediate function for this exercise. &lt;code&gt;loop&lt;/code&gt; is a fairly complicated construct (probably the most complicated in Lisp). If you really want to come to grips with it, read through &lt;a href=&quot;http://cl-cookbook.sourceforge.net/loop.html&quot; rel=&quot;nofollow&quot;&gt;The CL Cookbook entry&lt;/a&gt; and &lt;a href=&quot;http://www.gigamonkeys.com/book/loop-for-black-belts.html&quot; rel=&quot;nofollow&quot;&gt;Seibels' Loop chapter from Practical Common Lisp&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;There's no need to declare variables in Lisp, so the &lt;code&gt;a b c&lt;/code&gt; (effectively &lt;code&gt;(a nil) (b nil) (c nil)&lt;/code&gt;) in the initial &lt;code&gt;let&lt;/code&gt; statement is unnecessary. Since the only reason you're declaring those &lt;code&gt;nil&lt;/code&gt; variables is to assign them later, this would be a good place to use &lt;code&gt;destructuring-bind&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(destructuring-bind (a b c) (loop repeat 3 collect (random 25))&#xA;  (format t &quot;~a ~%&quot; (list a b c))&#xA;  (if (&amp;lt; a b)&#xA;      (if (&amp;lt; b c) &#xA;          (result a b c)&#xA;          (if (&amp;lt; a c) (result a c b) (result c a b)))&#xA;      (if (&amp;lt; a c) &#xA;          (result b a c)&#xA;          (if (&amp;lt; b c) (result b c a) (result c b a)))))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Is there a particular reason that you didn't define the final statement as a function that accepts three arguments (or a three-element list), and then call it? Also, is there any reason that your function prints out a summarizing sentence of its results, rather than returning a sorted list? Both of these points severely limit the reusability of your code. Had you, for  example, defined this as &lt;code&gt;my-sort-3&lt;/code&gt;, instead of making it a naked &lt;code&gt;let&lt;/code&gt; call, you could have used it in your triangle-related assignment.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This would also further simplify the code&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(defun my-sort-3 (a b c)&#xA;  (if (&amp;lt; a b)&#xA;      (if (&amp;lt; b c) &#xA;          (list a b c)&#xA;          (if (&amp;lt; a c) (list a c b) (list c a b)))&#xA;      (if (&amp;lt; a c) &#xA;          (list b a c)&#xA;          (if (&amp;lt; b c) (list b c a) (list c b a)))))&#xA;&#xA;(format t &quot;The sorted result is ~a~%&quot; &#xA;          (apply #'my-sort-3 (loop repeat 3 collect (random 25))))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="104" LastEditorUserId="104" LastEditDate="2011-03-07T19:34:33.217" LastActivityDate="2011-03-07T19:34:33.217" CommentCount="7" />
  <row Id="1188" PostTypeId="1" AcceptedAnswerId="1190" CreationDate="2011-03-07T18:59:10.373" Score="6" ViewCount="2127" Body="&lt;p&gt;I want to create delegates to access properties of different objects without knowing them in advance.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I have the following definitions&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public delegate T MyMethod&amp;lt;K, T&amp;gt;(K data);&#xA;&#xA;public static MyMethod&amp;lt;K, T&amp;gt; CreatePropertyGetter&amp;lt;K, T&amp;gt;(PropertyInfo property)&#xA;{       &#xA;   MethodInfo mi = property.DeclaringType.GetMethod(&quot;get_&quot; + property.Name);        &#xA;   return (MyMethod&amp;lt;K, T&amp;gt;)Delegate.CreateDelegate(typeof(MyMethod&amp;lt;K, T&amp;gt;), mi);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;where T can be decimal, string, datetime or int&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I have some initializing code that will create MyMethod delegates, based on the reflected properties of my object as follows:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;foreach (PropertyInfo property in entityType.GetProperties())&#xA;{               &#xA;    switch (property.PropertyType.Name)&#xA;    {&#xA;        case &quot;System.Decimal&quot;:&#xA;            return CreatePropertyGetter&amp;lt;T, decimal&amp;gt;(property);&#xA;        case &quot;System.DateTime&quot;:&#xA;            return CreatePropertyGetter&amp;lt;T, DateTime&amp;gt;(property);&#xA;        case &quot;System.String&quot;:&#xA;            return CreatePropertyGetter&amp;lt;T, DateTime&amp;gt;(property);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Is there a better way to&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;create property getters?&lt;/li&gt;&#xA;&lt;li&gt;enumerate through the supported property types hard-coded as strings?&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;However, performance is an issue, since these delegates will be called frequently (ticking scenario), so any casting will slow it down. While a more elegant solution is desirable, performance is still my main concern&lt;/p&gt;&#xA;" OwnerUserId="2437" LastActivityDate="2011-03-08T14:32:00.400" Title="Best practice instantiating generic delegates and accessing property getters" Tags="&lt;c#&gt;&lt;.net&gt;" AnswerCount="2" CommentCount="0" FavoriteCount="0" />
  <row Id="1189" PostTypeId="2" ParentId="1188" CreationDate="2011-03-07T19:14:38.163" Score="0" Body="&lt;p&gt;One suggestion is to create type -&gt; type map of all the types you want to support instead of making a switch statement on strings.&lt;/p&gt;&#xA;" OwnerUserId="803" LastActivityDate="2011-03-07T19:14:38.163" CommentCount="1" />
  <row Id="1190" PostTypeId="2" ParentId="1188" CreationDate="2011-03-07T19:59:22.320" Score="7" Body="&lt;p&gt;As &lt;a href=&quot;http://stackoverflow.com/questions/5221904/best-practice-instantiating-generic-delegates-and-accessing-property-getters/5222042#5222042&quot;&gt;my answer on Stack Overflow states&lt;/a&gt;, there is a solution which allows you to create a getter delegate for any type, so the entire switch block can be dropped. Personally, I find that the cleanest solution. The only overhead of this approach is the cast from object to the specific type where necessary. (For a getter this would happen only once on the return value.) I'm guessing if you would benchmark this, the result would be negligible.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;When you are certain that the only types required are those specified, or that no new types are expected very often, you could still opt to use your current approach. I would apply a few changes however:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Use &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/e17dw503.aspx&quot; rel=&quot;nofollow&quot;&gt;PropertyInfo.GetGetMethod()&lt;/a&gt; to retrieve your MethodInfo for the getter.&lt;/li&gt;&#xA;&lt;li&gt;Use the type of PropertyType directly to determine which CreatePropertyGetter to call instead of the name of the type.&lt;/li&gt;&#xA;&lt;li&gt;Use &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/bb549151.aspx&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;Func&amp;lt;K, T&amp;gt;&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;MyMethod&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Use a Dictionary holding anonymous functions which create the correct delegate for the specified type of the key. This can replace the switch statement.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;The last point is possible as follows:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Dictionary&amp;lt;Type, Func&amp;lt;PropertyInfo, object&amp;gt;&amp;gt; getterCreators =&#xA;    new Dictionary&amp;lt;Type, Func&amp;lt;PropertyInfo, object&amp;gt;&amp;gt;&#xA;    {&#xA;        { typeof(string), p =&amp;gt; CreatePropertyGetter&amp;lt;T, string&amp;gt;(p) },&#xA;        { typeof(DateTime), p =&amp;gt; CreatePropertyGetter&amp;lt;T, DateTime&amp;gt;(p) },&#xA;        { typeof(decimal), p =&amp;gt; CreatePropertyGetter&amp;lt;T, decimal&amp;gt;(p) }&#xA;    };&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Ofcourse you still have to cast from object to the desired type.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;UPDATE:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As Timwi pointed out in the comments, &lt;code&gt;p =&amp;gt; CreatePropertyGetter&amp;lt;T, ...&amp;gt;(p)&lt;/code&gt; can be further reduced to: &lt;code&gt;CreatePropertyGetter&amp;lt;T, ...&amp;gt;&lt;/code&gt;.&lt;/p&gt;&#xA;" OwnerUserId="2254" LastEditorUserId="2254" LastEditDate="2011-03-08T14:32:00.400" LastActivityDate="2011-03-08T14:32:00.400" CommentCount="2" />
  <row Id="1191" PostTypeId="2" ParentId="1171" CreationDate="2011-03-07T20:11:27.490" Score="5" Body="&lt;p&gt;You're repeating code blocks all over the place; you may want to abstract some out. For example, calling something like&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;function animatePxProperty(prop, limit, step, interval){&#xA;    if(!step) step = 1; //I miss optional arguments :(&#xA;    if(!interval) interval = 1;&#xA;    var anim = setInterval(&#xA;        function() {&#xA;            if(parseInt(prop) === parseInt(limit)) clearInterval(anim);&#xA;            prop = parseInt(prop)  + step + 'px';&#xA;        }, interval&#xA;    );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;instead of providing inline anonymous functions to &lt;code&gt;interval&lt;/code&gt; (I haven't tested the above, so tweakery may be required).&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;When making comparisons/assignments like&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(box.style.left === (window.innerWidth - 120) + 'px') {&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;and&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;box.style.left = (&#xA;    +box.style.left.replace('px', '') + 1&#xA;) + 'px'&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;it's probably better to use &lt;code&gt;parseInt&lt;/code&gt; instead of &lt;code&gt;.replace&lt;/code&gt;. So&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var left_val = parseInt(box.style.left);&#xA;...&#xA;(left_val === (window.innerWidth - 120)) {&#xA;...&#xA;box.style.left = left_val + 1 + 'px';&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;Indulge me, because I'm curious. If you can express exactly what you want with three lines of jQuery, why would you want to implement the same with 88 lines of convoluted side-effects?&lt;/p&gt;&#xA;" OwnerUserId="104" LastActivityDate="2011-03-07T20:11:27.490" CommentCount="5" />
  <row Id="1192" PostTypeId="1" AcceptedAnswerId="10319" CreationDate="2011-03-07T20:33:02.680" Score="6" ViewCount="382" Body="&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/5212640/rails-how-to-create-different-views/5212690#5212690&quot;&gt;I answered a question in stackoverflow&lt;/a&gt; but I gave a solution that looks a little dirty to me, I'd like your opinion because I think there is a much smarter way to do it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A &lt;strong&gt;guest&lt;/strong&gt; user should be able to choose between two different view modalities.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;My approach was to implement an action and store the choice in the session.&#xA;I paste some relevant code here as well:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;  # application_controller.rb&#xA;  def set_view_type # TODO: here is the part I don't like&#xA;    session[:view_type] = params[:view_type]&#xA;    redirect_to :back&#xA;  end&#xA;&#xA;  # x_controller.rb&#xA;  def index&#xA;    case session[:view_type].to_sym&#xA;    when :box render 'index_box'&#xA;    else      render 'index_list'&#xA;    end&#xA;  end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then I use two &lt;code&gt;link_to&lt;/code&gt; (instead of &lt;code&gt;radiobutton&lt;/code&gt; as in stackoverflow) to choose the view, and those should be visible anytime in the layout, this is why I use &lt;code&gt;application_controller&lt;/code&gt; for that.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;PS: &lt;em&gt;I don't know if it's correct to ask for a question that it's still open in SO, feel free to answer straight there by me, I just think here I'm posting my solution that I would like to be revised.&lt;/em&gt;&lt;/p&gt;&#xA;" OwnerUserId="96" LastEditorUserId="18427" LastEditDate="2013-11-24T07:05:00.303" LastActivityDate="2013-11-24T07:05:00.303" Title="How to manage different views" Tags="&lt;ruby&gt;&lt;ruby-on-rails&gt;" AnswerCount="1" CommentCount="0" />
  <row Id="1193" PostTypeId="2" ParentId="1180" CreationDate="2011-03-07T21:21:19.100" Score="10" Body="&lt;p&gt;First of all, take a look at the &lt;a href=&quot;http://net-ssh.github.com/ssh/v2/api/index.html&quot;&gt;&lt;code&gt;Net::SSH&lt;/code&gt;&lt;/a&gt; library. I don't have much experience with it, so I don't know whether it supports all the options you need. But if it does, using it might be more robust than using the command line utility (you wouldn't have to worry about whether &lt;code&gt;ssh&lt;/code&gt; is installed in the place you expect (or at all) and you wouldn't have to worry about escaping the arguments).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Assuming you can't (or won't) use &lt;code&gt;Net::SSH&lt;/code&gt;, you should at least replace &lt;code&gt;/usr/bin/ssh&lt;/code&gt; with just &lt;code&gt;ssh&lt;/code&gt;, so at least it still works if &lt;code&gt;ssh&lt;/code&gt; is installed in another location in the PATH.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;nodes = []&#xA;Kernel.open('|qnodes | grep -v &quot;^ &quot; | grep -v &quot;^$&quot;') do |f|&#xA;  while line = f.gets&#xA;    i = line.split(' ').first&#xA;    nodes.push(i) if EXCLUDE.select{|x| i =~ x}.empty?&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;When you initialize an empty array and then append to it in a loop, that is often a good sign you want to use &lt;code&gt;map&lt;/code&gt; and/or &lt;code&gt;select&lt;/code&gt; instead.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;line = f.gets&lt;/code&gt; is a bit of an anti-pattern in ruby. The &lt;code&gt;IO&lt;/code&gt; class already has methods to iterate a file line-wise.&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;To find out whether none of the elements in an array meet a condition, negating &lt;code&gt;any?&lt;/code&gt; seems more idiomatic than building an array with &lt;code&gt;select&lt;/code&gt; and check whether it's empty.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;nodes = Kernel.open('|qnodes | grep -v &quot;^ &quot; | grep -v &quot;^$&quot;') do |f|&#xA;  f.lines.map do |line|&#xA;    line.split(' ').first&#xA;  end.reject do |i|&#xA;    EXCLUDE.any? {|x| i =~ x}&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;nodes.sort.each {|n| block.call(n)}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I would recommend that instead of taking a block and yielding each element, you just return &lt;code&gt;nodes.sort&lt;/code&gt; and rename the function to &lt;code&gt;all_nodes&lt;/code&gt;. This way you can use &lt;code&gt;all_nodes.each&lt;/code&gt; to execute code on all nodes, but you could also use &lt;code&gt;all_nodes.map&lt;/code&gt; or &lt;code&gt;all_nodes.select&lt;/code&gt; when it makes sense.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Open3.popen3(&quot;#{SSH} #{node} \&quot;#{COMMAND}\&quot;&quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note that this will break if &lt;code&gt;COMMAND&lt;/code&gt; contains double quotes itself. Generally trying to escape command line arguments by surrounding them with quotes is a bad idea. &lt;code&gt;system&lt;/code&gt; and &lt;code&gt;open3&lt;/code&gt; accept multiple arguments exactly to avoid this.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you make &lt;code&gt;SSH&lt;/code&gt; an array (with one element per argument) instead of a string, you can use the multiple-arguments version of &lt;code&gt;popen3&lt;/code&gt; and can thus avoid the fickle solution of adding quote around &lt;code&gt;COMMAND&lt;/code&gt; to escape spaces, i.e.:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Open3.popen3(*(SSH + [node, COMMAND]))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;IO_CONNECTIONS_TO_REMOTE_PROCESSES = {}&#xA;# ...&#xA;on_all_nodes do |node|&#xA;  stdin, stdout, stderr = Open3.popen3(&quot;#{SSH} #{node} \&quot;#{COMMAND}\&quot;&quot;)&#xA;  IO_CONNECTIONS_TO_REMOTE_PROCESSES[node] = [stdin, stdout, stderr]&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you heeded my above advice about &lt;code&gt;all_nodes&lt;/code&gt; you can simplify this using &lt;code&gt;map&lt;/code&gt;. I also would suggest not using a Hash here. If you use an array instead, the nodes will stay in the order in which you inserted them, which will mean that you can iterate over that array instead of invoking &lt;code&gt;all_nodes&lt;/code&gt; again.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;has_remote_errors = false&#xA;&#xA;all_nodes.map do |node|&#xA;  [node, Open3.popen3(*(SSH + [node, COMMAND]))]&#xA;end.each do |node, (stdin, stdout, stderr)|&#xA;  stdin.close&#xA;&#xA;  ethread = # ...&#xA;  # ...&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This way you removed the complexity of first putting everything into a hash and then getting it out again.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;while line = stderr.gets&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Again, this can be written more idiomatically as &lt;code&gt;stderr.each_line do |line|&lt;/code&gt;. Same with stdout.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;first = true&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This is never used. I can only assume that it's a left over of previous iterations of the code, which is no longer necessary. Obviously it should be removed.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;# Let the threads finish&#xA;t1 = nil&#xA;t2 = nil&#xA;while [t1, t2].include? nil&#xA;  if t1.nil?&#xA;    t1 = e_thread.join(0.1) # Gives 1/10 of a second to STDERR&#xA;  end&#xA;  if t2.nil?&#xA;    t2 = o_thread.join(0.1) # Give 1/10 of a second to STDOUT&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I don't see any benefit of doing it this way. Just do:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;e_thread.join&#xA;o_thread.join&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note that &lt;code&gt;join&lt;/code&gt;ing on one thread does not mean that the other threads stop running - only the main thread does, but that's perfectly okay as you want that anyway.&lt;/p&gt;&#xA;" OwnerUserId="128" LastEditorUserId="128" LastEditDate="2011-03-13T00:04:56.160" LastActivityDate="2011-03-13T00:04:56.160" CommentCount="1" />
  <row Id="1194" PostTypeId="1" AcceptedAnswerId="1195" CreationDate="2011-03-08T05:18:13.247" Score="3" ViewCount="1822" Body="&lt;p&gt;I've got three tables I need query to display to a user for a web application I've written. Each table (Url, Note, Quote) has a foreign key relation to the User table. For every User, I need to sort all Bookmarks, Notes and Quotes based on a _date_created_ field, then deliver that to the template as one iterable. This is for a toy/self-learning project so I don't really need to worry about scale.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The approach I've taken is this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;from operator import attrgetter&#xA;&#xA;from app.models import Url, Note, Quote&#xA;&#xA;date_dict = {}&#xA;&#xA;for url in Url.objects.filter(user=request.user):&#xA;    date_dict[url.date_created] = Url.objects.get(date_created=url.date_created)&#xA;&#xA;for note in Note.objects.filter(user=request.user):&#xA;    date_dict[note.date_created] = Note.objects.get(date_created=note.date_created)&#xA;&#xA;for quote in Quote.objects.filter(user=request.user):&#xA;    date_dict[quote.date_created] = Quote.objects.get(date_created=quote.date_created)&#xA;&#xA;my_query = sorted((date_dict[i] for i in date_dict.iterkeys()), &#xA;                  key=attrgetter(&quot;date_created&quot;), &#xA;                  reverse=True)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I have also tried this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;from operator import attrgetter&#xA;from itertools import chain&#xA;&#xA;from app.models import Url, Note, Quote&#xA;&#xA;items = sorted(chain(Url.objects.filter(user=request.user), &#xA;                     Note.objects.filter(user=request.user), &#xA;                     Quote.objects.filter(user=request.user)), &#xA;               key=attrgetter(&quot;date_created&quot;), &#xA;               reverse=True)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I'm concerned how expensive this would get if I had huge data sets (I don't), but from what I've read the second is faster.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This code works and does what I expect it to, but is there a better/faster approach?&lt;/p&gt;&#xA;" OwnerUserId="2404" LastEditorUserId="2404" LastEditDate="2011-03-08T06:08:45.527" LastActivityDate="2011-03-08T06:15:01.540" Title="Three-table queryset (full outer join?) in Django" Tags="&lt;python&gt;&lt;django&gt;" AnswerCount="1" CommentCount="5" />
  <row Id="1195" PostTypeId="2" ParentId="1194" CreationDate="2011-03-08T05:34:14.350" Score="1" Body="&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt; Removed previous version which was pretty much telling you to use the second method shown above. Your first method loads everything from the database twice. (Django may do some caching, but still) I'm not sure why you are putting everything in the dictionary.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The problem with the current implementation is that sorting is done by python rather then in the database. It would be better to have the sorting done in the database. There are two ways I see of doing that.&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;p&gt;You could have the three different sources sorted by the database. Then you could perform a merge pass to combine them. However, you are probably going to have need a lot of data before that becomes a worthwhile strategy. Sorting will be implemently in C for python which will make it have a speed advantage over a merge which you would have to implement in python. &lt;/p&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;p&gt;You could redesign your database so Urls, Quotes, and Notes are stored in the same table. That way you could request the database to sort them. &lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;Both of these strategies are really only helpful if you end up with a lot of data. If you have that much data you aren't going to want to present it all to the user anyways. The result is that its probably not useful.&lt;/p&gt;&#xA;" OwnerUserId="1659" LastEditorUserId="1659" LastEditDate="2011-03-08T06:15:01.540" LastActivityDate="2011-03-08T06:15:01.540" CommentCount="1" />
  <row Id="1196" PostTypeId="1" AcceptedAnswerId="1200" CreationDate="2011-03-08T07:18:26.540" Score="6" ViewCount="563" Body="&lt;p&gt;I had a file that looked like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Mar 06 22:00:00 [10.251.132.246] logger: 10.64.69.219 - - [06/Mar/2011:22:.....&#xA;Mar 06 22:00:00 [10.251.132.246] logger: 10.98.137.116 - - [06/Mar/2011:22:0....&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;that I wanted to split into smaller files using the ip address after &quot;logger&quot;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is what I came up with:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;file = ARGV.shift&#xA;split_file = {}&#xA;pattern = /logger: ([^\s]*)/&#xA;File.open(file, 'r') do |f|&#xA;    f.each do |l|&#xA;        match = l[pattern]&#xA;        if match&#xA;            list = split_file[$1]&#xA;            list = [] if list == nil&#xA;            list &amp;lt;&amp;lt; l&#xA;            split_file[$1] = list&#xA;        end&#xA;    end&#xA;end&#xA;&#xA;split_file.each_pair do |k, v|&#xA;    File.open(&quot;#{file}.#{k}&quot;, &quot;a+&quot;) do |f|&#xA;        v.each do |l|&#xA;            f.print l&#xA;        end&#xA;    end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Suggestions, warnings, improvements are very welcome :)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;One thing I noticed is that the new files are created in the same directory as the original file, not at the current working directory (so ./logsplitter.rb ../log.log creates files in the .. directory).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Thank you&lt;/p&gt;&#xA;&#xA;&lt;p&gt;[edit: typo]&lt;/p&gt;&#xA;" OwnerUserId="2445" LastEditorUserId="1580" LastEditDate="2011-03-12T21:09:49.613" LastActivityDate="2011-03-12T21:09:49.613" Title="Splitting log file into smaller files" Tags="&lt;ruby&gt;" AnswerCount="1" CommentCount="6" FavoriteCount="2" />
  <row Id="1197" PostTypeId="2" ParentId="1179" CreationDate="2011-03-08T14:00:47.043" Score="1" Body="&lt;p&gt;In response to your follow-up.  If you're really keen to keep the final formatting of the result &quot;(~d, ~d, ~d)&quot;, you can still do that by formatting a list, you'd just have a slightly more complicated directive.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(format t &quot;The sorted result is (~{~d~^, ~})~%&quot; &#xA;          (apply #'my-sort-3 (loop repeat 3 collect (random 25))))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;In a format directive &lt;code&gt;~{ ~}&lt;/code&gt; denotes a loop. It expects a list, and applies the contained directive to each element. Within curlies in a format directive, &lt;code&gt;~^&lt;/code&gt; denotes a joining string. Anything after it is repeated except on the last iteration. So, assuming the &lt;code&gt;loop&lt;/code&gt; generated &lt;code&gt;(1 2 3)&lt;/code&gt;, the result of the above statement would be&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;The sorted result is (3, 2, 1)&#xA;NIL&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;For more information on &lt;code&gt;format&lt;/code&gt;, check &lt;a href=&quot;http://www.gigamonkeys.com/book/a-few-format-recipes.html&quot; rel=&quot;nofollow&quot;&gt;Seibels' chapter on format&lt;/a&gt; (in fact &lt;a href=&quot;http://www.gigamonkeys.com/book/&quot; rel=&quot;nofollow&quot;&gt;the entire book&lt;/a&gt; might be useful to you. (That wasn't &lt;a href=&quot;http://rads.stackoverflow.com/amzn/click/1590592395&quot; rel=&quot;nofollow&quot;&gt;the Amazon link&lt;/a&gt;, by the way, the entire Practical Common Lisp is available for free online)), and the &lt;a href=&quot;http://www.lispworks.com/documentation/HyperSpec/Body/22_c.htm&quot; rel=&quot;nofollow&quot;&gt;CLHS section on formatted output&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you're up for a challenge, after reading some of the above you should be able to replace this&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(cond ((eq 'right triangle-type) (status-message &quot;is a right triangle.&quot; a b c))&#xA;    ((eq 'equilateral triangle-type) (status-message &quot;is an equilateral triangle.&quot; a b c))&#xA;    ((eq 'isoceles triangle-type) (status-message &quot;is an isoceles triangle.&quot; a b c))&#xA;    ((eq 'triangle triangle-type) (status-message &quot;is a non-right, non-isoceles, non-equilateral triangle.&quot; a b c))&#xA;    (t (status-message &quot;is not a triangle.&quot; a b c)))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;with a single &lt;code&gt;format&lt;/code&gt; statement in your triangle assignment.&lt;/p&gt;&#xA;" OwnerUserId="104" LastActivityDate="2011-03-08T14:00:47.043" CommentCount="0" />
  <row Id="1198" PostTypeId="1" AcceptedAnswerId="1199" CreationDate="2011-03-08T14:18:45.670" Score="5" ViewCount="268" Body="&lt;p&gt;I have a &lt;code&gt;std::set&amp;lt;std::string&amp;gt;&lt;/code&gt; and I need to know the total number of characters (sum of all strings length):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;static size_t SumLength(size_t value, const std::string &amp;amp;str)&#xA;{&#xA;    return str.length() + value;&#xA;}&#xA;&#xA;size_t TotalLength(std::set&amp;lt;std::string&amp;gt; &amp;amp;stringSet)&#xA;{&#xA;   return std::accumulate(stringSet.begin(), stringSet.end(), 0, SumLength);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;What do you think of this approach?&lt;/p&gt;&#xA;" OwnerUserId="103" LastEditorUserId="22222" LastEditDate="2015-07-06T20:30:01.883" LastActivityDate="2015-07-06T20:30:01.883" Title="Counting the total number of characters in an std::set&lt;std::string&gt;" Tags="&lt;c++&gt;" AnswerCount="2" CommentCount="0" />
  <row Id="1199" PostTypeId="2" ParentId="1198" CreationDate="2011-03-08T14:31:58.970" Score="8" Body="&lt;p&gt;You should make the parameter to &lt;code&gt;TotalLength&lt;/code&gt; const, so you can use it on constant sets. Since &lt;code&gt;TotalLength&lt;/code&gt; does not modify its argument, there is no reason not to use a const reference.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also this is a small thing, but I'd change the name of &lt;code&gt;SumLength&lt;/code&gt; to &lt;code&gt;AddLength&lt;/code&gt; as &lt;code&gt;Sum&lt;/code&gt; to me suggests that it operates on multiple strings.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Other than that your code looks perfectly fine and straight forward.&lt;/p&gt;&#xA;" OwnerUserId="128" LastActivityDate="2011-03-08T14:31:58.970" CommentCount="1" />
  <row Id="1200" PostTypeId="2" ParentId="1196" CreationDate="2011-03-08T15:15:41.740" Score="4" Body="&lt;p&gt;First of all it is a pretty wide-spread convention in ruby to use 2 spaces for indendation not 4. Personally I don't care, but there are some ruby developers who will complain when seeing code indented with 4 spaces, so you'll have an easier time just going with the stream.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;file = ARGV.shift&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Unless there is a good reason to mutate &lt;code&gt;ARGV&lt;/code&gt; (which in this case doesn't seem to be the case), I'd recommend not using mutating operations. &lt;code&gt;file = ARGV[0]&lt;/code&gt; will work perfectly fine here.&lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;match = l[pattern]&#xA;if match&#xA;    list = split_file[$1]&#xA;    list = [] if list == nil&#xA;    list &amp;lt;&amp;lt; l&#xA;    split_file[$1] = list&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;First of all you should avoid using magic variables. Using MatchData objects is more robust than using magic variables. As an example consider this scenario:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Assume that you decide you want to do some processing on the line before storing it in &lt;code&gt;split_file&lt;/code&gt;. For this you decide to use gsub. Now your code looks like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;match = l[pattern]&#xA;if match&#xA;    list = split_file[$1]&#xA;    list = [] if list == nil&#xA;    list &amp;lt;&amp;lt; l.gsub( /some_regex/, &quot;some replacement&quot;)&#xA;    split_file[$1] = list&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;However this code is broken. Since &lt;code&gt;gsub&lt;/code&gt; also sets &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$1&lt;/code&gt; now no longer contains what you think it does and &lt;code&gt;split_file[$1]&lt;/code&gt; will not work as expected. This kind of bug can't happen if you use &lt;code&gt;[1]&lt;/code&gt; on a match data object instead.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Further the whole code can be simplified by using a very useful feature of ruby hashes: default blocks. Hashes in ruby allow you to specify a block which is executed when a key is not found. This way you can create hash of arrays which you can just append to without having to make sure the array exists.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For this you need to change the initialization of &lt;code&gt;split_file&lt;/code&gt; from &lt;code&gt;split_file = {}&lt;/code&gt; to &lt;code&gt;split_file = Hash.new {|h,k| h[k] = [] }&lt;/code&gt;. Then you can replace the above code with:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;match = l.match(pattern)&#xA;if match&#xA;  split_file[ match[1] ] &amp;lt;&amp;lt; l&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;One thing I noticed is that the new files are created in the same directory as the original file, not at the current working directory (so ./logsplitter.rb ../log.log creates files in the .. directory).&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;If you want to avoid that use &lt;code&gt;File.basename&lt;/code&gt; to extract only the name of the file without the directory from the given path and then build the path of the file to be created from that. I.e.:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;File.open(&quot;#{ File.basename(file) }.#{k}&quot;, &quot;a+&quot;) do |f|&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Speaking of this line: I don't see why you use &quot;a+&quot; instead of just &quot;a&quot; as the opening mode - you never read from it.&lt;/p&gt;&#xA;" OwnerUserId="128" LastEditorUserId="128" LastEditDate="2011-03-09T12:30:52.603" LastActivityDate="2011-03-09T12:30:52.603" CommentCount="3" />
  <row Id="1201" PostTypeId="2" ParentId="1182" CreationDate="2011-03-08T16:27:37.237" Score="2" Body="&lt;p&gt;Much better.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You seem to like assignment a bit more than I do, though. You can rewrite that last let as&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(let* ((a (read-side 1)) (b (read-side 2)) (c (read-side 3)) (triangle-type (classify-triangle a b c)))&#xA;  (format t &quot;classify triangle says ~a ~%&quot; triangle-type)&#xA;  (cond ((eq 'right triangle-type) (status-message &quot;is a right triangle.&quot; a b c))&#xA;        ((eq 'equilateral triangle-type) (status-message &quot;is an equilateral triangle.&quot; a b c))&#xA;        ((eq 'isoceles triangle-type) (status-message &quot;is an isoceles triangle.&quot; a b c))&#xA;        ((eq 'triangle triangle-type) (status-message &quot;is a non-right, non-isoceles, non-equilateral triangle.&quot; a b c))&#xA;        (t (status-message &quot;is not a triangle.&quot; a b c))))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;let*&lt;/code&gt; is basically &lt;code&gt;let&lt;/code&gt;, except that its arguments are guaranteed to be evaluated in the given order (which means that later bindings can refer to previous ones from the same &lt;code&gt;let*&lt;/code&gt; statement). It's good style to use &lt;code&gt;let&lt;/code&gt; where you can, but &lt;code&gt;let*&lt;/code&gt; is better than creating a temporary &lt;code&gt;nil&lt;/code&gt; binding and &lt;code&gt;setq&lt;/code&gt;ing it later.&lt;/p&gt;&#xA;" OwnerUserId="104" LastActivityDate="2011-03-08T16:27:37.237" CommentCount="3" />
  <row Id="1202" PostTypeId="1" CreationDate="2011-03-08T16:50:51.400" Score="6" ViewCount="5893" Body="&lt;p&gt;I'm working on a network monitoring application, that pings an unknown number of hosts. I've made a class &lt;code&gt;PingHost&lt;/code&gt; with a function &lt;code&gt;zping&lt;/code&gt; and I called it with the help of a timer once every 2 seconds to let the 2 pings to finish, even if one of them gets &lt;code&gt;TimedOut&lt;/code&gt;. But I think a better solution is to generate a new thread for every ping, so that the ping of every host would be independent.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Can anyone give me a hint how to do this?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;namespace pinguin&#xA;{&#xA;    public partial class Form1 : Form&#xA;    {&#xA;        public Form1()&#xA;        { &#xA;            InitializeComponent();&#xA;        }&#xA;&#xA;        private void timer1_Tick(object sender, EventArgs e)&#xA;        {&#xA;            PingHost caca = new PingHost();&#xA;            PingHost caca1 = new PingHost();&#xA;            this.label1.Text = caca.zping(&quot;89.115.14.160&quot;);&#xA;            this.label2.Text = caca1.zping(&quot;89.115.14.129&quot;);&#xA;        }&#xA;&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    public class PingHost&#xA;    {&#xA;        public string zping(string dest)&#xA;        {&#xA;            Application.DoEvents();&#xA;            Ping sender = new Ping();&#xA;            PingOptions options = new PingOptions();&#xA;            options.DontFragment = true;&#xA;&#xA;            string data = &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;;&#xA;            byte[] buffer = Encoding.ASCII.GetBytes(data);&#xA;            int timeout = 50;&#xA;            int failed = 0;&#xA;            int pingAmount = 5;&#xA;            string stat = &quot;&quot;;&#xA;            PingReply reply = sender.Send(dest, timeout, buffer, options);&#xA;            if (reply.Status == IPStatus.Success)&#xA;            {&#xA;                stat = &quot;ok&quot;;&#xA;            }&#xA;            else&#xA;            {&#xA;                stat = &quot;not ok!&quot;;&#xA;            }&#xA;            return stat;&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2451" LastEditorUserId="22222" LastEditDate="2015-06-14T23:21:03.267" LastActivityDate="2015-06-14T23:21:03.267" Title="Multithreaded host pinging application" Tags="&lt;c#&gt;&lt;multithreading&gt;&lt;networking&gt;" AnswerCount="1" CommentCount="0" FavoriteCount="1" />
  <row Id="1203" PostTypeId="2" ParentId="1202" CreationDate="2011-03-08T18:32:47.360" Score="5" Body="&lt;p&gt;You can use &lt;code&gt;SendAsync&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;sender.PingCompleted += new PingCompletedEventHandler (PingCompletedCallback);&#xA;sender.SendAsync(dest, timeout, buffer, options, textLabel);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And the callback:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;private static void PingCompletedCallback (object label, PingCompletedEventArgs e)&#xA;{&#xA;   if (e.Reply.Status == IPStatus.Success)&#xA;   {&#xA;      label.Text = &quot;ok&quot;;&#xA;   }&#xA;   else&#xA;   {&#xA;      label.Text = &quot;not ok!&quot;;&#xA;   }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Disclaimer: I haven't run this code. I believe the delegate will be able to access the label, but I've had issues with it in the past. &lt;/p&gt;&#xA;" OwnerUserId="110" LastEditorUserId="110" LastEditDate="2011-03-09T13:39:23.673" LastActivityDate="2011-03-09T13:39:23.673" CommentCount="8" />
  <row Id="1204" PostTypeId="1" CreationDate="2011-03-09T03:42:59.360" Score="11" ViewCount="1266" Body="&lt;p&gt;I wondering what people think of this game of life. I don't think it is working properly, but I am interesting in what people think of the general design.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;module GameOfLife where&#xA;import Data.List&#xA;&#xA;--Our types &#xA;type Coord = (Int, Int)&#xA;origin = (0, 0)&#xA;&#xA;--Think of an image more like an infinite manifold  &#xA;type DiscreteImage a = (Coord -&amp;gt; a)&#xA;&#xA;--Cat is our &quot;out of bounds&quot;&#xA;data GamePiece = Alive | Dead | Cat&#xA;    deriving(Show, Eq)&#xA;&#xA;type GameBoard = DiscreteImage GamePiece&#xA;&#xA;type TransitionRule = (GameBoard -&amp;gt; GamePiece)&#xA;&#xA;under_population = make_population_transition Alive Dead (&amp;lt;2)&#xA;overcrowding     = make_population_transition Alive Dead (&amp;gt;3)&#xA;birth            = make_population_transition Dead Alive (==3)&#xA;&#xA;--Order is not important. Only one transition applies per peice, &#xA;--the others operate like id &#xA;transition_rule :: TransitionRule&#xA;transition_rule image = foldl (\image f -&amp;gt; f image) image &#xA;    [&#xA;        under_population,&#xA;        overcrowding,&#xA;        birth&#xA;    ] origin&#xA;&#xA;--return a new gameboard that applies the transition rule to every &#xA;--spot on the gameboard&#xA;step :: TransitionRule -&amp;gt; GameBoard -&amp;gt; GameBoard&#xA;step trans gb = trans . offset gb  &#xA;&#xA;--apply the tranisition rule n number of times&#xA;simulate :: Int -&amp;gt; TransitionRule -&amp;gt; GameBoard -&amp;gt; GameBoard&#xA;simulate count trans gb = foldl apply_step gb steps where &#xA;  steps = replicate count (step trans)&#xA;  apply_step gb s = s gb&#xA;&#xA;--translate the image&#xA;offset :: DiscreteImage a -&amp;gt; Coord -&amp;gt; Coord -&amp;gt; a&#xA;offset image (offsetX, offsetY) (x, y) = image (offsetX + x, offsetY + y) &#xA;&#xA;--make a square of coords&#xA;square_coords :: Int -&amp;gt; [Coord] &#xA;square_coords radius = [(x, y) | x &amp;lt;- diameter_list, y &amp;lt;- diameter_list] where&#xA;        diameter_list = [(negate radius) .. radius]&#xA;&#xA;--return a neighborhood with the center missing&#xA;punctured_neighborhood :: Int -&amp;gt; DiscreteImage a -&amp;gt; [a] &#xA;punctured_neighborhood size image = map image $ filter (not . (==origin)) $ square_coords size &#xA;&#xA;&#xA;--a little test&#xA;main = do &#xA;    let (width, height) = get_bounds test_list&#xA;    let board1 = simulate 1 transition_rule test_board&#xA;    putStr $ unlines [ unwords [ ppr_peice $ board1 (x, y) | x &amp;lt;- [0..(width -1)]] | &#xA;                y &amp;lt;- [0..(height - 1)]]&#xA;&#xA;test_list = &#xA;    [&#xA;        [Alive, Dead, Alive, Dead],&#xA;        [Alive, Dead, Dead, Alive],&#xA;        [Dead, Alive, Dead, Alive],&#xA;        [Dead, Alive, Alive, Alive]&#xA;    ]&#xA;&#xA;test_board = image_from_lists test_list Cat&#xA;&#xA;--helpers&#xA;population_count = length . filter is_Alive . punctured_neighborhood 1&#xA;&#xA;--does nothing if the origin peice /= from, otherwise test for replacement&#xA;make_population_transition from to condition image | image origin == from = &#xA;    if (condition . population_count) image &#xA;            then replace image origin to &#xA;            else image&#xA;make_population_transition from to test image | otherwise = image&#xA;&#xA;replace image coord_to_replace value coord = if coord_to_replace == coord &#xA;                                                 then value &#xA;                                                 else image coord&#xA;&#xA;bi f g h x = f x `h` g x&#xA;&#xA;is_Alive Alive = True&#xA;is_Alive _ = False&#xA;&#xA;from_Bool True = Alive&#xA;from_Bool False = Dead&#xA;&#xA;image_from_lists xs default_value coord@(x, y) = if is_in_bounds1 coord&#xA;    then (xs !! x) !! y&#xA;    else default_value where&#xA;      bounds = get_bounds xs&#xA;      is_in_bounds1   = is_in_bounds bounds &#xA;&#xA;get_bounds xs = if null xs&#xA;    then (0, 0)&#xA;    else (length xs, length $ head xs)&#xA;&#xA;is_in_bounds (xb, yb) (x, y) = (y &amp;lt; yb &amp;amp;&amp;amp; y &amp;gt; -1) &amp;amp;&amp;amp; (x &amp;lt; xb &amp;amp;&amp;amp; x &amp;gt; -1)&#xA;&#xA;ppr_peice Dead = &quot;O&quot;&#xA;ppr_peice Alive = &quot;X&quot;&#xA;ppr_peice Cat = &quot;C&quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2460" LastEditorUserId="9357" LastEditDate="2013-09-19T18:01:50.877" LastActivityDate="2013-09-19T18:01:50.877" Title="Game of Life in Haskell" Tags="&lt;haskell&gt;&lt;game-of-life&gt;" AnswerCount="2" CommentCount="1" FavoriteCount="4" />
  <row Id="1205" PostTypeId="1" AcceptedAnswerId="1466" CreationDate="2011-03-09T06:13:39.323" Score="7" ViewCount="6477" Body="&lt;p&gt;In C++, to simplify string conversion between &lt;code&gt;std::string&lt;/code&gt; and &lt;code&gt;std::wstring&lt;/code&gt;, I created the following utility template functions:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#pragma once&#xA;&#xA;#include &amp;lt;vector&amp;gt;&#xA;#include &amp;lt;string&amp;gt;&#xA;#include &amp;lt;cstring&amp;gt;&#xA;#include &amp;lt;cwchar&amp;gt;&#xA;#include &amp;lt;cassert&amp;gt;&#xA;&#xA;template&amp;lt;typename Td&amp;gt; &#xA;Td string_cast( const char* pSource, unsigned int codePage = CP_ACP );&#xA;&#xA;template&amp;lt;typename Td&amp;gt; &#xA;Td string_cast( const wchar_t* pSource, unsigned int codePage = 1200 );&#xA;&#xA;template&amp;lt;typename Td&amp;gt; &#xA;Td string_cast( const std::string&amp;amp; source, unsigned int codePage = CP_ACP );&#xA;&#xA;template&amp;lt;typename Td&amp;gt; &#xA;Td string_cast( const std::wstring&amp;amp; source, unsigned int codePage = 1200 );&#xA;&#xA;template&amp;lt;&amp;gt;&#xA;std::string string_cast( const char* pSource, unsigned int codePage )&#xA;{&#xA;    assert( pSource != 0 );&#xA;    return std::string( pSource );&#xA;}&#xA;&#xA;template&amp;lt;&amp;gt;&#xA;std::wstring string_cast( const char* pSource, unsigned int codePage )&#xA;{&#xA;    assert( pSource != 0 );&#xA;    std::size_t sourceLength = std::strlen( pSource );&#xA;    if( sourceLength == 0 )&#xA;    {&#xA;        return std::wstring();&#xA;    }&#xA;&#xA;    int length = ::MultiByteToWideChar( codePage, 0, pSource, sourceLength, NULL, 0 );&#xA;    if( length == 0 )&#xA;    {&#xA;        return std::wstring();&#xA;    }&#xA;&#xA;    std::vector&amp;lt;wchar_t&amp;gt; buffer( length );&#xA;    ::MultiByteToWideChar( codePage, 0, pSource, sourceLength, &amp;amp;buffer[ 0 ], length );&#xA;&#xA;    return std::wstring( buffer.begin(), buffer.end() );&#xA;}&#xA;&#xA;template&amp;lt;&amp;gt;&#xA;std::string string_cast( const wchar_t* pSource, unsigned int codePage )&#xA;{&#xA;    assert( pSource != 0 );&#xA;    size_t sourceLength = std::wcslen( pSource );&#xA;    if( sourceLength == 0 )&#xA;    {&#xA;        return std::string();&#xA;    }&#xA;&#xA;    int length = ::WideCharToMultiByte( codePage, 0, pSource, sourceLength, NULL, 0, NULL, NULL );&#xA;    if( length == 0 )&#xA;    {&#xA;        return std::string();&#xA;    }&#xA;&#xA;    std::vector&amp;lt;char&amp;gt; buffer( length );&#xA;    ::WideCharToMultiByte( codePage, 0, pSource, sourceLength, &amp;amp;buffer[ 0 ], length, NULL, NULL );&#xA;&#xA;    return std::string( buffer.begin(), buffer.end() );&#xA;}&#xA;&#xA;template&amp;lt;&amp;gt;&#xA;std::wstring string_cast( const wchar_t* pSource, unsigned int codePage )&#xA;{&#xA;    assert( pSource != 0 );&#xA;    return std::wstring( pSource );&#xA;}&#xA;&#xA;template&amp;lt;&amp;gt;&#xA;std::string string_cast( const std::string&amp;amp; source, unsigned int codePage )&#xA;{&#xA;    return source;&#xA;}&#xA;&#xA;template&amp;lt;&amp;gt;&#xA;std::wstring string_cast( const std::string&amp;amp; source, unsigned int codePage )&#xA;{&#xA;    if( source.empty() )&#xA;    {&#xA;        return std::wstring();&#xA;    }&#xA;&#xA;    int length = ::MultiByteToWideChar( codePage, 0, source.data(), source.length(), NULL, 0 );&#xA;    if( length == 0 )&#xA;    {&#xA;        return std::wstring();&#xA;    }&#xA;&#xA;    std::vector&amp;lt;wchar_t&amp;gt; buffer( length );&#xA;    ::MultiByteToWideChar( codePage, 0, source.data(), source.length(), &amp;amp;buffer[ 0 ], length );&#xA;&#xA;    return std::wstring( buffer.begin(), buffer.end() );&#xA;}&#xA;&#xA;template&amp;lt;&amp;gt;&#xA;std::string string_cast( const std::wstring&amp;amp; source, unsigned int codePage )&#xA;{&#xA;    if( source.empty() )&#xA;    {&#xA;        return std::string();&#xA;    }&#xA;&#xA;    int length = ::WideCharToMultiByte( codePage, 0, source.data(), source.length(), NULL, 0, NULL, NULL );&#xA;    if( length == 0 )&#xA;    {&#xA;        return std::string();&#xA;    }&#xA;&#xA;    std::vector&amp;lt;char&amp;gt; buffer( length );&#xA;    ::WideCharToMultiByte( codePage, 0, source.data(), source.length(), &amp;amp;buffer[ 0 ], length, NULL, NULL );&#xA;&#xA;    return std::string( buffer.begin(), buffer.end() );&#xA;}&#xA;&#xA;template&amp;lt;&amp;gt;&#xA;std::wstring string_cast( const std::wstring&amp;amp; source, unsigned int codePage )&#xA;{&#xA;    return source;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Are there any bugs or further optimizations?&lt;/p&gt;&#xA;" OwnerUserId="2462" LastEditorUserId="22222" LastEditDate="2014-08-09T14:26:48.717" LastActivityDate="2014-08-09T14:26:48.717" Title="C++ string_cast&lt;&gt; template function" Tags="&lt;c++&gt;&lt;strings&gt;&lt;template&gt;&lt;stl&gt;&lt;casting&gt;" AnswerCount="2" CommentCount="1" FavoriteCount="4" />
  <row Id="1206" PostTypeId="1" AcceptedAnswerId="1211" CreationDate="2011-03-09T06:23:30.530" Score="5" ViewCount="615" Body="&lt;p&gt;This Common Lisp exercise is to write a program that can calculate the weekday given a string of the format &quot;M-D-Y.&quot;  It was more challenging than I expected.  If you have suggestions about how to simplify this code, I will be very grateful.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;;;  2.7 Day of Week. A program for converting Gregorian dates in the form month-day-year to day of the&#xA;;;  week is the following. Let the Gregorian date be represented by M-D-Y where we have the following&#xA;;;  definitions:&#xA;;;    M is the month of the year. Let m be the month number derived from M by the rule m is M - 2 if M &amp;gt;= 3&#xA;;;    and m is M + 10 otherwise.&#xA;;;    d is the day of the month.&#xA;;;    y is the year of the century.&#xA;;;    c is the number of the previous century.&#xA;;;  The algorithm is as follows:&#xA;;;    (a) A is the integer part of (13m - 1)/5.&#xA;;;    (b) B is the integer parg of y/4.&#xA;;;    (c) C is the integer part of c/4.&#xA;;;    (d) D = A + B + C + d + y - 2c.&#xA;;;    (e) Make R equal to the remainder of D/7.&#xA;;;    (f ) Interpret R as Sunday if R = 0, Monday if R is 1, etc&#xA;&#xA;(defun read-date () (format t &quot;Enter the gregorian date in the format (M-D-Y): ~%&quot;) (read))&#xA;&#xA;&#xA;(defun flatten (the-list) &#xA;  (cond ((null the-list) nil)&#xA;    ((atom the-list) (list the-list))&#xA;    (t (concatenate 'list (flatten (car the-list)) (flatten (cdr the-list))))))&#xA;&#xA;(defun split (split-char string-to-split) &#xA;  (let ((next-split-char (position split-char string-to-split)))&#xA;    (if next-split-char (flatten (list (safely-read-from-string (subseq string-to-split 0 next-split-char))&#xA;                  (split split-char (subseq string-to-split (+ 1 next-split-char)))))&#xA;      (list (safely-read-from-string string-to-split)))))&#xA;&#xA;(defun weekday-code (bigM bigD bigY)&#xA;    (let* ((m (if (&amp;gt;= bigM 3) (- bigM 2) (+ bigM 10)))&#xA;          (y (mod bigY 100))&#xA;          (littleC (/ (- bigY y) 100))&#xA;          (A (floor (- (* 13 m) 1) 5))&#xA;          (B (floor y 4))&#xA;          (C (floor littleC 4))&#xA;          (D (- (+ A B C bigD y) (* 2 littleC)))&#xA;          (R (mod D 7)))&#xA;      (format t &quot;m: ~a y: ~a c: ~a A: ~a B: ~a C: ~a D: ~a R: ~a ~%&quot; m y littleC A B C D R)&#xA;      R))&#xA;&#xA;(defun check-date-format (bigM bigD bigY)&#xA;  (cond ((or (&amp;lt; bigM 1) (&amp;gt; bigM 12)) (error &quot;The month (~a) is not in the range 1-12.&quot; bigM))&#xA;    ((&amp;lt; bigY 0) (error &quot;The year (~a) is less than 0.&quot; bigY))&#xA;    ((or (&amp;lt; bigD 1) (&amp;gt; bigD 31)) (error &quot;The day (~a) is not in the range 1-31.&quot; bigD))))&#xA;&#xA;(let ((gregorian-date (read-date)))&#xA;      (destructuring-bind (bigM bigD bigY) (split #\- gregorian-date)&#xA;    (check-date-format bigM bigD bigY)&#xA;    (format t &quot;~a was (or will be) a ~[Sunday~;Monday~;Tuesday~;Wednesday~;Thursday~;Friday~;Saturday~].&quot; gregorian-date (weekday-code bigM bigD bigY))))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2355" LastEditorUserId="22222" LastEditDate="2014-09-03T05:33:59.557" LastActivityDate="2014-11-27T13:36:32.457" Title="Calculate the weekday from a date (M-D-Y)" Tags="&lt;datetime&gt;&lt;lisp&gt;&lt;common-lisp&gt;" AnswerCount="3" CommentCount="0" />
  <row Id="1207" PostTypeId="2" ParentId="1205" CreationDate="2011-03-09T07:36:20.300" Score="5" Body="&lt;p&gt;Since you moved this to codereview, reposting my SO answer:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Just a stylistic note, take it for what it's worth.  I generally prefer to avoid:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if ( usual_case )&#xA;{&#xA;  // lots of code&#xA;}&#xA;else&#xA;{&#xA;  // one line handler&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;and instead prefer to go with less indentation, by handling error cases first:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if ( ! usual_case )&#xA;{&#xA;  return one_liner;&#xA;}&#xA;// no need for indentation or braces anymore...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Rewriting one of your functions would look like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;template&amp;lt;&amp;gt;&#xA;std::string string_cast( const wchar_t* pSource, unsigned int codePage )&#xA;{&#xA;  assert( pSource != 0 );&#xA;  const size_t sourceLength = std::wcslen( pSource );&#xA;  if( sourceLength == 0 )&#xA;  {&#xA;    return std::string();&#xA;  }&#xA;&#xA;  int length = ::WideCharToMultiByte( codePage, 0, pSource, sourceLength, NULL, 0, NULL, NULL );&#xA;&#xA;  std::vector&amp;lt;char&amp;gt; buffer( length );&#xA;  ::WideCharToMultiByte( codePage, 0, pSource, sourceLength, &amp;amp;buffer[ 0 ], length, NULL, NULL );&#xA;&#xA;  return std::string( buffer.begin(), buffer.end() );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It's slightly cleaner: fewer lines, fewer braces, less indentation.  Not much, only slightly, but it adds up with multiple error-case checks, and multiple if-statements.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also, I made &lt;code&gt;sourceLength&lt;/code&gt; &lt;strong&gt;const&lt;/strong&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt; Explanation for using const here:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;The &lt;code&gt;sourceLength&lt;/code&gt; isn't going to change.  You're going to initialize it, and use it, but you're never going to change it.  Using &lt;code&gt;const&lt;/code&gt; enforces that you &lt;em&gt;can't&lt;/em&gt; change it, and is considered good practice.&lt;/li&gt;&#xA;&lt;li&gt;Using &lt;code&gt;if (sourceLength = 0)&lt;/code&gt; is a classic programming mistake.  Testing for equality, &lt;code&gt;==&lt;/code&gt;, and assigning, &lt;code&gt;=&lt;/code&gt;, differ only by a single character.  That typo has caused numerous bugs.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;if &lt;code&gt;sourceLength&lt;/code&gt; is constant, &lt;code&gt;sourceLength = 0&lt;/code&gt; fails to compile.&lt;/li&gt;&#xA;&lt;li&gt;reversing the comparison and using &lt;code&gt;if (0 = sourceLength)&lt;/code&gt; also catches the typo at compile time - but it's a little weird to read.  Someone nicknamed this &quot;Yoda conditionals&quot;.&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;So, I made it &lt;code&gt;const&lt;/code&gt; to conform to good style, and to catch typo bugs -- especially since I changed the conditional from &lt;code&gt;&amp;gt;&lt;/code&gt; to &lt;code&gt;==&lt;/code&gt;.&lt;/p&gt;&#xA;" OwnerUserId="2464" LastEditorUserId="2464" LastEditDate="2011-03-09T08:15:15.350" LastActivityDate="2011-03-09T08:15:15.350" CommentCount="3" />
  <row Id="1210" PostTypeId="2" ParentId="1206" CreationDate="2011-03-09T12:31:36.003" Score="3" Body="&lt;p&gt;If you're allowed to use library functions, &lt;code&gt;split&lt;/code&gt; already exists as part of &lt;a href=&quot;http://weitz.de/cl-ppcre/&quot; rel=&quot;nofollow&quot;&gt;cl-ppcre&lt;/a&gt;. &lt;/p&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;p&gt;There's a pretty rich set of date/time functions in the Lisp core that make this trivial. If it's for learning purposes, by all means, go ahead and do it by hand. But if you're thinking &quot;What's the best way to get the day-of-week in Lisp?&quot;, that's actually ridiculously simple.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(defun day-of-week (day month year)&#xA;   (nth-value 6 (decode-universal-time (encode-universal-time 0 0 0 day month year 0))))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Re-arrange order of argumnents to taste. Monday is 0 by default, so you'd need to re-jig your &lt;code&gt;format&lt;/code&gt; directive. If you need to be able to handle dates before 1900, there's a more robust version at the &lt;a href=&quot;http://cl-cookbook.sourceforge.net/dates_and_times.html&quot; rel=&quot;nofollow&quot;&gt;Common Lisp Cookbook&lt;/a&gt;.&lt;/p&gt;&#xA;" OwnerUserId="104" LastEditorUserId="104" LastEditDate="2014-11-27T03:57:31.507" LastActivityDate="2014-11-27T03:57:31.507" CommentCount="2" />
  <row Id="1211" PostTypeId="2" ParentId="1206" CreationDate="2011-03-09T12:51:48.450" Score="3" Body="&lt;p&gt;Typically, you should almost never need to use a flatten function.  For example, the split function:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(defun split (split-char string-to-split) &#xA;  (let ((next-split-char (position split-char string-to-split)))&#xA;    (if next-split-char (flatten (list (safely-read-from-string (subseq string-to-split 0 next-split-char))&#xA;                  (split split-char (subseq string-to-split (+ 1 next-split-char)))))&#xA;      (list (safely-read-from-string string-to-split)))))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;is equivalent to:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(defun split (split-char string-to-split) &#xA;  (let ((next-split-char (position split-char string-to-split)))&#xA;    (if next-split-char &#xA;        (cons (safely-read-from-string (subseq string-to-split 0 next-split-char))&#xA;              (split split-char (subseq string-to-split (1+ next-split-char))))&#xA;        (list (safely-read-from-string string-to-split)))))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This assumes safely-read-from-string returns the same as read function.  The flatten helper function is not necessary.&lt;/p&gt;&#xA;" OwnerUserId="2470" LastActivityDate="2011-03-09T12:51:48.450" CommentCount="1" />
  <row Id="1212" PostTypeId="1" CreationDate="2011-03-09T13:49:24.580" Score="5" ViewCount="3487" Body="&lt;p&gt;&lt;a href=&quot;http://www.developer.com/design/article.php/3678856/MVC-in-a-JavaSwing-Application.htm&quot;&gt;This article has left me a little confused.&lt;/a&gt; &lt;/p&gt;&#xA;&#xA;&lt;p&gt;In explaining a method on how to design MVC into Java Swing apps the author defines the controller class as Singleton and relays a series of calls to the Controller for each operation.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In a view object:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;...    &#xA;Controller.getInstance().setOwner(this);&#xA;Controller.getInstance().setNameTextField(this.nameTextField);&#xA;Controller.getInstance().setEmailTextField(this.emailTextField);&#xA;Controller.getInstance().processForm();&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And inside the controller class:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public void processForm() {&#xA;    result1 = doSomethingWithName(this.nameTextField.getText());&#xA;    result2 = doSomethingWithEmail(this.emailTextField.getText());&#xA;    this.owner.setResult(result1, result2);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I don't understand why this has been made so complex! Wouldn't it be simpler, less error prone and more modular to simply:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Controller.processForm(this, this.nameTextField.getText(), this.emailTextField.getText());&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;and&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public static void processForm(OwnerClass owner, String name, String email) {&#xA;    result1 = doSomethingWithName(name);&#xA;    result2 = doSomethingWithEmail(email);&#xA;    this.owner.setResult(result1, result2);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Is anyone familiar with this design pattern? Is there reason to this method?&lt;/p&gt;&#xA;" OwnerUserId="2475" LastActivityDate="2011-04-07T07:14:50.067" Title="MVC Controller in Java Swing Apps - Singleton or public static" Tags="&lt;java&gt;&lt;design-patterns&gt;&lt;mvc&gt;" AnswerCount="2" CommentCount="0" />
  <row Id="1213" PostTypeId="2" ParentId="1212" CreationDate="2011-03-09T14:49:04.877" Score="3" Body="&lt;p&gt;It's been a long time ago since I last used an MVC approach in Swing, but I immediately notice some things I wouldn't do.&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Don't use a singleton, &lt;a href=&quot;http://blogs.msdn.com/b/scottdensmore/archive/2004/05/25/140827.aspx&quot; rel=&quot;nofollow&quot;&gt;singletons are evil!&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Passing view components to the controller? When I do MVC, I tend to pass the controller to my view elements, preferably just an interface. The view can request actions on the controller. This allows for total decoupling of the view. So you can also switch to something else than Swing. This probably isn't the 'default' approach of MVC with Swing however.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;So yeah, it seems I would agree with you. Perhaps try looking for other MVC examples with Swing. This article doesn't look particularly appealing IMHO.&lt;/p&gt;&#xA;" OwnerUserId="2254" LastActivityDate="2011-03-09T14:49:04.877" CommentCount="1" />
  <row Id="1214" PostTypeId="2" ParentId="1182" CreationDate="2011-03-09T16:25:46.387" Score="2" Body="&lt;p&gt;In response to the 4th edit, I was thinking something along the lines of&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(let* ((a (read-side 1)) (b (read-side 2)) (c (read-side 3)) &#xA;       (triangle-type (classify-triangle a b c))&#xA;       (article (if (member triangle-type '(isoceles equilateral)) &quot;an&quot; &quot;a&quot;))&#xA;       (tri-name (if (eq triangle-type 'triangle) &quot;non-right, non-isoceles, non-equilateral&quot; triangle-type)))&#xA;  (format t &quot;The shape (~d, ~d, ~d) is ~:[not a triangle.~;~a ~(~a~) triangle~].&quot; a b c triangle-type article tri-name))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Rather than using global parameters, but that works too (it's not as though you'd use either option in actual code).&lt;/p&gt;&#xA;" OwnerUserId="104" LastActivityDate="2011-03-09T16:25:46.387" CommentCount="5" />
  <row Id="1215" PostTypeId="2" ParentId="1182" CreationDate="2011-03-09T16:37:00.197" Score="1" Body="&lt;p&gt;(In response to your 4th edit)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can simplify right-triangle-p by doing more work in the destructuring:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;(defun right-triangle-p (a b c)&#xA;  (destructuring-bind (x y z) (sort (list a b c) #'&amp;gt;)&#xA;    (= (expt z 2) (+ (expt y 2) (expt x 2)))))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2480" LastActivityDate="2011-03-09T16:37:00.197" CommentCount="1" />
  <row Id="1216" PostTypeId="1" AcceptedAnswerId="1217" CreationDate="2011-03-09T23:21:17.183" Score="8" ViewCount="3736" Body="&lt;p&gt;As an exercise, I have implemented a circular bounded queue using arrays as the base data structure. I'd appreciate it if someone can review it for me.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    class BoundedQueue&amp;lt;T&amp;gt; {&#xA;&#xA;    T[] que;&#xA;    int head;       // remove from head&#xA;    int tail;       // insert at tail&#xA;&#xA;&#xA;    public BoundedQueue(int quesize)&#xA;    {&#xA;        head = tail = -1;&#xA;        que = new T[quesize];&#xA;    }&#xA;&#xA;    public void enqueue(T elem)  // if next index to tail == head =&amp;gt; Q is FULL&#xA;    {&#xA;        int newIndex = nextIndex(tail);&#xA;        if ( newIndex == head)&#xA;            throw new BoundedQueueException(Full);&#xA;&#xA;        tail = newIndex;&#xA;        que[newIndex] = elem;&#xA;        if (head == -1)&#xA;            head = 0;&#xA;    }&#xA;&#xA;    public T dequeue()  // After removing from head, if that was the only element in Q&#xA;    // Mark Q to be empty by setting head and tail to -1&#xA;    {&#xA;        if (head == -1)&#xA;            throw new BoundedQueueException(Empty);&#xA;&#xA;        T elem = que[head];&#xA;        que[head] = default(T);&#xA;&#xA;        if (head == tail)&#xA;        {&#xA;            head = tail = -1;&#xA;        }&#xA;        else&#xA;        {&#xA;            head = nextIndex(head);&#xA;        }&#xA;&#xA;        return elem;&#xA;    }&#xA;&#xA;    private int nextIndex(int index)&#xA;    {&#xA;        return (index + 1) % que.Length;&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="2487" LastEditorUserId="5797" LastEditDate="2015-02-21T07:16:52.703" LastActivityDate="2015-02-21T07:16:52.703" Title="Circular Bounded Queue using C#" Tags="&lt;c#&gt;&lt;queue&gt;&lt;circular-list&gt;" AnswerCount="4" CommentCount="0" FavoriteCount="1" />
  <row Id="1217" PostTypeId="2" ParentId="1216" CreationDate="2011-03-10T00:44:02.933" Score="11" Body="&lt;ol&gt;&#xA;&lt;li&gt;Exception handling should be added&#xA;to the constructor, handling a negative&#xA;&lt;code&gt;quesize&lt;/code&gt;. Or take a look at Code&#xA;Contracts.&lt;/li&gt;&#xA;&lt;li&gt;Instead of initializing &lt;code&gt;head&lt;/code&gt; and&#xA;&lt;code&gt;tail&lt;/code&gt; to &lt;code&gt;-1&lt;/code&gt;, you could use&#xA;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/1t3y8s4s.aspx&quot;&gt;nullable ints&lt;/a&gt;, and adjust your&#xA;logic so it doesn't rely on the&#xA;magic number &lt;code&gt;-1&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Implement some missing features.&#xA;(might have been left out&#xA;intentionally): implement &lt;code&gt;ICollection&lt;/code&gt; and &lt;code&gt;IEnumerable&lt;/code&gt;, &lt;code&gt;isFull()&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;A minor point would be naming conventions. In C# method names normally start with a capital letter.&lt;/li&gt;&#xA;&lt;li&gt;Be aware that this is not a thread safe class.&lt;/li&gt;&#xA;&lt;li&gt;Add some comments, this code isn't that self-documenting. Or, where possible, make it self-documenting, e.g. &lt;code&gt;if ( head == tail )&lt;/code&gt; could be &lt;code&gt;if ( Count == 0 )&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;" OwnerUserId="2254" LastActivityDate="2011-03-10T00:44:02.933" CommentCount="3" />
</posts>
